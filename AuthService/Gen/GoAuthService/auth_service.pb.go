// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: AuthService/auth_service.proto

package AuthService

import (
	GoCommon "code.nurture.farm/Core/Contracts/Common/Gen/GoCommon"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GenerateOtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders       *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId              *GoCommon.ActorID             `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName              string                        `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	ExpiryInSeconds      int32                         `protobuf:"varint,4,opt,name=expiryInSeconds,proto3" json:"expiryInSeconds,omitempty"`
	OtpDigit             int32                         `protobuf:"varint,5,opt,name=otpDigit,proto3" json:"otpDigit,omitempty"`
	MaxRetries           int32                         `protobuf:"varint,6,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	MobileNumber         string                        `protobuf:"bytes,7,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	CountryIsoCode       string                        `protobuf:"bytes,8,opt,name=countryIsoCode,proto3" json:"countryIsoCode,omitempty"`
	ClientType           GoCommon.ClientType           `protobuf:"varint,9,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,10,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
}

func (x *GenerateOtpRequest) Reset() {
	*x = GenerateOtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOtpRequest) ProtoMessage() {}

func (x *GenerateOtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOtpRequest.ProtoReflect.Descriptor instead.
func (*GenerateOtpRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateOtpRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GenerateOtpRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GenerateOtpRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GenerateOtpRequest) GetExpiryInSeconds() int32 {
	if x != nil {
		return x.ExpiryInSeconds
	}
	return 0
}

func (x *GenerateOtpRequest) GetOtpDigit() int32 {
	if x != nil {
		return x.OtpDigit
	}
	return 0
}

func (x *GenerateOtpRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *GenerateOtpRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *GenerateOtpRequest) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *GenerateOtpRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

func (x *GenerateOtpRequest) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

type GenerateOtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode   GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	ActorId      *GoCommon.ActorID           `protobuf:"bytes,3,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName      string                      `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Expiry       int64                       `protobuf:"varint,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	MobileNumber string                      `protobuf:"bytes,6,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *GenerateOtpResponse) Reset() {
	*x = GenerateOtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOtpResponse) ProtoMessage() {}

func (x *GenerateOtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOtpResponse.ProtoReflect.Descriptor instead.
func (*GenerateOtpResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateOtpResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GenerateOtpResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *GenerateOtpResponse) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GenerateOtpResponse) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GenerateOtpResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *GenerateOtpResponse) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type ResendOtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders       *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId              *GoCommon.ActorID             `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName              string                        `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	MobileNumber         string                        `protobuf:"bytes,4,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	ClientType           GoCommon.ClientType           `protobuf:"varint,5,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,6,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
}

func (x *ResendOtpRequest) Reset() {
	*x = ResendOtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendOtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendOtpRequest) ProtoMessage() {}

func (x *ResendOtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendOtpRequest.ProtoReflect.Descriptor instead.
func (*ResendOtpRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{2}
}

func (x *ResendOtpRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ResendOtpRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ResendOtpRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ResendOtpRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *ResendOtpRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

func (x *ResendOtpRequest) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

type ResendOtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode   GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	ActorId      *GoCommon.ActorID           `protobuf:"bytes,3,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName      string                      `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Expiry       int64                       `protobuf:"varint,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	MobileNumber string                      `protobuf:"bytes,6,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *ResendOtpResponse) Reset() {
	*x = ResendOtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendOtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendOtpResponse) ProtoMessage() {}

func (x *ResendOtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendOtpResponse.ProtoReflect.Descriptor instead.
func (*ResendOtpResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{3}
}

func (x *ResendOtpResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *ResendOtpResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *ResendOtpResponse) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ResendOtpResponse) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ResendOtpResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ResendOtpResponse) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type ValidateOtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName        string                   `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	Otp            string                   `protobuf:"bytes,4,opt,name=otp,proto3" json:"otp,omitempty"`
	MobileNumber   string                   `protobuf:"bytes,5,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *ValidateOtpRequest) Reset() {
	*x = ValidateOtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateOtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateOtpRequest) ProtoMessage() {}

func (x *ValidateOtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateOtpRequest.ProtoReflect.Descriptor instead.
func (*ValidateOtpRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateOtpRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ValidateOtpRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ValidateOtpRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ValidateOtpRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *ValidateOtpRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type ValidateOtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ValidateOtpResponse) Reset() {
	*x = ValidateOtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateOtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateOtpResponse) ProtoMessage() {}

func (x *ValidateOtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateOtpResponse.ProtoReflect.Descriptor instead.
func (*ValidateOtpResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateOtpResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *ValidateOtpResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type GetAuthTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName        string                   `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	Otp            string                   `protobuf:"bytes,4,opt,name=otp,proto3" json:"otp,omitempty"`
	ClientId       string                   `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret   string                   `protobuf:"bytes,6,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	Scope          string                   `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	AuthSecret     string                   `protobuf:"bytes,9,opt,name=authSecret,proto3" json:"authSecret,omitempty"`
	SecretType     GoCommon.SecretType      `protobuf:"varint,10,opt,name=secretType,proto3,enum=farm.nurture.core.contracts.common.SecretType" json:"secretType,omitempty"`
	ClientType     GoCommon.ClientType      `protobuf:"varint,11,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
	Claims         []*GoCommon.Attribs      `protobuf:"bytes,12,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *GetAuthTokenRequest) Reset() {
	*x = GetAuthTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthTokenRequest) ProtoMessage() {}

func (x *GetAuthTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthTokenRequest.ProtoReflect.Descriptor instead.
func (*GetAuthTokenRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetAuthTokenRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetAuthTokenRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GetAuthTokenRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GetAuthTokenRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *GetAuthTokenRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetAuthTokenRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *GetAuthTokenRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAuthTokenRequest) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *GetAuthTokenRequest) GetSecretType() GoCommon.SecretType {
	if x != nil {
		return x.SecretType
	}
	return GoCommon.SecretType_NO_SECRET
}

func (x *GetAuthTokenRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

func (x *GetAuthTokenRequest) GetClaims() []*GoCommon.Attribs {
	if x != nil {
		return x.Claims
	}
	return nil
}

type GetAuthTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode   GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	AccessToken  string                      `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	ExpiresIn    int64                       `protobuf:"varint,4,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	IdToken      string                      `protobuf:"bytes,5,opt,name=idToken,proto3" json:"idToken,omitempty"`
	RefreshToken string                      `protobuf:"bytes,6,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Scope        string                      `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	TokenType    string                      `protobuf:"bytes,8,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (x *GetAuthTokenResponse) Reset() {
	*x = GetAuthTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthTokenResponse) ProtoMessage() {}

func (x *GetAuthTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthTokenResponse.ProtoReflect.Descriptor instead.
func (*GetAuthTokenResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetAuthTokenResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GetAuthTokenResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *GetAuthTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GetAuthTokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *GetAuthTokenResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *GetAuthTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *GetAuthTokenResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAuthTokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type OldTokenExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName        string                   `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	ClientId       string                   `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret   string                   `protobuf:"bytes,6,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	Scope          string                   `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	ClientType     GoCommon.ClientType      `protobuf:"varint,11,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
}

func (x *OldTokenExchangeRequest) Reset() {
	*x = OldTokenExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldTokenExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldTokenExchangeRequest) ProtoMessage() {}

func (x *OldTokenExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldTokenExchangeRequest.ProtoReflect.Descriptor instead.
func (*OldTokenExchangeRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{8}
}

func (x *OldTokenExchangeRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *OldTokenExchangeRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *OldTokenExchangeRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *OldTokenExchangeRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OldTokenExchangeRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OldTokenExchangeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OldTokenExchangeRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

type OldTokenExchangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode   GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	AccessToken  string                      `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	ExpiresIn    int64                       `protobuf:"varint,4,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	IdToken      string                      `protobuf:"bytes,5,opt,name=idToken,proto3" json:"idToken,omitempty"`
	RefreshToken string                      `protobuf:"bytes,6,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Scope        string                      `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	TokenType    string                      `protobuf:"bytes,8,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (x *OldTokenExchangeResponse) Reset() {
	*x = OldTokenExchangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldTokenExchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldTokenExchangeResponse) ProtoMessage() {}

func (x *OldTokenExchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldTokenExchangeResponse.ProtoReflect.Descriptor instead.
func (*OldTokenExchangeResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{9}
}

func (x *OldTokenExchangeResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *OldTokenExchangeResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *OldTokenExchangeResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *OldTokenExchangeResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *OldTokenExchangeResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *OldTokenExchangeResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *OldTokenExchangeResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OldTokenExchangeResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type GetOtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName        string                   `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	MobileNumber   string                   `protobuf:"bytes,4,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *GetOtpRequest) Reset() {
	*x = GetOtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtpRequest) ProtoMessage() {}

func (x *GetOtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtpRequest.ProtoReflect.Descriptor instead.
func (*GetOtpRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetOtpRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetOtpRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GetOtpRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GetOtpRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type GetOtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode     GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	Otp            string                      `protobuf:"bytes,3,opt,name=otp,proto3" json:"otp,omitempty"`
	GenerationTime int64                       `protobuf:"varint,4,opt,name=generationTime,proto3" json:"generationTime,omitempty"`
	ExpiryTime     int64                       `protobuf:"varint,5,opt,name=expiryTime,proto3" json:"expiryTime,omitempty"`
	MobileNumber   string                      `protobuf:"bytes,6,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *GetOtpResponse) Reset() {
	*x = GetOtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtpResponse) ProtoMessage() {}

func (x *GetOtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtpResponse.ProtoReflect.Descriptor instead.
func (*GetOtpResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetOtpResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GetOtpResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *GetOtpResponse) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *GetOtpResponse) GetGenerationTime() int64 {
	if x != nil {
		return x.GenerationTime
	}
	return 0
}

func (x *GetOtpResponse) GetExpiryTime() int64 {
	if x != nil {
		return x.ExpiryTime
	}
	return 0
}

func (x *GetOtpResponse) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type AddActorSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders  *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId         *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AuthSecret      string                   `protobuf:"bytes,3,opt,name=authSecret,proto3" json:"authSecret,omitempty"`
	SecretType      GoCommon.SecretType      `protobuf:"varint,4,opt,name=secretType,proto3,enum=farm.nurture.core.contracts.common.SecretType" json:"secretType,omitempty"`
	ExpiryInSeconds int32                    `protobuf:"varint,5,opt,name=expiryInSeconds,proto3" json:"expiryInSeconds,omitempty"`
	MaxRetries      int32                    `protobuf:"varint,6,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	AppName         string                   `protobuf:"bytes,7,opt,name=appName,proto3" json:"appName,omitempty"`
	CountryIsoCode  string                   `protobuf:"bytes,8,opt,name=countryIsoCode,proto3" json:"countryIsoCode,omitempty"`
	MobileNumber    string                   `protobuf:"bytes,9,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	ClientType      GoCommon.ClientType      `protobuf:"varint,10,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
}

func (x *AddActorSecretRequest) Reset() {
	*x = AddActorSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddActorSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddActorSecretRequest) ProtoMessage() {}

func (x *AddActorSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddActorSecretRequest.ProtoReflect.Descriptor instead.
func (*AddActorSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{12}
}

func (x *AddActorSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddActorSecretRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *AddActorSecretRequest) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *AddActorSecretRequest) GetSecretType() GoCommon.SecretType {
	if x != nil {
		return x.SecretType
	}
	return GoCommon.SecretType_NO_SECRET
}

func (x *AddActorSecretRequest) GetExpiryInSeconds() int32 {
	if x != nil {
		return x.ExpiryInSeconds
	}
	return 0
}

func (x *AddActorSecretRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *AddActorSecretRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AddActorSecretRequest) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *AddActorSecretRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *AddActorSecretRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

type AddActorSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *AddActorSecretResponse) Reset() {
	*x = AddActorSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddActorSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddActorSecretResponse) ProtoMessage() {}

func (x *AddActorSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddActorSecretResponse.ProtoReflect.Descriptor instead.
func (*AddActorSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddActorSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *AddActorSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type UpdateActorSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId           *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	OldAuthSecret     string                   `protobuf:"bytes,3,opt,name=oldAuthSecret,proto3" json:"oldAuthSecret,omitempty"`
	NewAuthSecret     string                   `protobuf:"bytes,4,opt,name=newAuthSecret,proto3" json:"newAuthSecret,omitempty"`
	AccessToken       string                   `protobuf:"bytes,5,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	SecretType        GoCommon.SecretType      `protobuf:"varint,6,opt,name=secretType,proto3,enum=farm.nurture.core.contracts.common.SecretType" json:"secretType,omitempty"`
	ExpiryInSeconds   int32                    `protobuf:"varint,7,opt,name=expiryInSeconds,proto3" json:"expiryInSeconds,omitempty"`
	MaxRetries        int32                    `protobuf:"varint,8,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	AppName           string                   `protobuf:"bytes,9,opt,name=appName,proto3" json:"appName,omitempty"`
	MobileNumber      string                   `protobuf:"bytes,10,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	ResetSecretGuid   string                   `protobuf:"bytes,11,opt,name=resetSecretGuid,proto3" json:"resetSecretGuid,omitempty"`
	ResetSecretExpiry int64                    `protobuf:"varint,12,opt,name=resetSecretExpiry,proto3" json:"resetSecretExpiry,omitempty"`
	ClientType        GoCommon.ClientType      `protobuf:"varint,13,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
}

func (x *UpdateActorSecretRequest) Reset() {
	*x = UpdateActorSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActorSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActorSecretRequest) ProtoMessage() {}

func (x *UpdateActorSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActorSecretRequest.ProtoReflect.Descriptor instead.
func (*UpdateActorSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateActorSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateActorSecretRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *UpdateActorSecretRequest) GetOldAuthSecret() string {
	if x != nil {
		return x.OldAuthSecret
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetNewAuthSecret() string {
	if x != nil {
		return x.NewAuthSecret
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetSecretType() GoCommon.SecretType {
	if x != nil {
		return x.SecretType
	}
	return GoCommon.SecretType_NO_SECRET
}

func (x *UpdateActorSecretRequest) GetExpiryInSeconds() int32 {
	if x != nil {
		return x.ExpiryInSeconds
	}
	return 0
}

func (x *UpdateActorSecretRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *UpdateActorSecretRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetResetSecretGuid() string {
	if x != nil {
		return x.ResetSecretGuid
	}
	return ""
}

func (x *UpdateActorSecretRequest) GetResetSecretExpiry() int64 {
	if x != nil {
		return x.ResetSecretExpiry
	}
	return 0
}

func (x *UpdateActorSecretRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

type UpdateActorSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *UpdateActorSecretResponse) Reset() {
	*x = UpdateActorSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActorSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActorSecretResponse) ProtoMessage() {}

func (x *UpdateActorSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActorSecretResponse.ProtoReflect.Descriptor instead.
func (*UpdateActorSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateActorSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *UpdateActorSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type ValidateSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AuthSecret     string                   `protobuf:"bytes,3,opt,name=authSecret,proto3" json:"authSecret,omitempty"`
	SecretType     GoCommon.SecretType      `protobuf:"varint,4,opt,name=secretType,proto3,enum=farm.nurture.core.contracts.common.SecretType" json:"secretType,omitempty"`
	AppName        string                   `protobuf:"bytes,5,opt,name=appName,proto3" json:"appName,omitempty"`
	MobileNumber   string                   `protobuf:"bytes,6,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
}

func (x *ValidateSecretRequest) Reset() {
	*x = ValidateSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSecretRequest) ProtoMessage() {}

func (x *ValidateSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSecretRequest.ProtoReflect.Descriptor instead.
func (*ValidateSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{16}
}

func (x *ValidateSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ValidateSecretRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ValidateSecretRequest) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *ValidateSecretRequest) GetSecretType() GoCommon.SecretType {
	if x != nil {
		return x.SecretType
	}
	return GoCommon.SecretType_NO_SECRET
}

func (x *ValidateSecretRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ValidateSecretRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

type ValidateSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ValidateSecretResponse) Reset() {
	*x = ValidateSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSecretResponse) ProtoMessage() {}

func (x *ValidateSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSecretResponse.ProtoReflect.Descriptor instead.
func (*ValidateSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *ValidateSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type GenerateSecretResetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	Email          string                   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	SecretType     GoCommon.SecretType      `protobuf:"varint,4,opt,name=secretType,proto3,enum=farm.nurture.core.contracts.common.SecretType" json:"secretType,omitempty"`
	AppName        string                   `protobuf:"bytes,5,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *GenerateSecretResetTokenRequest) Reset() {
	*x = GenerateSecretResetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSecretResetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSecretResetTokenRequest) ProtoMessage() {}

func (x *GenerateSecretResetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSecretResetTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateSecretResetTokenRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateSecretResetTokenRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GenerateSecretResetTokenRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GenerateSecretResetTokenRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GenerateSecretResetTokenRequest) GetSecretType() GoCommon.SecretType {
	if x != nil {
		return x.SecretType
	}
	return GoCommon.SecretType_NO_SECRET
}

func (x *GenerateSecretResetTokenRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type GenerateSecretResetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	ExpiryTime int64                       `protobuf:"varint,3,opt,name=expiryTime,proto3" json:"expiryTime,omitempty"`
}

func (x *GenerateSecretResetTokenResponse) Reset() {
	*x = GenerateSecretResetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSecretResetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSecretResetTokenResponse) ProtoMessage() {}

func (x *GenerateSecretResetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSecretResetTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateSecretResetTokenResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateSecretResetTokenResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GenerateSecretResetTokenResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *GenerateSecretResetTokenResponse) GetExpiryTime() int64 {
	if x != nil {
		return x.ExpiryTime
	}
	return 0
}

type DeleteSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	AppName        string                   `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	ClientType     GoCommon.ClientType      `protobuf:"varint,4,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
	RefreshToken   string                   `protobuf:"bytes,5,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteSessionRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *DeleteSessionRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *DeleteSessionRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeleteSessionRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

func (x *DeleteSessionRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type DeleteSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSessionResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *DeleteSessionResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type ValidateJWTTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Token          string                   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ValidateJWTTokenRequest) Reset() {
	*x = ValidateJWTTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateJWTTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJWTTokenRequest) ProtoMessage() {}

func (x *ValidateJWTTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJWTTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateJWTTokenRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{22}
}

func (x *ValidateJWTTokenRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ValidateJWTTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ValidateJWTTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ValidateJWTTokenResponse) Reset() {
	*x = ValidateJWTTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateJWTTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJWTTokenResponse) ProtoMessage() {}

func (x *ValidateJWTTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJWTTokenResponse.ProtoReflect.Descriptor instead.
func (*ValidateJWTTokenResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{23}
}

func (x *ValidateJWTTokenResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *ValidateJWTTokenResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type RefreshAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actorId,proto3" json:"actorId,omitempty"`
	ClientId       string                   `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret   string                   `protobuf:"bytes,4,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	Scope          string                   `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	ClientType     GoCommon.ClientType      `protobuf:"varint,6,opt,name=clientType,proto3,enum=farm.nurture.core.contracts.common.ClientType" json:"clientType,omitempty"`
	RefreshToken   string                   `protobuf:"bytes,7,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
}

func (x *RefreshAccessTokenRequest) Reset() {
	*x = RefreshAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenRequest) ProtoMessage() {}

func (x *RefreshAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{24}
}

func (x *RefreshAccessTokenRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *RefreshAccessTokenRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *RefreshAccessTokenRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RefreshAccessTokenRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *RefreshAccessTokenRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RefreshAccessTokenRequest) GetClientType() GoCommon.ClientType {
	if x != nil {
		return x.ClientType
	}
	return GoCommon.ClientType_NO_CLIENT_TYPE
}

func (x *RefreshAccessTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode   GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	AccessToken  string                      `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	ExpiresIn    int64                       `protobuf:"varint,4,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	IdToken      string                      `protobuf:"bytes,5,opt,name=idToken,proto3" json:"idToken,omitempty"`
	RefreshToken string                      `protobuf:"bytes,6,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Scope        string                      `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	TokenType    string                      `protobuf:"bytes,8,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (x *RefreshAccessTokenResponse) Reset() {
	*x = RefreshAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenResponse) ProtoMessage() {}

func (x *RefreshAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{25}
}

func (x *RefreshAccessTokenResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *RefreshAccessTokenResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *RefreshAccessTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshAccessTokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *RefreshAccessTokenResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *RefreshAccessTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshAccessTokenResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RefreshAccessTokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type GenerateActionSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders       *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	EntityId             int64                    `protobuf:"varint,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	EntityType           string                   `protobuf:"bytes,3,opt,name=entityType,proto3" json:"entityType,omitempty"`
	ServiceName          string                   `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Action               string                   `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	SecretDigit          int32                    `protobuf:"varint,6,opt,name=secretDigit,proto3" json:"secretDigit,omitempty"`
	MaxRetries           int32                    `protobuf:"varint,7,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	ExpiryInSeconds      int32                    `protobuf:"varint,8,opt,name=expiryInSeconds,proto3" json:"expiryInSeconds,omitempty"`
	ReceiverActor        *GoCommon.ActorID        `protobuf:"bytes,9,opt,name=receiverActor,proto3" json:"receiverActor,omitempty"`
	CommunicationDetails []*CommunicationDetail   `protobuf:"bytes,10,rep,name=communicationDetails,proto3" json:"communicationDetails,omitempty"`
}

func (x *GenerateActionSecretRequest) Reset() {
	*x = GenerateActionSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateActionSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateActionSecretRequest) ProtoMessage() {}

func (x *GenerateActionSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateActionSecretRequest.ProtoReflect.Descriptor instead.
func (*GenerateActionSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{26}
}

func (x *GenerateActionSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GenerateActionSecretRequest) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *GenerateActionSecretRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *GenerateActionSecretRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GenerateActionSecretRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GenerateActionSecretRequest) GetSecretDigit() int32 {
	if x != nil {
		return x.SecretDigit
	}
	return 0
}

func (x *GenerateActionSecretRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *GenerateActionSecretRequest) GetExpiryInSeconds() int32 {
	if x != nil {
		return x.ExpiryInSeconds
	}
	return 0
}

func (x *GenerateActionSecretRequest) GetReceiverActor() *GoCommon.ActorID {
	if x != nil {
		return x.ReceiverActor
	}
	return nil
}

func (x *GenerateActionSecretRequest) GetCommunicationDetails() []*CommunicationDetail {
	if x != nil {
		return x.CommunicationDetails
	}
	return nil
}

type CommunicationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateName         string                        `protobuf:"bytes,1,opt,name=templateName,proto3" json:"templateName,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,2,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
}

func (x *CommunicationDetail) Reset() {
	*x = CommunicationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationDetail) ProtoMessage() {}

func (x *CommunicationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationDetail.ProtoReflect.Descriptor instead.
func (*CommunicationDetail) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{27}
}

func (x *CommunicationDetail) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *CommunicationDetail) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

type GenerateActionSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *GenerateActionSecretResponse) Reset() {
	*x = GenerateActionSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateActionSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateActionSecretResponse) ProtoMessage() {}

func (x *GenerateActionSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateActionSecretResponse.ProtoReflect.Descriptor instead.
func (*GenerateActionSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{28}
}

func (x *GenerateActionSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GenerateActionSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type FetchActionSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	EntityId       int64                    `protobuf:"varint,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	EntityType     string                   `protobuf:"bytes,3,opt,name=entityType,proto3" json:"entityType,omitempty"`
	ServiceName    string                   `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Action         string                   `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	ActorId        *GoCommon.ActorID        `protobuf:"bytes,6,opt,name=actorId,proto3" json:"actorId,omitempty"`
}

func (x *FetchActionSecretRequest) Reset() {
	*x = FetchActionSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchActionSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchActionSecretRequest) ProtoMessage() {}

func (x *FetchActionSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchActionSecretRequest.ProtoReflect.Descriptor instead.
func (*FetchActionSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{29}
}

func (x *FetchActionSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchActionSecretRequest) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *FetchActionSecretRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *FetchActionSecretRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *FetchActionSecretRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *FetchActionSecretRequest) GetActorId() *GoCommon.ActorID {
	if x != nil {
		return x.ActorId
	}
	return nil
}

type FetchActionSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
	Secret     string                      `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *FetchActionSecretResponse) Reset() {
	*x = FetchActionSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchActionSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchActionSecretResponse) ProtoMessage() {}

func (x *FetchActionSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchActionSecretResponse.ProtoReflect.Descriptor instead.
func (*FetchActionSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{30}
}

func (x *FetchActionSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *FetchActionSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *FetchActionSecretResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type ValidateActionSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	EntityId       int64                    `protobuf:"varint,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	EntityType     string                   `protobuf:"bytes,3,opt,name=entityType,proto3" json:"entityType,omitempty"`
	ServiceName    string                   `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Action         string                   `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Secret         string                   `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *ValidateActionSecretRequest) Reset() {
	*x = ValidateActionSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateActionSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionSecretRequest) ProtoMessage() {}

func (x *ValidateActionSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionSecretRequest.ProtoReflect.Descriptor instead.
func (*ValidateActionSecretRequest) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{31}
}

func (x *ValidateActionSecretRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ValidateActionSecretRequest) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *ValidateActionSecretRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ValidateActionSecretRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ValidateActionSecretRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ValidateActionSecretRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type ValidateActionSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ValidateActionSecretResponse) Reset() {
	*x = ValidateActionSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuthService_auth_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateActionSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionSecretResponse) ProtoMessage() {}

func (x *ValidateActionSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AuthService_auth_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionSecretResponse.ProtoReflect.Descriptor instead.
func (*ValidateActionSecretResponse) Descriptor() ([]byte, []int) {
	return file_AuthService_auth_service_proto_rawDescGZIP(), []int{32}
}

func (x *ValidateActionSecretResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *ValidateActionSecretResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

var File_AuthService_auth_service_proto protoreflect.FileDescriptor

var file_AuthService_auth_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x12, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x04,
	0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x74, 0x70, 0x44, 0x69, 0x67, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f,
	0x74, 0x70, 0x44, 0x69, 0x67, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb1, 0x03, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xd4,
	0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb9, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x74, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xec, 0x02,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x02, 0x0a,
	0x17, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x18,
	0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaa, 0x04, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xbf, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbc, 0x01,
	0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x02, 0x0a,
	0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x02, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf2,
	0x02, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x93, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xd7,
	0x01, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x1b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x56, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xe1, 0x10, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x12, 0x2e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x4f, 0x74, 0x70, 0x12, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x70, 0x12, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4f,
	0x74, 0x70, 0x12, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x15,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89,
	0x01, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01,
	0x0a, 0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01,
	0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x55, 0x0a, 0x1f, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x30, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AuthService_auth_service_proto_rawDescOnce sync.Once
	file_AuthService_auth_service_proto_rawDescData = file_AuthService_auth_service_proto_rawDesc
)

func file_AuthService_auth_service_proto_rawDescGZIP() []byte {
	file_AuthService_auth_service_proto_rawDescOnce.Do(func() {
		file_AuthService_auth_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_AuthService_auth_service_proto_rawDescData)
	})
	return file_AuthService_auth_service_proto_rawDescData
}

var file_AuthService_auth_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_AuthService_auth_service_proto_goTypes = []interface{}{
	(*GenerateOtpRequest)(nil),               // 0: farm.nurture.platform.auth.GenerateOtpRequest
	(*GenerateOtpResponse)(nil),              // 1: farm.nurture.platform.auth.GenerateOtpResponse
	(*ResendOtpRequest)(nil),                 // 2: farm.nurture.platform.auth.ResendOtpRequest
	(*ResendOtpResponse)(nil),                // 3: farm.nurture.platform.auth.ResendOtpResponse
	(*ValidateOtpRequest)(nil),               // 4: farm.nurture.platform.auth.ValidateOtpRequest
	(*ValidateOtpResponse)(nil),              // 5: farm.nurture.platform.auth.ValidateOtpResponse
	(*GetAuthTokenRequest)(nil),              // 6: farm.nurture.platform.auth.GetAuthTokenRequest
	(*GetAuthTokenResponse)(nil),             // 7: farm.nurture.platform.auth.GetAuthTokenResponse
	(*OldTokenExchangeRequest)(nil),          // 8: farm.nurture.platform.auth.OldTokenExchangeRequest
	(*OldTokenExchangeResponse)(nil),         // 9: farm.nurture.platform.auth.OldTokenExchangeResponse
	(*GetOtpRequest)(nil),                    // 10: farm.nurture.platform.auth.GetOtpRequest
	(*GetOtpResponse)(nil),                   // 11: farm.nurture.platform.auth.GetOtpResponse
	(*AddActorSecretRequest)(nil),            // 12: farm.nurture.platform.auth.AddActorSecretRequest
	(*AddActorSecretResponse)(nil),           // 13: farm.nurture.platform.auth.AddActorSecretResponse
	(*UpdateActorSecretRequest)(nil),         // 14: farm.nurture.platform.auth.UpdateActorSecretRequest
	(*UpdateActorSecretResponse)(nil),        // 15: farm.nurture.platform.auth.UpdateActorSecretResponse
	(*ValidateSecretRequest)(nil),            // 16: farm.nurture.platform.auth.ValidateSecretRequest
	(*ValidateSecretResponse)(nil),           // 17: farm.nurture.platform.auth.ValidateSecretResponse
	(*GenerateSecretResetTokenRequest)(nil),  // 18: farm.nurture.platform.auth.GenerateSecretResetTokenRequest
	(*GenerateSecretResetTokenResponse)(nil), // 19: farm.nurture.platform.auth.GenerateSecretResetTokenResponse
	(*DeleteSessionRequest)(nil),             // 20: farm.nurture.platform.auth.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),            // 21: farm.nurture.platform.auth.DeleteSessionResponse
	(*ValidateJWTTokenRequest)(nil),          // 22: farm.nurture.platform.auth.ValidateJWTTokenRequest
	(*ValidateJWTTokenResponse)(nil),         // 23: farm.nurture.platform.auth.ValidateJWTTokenResponse
	(*RefreshAccessTokenRequest)(nil),        // 24: farm.nurture.platform.auth.RefreshAccessTokenRequest
	(*RefreshAccessTokenResponse)(nil),       // 25: farm.nurture.platform.auth.RefreshAccessTokenResponse
	(*GenerateActionSecretRequest)(nil),      // 26: farm.nurture.platform.auth.GenerateActionSecretRequest
	(*CommunicationDetail)(nil),              // 27: farm.nurture.platform.auth.CommunicationDetail
	(*GenerateActionSecretResponse)(nil),     // 28: farm.nurture.platform.auth.GenerateActionSecretResponse
	(*FetchActionSecretRequest)(nil),         // 29: farm.nurture.platform.auth.FetchActionSecretRequest
	(*FetchActionSecretResponse)(nil),        // 30: farm.nurture.platform.auth.FetchActionSecretResponse
	(*ValidateActionSecretRequest)(nil),      // 31: farm.nurture.platform.auth.ValidateActionSecretRequest
	(*ValidateActionSecretResponse)(nil),     // 32: farm.nurture.platform.auth.ValidateActionSecretResponse
	(*GoCommon.RequestHeaders)(nil),          // 33: farm.nurture.core.contracts.common.RequestHeaders
	(*GoCommon.ActorID)(nil),                 // 34: farm.nurture.core.contracts.common.ActorID
	(GoCommon.ClientType)(0),                 // 35: farm.nurture.core.contracts.common.ClientType
	(GoCommon.CommunicationChannel)(0),       // 36: farm.nurture.core.contracts.common.CommunicationChannel
	(GoCommon.ResponseStatus)(0),             // 37: farm.nurture.core.contracts.common.ResponseStatus
	(GoCommon.ResponseStatusCode)(0),         // 38: farm.nurture.core.contracts.common.ResponseStatusCode
	(GoCommon.SecretType)(0),                 // 39: farm.nurture.core.contracts.common.SecretType
	(*GoCommon.Attribs)(nil),                 // 40: farm.nurture.core.contracts.common.Attribs
}
var file_AuthService_auth_service_proto_depIdxs = []int32{
	33, // 0: farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 1: farm.nurture.platform.auth.GenerateOtpRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	35, // 2: farm.nurture.platform.auth.GenerateOtpRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	36, // 3: farm.nurture.platform.auth.GenerateOtpRequest.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	37, // 4: farm.nurture.platform.auth.GenerateOtpResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 5: farm.nurture.platform.auth.GenerateOtpResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	34, // 6: farm.nurture.platform.auth.GenerateOtpResponse.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	33, // 7: farm.nurture.platform.auth.ResendOtpRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 8: farm.nurture.platform.auth.ResendOtpRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	35, // 9: farm.nurture.platform.auth.ResendOtpRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	36, // 10: farm.nurture.platform.auth.ResendOtpRequest.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	37, // 11: farm.nurture.platform.auth.ResendOtpResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 12: farm.nurture.platform.auth.ResendOtpResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	34, // 13: farm.nurture.platform.auth.ResendOtpResponse.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	33, // 14: farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 15: farm.nurture.platform.auth.ValidateOtpRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	37, // 16: farm.nurture.platform.auth.ValidateOtpResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 17: farm.nurture.platform.auth.ValidateOtpResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 18: farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 19: farm.nurture.platform.auth.GetAuthTokenRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	39, // 20: farm.nurture.platform.auth.GetAuthTokenRequest.secretType:type_name -> farm.nurture.core.contracts.common.SecretType
	35, // 21: farm.nurture.platform.auth.GetAuthTokenRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	40, // 22: farm.nurture.platform.auth.GetAuthTokenRequest.claims:type_name -> farm.nurture.core.contracts.common.Attribs
	37, // 23: farm.nurture.platform.auth.GetAuthTokenResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 24: farm.nurture.platform.auth.GetAuthTokenResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 25: farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 26: farm.nurture.platform.auth.OldTokenExchangeRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	35, // 27: farm.nurture.platform.auth.OldTokenExchangeRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	37, // 28: farm.nurture.platform.auth.OldTokenExchangeResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 29: farm.nurture.platform.auth.OldTokenExchangeResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 30: farm.nurture.platform.auth.GetOtpRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 31: farm.nurture.platform.auth.GetOtpRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	37, // 32: farm.nurture.platform.auth.GetOtpResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 33: farm.nurture.platform.auth.GetOtpResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 34: farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 35: farm.nurture.platform.auth.AddActorSecretRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	39, // 36: farm.nurture.platform.auth.AddActorSecretRequest.secretType:type_name -> farm.nurture.core.contracts.common.SecretType
	35, // 37: farm.nurture.platform.auth.AddActorSecretRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	37, // 38: farm.nurture.platform.auth.AddActorSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 39: farm.nurture.platform.auth.AddActorSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 40: farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 41: farm.nurture.platform.auth.UpdateActorSecretRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	39, // 42: farm.nurture.platform.auth.UpdateActorSecretRequest.secretType:type_name -> farm.nurture.core.contracts.common.SecretType
	35, // 43: farm.nurture.platform.auth.UpdateActorSecretRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	37, // 44: farm.nurture.platform.auth.UpdateActorSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 45: farm.nurture.platform.auth.UpdateActorSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 46: farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 47: farm.nurture.platform.auth.ValidateSecretRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	39, // 48: farm.nurture.platform.auth.ValidateSecretRequest.secretType:type_name -> farm.nurture.core.contracts.common.SecretType
	37, // 49: farm.nurture.platform.auth.ValidateSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 50: farm.nurture.platform.auth.ValidateSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 51: farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 52: farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	39, // 53: farm.nurture.platform.auth.GenerateSecretResetTokenRequest.secretType:type_name -> farm.nurture.core.contracts.common.SecretType
	37, // 54: farm.nurture.platform.auth.GenerateSecretResetTokenResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 55: farm.nurture.platform.auth.GenerateSecretResetTokenResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 56: farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 57: farm.nurture.platform.auth.DeleteSessionRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	35, // 58: farm.nurture.platform.auth.DeleteSessionRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	37, // 59: farm.nurture.platform.auth.DeleteSessionResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 60: farm.nurture.platform.auth.DeleteSessionResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 61: farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	37, // 62: farm.nurture.platform.auth.ValidateJWTTokenResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 63: farm.nurture.platform.auth.ValidateJWTTokenResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 64: farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 65: farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	35, // 66: farm.nurture.platform.auth.RefreshAccessTokenRequest.clientType:type_name -> farm.nurture.core.contracts.common.ClientType
	37, // 67: farm.nurture.platform.auth.RefreshAccessTokenResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 68: farm.nurture.platform.auth.RefreshAccessTokenResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 69: farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 70: farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor:type_name -> farm.nurture.core.contracts.common.ActorID
	27, // 71: farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails:type_name -> farm.nurture.platform.auth.CommunicationDetail
	36, // 72: farm.nurture.platform.auth.CommunicationDetail.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	37, // 73: farm.nurture.platform.auth.GenerateActionSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 74: farm.nurture.platform.auth.GenerateActionSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 75: farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	34, // 76: farm.nurture.platform.auth.FetchActionSecretRequest.actorId:type_name -> farm.nurture.core.contracts.common.ActorID
	37, // 77: farm.nurture.platform.auth.FetchActionSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 78: farm.nurture.platform.auth.FetchActionSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	33, // 79: farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	37, // 80: farm.nurture.platform.auth.ValidateActionSecretResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	38, // 81: farm.nurture.platform.auth.ValidateActionSecretResponse.statusCode:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	0,  // 82: farm.nurture.platform.auth.AuthService.ExecuteGenerateOtp:input_type -> farm.nurture.platform.auth.GenerateOtpRequest
	2,  // 83: farm.nurture.platform.auth.AuthService.ExecuteResendOtp:input_type -> farm.nurture.platform.auth.ResendOtpRequest
	4,  // 84: farm.nurture.platform.auth.AuthService.ExecuteValidateOtp:input_type -> farm.nurture.platform.auth.ValidateOtpRequest
	6,  // 85: farm.nurture.platform.auth.AuthService.ExecuteGetAuthToken:input_type -> farm.nurture.platform.auth.GetAuthTokenRequest
	8,  // 86: farm.nurture.platform.auth.AuthService.ExecuteOldTokenExchange:input_type -> farm.nurture.platform.auth.OldTokenExchangeRequest
	10, // 87: farm.nurture.platform.auth.AuthService.ExecuteGetOtp:input_type -> farm.nurture.platform.auth.GetOtpRequest
	12, // 88: farm.nurture.platform.auth.AuthService.ExecuteAddActorSecret:input_type -> farm.nurture.platform.auth.AddActorSecretRequest
	14, // 89: farm.nurture.platform.auth.AuthService.ExecuteUpdateActorSecret:input_type -> farm.nurture.platform.auth.UpdateActorSecretRequest
	16, // 90: farm.nurture.platform.auth.AuthService.ExecuteValidateSecret:input_type -> farm.nurture.platform.auth.ValidateSecretRequest
	18, // 91: farm.nurture.platform.auth.AuthService.ExecuteGenerateSecretResetToken:input_type -> farm.nurture.platform.auth.GenerateSecretResetTokenRequest
	20, // 92: farm.nurture.platform.auth.AuthService.ExecuteDeleteSession:input_type -> farm.nurture.platform.auth.DeleteSessionRequest
	22, // 93: farm.nurture.platform.auth.AuthService.ExecuteValidateJWTToken:input_type -> farm.nurture.platform.auth.ValidateJWTTokenRequest
	24, // 94: farm.nurture.platform.auth.AuthService.ExecuteRefreshAccessToken:input_type -> farm.nurture.platform.auth.RefreshAccessTokenRequest
	26, // 95: farm.nurture.platform.auth.AuthService.ExecuteGenerateActionSecret:input_type -> farm.nurture.platform.auth.GenerateActionSecretRequest
	29, // 96: farm.nurture.platform.auth.AuthService.ExecuteFetchActionSecret:input_type -> farm.nurture.platform.auth.FetchActionSecretRequest
	31, // 97: farm.nurture.platform.auth.AuthService.ExecuteValidateActionSecret:input_type -> farm.nurture.platform.auth.ValidateActionSecretRequest
	1,  // 98: farm.nurture.platform.auth.AuthService.ExecuteGenerateOtp:output_type -> farm.nurture.platform.auth.GenerateOtpResponse
	3,  // 99: farm.nurture.platform.auth.AuthService.ExecuteResendOtp:output_type -> farm.nurture.platform.auth.ResendOtpResponse
	5,  // 100: farm.nurture.platform.auth.AuthService.ExecuteValidateOtp:output_type -> farm.nurture.platform.auth.ValidateOtpResponse
	7,  // 101: farm.nurture.platform.auth.AuthService.ExecuteGetAuthToken:output_type -> farm.nurture.platform.auth.GetAuthTokenResponse
	9,  // 102: farm.nurture.platform.auth.AuthService.ExecuteOldTokenExchange:output_type -> farm.nurture.platform.auth.OldTokenExchangeResponse
	11, // 103: farm.nurture.platform.auth.AuthService.ExecuteGetOtp:output_type -> farm.nurture.platform.auth.GetOtpResponse
	13, // 104: farm.nurture.platform.auth.AuthService.ExecuteAddActorSecret:output_type -> farm.nurture.platform.auth.AddActorSecretResponse
	15, // 105: farm.nurture.platform.auth.AuthService.ExecuteUpdateActorSecret:output_type -> farm.nurture.platform.auth.UpdateActorSecretResponse
	17, // 106: farm.nurture.platform.auth.AuthService.ExecuteValidateSecret:output_type -> farm.nurture.platform.auth.ValidateSecretResponse
	19, // 107: farm.nurture.platform.auth.AuthService.ExecuteGenerateSecretResetToken:output_type -> farm.nurture.platform.auth.GenerateSecretResetTokenResponse
	21, // 108: farm.nurture.platform.auth.AuthService.ExecuteDeleteSession:output_type -> farm.nurture.platform.auth.DeleteSessionResponse
	23, // 109: farm.nurture.platform.auth.AuthService.ExecuteValidateJWTToken:output_type -> farm.nurture.platform.auth.ValidateJWTTokenResponse
	25, // 110: farm.nurture.platform.auth.AuthService.ExecuteRefreshAccessToken:output_type -> farm.nurture.platform.auth.RefreshAccessTokenResponse
	28, // 111: farm.nurture.platform.auth.AuthService.ExecuteGenerateActionSecret:output_type -> farm.nurture.platform.auth.GenerateActionSecretResponse
	30, // 112: farm.nurture.platform.auth.AuthService.ExecuteFetchActionSecret:output_type -> farm.nurture.platform.auth.FetchActionSecretResponse
	32, // 113: farm.nurture.platform.auth.AuthService.ExecuteValidateActionSecret:output_type -> farm.nurture.platform.auth.ValidateActionSecretResponse
	98, // [98:114] is the sub-list for method output_type
	82, // [82:98] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_AuthService_auth_service_proto_init() }
func file_AuthService_auth_service_proto_init() {
	if File_AuthService_auth_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AuthService_auth_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendOtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendOtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateOtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateOtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OldTokenExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OldTokenExchangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddActorSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddActorSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActorSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActorSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSecretResetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSecretResetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateJWTTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateJWTTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateActionSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateActionSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchActionSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchActionSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateActionSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuthService_auth_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateActionSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AuthService_auth_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_AuthService_auth_service_proto_goTypes,
		DependencyIndexes: file_AuthService_auth_service_proto_depIdxs,
		MessageInfos:      file_AuthService_auth_service_proto_msgTypes,
	}.Build()
	File_AuthService_auth_service_proto = out.File
	file_AuthService_auth_service_proto_rawDesc = nil
	file_AuthService_auth_service_proto_goTypes = nil
	file_AuthService_auth_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	ExecuteGenerateOtp(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*GenerateOtpResponse, error)
	ExecuteResendOtp(ctx context.Context, in *ResendOtpRequest, opts ...grpc.CallOption) (*ResendOtpResponse, error)
	ExecuteValidateOtp(ctx context.Context, in *ValidateOtpRequest, opts ...grpc.CallOption) (*ValidateOtpResponse, error)
	ExecuteGetAuthToken(ctx context.Context, in *GetAuthTokenRequest, opts ...grpc.CallOption) (*GetAuthTokenResponse, error)
	ExecuteOldTokenExchange(ctx context.Context, in *OldTokenExchangeRequest, opts ...grpc.CallOption) (*OldTokenExchangeResponse, error)
	ExecuteGetOtp(ctx context.Context, in *GetOtpRequest, opts ...grpc.CallOption) (*GetOtpResponse, error)
	ExecuteAddActorSecret(ctx context.Context, in *AddActorSecretRequest, opts ...grpc.CallOption) (*AddActorSecretResponse, error)
	ExecuteUpdateActorSecret(ctx context.Context, in *UpdateActorSecretRequest, opts ...grpc.CallOption) (*UpdateActorSecretResponse, error)
	ExecuteValidateSecret(ctx context.Context, in *ValidateSecretRequest, opts ...grpc.CallOption) (*ValidateSecretResponse, error)
	ExecuteGenerateSecretResetToken(ctx context.Context, in *GenerateSecretResetTokenRequest, opts ...grpc.CallOption) (*GenerateSecretResetTokenResponse, error)
	ExecuteDeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
	ExecuteValidateJWTToken(ctx context.Context, in *ValidateJWTTokenRequest, opts ...grpc.CallOption) (*ValidateJWTTokenResponse, error)
	ExecuteRefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error)
	ExecuteGenerateActionSecret(ctx context.Context, in *GenerateActionSecretRequest, opts ...grpc.CallOption) (*GenerateActionSecretResponse, error)
	ExecuteFetchActionSecret(ctx context.Context, in *FetchActionSecretRequest, opts ...grpc.CallOption) (*FetchActionSecretResponse, error)
	ExecuteValidateActionSecret(ctx context.Context, in *ValidateActionSecretRequest, opts ...grpc.CallOption) (*ValidateActionSecretResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) ExecuteGenerateOtp(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*GenerateOtpResponse, error) {
	out := new(GenerateOtpResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteGenerateOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteResendOtp(ctx context.Context, in *ResendOtpRequest, opts ...grpc.CallOption) (*ResendOtpResponse, error) {
	out := new(ResendOtpResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteResendOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteValidateOtp(ctx context.Context, in *ValidateOtpRequest, opts ...grpc.CallOption) (*ValidateOtpResponse, error) {
	out := new(ValidateOtpResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteValidateOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteGetAuthToken(ctx context.Context, in *GetAuthTokenRequest, opts ...grpc.CallOption) (*GetAuthTokenResponse, error) {
	out := new(GetAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteGetAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteOldTokenExchange(ctx context.Context, in *OldTokenExchangeRequest, opts ...grpc.CallOption) (*OldTokenExchangeResponse, error) {
	out := new(OldTokenExchangeResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteOldTokenExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteGetOtp(ctx context.Context, in *GetOtpRequest, opts ...grpc.CallOption) (*GetOtpResponse, error) {
	out := new(GetOtpResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteGetOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteAddActorSecret(ctx context.Context, in *AddActorSecretRequest, opts ...grpc.CallOption) (*AddActorSecretResponse, error) {
	out := new(AddActorSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteAddActorSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteUpdateActorSecret(ctx context.Context, in *UpdateActorSecretRequest, opts ...grpc.CallOption) (*UpdateActorSecretResponse, error) {
	out := new(UpdateActorSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteUpdateActorSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteValidateSecret(ctx context.Context, in *ValidateSecretRequest, opts ...grpc.CallOption) (*ValidateSecretResponse, error) {
	out := new(ValidateSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteValidateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteGenerateSecretResetToken(ctx context.Context, in *GenerateSecretResetTokenRequest, opts ...grpc.CallOption) (*GenerateSecretResetTokenResponse, error) {
	out := new(GenerateSecretResetTokenResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteGenerateSecretResetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteDeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteDeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteValidateJWTToken(ctx context.Context, in *ValidateJWTTokenRequest, opts ...grpc.CallOption) (*ValidateJWTTokenResponse, error) {
	out := new(ValidateJWTTokenResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteValidateJWTToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteRefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error) {
	out := new(RefreshAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteRefreshAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteGenerateActionSecret(ctx context.Context, in *GenerateActionSecretRequest, opts ...grpc.CallOption) (*GenerateActionSecretResponse, error) {
	out := new(GenerateActionSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteGenerateActionSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteFetchActionSecret(ctx context.Context, in *FetchActionSecretRequest, opts ...grpc.CallOption) (*FetchActionSecretResponse, error) {
	out := new(FetchActionSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteFetchActionSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExecuteValidateActionSecret(ctx context.Context, in *ValidateActionSecretRequest, opts ...grpc.CallOption) (*ValidateActionSecretResponse, error) {
	out := new(ValidateActionSecretResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.platform.auth.AuthService/ExecuteValidateActionSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	ExecuteGenerateOtp(context.Context, *GenerateOtpRequest) (*GenerateOtpResponse, error)
	ExecuteResendOtp(context.Context, *ResendOtpRequest) (*ResendOtpResponse, error)
	ExecuteValidateOtp(context.Context, *ValidateOtpRequest) (*ValidateOtpResponse, error)
	ExecuteGetAuthToken(context.Context, *GetAuthTokenRequest) (*GetAuthTokenResponse, error)
	ExecuteOldTokenExchange(context.Context, *OldTokenExchangeRequest) (*OldTokenExchangeResponse, error)
	ExecuteGetOtp(context.Context, *GetOtpRequest) (*GetOtpResponse, error)
	ExecuteAddActorSecret(context.Context, *AddActorSecretRequest) (*AddActorSecretResponse, error)
	ExecuteUpdateActorSecret(context.Context, *UpdateActorSecretRequest) (*UpdateActorSecretResponse, error)
	ExecuteValidateSecret(context.Context, *ValidateSecretRequest) (*ValidateSecretResponse, error)
	ExecuteGenerateSecretResetToken(context.Context, *GenerateSecretResetTokenRequest) (*GenerateSecretResetTokenResponse, error)
	ExecuteDeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error)
	ExecuteValidateJWTToken(context.Context, *ValidateJWTTokenRequest) (*ValidateJWTTokenResponse, error)
	ExecuteRefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error)
	ExecuteGenerateActionSecret(context.Context, *GenerateActionSecretRequest) (*GenerateActionSecretResponse, error)
	ExecuteFetchActionSecret(context.Context, *FetchActionSecretRequest) (*FetchActionSecretResponse, error)
	ExecuteValidateActionSecret(context.Context, *ValidateActionSecretRequest) (*ValidateActionSecretResponse, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) ExecuteGenerateOtp(context.Context, *GenerateOtpRequest) (*GenerateOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGenerateOtp not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteResendOtp(context.Context, *ResendOtpRequest) (*ResendOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteResendOtp not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteValidateOtp(context.Context, *ValidateOtpRequest) (*ValidateOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteValidateOtp not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteGetAuthToken(context.Context, *GetAuthTokenRequest) (*GetAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetAuthToken not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteOldTokenExchange(context.Context, *OldTokenExchangeRequest) (*OldTokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOldTokenExchange not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteGetOtp(context.Context, *GetOtpRequest) (*GetOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetOtp not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteAddActorSecret(context.Context, *AddActorSecretRequest) (*AddActorSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddActorSecret not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteUpdateActorSecret(context.Context, *UpdateActorSecretRequest) (*UpdateActorSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateActorSecret not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteValidateSecret(context.Context, *ValidateSecretRequest) (*ValidateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteValidateSecret not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteGenerateSecretResetToken(context.Context, *GenerateSecretResetTokenRequest) (*GenerateSecretResetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGenerateSecretResetToken not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteDeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDeleteSession not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteValidateJWTToken(context.Context, *ValidateJWTTokenRequest) (*ValidateJWTTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteValidateJWTToken not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteRefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRefreshAccessToken not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteGenerateActionSecret(context.Context, *GenerateActionSecretRequest) (*GenerateActionSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGenerateActionSecret not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteFetchActionSecret(context.Context, *FetchActionSecretRequest) (*FetchActionSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchActionSecret not implemented")
}
func (*UnimplementedAuthServiceServer) ExecuteValidateActionSecret(context.Context, *ValidateActionSecretRequest) (*ValidateActionSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteValidateActionSecret not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_ExecuteGenerateOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteGenerateOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteGenerateOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteGenerateOtp(ctx, req.(*GenerateOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteResendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteResendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteResendOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteResendOtp(ctx, req.(*ResendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteValidateOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteValidateOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteValidateOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteValidateOtp(ctx, req.(*ValidateOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteGetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteGetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteGetAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteGetAuthToken(ctx, req.(*GetAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteOldTokenExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OldTokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteOldTokenExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteOldTokenExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteOldTokenExchange(ctx, req.(*OldTokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteGetOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteGetOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteGetOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteGetOtp(ctx, req.(*GetOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteAddActorSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActorSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteAddActorSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteAddActorSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteAddActorSecret(ctx, req.(*AddActorSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteUpdateActorSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActorSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteUpdateActorSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteUpdateActorSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteUpdateActorSecret(ctx, req.(*UpdateActorSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteValidateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteValidateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteValidateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteValidateSecret(ctx, req.(*ValidateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteGenerateSecretResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSecretResetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteGenerateSecretResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteGenerateSecretResetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteGenerateSecretResetToken(ctx, req.(*GenerateSecretResetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteDeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteDeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteDeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteDeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteValidateJWTToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJWTTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteValidateJWTToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteValidateJWTToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteValidateJWTToken(ctx, req.(*ValidateJWTTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteRefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteRefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteRefreshAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteRefreshAccessToken(ctx, req.(*RefreshAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteGenerateActionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateActionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteGenerateActionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteGenerateActionSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteGenerateActionSecret(ctx, req.(*GenerateActionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteFetchActionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchActionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteFetchActionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteFetchActionSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteFetchActionSecret(ctx, req.(*FetchActionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExecuteValidateActionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateActionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExecuteValidateActionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.platform.auth.AuthService/ExecuteValidateActionSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExecuteValidateActionSecret(ctx, req.(*ValidateActionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.platform.auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteGenerateOtp",
			Handler:    _AuthService_ExecuteGenerateOtp_Handler,
		},
		{
			MethodName: "ExecuteResendOtp",
			Handler:    _AuthService_ExecuteResendOtp_Handler,
		},
		{
			MethodName: "ExecuteValidateOtp",
			Handler:    _AuthService_ExecuteValidateOtp_Handler,
		},
		{
			MethodName: "ExecuteGetAuthToken",
			Handler:    _AuthService_ExecuteGetAuthToken_Handler,
		},
		{
			MethodName: "ExecuteOldTokenExchange",
			Handler:    _AuthService_ExecuteOldTokenExchange_Handler,
		},
		{
			MethodName: "ExecuteGetOtp",
			Handler:    _AuthService_ExecuteGetOtp_Handler,
		},
		{
			MethodName: "ExecuteAddActorSecret",
			Handler:    _AuthService_ExecuteAddActorSecret_Handler,
		},
		{
			MethodName: "ExecuteUpdateActorSecret",
			Handler:    _AuthService_ExecuteUpdateActorSecret_Handler,
		},
		{
			MethodName: "ExecuteValidateSecret",
			Handler:    _AuthService_ExecuteValidateSecret_Handler,
		},
		{
			MethodName: "ExecuteGenerateSecretResetToken",
			Handler:    _AuthService_ExecuteGenerateSecretResetToken_Handler,
		},
		{
			MethodName: "ExecuteDeleteSession",
			Handler:    _AuthService_ExecuteDeleteSession_Handler,
		},
		{
			MethodName: "ExecuteValidateJWTToken",
			Handler:    _AuthService_ExecuteValidateJWTToken_Handler,
		},
		{
			MethodName: "ExecuteRefreshAccessToken",
			Handler:    _AuthService_ExecuteRefreshAccessToken_Handler,
		},
		{
			MethodName: "ExecuteGenerateActionSecret",
			Handler:    _AuthService_ExecuteGenerateActionSecret_Handler,
		},
		{
			MethodName: "ExecuteFetchActionSecret",
			Handler:    _AuthService_ExecuteFetchActionSecret_Handler,
		},
		{
			MethodName: "ExecuteValidateActionSecret",
			Handler:    _AuthService_ExecuteValidateActionSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AuthService/auth_service.proto",
}
