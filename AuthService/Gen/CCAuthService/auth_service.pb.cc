// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthService/auth_service.proto

#include "AuthService/auth_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeaders_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AuthService_2fauth_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace platform {
namespace auth {
class GenerateOtpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateOtpRequest> _instance;
} _GenerateOtpRequest_default_instance_;
class GenerateOtpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateOtpResponse> _instance;
} _GenerateOtpResponse_default_instance_;
class ResendOtpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResendOtpRequest> _instance;
} _ResendOtpRequest_default_instance_;
class ResendOtpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResendOtpResponse> _instance;
} _ResendOtpResponse_default_instance_;
class ValidateOtpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateOtpRequest> _instance;
} _ValidateOtpRequest_default_instance_;
class ValidateOtpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateOtpResponse> _instance;
} _ValidateOtpResponse_default_instance_;
class GetAuthTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthTokenRequest> _instance;
} _GetAuthTokenRequest_default_instance_;
class GetAuthTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthTokenResponse> _instance;
} _GetAuthTokenResponse_default_instance_;
class OldTokenExchangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OldTokenExchangeRequest> _instance;
} _OldTokenExchangeRequest_default_instance_;
class OldTokenExchangeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OldTokenExchangeResponse> _instance;
} _OldTokenExchangeResponse_default_instance_;
class GetOtpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOtpRequest> _instance;
} _GetOtpRequest_default_instance_;
class GetOtpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOtpResponse> _instance;
} _GetOtpResponse_default_instance_;
class AddActorSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddActorSecretRequest> _instance;
} _AddActorSecretRequest_default_instance_;
class AddActorSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddActorSecretResponse> _instance;
} _AddActorSecretResponse_default_instance_;
class UpdateActorSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateActorSecretRequest> _instance;
} _UpdateActorSecretRequest_default_instance_;
class UpdateActorSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateActorSecretResponse> _instance;
} _UpdateActorSecretResponse_default_instance_;
class ValidateSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateSecretRequest> _instance;
} _ValidateSecretRequest_default_instance_;
class ValidateSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateSecretResponse> _instance;
} _ValidateSecretResponse_default_instance_;
class GenerateSecretResetTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateSecretResetTokenRequest> _instance;
} _GenerateSecretResetTokenRequest_default_instance_;
class GenerateSecretResetTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateSecretResetTokenResponse> _instance;
} _GenerateSecretResetTokenResponse_default_instance_;
class DeleteSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSessionRequest> _instance;
} _DeleteSessionRequest_default_instance_;
class DeleteSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSessionResponse> _instance;
} _DeleteSessionResponse_default_instance_;
class ValidateJWTTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateJWTTokenRequest> _instance;
} _ValidateJWTTokenRequest_default_instance_;
class ValidateJWTTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateJWTTokenResponse> _instance;
} _ValidateJWTTokenResponse_default_instance_;
class RefreshAccessTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshAccessTokenRequest> _instance;
} _RefreshAccessTokenRequest_default_instance_;
class RefreshAccessTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshAccessTokenResponse> _instance;
} _RefreshAccessTokenResponse_default_instance_;
class GenerateActionSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateActionSecretRequest> _instance;
} _GenerateActionSecretRequest_default_instance_;
class CommunicationDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationDetail> _instance;
} _CommunicationDetail_default_instance_;
class GenerateActionSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateActionSecretResponse> _instance;
} _GenerateActionSecretResponse_default_instance_;
class FetchActionSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchActionSecretRequest> _instance;
} _FetchActionSecretRequest_default_instance_;
class FetchActionSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchActionSecretResponse> _instance;
} _FetchActionSecretResponse_default_instance_;
class ValidateActionSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateActionSecretRequest> _instance;
} _ValidateActionSecretRequest_default_instance_;
class ValidateActionSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateActionSecretResponse> _instance;
} _ValidateActionSecretResponse_default_instance_;
}  // namespace auth
}  // namespace platform
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_AddActorSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::AddActorSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_AddActorSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_AddActorSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::AddActorSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddActorSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddActorSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_CommunicationDetail_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::CommunicationDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_DeleteSessionRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::DeleteSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_DeleteSessionResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_DeleteSessionResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::DeleteSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSessionResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSessionResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_FetchActionSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::FetchActionSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_FetchActionSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::FetchActionSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateActionSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateActionSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GenerateActionSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateActionSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateActionSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateActionSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateActionSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateOtpRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateOtpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateOtpResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateOtpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateSecretResetTokenRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateSecretResetTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_GenerateSecretResetTokenResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GenerateSecretResetTokenResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GenerateSecretResetTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateSecretResetTokenResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateSecretResetTokenResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GetAuthTokenRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GetAuthTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GetAuthTokenResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GetAuthTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GetOtpRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GetOtpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_GetOtpResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::GetOtpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_OldTokenExchangeRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::OldTokenExchangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_OldTokenExchangeResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::OldTokenExchangeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_RefreshAccessTokenRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::RefreshAccessTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_RefreshAccessTokenResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::RefreshAccessTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ResendOtpRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ResendOtpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ResendOtpResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ResendOtpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_UpdateActorSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::UpdateActorSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_UpdateActorSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_UpdateActorSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::UpdateActorSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateActorSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateActorSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateActionSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateActionSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_ValidateActionSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateActionSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateActionSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateActionSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateActionSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateJWTTokenRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateJWTTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_ValidateJWTTokenResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateJWTTokenResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateJWTTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateJWTTokenResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateJWTTokenResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateOtpRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateOtpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_ValidateOtpResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateOtpResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateOtpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateOtpResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateOtpResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateSecretRequest_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_ValidateSecretResponse_AuthService_2fauth_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::platform::auth::_ValidateSecretResponse_default_instance_;
    new (ptr) ::farm::nurture::platform::auth::ValidateSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateSecretResponse_AuthService_2fauth_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateSecretResponse_AuthService_2fauth_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AuthService_2fauth_5fservice_2eproto[33];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AuthService_2fauth_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AuthService_2fauth_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AuthService_2fauth_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, expiryinseconds_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, otpdigit_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, maxretries_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, countryisocode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, clienttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpRequest, communicationchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, expiry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateOtpResponse, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, clienttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpRequest, communicationchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, expiry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ResendOtpResponse, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, otp_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpRequest, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateOtpResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, otp_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, clientsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, authsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, secrettype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, clienttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenRequest, claims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, expiresin_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, idtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, refreshtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetAuthTokenResponse, tokentype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, clientsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeRequest, clienttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, expiresin_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, idtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, refreshtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::OldTokenExchangeResponse, tokentype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpRequest, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, otp_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, generationtime_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, expirytime_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GetOtpResponse, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, authsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, secrettype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, expiryinseconds_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, maxretries_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, countryisocode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretRequest, clienttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::AddActorSecretResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, oldauthsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, newauthsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, secrettype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, expiryinseconds_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, maxretries_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, mobilenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, resetsecretguid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, resetsecretexpiry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretRequest, clienttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::UpdateActorSecretResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, authsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, secrettype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretRequest, mobilenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateSecretResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, email_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, secrettype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest, appname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateSecretResetTokenResponse, expirytime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, appname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, clienttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionRequest, refreshtoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::DeleteSessionResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateJWTTokenResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, actorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, clientsecret_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, clienttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenRequest, refreshtoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, expiresin_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, idtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, refreshtoken_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, scope_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::RefreshAccessTokenResponse, tokentype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, entityid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, entitytype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, action_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, secretdigit_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, maxretries_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, expiryinseconds_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, receiveractor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretRequest, communicationdetails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::CommunicationDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::CommunicationDetail, templatename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::CommunicationDetail, communicationchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::GenerateActionSecretResponse, statuscode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, entityid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, entitytype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, action_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretRequest, actorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretResponse, statuscode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::FetchActionSecretResponse, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, entityid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, entitytype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, action_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretRequest, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::platform::auth::ValidateActionSecretResponse, statuscode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::platform::auth::GenerateOtpRequest)},
  { 15, -1, sizeof(::farm::nurture::platform::auth::GenerateOtpResponse)},
  { 26, -1, sizeof(::farm::nurture::platform::auth::ResendOtpRequest)},
  { 37, -1, sizeof(::farm::nurture::platform::auth::ResendOtpResponse)},
  { 48, -1, sizeof(::farm::nurture::platform::auth::ValidateOtpRequest)},
  { 58, -1, sizeof(::farm::nurture::platform::auth::ValidateOtpResponse)},
  { 65, -1, sizeof(::farm::nurture::platform::auth::GetAuthTokenRequest)},
  { 81, -1, sizeof(::farm::nurture::platform::auth::GetAuthTokenResponse)},
  { 94, -1, sizeof(::farm::nurture::platform::auth::OldTokenExchangeRequest)},
  { 106, -1, sizeof(::farm::nurture::platform::auth::OldTokenExchangeResponse)},
  { 119, -1, sizeof(::farm::nurture::platform::auth::GetOtpRequest)},
  { 128, -1, sizeof(::farm::nurture::platform::auth::GetOtpResponse)},
  { 139, -1, sizeof(::farm::nurture::platform::auth::AddActorSecretRequest)},
  { 154, -1, sizeof(::farm::nurture::platform::auth::AddActorSecretResponse)},
  { 161, -1, sizeof(::farm::nurture::platform::auth::UpdateActorSecretRequest)},
  { 179, -1, sizeof(::farm::nurture::platform::auth::UpdateActorSecretResponse)},
  { 186, -1, sizeof(::farm::nurture::platform::auth::ValidateSecretRequest)},
  { 197, -1, sizeof(::farm::nurture::platform::auth::ValidateSecretResponse)},
  { 204, -1, sizeof(::farm::nurture::platform::auth::GenerateSecretResetTokenRequest)},
  { 214, -1, sizeof(::farm::nurture::platform::auth::GenerateSecretResetTokenResponse)},
  { 222, -1, sizeof(::farm::nurture::platform::auth::DeleteSessionRequest)},
  { 232, -1, sizeof(::farm::nurture::platform::auth::DeleteSessionResponse)},
  { 239, -1, sizeof(::farm::nurture::platform::auth::ValidateJWTTokenRequest)},
  { 246, -1, sizeof(::farm::nurture::platform::auth::ValidateJWTTokenResponse)},
  { 253, -1, sizeof(::farm::nurture::platform::auth::RefreshAccessTokenRequest)},
  { 265, -1, sizeof(::farm::nurture::platform::auth::RefreshAccessTokenResponse)},
  { 278, -1, sizeof(::farm::nurture::platform::auth::GenerateActionSecretRequest)},
  { 293, -1, sizeof(::farm::nurture::platform::auth::CommunicationDetail)},
  { 300, -1, sizeof(::farm::nurture::platform::auth::GenerateActionSecretResponse)},
  { 307, -1, sizeof(::farm::nurture::platform::auth::FetchActionSecretRequest)},
  { 318, -1, sizeof(::farm::nurture::platform::auth::FetchActionSecretResponse)},
  { 326, -1, sizeof(::farm::nurture::platform::auth::ValidateActionSecretRequest)},
  { 337, -1, sizeof(::farm::nurture::platform::auth::ValidateActionSecretResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateOtpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateOtpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ResendOtpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ResendOtpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateOtpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateOtpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GetAuthTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GetAuthTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_OldTokenExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_OldTokenExchangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GetOtpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GetOtpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_AddActorSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_AddActorSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_UpdateActorSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_UpdateActorSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateSecretResetTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateSecretResetTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_DeleteSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_DeleteSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateJWTTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateJWTTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_RefreshAccessTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_RefreshAccessTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateActionSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_CommunicationDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_GenerateActionSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_FetchActionSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_FetchActionSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateActionSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::platform::auth::_ValidateActionSecretResponse_default_instance_),
};

const char descriptor_table_protodef_AuthService_2fauth_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036AuthService/auth_service.proto\022\032farm.n"
  "urture.platform.auth\032\022Common/enums.proto"
  "\032\024Common/headers.proto\032\025Common/entities."
  "proto\"\270\003\n\022GenerateOtpRequest\022J\n\016requestH"
  "eaders\030\001 \001(\01322.farm.nurture.core.contrac"
  "ts.common.RequestHeaders\022<\n\007actorId\030\002 \001("
  "\0132+.farm.nurture.core.contracts.common.A"
  "ctorID\022\017\n\007appName\030\003 \001(\t\022\027\n\017expiryInSecon"
  "ds\030\004 \001(\005\022\020\n\010otpDigit\030\005 \001(\005\022\022\n\nmaxRetries"
  "\030\006 \001(\005\022\024\n\014mobileNumber\030\007 \001(\t\022\026\n\016countryI"
  "soCode\030\010 \001(\t\022B\n\nclientType\030\t \001(\0162..farm."
  "nurture.core.contracts.common.ClientType"
  "\022V\n\024communicationChannel\030\n \001(\01628.farm.nu"
  "rture.core.contracts.common.Communicatio"
  "nChannel\"\232\002\n\023GenerateOtpResponse\022B\n\006stat"
  "us\030\001 \001(\01622.farm.nurture.core.contracts.c"
  "ommon.ResponseStatus\022J\n\nstatusCode\030\002 \001(\016"
  "26.farm.nurture.core.contracts.common.Re"
  "sponseStatusCode\022<\n\007actorId\030\003 \001(\0132+.farm"
  ".nurture.core.contracts.common.ActorID\022\017"
  "\n\007appName\030\004 \001(\t\022\016\n\006expiry\030\005 \001(\003\022\024\n\014mobil"
  "eNumber\030\006 \001(\t\"\337\002\n\020ResendOtpRequest\022J\n\016re"
  "questHeaders\030\001 \001(\01322.farm.nurture.core.c"
  "ontracts.common.RequestHeaders\022<\n\007actorI"
  "d\030\002 \001(\0132+.farm.nurture.core.contracts.co"
  "mmon.ActorID\022\017\n\007appName\030\003 \001(\t\022\024\n\014mobileN"
  "umber\030\004 \001(\t\022B\n\nclientType\030\005 \001(\0162..farm.n"
  "urture.core.contracts.common.ClientType\022"
  "V\n\024communicationChannel\030\006 \001(\01628.farm.nur"
  "ture.core.contracts.common.Communication"
  "Channel\"\230\002\n\021ResendOtpResponse\022B\n\006status\030"
  "\001 \001(\01622.farm.nurture.core.contracts.comm"
  "on.ResponseStatus\022J\n\nstatusCode\030\002 \001(\01626."
  "farm.nurture.core.contracts.common.Respo"
  "nseStatusCode\022<\n\007actorId\030\003 \001(\0132+.farm.nu"
  "rture.core.contracts.common.ActorID\022\017\n\007a"
  "ppName\030\004 \001(\t\022\016\n\006expiry\030\005 \001(\003\022\024\n\014mobileNu"
  "mber\030\006 \001(\t\"\322\001\n\022ValidateOtpRequest\022J\n\016req"
  "uestHeaders\030\001 \001(\01322.farm.nurture.core.co"
  "ntracts.common.RequestHeaders\022<\n\007actorId"
  "\030\002 \001(\0132+.farm.nurture.core.contracts.com"
  "mon.ActorID\022\017\n\007appName\030\003 \001(\t\022\013\n\003otp\030\004 \001("
  "\t\022\024\n\014mobileNumber\030\005 \001(\t\"\245\001\n\023ValidateOtpR"
  "esponse\022B\n\006status\030\001 \001(\01622.farm.nurture.c"
  "ore.contracts.common.ResponseStatus\022J\n\ns"
  "tatusCode\030\002 \001(\01626.farm.nurture.core.cont"
  "racts.common.ResponseStatusCode\"\315\003\n\023GetA"
  "uthTokenRequest\022J\n\016requestHeaders\030\001 \001(\0132"
  "2.farm.nurture.core.contracts.common.Req"
  "uestHeaders\022<\n\007actorId\030\002 \001(\0132+.farm.nurt"
  "ure.core.contracts.common.ActorID\022\017\n\007app"
  "Name\030\003 \001(\t\022\013\n\003otp\030\004 \001(\t\022\020\n\010clientId\030\005 \001("
  "\t\022\024\n\014clientSecret\030\006 \001(\t\022\r\n\005scope\030\007 \001(\t\022\022"
  "\n\nauthSecret\030\t \001(\t\022B\n\nsecretType\030\n \001(\0162."
  ".farm.nurture.core.contracts.common.Secr"
  "etType\022B\n\nclientType\030\013 \001(\0162..farm.nurtur"
  "e.core.contracts.common.ClientType\022;\n\006cl"
  "aims\030\014 \003(\0132+.farm.nurture.core.contracts"
  ".common.Attribs\"\227\002\n\024GetAuthTokenResponse"
  "\022B\n\006status\030\001 \001(\01622.farm.nurture.core.con"
  "tracts.common.ResponseStatus\022J\n\nstatusCo"
  "de\030\002 \001(\01626.farm.nurture.core.contracts.c"
  "ommon.ResponseStatusCode\022\023\n\013accessToken\030"
  "\003 \001(\t\022\021\n\texpiresIn\030\004 \001(\003\022\017\n\007idToken\030\005 \001("
  "\t\022\024\n\014refreshToken\030\006 \001(\t\022\r\n\005scope\030\007 \001(\t\022\021"
  "\n\ttokenType\030\010 \001(\t\"\257\002\n\027OldTokenExchangeRe"
  "quest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nur"
  "ture.core.contracts.common.RequestHeader"
  "s\022<\n\007actorId\030\002 \001(\0132+.farm.nurture.core.c"
  "ontracts.common.ActorID\022\017\n\007appName\030\004 \001(\t"
  "\022\020\n\010clientId\030\005 \001(\t\022\024\n\014clientSecret\030\006 \001(\t"
  "\022\r\n\005scope\030\007 \001(\t\022B\n\nclientType\030\013 \001(\0162..fa"
  "rm.nurture.core.contracts.common.ClientT"
  "ype\"\233\002\n\030OldTokenExchangeResponse\022B\n\006stat"
  "us\030\001 \001(\01622.farm.nurture.core.contracts.c"
  "ommon.ResponseStatus\022J\n\nstatusCode\030\002 \001(\016"
  "26.farm.nurture.core.contracts.common.Re"
  "sponseStatusCode\022\023\n\013accessToken\030\003 \001(\t\022\021\n"
  "\texpiresIn\030\004 \001(\003\022\017\n\007idToken\030\005 \001(\t\022\024\n\014ref"
  "reshToken\030\006 \001(\t\022\r\n\005scope\030\007 \001(\t\022\021\n\ttokenT"
  "ype\030\010 \001(\t\"\300\001\n\rGetOtpRequest\022J\n\016requestHe"
  "aders\030\001 \001(\01322.farm.nurture.core.contract"
  "s.common.RequestHeaders\022<\n\007actorId\030\002 \001(\013"
  "2+.farm.nurture.core.contracts.common.Ac"
  "torID\022\017\n\007appName\030\003 \001(\t\022\024\n\014mobileNumber\030\004"
  " \001(\t\"\357\001\n\016GetOtpResponse\022B\n\006status\030\001 \001(\0162"
  "2.farm.nurture.core.contracts.common.Res"
  "ponseStatus\022J\n\nstatusCode\030\002 \001(\01626.farm.n"
  "urture.core.contracts.common.ResponseSta"
  "tusCode\022\013\n\003otp\030\003 \001(\t\022\026\n\016generationTime\030\004"
  " \001(\003\022\022\n\nexpiryTime\030\005 \001(\003\022\024\n\014mobileNumber"
  "\030\006 \001(\t\"\251\003\n\025AddActorSecretRequest\022J\n\016requ"
  "estHeaders\030\001 \001(\01322.farm.nurture.core.con"
  "tracts.common.RequestHeaders\022<\n\007actorId\030"
  "\002 \001(\0132+.farm.nurture.core.contracts.comm"
  "on.ActorID\022\022\n\nauthSecret\030\003 \001(\t\022B\n\nsecret"
  "Type\030\004 \001(\0162..farm.nurture.core.contracts"
  ".common.SecretType\022\027\n\017expiryInSeconds\030\005 "
  "\001(\005\022\022\n\nmaxRetries\030\006 \001(\005\022\017\n\007appName\030\007 \001(\t"
  "\022\026\n\016countryIsoCode\030\010 \001(\t\022\024\n\014mobileNumber"
  "\030\t \001(\t\022B\n\nclientType\030\n \001(\0162..farm.nurtur"
  "e.core.contracts.common.ClientType\"\250\001\n\026A"
  "ddActorSecretResponse\022B\n\006status\030\001 \001(\01622."
  "farm.nurture.core.contracts.common.Respo"
  "nseStatus\022J\n\nstatusCode\030\002 \001(\01626.farm.nur"
  "ture.core.contracts.common.ResponseStatu"
  "sCode\"\367\003\n\030UpdateActorSecretRequest\022J\n\016re"
  "questHeaders\030\001 \001(\01322.farm.nurture.core.c"
  "ontracts.common.RequestHeaders\022<\n\007actorI"
  "d\030\002 \001(\0132+.farm.nurture.core.contracts.co"
  "mmon.ActorID\022\025\n\roldAuthSecret\030\003 \001(\t\022\025\n\rn"
  "ewAuthSecret\030\004 \001(\t\022\023\n\013accessToken\030\005 \001(\t\022"
  "B\n\nsecretType\030\006 \001(\0162..farm.nurture.core."
  "contracts.common.SecretType\022\027\n\017expiryInS"
  "econds\030\007 \001(\005\022\022\n\nmaxRetries\030\010 \001(\005\022\017\n\007appN"
  "ame\030\t \001(\t\022\024\n\014mobileNumber\030\n \001(\t\022\027\n\017reset"
  "SecretGuid\030\013 \001(\t\022\031\n\021resetSecretExpiry\030\014 "
  "\001(\003\022B\n\nclientType\030\r \001(\0162..farm.nurture.c"
  "ore.contracts.common.ClientType\"\253\001\n\031Upda"
  "teActorSecretResponse\022B\n\006status\030\001 \001(\01622."
  "farm.nurture.core.contracts.common.Respo"
  "nseStatus\022J\n\nstatusCode\030\002 \001(\01626.farm.nur"
  "ture.core.contracts.common.ResponseStatu"
  "sCode\"\240\002\n\025ValidateSecretRequest\022J\n\016reque"
  "stHeaders\030\001 \001(\01322.farm.nurture.core.cont"
  "racts.common.RequestHeaders\022<\n\007actorId\030\002"
  " \001(\0132+.farm.nurture.core.contracts.commo"
  "n.ActorID\022\022\n\nauthSecret\030\003 \001(\t\022B\n\nsecretT"
  "ype\030\004 \001(\0162..farm.nurture.core.contracts."
  "common.SecretType\022\017\n\007appName\030\005 \001(\t\022\024\n\014mo"
  "bileNumber\030\006 \001(\t\"\250\001\n\026ValidateSecretRespo"
  "nse\022B\n\006status\030\001 \001(\01622.farm.nurture.core."
  "contracts.common.ResponseStatus\022J\n\nstatu"
  "sCode\030\002 \001(\01626.farm.nurture.core.contract"
  "s.common.ResponseStatusCode\"\217\002\n\037Generate"
  "SecretResetTokenRequest\022J\n\016requestHeader"
  "s\030\001 \001(\01322.farm.nurture.core.contracts.co"
  "mmon.RequestHeaders\022<\n\007actorId\030\002 \001(\0132+.f"
  "arm.nurture.core.contracts.common.ActorI"
  "D\022\r\n\005email\030\003 \001(\t\022B\n\nsecretType\030\004 \001(\0162..f"
  "arm.nurture.core.contracts.common.Secret"
  "Type\022\017\n\007appName\030\005 \001(\t\"\306\001\n GenerateSecret"
  "ResetTokenResponse\022B\n\006status\030\001 \001(\01622.far"
  "m.nurture.core.contracts.common.Response"
  "Status\022J\n\nstatusCode\030\002 \001(\01626.farm.nurtur"
  "e.core.contracts.common.ResponseStatusCo"
  "de\022\022\n\nexpiryTime\030\003 \001(\003\"\213\002\n\024DeleteSession"
  "Request\022J\n\016requestHeaders\030\001 \001(\01322.farm.n"
  "urture.core.contracts.common.RequestHead"
  "ers\022<\n\007actorId\030\002 \001(\0132+.farm.nurture.core"
  ".contracts.common.ActorID\022\017\n\007appName\030\003 \001"
  "(\t\022B\n\nclientType\030\004 \001(\0162..farm.nurture.co"
  "re.contracts.common.ClientType\022\024\n\014refres"
  "hToken\030\005 \001(\t\"\247\001\n\025DeleteSessionResponse\022B"
  "\n\006status\030\001 \001(\01622.farm.nurture.core.contr"
  "acts.common.ResponseStatus\022J\n\nstatusCode"
  "\030\002 \001(\01626.farm.nurture.core.contracts.com"
  "mon.ResponseStatusCode\"t\n\027ValidateJWTTok"
  "enRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm"
  ".nurture.core.contracts.common.RequestHe"
  "aders\022\r\n\005token\030\002 \001(\t\"\252\001\n\030ValidateJWTToke"
  "nResponse\022B\n\006status\030\001 \001(\01622.farm.nurture"
  ".core.contracts.common.ResponseStatus\022J\n"
  "\nstatusCode\030\002 \001(\01626.farm.nurture.core.co"
  "ntracts.common.ResponseStatusCode\"\266\002\n\031Re"
  "freshAccessTokenRequest\022J\n\016requestHeader"
  "s\030\001 \001(\01322.farm.nurture.core.contracts.co"
  "mmon.RequestHeaders\022<\n\007actorId\030\002 \001(\0132+.f"
  "arm.nurture.core.contracts.common.ActorI"
  "D\022\020\n\010clientId\030\003 \001(\t\022\024\n\014clientSecret\030\004 \001("
  "\t\022\r\n\005scope\030\005 \001(\t\022B\n\nclientType\030\006 \001(\0162..f"
  "arm.nurture.core.contracts.common.Client"
  "Type\022\024\n\014refreshToken\030\007 \001(\t\"\235\002\n\032RefreshAc"
  "cessTokenResponse\022B\n\006status\030\001 \001(\01622.farm"
  ".nurture.core.contracts.common.ResponseS"
  "tatus\022J\n\nstatusCode\030\002 \001(\01626.farm.nurture"
  ".core.contracts.common.ResponseStatusCod"
  "e\022\023\n\013accessToken\030\003 \001(\t\022\021\n\texpiresIn\030\004 \001("
  "\003\022\017\n\007idToken\030\005 \001(\t\022\024\n\014refreshToken\030\006 \001(\t"
  "\022\r\n\005scope\030\007 \001(\t\022\021\n\ttokenType\030\010 \001(\t\"\211\003\n\033G"
  "enerateActionSecretRequest\022J\n\016requestHea"
  "ders\030\001 \001(\01322.farm.nurture.core.contracts"
  ".common.RequestHeaders\022\020\n\010entityId\030\002 \001(\003"
  "\022\022\n\nentityType\030\003 \001(\t\022\023\n\013serviceName\030\004 \001("
  "\t\022\016\n\006action\030\005 \001(\t\022\023\n\013secretDigit\030\006 \001(\005\022\022"
  "\n\nmaxRetries\030\007 \001(\005\022\027\n\017expiryInSeconds\030\010 "
  "\001(\005\022B\n\rreceiverActor\030\t \001(\0132+.farm.nurtur"
  "e.core.contracts.common.ActorID\022M\n\024commu"
  "nicationDetails\030\n \003(\0132/.farm.nurture.pla"
  "tform.auth.CommunicationDetail\"\203\001\n\023Commu"
  "nicationDetail\022\024\n\014templateName\030\001 \001(\t\022V\n\024"
  "communicationChannel\030\002 \001(\01628.farm.nurtur"
  "e.core.contracts.common.CommunicationCha"
  "nnel\"\256\001\n\034GenerateActionSecretResponse\022B\n"
  "\006status\030\001 \001(\01622.farm.nurture.core.contra"
  "cts.common.ResponseStatus\022J\n\nstatusCode\030"
  "\002 \001(\01626.farm.nurture.core.contracts.comm"
  "on.ResponseStatusCode\"\357\001\n\030FetchActionSec"
  "retRequest\022J\n\016requestHeaders\030\001 \001(\01322.far"
  "m.nurture.core.contracts.common.RequestH"
  "eaders\022\020\n\010entityId\030\002 \001(\003\022\022\n\nentityType\030\003"
  " \001(\t\022\023\n\013serviceName\030\004 \001(\t\022\016\n\006action\030\005 \001("
  "\t\022<\n\007actorId\030\006 \001(\0132+.farm.nurture.core.c"
  "ontracts.common.ActorID\"\273\001\n\031FetchActionS"
  "ecretResponse\022B\n\006status\030\001 \001(\01622.farm.nur"
  "ture.core.contracts.common.ResponseStatu"
  "s\022J\n\nstatusCode\030\002 \001(\01626.farm.nurture.cor"
  "e.contracts.common.ResponseStatusCode\022\016\n"
  "\006secret\030\003 \001(\t\"\304\001\n\033ValidateActionSecretRe"
  "quest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nur"
  "ture.core.contracts.common.RequestHeader"
  "s\022\020\n\010entityId\030\002 \001(\003\022\022\n\nentityType\030\003 \001(\t\022"
  "\023\n\013serviceName\030\004 \001(\t\022\016\n\006action\030\005 \001(\t\022\016\n\006"
  "secret\030\006 \001(\t\"\256\001\n\034ValidateActionSecretRes"
  "ponse\022B\n\006status\030\001 \001(\01622.farm.nurture.cor"
  "e.contracts.common.ResponseStatus\022J\n\nsta"
  "tusCode\030\002 \001(\01626.farm.nurture.core.contra"
  "cts.common.ResponseStatusCode2\341\020\n\013AuthSe"
  "rvice\022w\n\022ExecuteGenerateOtp\022..farm.nurtu"
  "re.platform.auth.GenerateOtpRequest\032/.fa"
  "rm.nurture.platform.auth.GenerateOtpResp"
  "onse\"\000\022q\n\020ExecuteResendOtp\022,.farm.nurtur"
  "e.platform.auth.ResendOtpRequest\032-.farm."
  "nurture.platform.auth.ResendOtpResponse\""
  "\000\022w\n\022ExecuteValidateOtp\022..farm.nurture.p"
  "latform.auth.ValidateOtpRequest\032/.farm.n"
  "urture.platform.auth.ValidateOtpResponse"
  "\"\000\022z\n\023ExecuteGetAuthToken\022/.farm.nurture"
  ".platform.auth.GetAuthTokenRequest\0320.far"
  "m.nurture.platform.auth.GetAuthTokenResp"
  "onse\"\000\022\206\001\n\027ExecuteOldTokenExchange\0223.far"
  "m.nurture.platform.auth.OldTokenExchange"
  "Request\0324.farm.nurture.platform.auth.Old"
  "TokenExchangeResponse\"\000\022h\n\rExecuteGetOtp"
  "\022).farm.nurture.platform.auth.GetOtpRequ"
  "est\032*.farm.nurture.platform.auth.GetOtpR"
  "esponse\"\000\022\200\001\n\025ExecuteAddActorSecret\0221.fa"
  "rm.nurture.platform.auth.AddActorSecretR"
  "equest\0322.farm.nurture.platform.auth.AddA"
  "ctorSecretResponse\"\000\022\211\001\n\030ExecuteUpdateAc"
  "torSecret\0224.farm.nurture.platform.auth.U"
  "pdateActorSecretRequest\0325.farm.nurture.p"
  "latform.auth.UpdateActorSecretResponse\"\000"
  "\022\200\001\n\025ExecuteValidateSecret\0221.farm.nurtur"
  "e.platform.auth.ValidateSecretRequest\0322."
  "farm.nurture.platform.auth.ValidateSecre"
  "tResponse\"\000\022\236\001\n\037ExecuteGenerateSecretRes"
  "etToken\022;.farm.nurture.platform.auth.Gen"
  "erateSecretResetTokenRequest\032<.farm.nurt"
  "ure.platform.auth.GenerateSecretResetTok"
  "enResponse\"\000\022}\n\024ExecuteDeleteSession\0220.f"
  "arm.nurture.platform.auth.DeleteSessionR"
  "equest\0321.farm.nurture.platform.auth.Dele"
  "teSessionResponse\"\000\022\206\001\n\027ExecuteValidateJ"
  "WTToken\0223.farm.nurture.platform.auth.Val"
  "idateJWTTokenRequest\0324.farm.nurture.plat"
  "form.auth.ValidateJWTTokenResponse\"\000\022\214\001\n"
  "\031ExecuteRefreshAccessToken\0225.farm.nurtur"
  "e.platform.auth.RefreshAccessTokenReques"
  "t\0326.farm.nurture.platform.auth.RefreshAc"
  "cessTokenResponse\"\000\022\222\001\n\033ExecuteGenerateA"
  "ctionSecret\0227.farm.nurture.platform.auth"
  ".GenerateActionSecretRequest\0328.farm.nurt"
  "ure.platform.auth.GenerateActionSecretRe"
  "sponse\"\000\022\211\001\n\030ExecuteFetchActionSecret\0224."
  "farm.nurture.platform.auth.FetchActionSe"
  "cretRequest\0325.farm.nurture.platform.auth"
  ".FetchActionSecretResponse\"\000\022\222\001\n\033Execute"
  "ValidateActionSecret\0227.farm.nurture.plat"
  "form.auth.ValidateActionSecretRequest\0328."
  "farm.nurture.platform.auth.ValidateActio"
  "nSecretResponse\"\000BU\n\037farm.nurture.auth.s"
  "ervice.protoP\001Z0code.nurture.farm/Platfo"
  "rm/Contracts/AuthServiceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AuthService_2fauth_5fservice_2eproto_deps[3] = {
  &::descriptor_table_Common_2fentities_2eproto,
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_Common_2fheaders_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AuthService_2fauth_5fservice_2eproto_sccs[33] = {
  &scc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_AddActorSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_DeleteSessionResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GenerateSecretResetTokenResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_UpdateActorSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateJWTTokenResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateOtpResponse_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto.base,
  &scc_info_ValidateSecretResponse_AuthService_2fauth_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AuthService_2fauth_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthService_2fauth_5fservice_2eproto = {
  false, false, descriptor_table_protodef_AuthService_2fauth_5fservice_2eproto, "AuthService/auth_service.proto", 10952,
  &descriptor_table_AuthService_2fauth_5fservice_2eproto_once, descriptor_table_AuthService_2fauth_5fservice_2eproto_sccs, descriptor_table_AuthService_2fauth_5fservice_2eproto_deps, 33, 3,
  schemas, file_default_instances, TableStruct_AuthService_2fauth_5fservice_2eproto::offsets,
  file_level_metadata_AuthService_2fauth_5fservice_2eproto, 33, file_level_enum_descriptors_AuthService_2fauth_5fservice_2eproto, file_level_service_descriptors_AuthService_2fauth_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AuthService_2fauth_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AuthService_2fauth_5fservice_2eproto)), true);
namespace farm {
namespace nurture {
namespace platform {
namespace auth {

// ===================================================================

class GenerateOtpRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GenerateOtpRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const GenerateOtpRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GenerateOtpRequest::_Internal::requestheaders(const GenerateOtpRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
GenerateOtpRequest::_Internal::actorid(const GenerateOtpRequest* msg) {
  return *msg->actorid_;
}
void GenerateOtpRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void GenerateOtpRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
GenerateOtpRequest::GenerateOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateOtpRequest)
}
GenerateOtpRequest::GenerateOtpRequest(const GenerateOtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  countryisocode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countryisocode().empty()) {
    countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countryisocode(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&expiryinseconds_, &from.expiryinseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&communicationchannel_) -
    reinterpret_cast<char*>(&expiryinseconds_)) + sizeof(communicationchannel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateOtpRequest)
}

void GenerateOtpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryisocode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&communicationchannel_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(communicationchannel_));
}

GenerateOtpRequest::~GenerateOtpRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateOtpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateOtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryisocode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void GenerateOtpRequest::ArenaDtor(void* object) {
  GenerateOtpRequest* _this = reinterpret_cast< GenerateOtpRequest* >(object);
  (void)_this;
}
void GenerateOtpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateOtpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateOtpRequest& GenerateOtpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateOtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  countryisocode_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&expiryinseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&communicationchannel_) -
      reinterpret_cast<char*>(&expiryinseconds_)) + sizeof(communicationchannel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateOtpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateOtpRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expiryInSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiryinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 otpDigit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          otpdigit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxRetries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryIsoCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_countryisocode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_communicationchannel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateOtpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateOtpRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // int32 expiryInSeconds = 4;
  if (this->expiryinseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_expiryinseconds(), target);
  }

  // int32 otpDigit = 5;
  if (this->otpdigit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_otpdigit(), target);
  }

  // int32 maxRetries = 6;
  if (this->maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maxretries(), target);
  }

  // string mobileNumber = 7;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mobilenumber(), target);
  }

  // string countryIsoCode = 8;
  if (this->countryisocode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countryisocode().data(), static_cast<int>(this->_internal_countryisocode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_countryisocode(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 9;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_clienttype(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 10;
  if (this->communicationchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_communicationchannel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateOtpRequest)
  return target;
}

size_t GenerateOtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateOtpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 7;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // string countryIsoCode = 8;
  if (this->countryisocode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countryisocode());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // int32 expiryInSeconds = 4;
  if (this->expiryinseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiryinseconds());
  }

  // int32 otpDigit = 5;
  if (this->otpdigit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_otpdigit());
  }

  // int32 maxRetries = 6;
  if (this->maxretries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxretries());
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 9;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 10;
  if (this->communicationchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_communicationchannel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateOtpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateOtpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateOtpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateOtpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateOtpRequest)
    MergeFrom(*source);
  }
}

void GenerateOtpRequest::MergeFrom(const GenerateOtpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.countryisocode().size() > 0) {
    _internal_set_countryisocode(from._internal_countryisocode());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.expiryinseconds() != 0) {
    _internal_set_expiryinseconds(from._internal_expiryinseconds());
  }
  if (from.otpdigit() != 0) {
    _internal_set_otpdigit(from._internal_otpdigit());
  }
  if (from.maxretries() != 0) {
    _internal_set_maxretries(from._internal_maxretries());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
  if (from.communicationchannel() != 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
}

void GenerateOtpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateOtpRequest::CopyFrom(const GenerateOtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateOtpRequest::IsInitialized() const {
  return true;
}

void GenerateOtpRequest::InternalSwap(GenerateOtpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countryisocode_.Swap(&other->countryisocode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateOtpRequest, communicationchannel_)
      + sizeof(GenerateOtpRequest::communicationchannel_)
      - PROTOBUF_FIELD_OFFSET(GenerateOtpRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateOtpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateOtpResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const GenerateOtpResponse* msg);
};

const ::farm::nurture::core::contracts::common::ActorID&
GenerateOtpResponse::_Internal::actorid(const GenerateOtpResponse* msg) {
  return *msg->actorid_;
}
void GenerateOtpResponse::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
GenerateOtpResponse::GenerateOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateOtpResponse)
}
GenerateOtpResponse::GenerateOtpResponse(const GenerateOtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expiry_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateOtpResponse)
}

void GenerateOtpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actorid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&actorid_)) + sizeof(expiry_));
}

GenerateOtpResponse::~GenerateOtpResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateOtpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateOtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actorid_;
}

void GenerateOtpResponse::ArenaDtor(void* object) {
  GenerateOtpResponse* _this = reinterpret_cast< GenerateOtpResponse* >(object);
  (void)_this;
}
void GenerateOtpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateOtpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateOtpResponse& GenerateOtpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateOtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateOtpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateOtpResponse.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateOtpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actorid(this), target, stream);
  }

  // string appName = 4;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateOtpResponse.appName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_appname(), target);
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expiry(), target);
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateOtpResponse)
  return target;
}

size_t GenerateOtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateOtpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 4;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateOtpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateOtpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateOtpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateOtpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateOtpResponse)
    MergeFrom(*source);
  }
}

void GenerateOtpResponse::MergeFrom(const GenerateOtpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void GenerateOtpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateOtpResponse::CopyFrom(const GenerateOtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateOtpResponse::IsInitialized() const {
  return true;
}

void GenerateOtpResponse::InternalSwap(GenerateOtpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateOtpResponse, expiry_)
      + sizeof(GenerateOtpResponse::expiry_)
      - PROTOBUF_FIELD_OFFSET(GenerateOtpResponse, actorid_)>(
          reinterpret_cast<char*>(&actorid_),
          reinterpret_cast<char*>(&other->actorid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateOtpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResendOtpRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const ResendOtpRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const ResendOtpRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
ResendOtpRequest::_Internal::requestheaders(const ResendOtpRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
ResendOtpRequest::_Internal::actorid(const ResendOtpRequest* msg) {
  return *msg->actorid_;
}
void ResendOtpRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void ResendOtpRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
ResendOtpRequest::ResendOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ResendOtpRequest)
}
ResendOtpRequest::ResendOtpRequest(const ResendOtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&clienttype_, &from.clienttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&communicationchannel_) -
    reinterpret_cast<char*>(&clienttype_)) + sizeof(communicationchannel_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ResendOtpRequest)
}

void ResendOtpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&communicationchannel_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(communicationchannel_));
}

ResendOtpRequest::~ResendOtpRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ResendOtpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResendOtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void ResendOtpRequest::ArenaDtor(void* object) {
  ResendOtpRequest* _this = reinterpret_cast< ResendOtpRequest* >(object);
  (void)_this;
}
void ResendOtpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResendOtpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResendOtpRequest& ResendOtpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResendOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResendOtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ResendOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&clienttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&communicationchannel_) -
      reinterpret_cast<char*>(&clienttype_)) + sizeof(communicationchannel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendOtpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ResendOtpRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ResendOtpRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_communicationchannel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResendOtpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ResendOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ResendOtpRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // string mobileNumber = 4;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ResendOtpRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mobilenumber(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 5;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_clienttype(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 6;
  if (this->communicationchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_communicationchannel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ResendOtpRequest)
  return target;
}

size_t ResendOtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ResendOtpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 4;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 5;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 6;
  if (this->communicationchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_communicationchannel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResendOtpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ResendOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResendOtpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResendOtpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ResendOtpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ResendOtpRequest)
    MergeFrom(*source);
  }
}

void ResendOtpRequest::MergeFrom(const ResendOtpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ResendOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
  if (from.communicationchannel() != 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
}

void ResendOtpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ResendOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResendOtpRequest::CopyFrom(const ResendOtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ResendOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendOtpRequest::IsInitialized() const {
  return true;
}

void ResendOtpRequest::InternalSwap(ResendOtpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResendOtpRequest, communicationchannel_)
      + sizeof(ResendOtpRequest::communicationchannel_)
      - PROTOBUF_FIELD_OFFSET(ResendOtpRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendOtpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResendOtpResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const ResendOtpResponse* msg);
};

const ::farm::nurture::core::contracts::common::ActorID&
ResendOtpResponse::_Internal::actorid(const ResendOtpResponse* msg) {
  return *msg->actorid_;
}
void ResendOtpResponse::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
ResendOtpResponse::ResendOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ResendOtpResponse)
}
ResendOtpResponse::ResendOtpResponse(const ResendOtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expiry_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ResendOtpResponse)
}

void ResendOtpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actorid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&actorid_)) + sizeof(expiry_));
}

ResendOtpResponse::~ResendOtpResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ResendOtpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResendOtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actorid_;
}

void ResendOtpResponse::ArenaDtor(void* object) {
  ResendOtpResponse* _this = reinterpret_cast< ResendOtpResponse* >(object);
  (void)_this;
}
void ResendOtpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResendOtpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResendOtpResponse& ResendOtpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResendOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResendOtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ResendOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendOtpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ResendOtpResponse.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ResendOtpResponse.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResendOtpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ResendOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actorid(this), target, stream);
  }

  // string appName = 4;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ResendOtpResponse.appName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_appname(), target);
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expiry(), target);
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ResendOtpResponse.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ResendOtpResponse)
  return target;
}

size_t ResendOtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ResendOtpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 4;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResendOtpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ResendOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResendOtpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResendOtpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ResendOtpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ResendOtpResponse)
    MergeFrom(*source);
  }
}

void ResendOtpResponse::MergeFrom(const ResendOtpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ResendOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void ResendOtpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ResendOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResendOtpResponse::CopyFrom(const ResendOtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ResendOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendOtpResponse::IsInitialized() const {
  return true;
}

void ResendOtpResponse::InternalSwap(ResendOtpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResendOtpResponse, expiry_)
      + sizeof(ResendOtpResponse::expiry_)
      - PROTOBUF_FIELD_OFFSET(ResendOtpResponse, actorid_)>(
          reinterpret_cast<char*>(&actorid_),
          reinterpret_cast<char*>(&other->actorid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendOtpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateOtpRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const ValidateOtpRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const ValidateOtpRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
ValidateOtpRequest::_Internal::requestheaders(const ValidateOtpRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
ValidateOtpRequest::_Internal::actorid(const ValidateOtpRequest* msg) {
  return *msg->actorid_;
}
void ValidateOtpRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void ValidateOtpRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
ValidateOtpRequest::ValidateOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateOtpRequest)
}
ValidateOtpRequest::ValidateOtpRequest(const ValidateOtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_otp().empty()) {
    otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateOtpRequest)
}

void ValidateOtpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&actorid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(actorid_));
}

ValidateOtpRequest::~ValidateOtpRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateOtpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateOtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void ValidateOtpRequest::ArenaDtor(void* object) {
  ValidateOtpRequest* _this = reinterpret_cast< ValidateOtpRequest* >(object);
  (void)_this;
}
void ValidateOtpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateOtpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateOtpRequest& ValidateOtpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateOtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  otp_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateOtpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateOtpRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string otp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_otp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateOtpRequest.otp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateOtpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateOtpRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // string otp = 4;
  if (this->otp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otp().data(), static_cast<int>(this->_internal_otp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateOtpRequest.otp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_otp(), target);
  }

  // string mobileNumber = 5;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateOtpRequest)
  return target;
}

size_t ValidateOtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateOtpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string otp = 4;
  if (this->otp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otp());
  }

  // string mobileNumber = 5;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateOtpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateOtpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateOtpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateOtpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateOtpRequest)
    MergeFrom(*source);
  }
}

void ValidateOtpRequest::MergeFrom(const ValidateOtpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.otp().size() > 0) {
    _internal_set_otp(from._internal_otp());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
}

void ValidateOtpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateOtpRequest::CopyFrom(const ValidateOtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateOtpRequest::IsInitialized() const {
  return true;
}

void ValidateOtpRequest::InternalSwap(ValidateOtpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  otp_.Swap(&other->otp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateOtpRequest, actorid_)
      + sizeof(ValidateOtpRequest::actorid_)
      - PROTOBUF_FIELD_OFFSET(ValidateOtpRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateOtpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateOtpResponse::_Internal {
 public:
};

ValidateOtpResponse::ValidateOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateOtpResponse)
}
ValidateOtpResponse::ValidateOtpResponse(const ValidateOtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateOtpResponse)
}

void ValidateOtpResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

ValidateOtpResponse::~ValidateOtpResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateOtpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateOtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateOtpResponse::ArenaDtor(void* object) {
  ValidateOtpResponse* _this = reinterpret_cast< ValidateOtpResponse* >(object);
  (void)_this;
}
void ValidateOtpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateOtpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateOtpResponse& ValidateOtpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateOtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateOtpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateOtpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateOtpResponse)
  return target;
}

size_t ValidateOtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateOtpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateOtpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateOtpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateOtpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateOtpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateOtpResponse)
    MergeFrom(*source);
  }
}

void ValidateOtpResponse::MergeFrom(const ValidateOtpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void ValidateOtpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateOtpResponse::CopyFrom(const ValidateOtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateOtpResponse::IsInitialized() const {
  return true;
}

void ValidateOtpResponse::InternalSwap(ValidateOtpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateOtpResponse, statuscode_)
      + sizeof(ValidateOtpResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(ValidateOtpResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateOtpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAuthTokenRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetAuthTokenRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const GetAuthTokenRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetAuthTokenRequest::_Internal::requestheaders(const GetAuthTokenRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
GetAuthTokenRequest::_Internal::actorid(const GetAuthTokenRequest* msg) {
  return *msg->actorid_;
}
void GetAuthTokenRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void GetAuthTokenRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
void GetAuthTokenRequest::clear_claims() {
  claims_.Clear();
}
GetAuthTokenRequest::GetAuthTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  claims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GetAuthTokenRequest)
}
GetAuthTokenRequest::GetAuthTokenRequest(const GetAuthTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      claims_(from.claims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_otp().empty()) {
    otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp(), 
      GetArena());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientsecret().empty()) {
    clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientsecret(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authsecret().empty()) {
    authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authsecret(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&secrettype_, &from.secrettype_,
    static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
    reinterpret_cast<char*>(&secrettype_)) + sizeof(clienttype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GetAuthTokenRequest)
}

void GetAuthTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(clienttype_));
}

GetAuthTokenRequest::~GetAuthTokenRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GetAuthTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAuthTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void GetAuthTokenRequest::ArenaDtor(void* object) {
  GetAuthTokenRequest* _this = reinterpret_cast< GetAuthTokenRequest* >(object);
  (void)_this;
}
void GetAuthTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAuthTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthTokenRequest& GetAuthTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAuthTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claims_.Clear();
  appname_.ClearToEmpty();
  otp_.ClearToEmpty();
  clientid_.ClearToEmpty();
  clientsecret_.ClearToEmpty();
  scope_.ClearToEmpty();
  authsecret_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&secrettype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&secrettype_)) + sizeof(clienttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAuthTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string otp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_otp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.otp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientSecret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clientsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string authSecret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_authsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenRequest.authSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SecretType secretType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secrettype(static_cast<::farm::nurture::core::contracts::common::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs claims = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_claims(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // string otp = 4;
  if (this->otp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otp().data(), static_cast<int>(this->_internal_otp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.otp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_otp(), target);
  }

  // string clientId = 5;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clientid(), target);
  }

  // string clientSecret = 6;
  if (this->clientsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientsecret().data(), static_cast<int>(this->_internal_clientsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clientsecret(), target);
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.scope");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scope(), target);
  }

  // string authSecret = 9;
  if (this->authsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authsecret().data(), static_cast<int>(this->_internal_authsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenRequest.authSecret");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_authsecret(), target);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 10;
  if (this->secrettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_secrettype(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_clienttype(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs claims = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_claims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_claims(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GetAuthTokenRequest)
  return target;
}

size_t GetAuthTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs claims = 12;
  total_size += 1UL * this->_internal_claims_size();
  for (const auto& msg : this->claims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string otp = 4;
  if (this->otp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otp());
  }

  // string clientId = 5;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string clientSecret = 6;
  if (this->clientsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // string authSecret = 9;
  if (this->authsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authsecret());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 10;
  if (this->secrettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secrettype());
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GetAuthTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GetAuthTokenRequest)
    MergeFrom(*source);
  }
}

void GetAuthTokenRequest::MergeFrom(const GetAuthTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  claims_.MergeFrom(from.claims_);
  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.otp().size() > 0) {
    _internal_set_otp(from._internal_otp());
  }
  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.clientsecret().size() > 0) {
    _internal_set_clientsecret(from._internal_clientsecret());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.authsecret().size() > 0) {
    _internal_set_authsecret(from._internal_authsecret());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.secrettype() != 0) {
    _internal_set_secrettype(from._internal_secrettype());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
}

void GetAuthTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthTokenRequest::CopyFrom(const GetAuthTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GetAuthTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthTokenRequest::IsInitialized() const {
  return true;
}

void GetAuthTokenRequest::InternalSwap(GetAuthTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  claims_.InternalSwap(&other->claims_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  otp_.Swap(&other->otp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientsecret_.Swap(&other->clientsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authsecret_.Swap(&other->authsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAuthTokenRequest, clienttype_)
      + sizeof(GetAuthTokenRequest::clienttype_)
      - PROTOBUF_FIELD_OFFSET(GetAuthTokenRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAuthTokenResponse::_Internal {
 public:
};

GetAuthTokenResponse::GetAuthTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GetAuthTokenResponse)
}
GetAuthTokenResponse::GetAuthTokenResponse(const GetAuthTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArena());
  }
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idtoken().empty()) {
    idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idtoken(), 
      GetArena());
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refreshtoken(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokentype().empty()) {
    tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokentype(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GetAuthTokenResponse)
}

void GetAuthTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
}

GetAuthTokenResponse::~GetAuthTokenResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GetAuthTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAuthTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAuthTokenResponse::ArenaDtor(void* object) {
  GetAuthTokenResponse* _this = reinterpret_cast< GetAuthTokenResponse* >(object);
  (void)_this;
}
void GetAuthTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAuthTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthTokenResponse& GetAuthTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAuthTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesstoken_.ClearToEmpty();
  idtoken_.ClearToEmpty();
  refreshtoken_.ClearToEmpty();
  scope_.ClearToEmpty();
  tokentype_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAuthTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string accessToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenResponse.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresIn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiresin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_idtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenResponse.idToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refreshToken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenResponse.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tokentype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetAuthTokenResponse.tokenType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_accesstoken(), target);
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiresin(), target);
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idtoken().data(), static_cast<int>(this->_internal_idtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenResponse.idToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_idtoken(), target);
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_refreshtoken(), target);
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenResponse.scope");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scope(), target);
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokentype().data(), static_cast<int>(this->_internal_tokentype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetAuthTokenResponse.tokenType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tokentype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GetAuthTokenResponse)
  return target;
}

size_t GetAuthTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idtoken());
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokentype());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GetAuthTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GetAuthTokenResponse)
    MergeFrom(*source);
  }
}

void GetAuthTokenResponse::MergeFrom(const GetAuthTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesstoken().size() > 0) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (from.idtoken().size() > 0) {
    _internal_set_idtoken(from._internal_idtoken());
  }
  if (from.refreshtoken().size() > 0) {
    _internal_set_refreshtoken(from._internal_refreshtoken());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.tokentype().size() > 0) {
    _internal_set_tokentype(from._internal_tokentype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expiresin() != 0) {
    _internal_set_expiresin(from._internal_expiresin());
  }
}

void GetAuthTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthTokenResponse::CopyFrom(const GetAuthTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GetAuthTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthTokenResponse::IsInitialized() const {
  return true;
}

void GetAuthTokenResponse::InternalSwap(GetAuthTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idtoken_.Swap(&other->idtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tokentype_.Swap(&other->tokentype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAuthTokenResponse, expiresin_)
      + sizeof(GetAuthTokenResponse::expiresin_)
      - PROTOBUF_FIELD_OFFSET(GetAuthTokenResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OldTokenExchangeRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const OldTokenExchangeRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const OldTokenExchangeRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
OldTokenExchangeRequest::_Internal::requestheaders(const OldTokenExchangeRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
OldTokenExchangeRequest::_Internal::actorid(const OldTokenExchangeRequest* msg) {
  return *msg->actorid_;
}
void OldTokenExchangeRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void OldTokenExchangeRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
OldTokenExchangeRequest::OldTokenExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.OldTokenExchangeRequest)
}
OldTokenExchangeRequest::OldTokenExchangeRequest(const OldTokenExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientsecret().empty()) {
    clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientsecret(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  clienttype_ = from.clienttype_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.OldTokenExchangeRequest)
}

void OldTokenExchangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(clienttype_));
}

OldTokenExchangeRequest::~OldTokenExchangeRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.OldTokenExchangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OldTokenExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void OldTokenExchangeRequest::ArenaDtor(void* object) {
  OldTokenExchangeRequest* _this = reinterpret_cast< OldTokenExchangeRequest* >(object);
  (void)_this;
}
void OldTokenExchangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OldTokenExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OldTokenExchangeRequest& OldTokenExchangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OldTokenExchangeRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OldTokenExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  clientid_.ClearToEmpty();
  clientsecret_.ClearToEmpty();
  scope_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  clienttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OldTokenExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeRequest.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientSecret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clientsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeRequest.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OldTokenExchangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 4;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeRequest.appName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_appname(), target);
  }

  // string clientId = 5;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clientid(), target);
  }

  // string clientSecret = 6;
  if (this->clientsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientsecret().data(), static_cast<int>(this->_internal_clientsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clientsecret(), target);
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeRequest.scope");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scope(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_clienttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.OldTokenExchangeRequest)
  return target;
}

size_t OldTokenExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 4;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string clientId = 5;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string clientSecret = 6;
  if (this->clientsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OldTokenExchangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OldTokenExchangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OldTokenExchangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.OldTokenExchangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.OldTokenExchangeRequest)
    MergeFrom(*source);
  }
}

void OldTokenExchangeRequest::MergeFrom(const OldTokenExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.clientsecret().size() > 0) {
    _internal_set_clientsecret(from._internal_clientsecret());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
}

void OldTokenExchangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldTokenExchangeRequest::CopyFrom(const OldTokenExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.OldTokenExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldTokenExchangeRequest::IsInitialized() const {
  return true;
}

void OldTokenExchangeRequest::InternalSwap(OldTokenExchangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientsecret_.Swap(&other->clientsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OldTokenExchangeRequest, clienttype_)
      + sizeof(OldTokenExchangeRequest::clienttype_)
      - PROTOBUF_FIELD_OFFSET(OldTokenExchangeRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OldTokenExchangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OldTokenExchangeResponse::_Internal {
 public:
};

OldTokenExchangeResponse::OldTokenExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.OldTokenExchangeResponse)
}
OldTokenExchangeResponse::OldTokenExchangeResponse(const OldTokenExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArena());
  }
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idtoken().empty()) {
    idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idtoken(), 
      GetArena());
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refreshtoken(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokentype().empty()) {
    tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokentype(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.OldTokenExchangeResponse)
}

void OldTokenExchangeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto.base);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
}

OldTokenExchangeResponse::~OldTokenExchangeResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.OldTokenExchangeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OldTokenExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OldTokenExchangeResponse::ArenaDtor(void* object) {
  OldTokenExchangeResponse* _this = reinterpret_cast< OldTokenExchangeResponse* >(object);
  (void)_this;
}
void OldTokenExchangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OldTokenExchangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OldTokenExchangeResponse& OldTokenExchangeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OldTokenExchangeResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OldTokenExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesstoken_.ClearToEmpty();
  idtoken_.ClearToEmpty();
  refreshtoken_.ClearToEmpty();
  scope_.ClearToEmpty();
  tokentype_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OldTokenExchangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string accessToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresIn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiresin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_idtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeResponse.idToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refreshToken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeResponse.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tokentype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OldTokenExchangeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_accesstoken(), target);
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiresin(), target);
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idtoken().data(), static_cast<int>(this->_internal_idtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeResponse.idToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_idtoken(), target);
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_refreshtoken(), target);
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeResponse.scope");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scope(), target);
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokentype().data(), static_cast<int>(this->_internal_tokentype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tokentype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.OldTokenExchangeResponse)
  return target;
}

size_t OldTokenExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idtoken());
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokentype());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OldTokenExchangeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OldTokenExchangeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OldTokenExchangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.OldTokenExchangeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.OldTokenExchangeResponse)
    MergeFrom(*source);
  }
}

void OldTokenExchangeResponse::MergeFrom(const OldTokenExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesstoken().size() > 0) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (from.idtoken().size() > 0) {
    _internal_set_idtoken(from._internal_idtoken());
  }
  if (from.refreshtoken().size() > 0) {
    _internal_set_refreshtoken(from._internal_refreshtoken());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.tokentype().size() > 0) {
    _internal_set_tokentype(from._internal_tokentype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expiresin() != 0) {
    _internal_set_expiresin(from._internal_expiresin());
  }
}

void OldTokenExchangeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldTokenExchangeResponse::CopyFrom(const OldTokenExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.OldTokenExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldTokenExchangeResponse::IsInitialized() const {
  return true;
}

void OldTokenExchangeResponse::InternalSwap(OldTokenExchangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idtoken_.Swap(&other->idtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tokentype_.Swap(&other->tokentype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OldTokenExchangeResponse, expiresin_)
      + sizeof(OldTokenExchangeResponse::expiresin_)
      - PROTOBUF_FIELD_OFFSET(OldTokenExchangeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OldTokenExchangeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetOtpRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetOtpRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const GetOtpRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetOtpRequest::_Internal::requestheaders(const GetOtpRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
GetOtpRequest::_Internal::actorid(const GetOtpRequest* msg) {
  return *msg->actorid_;
}
void GetOtpRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void GetOtpRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
GetOtpRequest::GetOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GetOtpRequest)
}
GetOtpRequest::GetOtpRequest(const GetOtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GetOtpRequest)
}

void GetOtpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&actorid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(actorid_));
}

GetOtpRequest::~GetOtpRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GetOtpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void GetOtpRequest::ArenaDtor(void* object) {
  GetOtpRequest* _this = reinterpret_cast< GetOtpRequest* >(object);
  (void)_this;
}
void GetOtpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOtpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOtpRequest& GetOtpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOtpRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetOtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GetOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOtpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetOtpRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetOtpRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOtpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GetOtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetOtpRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // string mobileNumber = 4;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetOtpRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GetOtpRequest)
  return target;
}

size_t GetOtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GetOtpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 4;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOtpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GetOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOtpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOtpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GetOtpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GetOtpRequest)
    MergeFrom(*source);
  }
}

void GetOtpRequest::MergeFrom(const GetOtpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GetOtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
}

void GetOtpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GetOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOtpRequest::CopyFrom(const GetOtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GetOtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOtpRequest::IsInitialized() const {
  return true;
}

void GetOtpRequest::InternalSwap(GetOtpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOtpRequest, actorid_)
      + sizeof(GetOtpRequest::actorid_)
      - PROTOBUF_FIELD_OFFSET(GetOtpRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOtpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetOtpResponse::_Internal {
 public:
};

GetOtpResponse::GetOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GetOtpResponse)
}
GetOtpResponse::GetOtpResponse(const GetOtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_otp().empty()) {
    otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expirytime_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GetOtpResponse)
}

void GetOtpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expirytime_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
}

GetOtpResponse::~GetOtpResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GetOtpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  otp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOtpResponse::ArenaDtor(void* object) {
  GetOtpResponse* _this = reinterpret_cast< GetOtpResponse* >(object);
  (void)_this;
}
void GetOtpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOtpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOtpResponse& GetOtpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOtpResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetOtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GetOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  otp_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expirytime_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOtpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string otp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_otp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetOtpResponse.otp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 generationTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          generationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiryTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expirytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GetOtpResponse.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOtpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GetOtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // string otp = 3;
  if (this->otp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otp().data(), static_cast<int>(this->_internal_otp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetOtpResponse.otp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otp(), target);
  }

  // int64 generationTime = 4;
  if (this->generationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_generationtime(), target);
  }

  // int64 expiryTime = 5;
  if (this->expirytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expirytime(), target);
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GetOtpResponse.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GetOtpResponse)
  return target;
}

size_t GetOtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GetOtpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string otp = 3;
  if (this->otp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otp());
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 generationTime = 4;
  if (this->generationtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_generationtime());
  }

  // int64 expiryTime = 5;
  if (this->expirytime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expirytime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOtpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GetOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOtpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOtpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GetOtpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GetOtpResponse)
    MergeFrom(*source);
  }
}

void GetOtpResponse::MergeFrom(const GetOtpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GetOtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.otp().size() > 0) {
    _internal_set_otp(from._internal_otp());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.generationtime() != 0) {
    _internal_set_generationtime(from._internal_generationtime());
  }
  if (from.expirytime() != 0) {
    _internal_set_expirytime(from._internal_expirytime());
  }
}

void GetOtpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GetOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOtpResponse::CopyFrom(const GetOtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GetOtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOtpResponse::IsInitialized() const {
  return true;
}

void GetOtpResponse::InternalSwap(GetOtpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  otp_.Swap(&other->otp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOtpResponse, expirytime_)
      + sizeof(GetOtpResponse::expirytime_)
      - PROTOBUF_FIELD_OFFSET(GetOtpResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOtpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddActorSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddActorSecretRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const AddActorSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddActorSecretRequest::_Internal::requestheaders(const AddActorSecretRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
AddActorSecretRequest::_Internal::actorid(const AddActorSecretRequest* msg) {
  return *msg->actorid_;
}
void AddActorSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void AddActorSecretRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
AddActorSecretRequest::AddActorSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.AddActorSecretRequest)
}
AddActorSecretRequest::AddActorSecretRequest(const AddActorSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authsecret().empty()) {
    authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authsecret(), 
      GetArena());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  countryisocode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countryisocode().empty()) {
    countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countryisocode(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&secrettype_, &from.secrettype_,
    static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
    reinterpret_cast<char*>(&secrettype_)) + sizeof(clienttype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.AddActorSecretRequest)
}

void AddActorSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryisocode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(clienttype_));
}

AddActorSecretRequest::~AddActorSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.AddActorSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddActorSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryisocode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void AddActorSecretRequest::ArenaDtor(void* object) {
  AddActorSecretRequest* _this = reinterpret_cast< AddActorSecretRequest* >(object);
  (void)_this;
}
void AddActorSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddActorSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddActorSecretRequest& AddActorSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddActorSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.AddActorSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authsecret_.ClearToEmpty();
  appname_.ClearToEmpty();
  countryisocode_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&secrettype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&secrettype_)) + sizeof(clienttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddActorSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string authSecret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_authsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.AddActorSecretRequest.authSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SecretType secretType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secrettype(static_cast<::farm::nurture::core::contracts::common::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // int32 expiryInSeconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiryinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxRetries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.AddActorSecretRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryIsoCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_countryisocode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddActorSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.AddActorSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string authSecret = 3;
  if (this->authsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authsecret().data(), static_cast<int>(this->_internal_authsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.AddActorSecretRequest.authSecret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_authsecret(), target);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_secrettype(), target);
  }

  // int32 expiryInSeconds = 5;
  if (this->expiryinseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_expiryinseconds(), target);
  }

  // int32 maxRetries = 6;
  if (this->maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maxretries(), target);
  }

  // string appName = 7;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.AddActorSecretRequest.appName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_appname(), target);
  }

  // string countryIsoCode = 8;
  if (this->countryisocode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countryisocode().data(), static_cast<int>(this->_internal_countryisocode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_countryisocode(), target);
  }

  // string mobileNumber = 9;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_mobilenumber(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 10;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_clienttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.AddActorSecretRequest)
  return target;
}

size_t AddActorSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.AddActorSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authSecret = 3;
  if (this->authsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authsecret());
  }

  // string appName = 7;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string countryIsoCode = 8;
  if (this->countryisocode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countryisocode());
  }

  // string mobileNumber = 9;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secrettype());
  }

  // int32 expiryInSeconds = 5;
  if (this->expiryinseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiryinseconds());
  }

  // int32 maxRetries = 6;
  if (this->maxretries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxretries());
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 10;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddActorSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.AddActorSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddActorSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddActorSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.AddActorSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.AddActorSecretRequest)
    MergeFrom(*source);
  }
}

void AddActorSecretRequest::MergeFrom(const AddActorSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.AddActorSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.authsecret().size() > 0) {
    _internal_set_authsecret(from._internal_authsecret());
  }
  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.countryisocode().size() > 0) {
    _internal_set_countryisocode(from._internal_countryisocode());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.secrettype() != 0) {
    _internal_set_secrettype(from._internal_secrettype());
  }
  if (from.expiryinseconds() != 0) {
    _internal_set_expiryinseconds(from._internal_expiryinseconds());
  }
  if (from.maxretries() != 0) {
    _internal_set_maxretries(from._internal_maxretries());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
}

void AddActorSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.AddActorSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddActorSecretRequest::CopyFrom(const AddActorSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.AddActorSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddActorSecretRequest::IsInitialized() const {
  return true;
}

void AddActorSecretRequest::InternalSwap(AddActorSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  authsecret_.Swap(&other->authsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countryisocode_.Swap(&other->countryisocode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddActorSecretRequest, clienttype_)
      + sizeof(AddActorSecretRequest::clienttype_)
      - PROTOBUF_FIELD_OFFSET(AddActorSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddActorSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddActorSecretResponse::_Internal {
 public:
};

AddActorSecretResponse::AddActorSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.AddActorSecretResponse)
}
AddActorSecretResponse::AddActorSecretResponse(const AddActorSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.AddActorSecretResponse)
}

void AddActorSecretResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

AddActorSecretResponse::~AddActorSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.AddActorSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddActorSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddActorSecretResponse::ArenaDtor(void* object) {
  AddActorSecretResponse* _this = reinterpret_cast< AddActorSecretResponse* >(object);
  (void)_this;
}
void AddActorSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddActorSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddActorSecretResponse& AddActorSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddActorSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddActorSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.AddActorSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddActorSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddActorSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.AddActorSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.AddActorSecretResponse)
  return target;
}

size_t AddActorSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.AddActorSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddActorSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.AddActorSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddActorSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddActorSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.AddActorSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.AddActorSecretResponse)
    MergeFrom(*source);
  }
}

void AddActorSecretResponse::MergeFrom(const AddActorSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.AddActorSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void AddActorSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.AddActorSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddActorSecretResponse::CopyFrom(const AddActorSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.AddActorSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddActorSecretResponse::IsInitialized() const {
  return true;
}

void AddActorSecretResponse::InternalSwap(AddActorSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddActorSecretResponse, statuscode_)
      + sizeof(AddActorSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(AddActorSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddActorSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateActorSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateActorSecretRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const UpdateActorSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateActorSecretRequest::_Internal::requestheaders(const UpdateActorSecretRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
UpdateActorSecretRequest::_Internal::actorid(const UpdateActorSecretRequest* msg) {
  return *msg->actorid_;
}
void UpdateActorSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void UpdateActorSecretRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
UpdateActorSecretRequest::UpdateActorSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.UpdateActorSecretRequest)
}
UpdateActorSecretRequest::UpdateActorSecretRequest(const UpdateActorSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldauthsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldauthsecret().empty()) {
    oldauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldauthsecret(), 
      GetArena());
  }
  newauthsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newauthsecret().empty()) {
    newauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newauthsecret(), 
      GetArena());
  }
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArena());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  resetsecretguid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resetsecretguid().empty()) {
    resetsecretguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resetsecretguid(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  ::memcpy(&secrettype_, &from.secrettype_,
    static_cast<size_t>(reinterpret_cast<char*>(&resetsecretexpiry_) -
    reinterpret_cast<char*>(&secrettype_)) + sizeof(resetsecretexpiry_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.UpdateActorSecretRequest)
}

void UpdateActorSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  oldauthsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newauthsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resetsecretguid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resetsecretexpiry_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(resetsecretexpiry_));
}

UpdateActorSecretRequest::~UpdateActorSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.UpdateActorSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateActorSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oldauthsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newauthsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resetsecretguid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void UpdateActorSecretRequest::ArenaDtor(void* object) {
  UpdateActorSecretRequest* _this = reinterpret_cast< UpdateActorSecretRequest* >(object);
  (void)_this;
}
void UpdateActorSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateActorSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateActorSecretRequest& UpdateActorSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateActorSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateActorSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oldauthsecret_.ClearToEmpty();
  newauthsecret_.ClearToEmpty();
  accesstoken_.ClearToEmpty();
  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  resetsecretguid_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  ::memset(&secrettype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetsecretexpiry_) -
      reinterpret_cast<char*>(&secrettype_)) + sizeof(resetsecretexpiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateActorSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oldAuthSecret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_oldauthsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newAuthSecret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_newauthsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string accessToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SecretType secretType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secrettype(static_cast<::farm::nurture::core::contracts::common::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // int32 expiryInSeconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          expiryinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxRetries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resetSecretGuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_resetsecretguid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 resetSecretExpiry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          resetsecretexpiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateActorSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string oldAuthSecret = 3;
  if (this->oldauthsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldauthsecret().data(), static_cast<int>(this->_internal_oldauthsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldauthsecret(), target);
  }

  // string newAuthSecret = 4;
  if (this->newauthsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newauthsecret().data(), static_cast<int>(this->_internal_newauthsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newauthsecret(), target);
  }

  // string accessToken = 5;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_accesstoken(), target);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 6;
  if (this->secrettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_secrettype(), target);
  }

  // int32 expiryInSeconds = 7;
  if (this->expiryinseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_expiryinseconds(), target);
  }

  // int32 maxRetries = 8;
  if (this->maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxretries(), target);
  }

  // string appName = 9;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.appName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_appname(), target);
  }

  // string mobileNumber = 10;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mobilenumber(), target);
  }

  // string resetSecretGuid = 11;
  if (this->resetsecretguid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resetsecretguid().data(), static_cast<int>(this->_internal_resetsecretguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_resetsecretguid(), target);
  }

  // int64 resetSecretExpiry = 12;
  if (this->resetsecretexpiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_resetsecretexpiry(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 13;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_clienttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.UpdateActorSecretRequest)
  return target;
}

size_t UpdateActorSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string oldAuthSecret = 3;
  if (this->oldauthsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldauthsecret());
  }

  // string newAuthSecret = 4;
  if (this->newauthsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newauthsecret());
  }

  // string accessToken = 5;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string appName = 9;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 10;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // string resetSecretGuid = 11;
  if (this->resetsecretguid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resetsecretguid());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 6;
  if (this->secrettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secrettype());
  }

  // int32 expiryInSeconds = 7;
  if (this->expiryinseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiryinseconds());
  }

  // int32 maxRetries = 8;
  if (this->maxretries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxretries());
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 13;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  // int64 resetSecretExpiry = 12;
  if (this->resetsecretexpiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resetsecretexpiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateActorSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateActorSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateActorSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.UpdateActorSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.UpdateActorSecretRequest)
    MergeFrom(*source);
  }
}

void UpdateActorSecretRequest::MergeFrom(const UpdateActorSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oldauthsecret().size() > 0) {
    _internal_set_oldauthsecret(from._internal_oldauthsecret());
  }
  if (from.newauthsecret().size() > 0) {
    _internal_set_newauthsecret(from._internal_newauthsecret());
  }
  if (from.accesstoken().size() > 0) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.resetsecretguid().size() > 0) {
    _internal_set_resetsecretguid(from._internal_resetsecretguid());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.secrettype() != 0) {
    _internal_set_secrettype(from._internal_secrettype());
  }
  if (from.expiryinseconds() != 0) {
    _internal_set_expiryinseconds(from._internal_expiryinseconds());
  }
  if (from.maxretries() != 0) {
    _internal_set_maxretries(from._internal_maxretries());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
  if (from.resetsecretexpiry() != 0) {
    _internal_set_resetsecretexpiry(from._internal_resetsecretexpiry());
  }
}

void UpdateActorSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateActorSecretRequest::CopyFrom(const UpdateActorSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.UpdateActorSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateActorSecretRequest::IsInitialized() const {
  return true;
}

void UpdateActorSecretRequest::InternalSwap(UpdateActorSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oldauthsecret_.Swap(&other->oldauthsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newauthsecret_.Swap(&other->newauthsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resetsecretguid_.Swap(&other->resetsecretguid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateActorSecretRequest, resetsecretexpiry_)
      + sizeof(UpdateActorSecretRequest::resetsecretexpiry_)
      - PROTOBUF_FIELD_OFFSET(UpdateActorSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateActorSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateActorSecretResponse::_Internal {
 public:
};

UpdateActorSecretResponse::UpdateActorSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.UpdateActorSecretResponse)
}
UpdateActorSecretResponse::UpdateActorSecretResponse(const UpdateActorSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.UpdateActorSecretResponse)
}

void UpdateActorSecretResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

UpdateActorSecretResponse::~UpdateActorSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.UpdateActorSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateActorSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateActorSecretResponse::ArenaDtor(void* object) {
  UpdateActorSecretResponse* _this = reinterpret_cast< UpdateActorSecretResponse* >(object);
  (void)_this;
}
void UpdateActorSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateActorSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateActorSecretResponse& UpdateActorSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateActorSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateActorSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateActorSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateActorSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.UpdateActorSecretResponse)
  return target;
}

size_t UpdateActorSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateActorSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateActorSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateActorSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.UpdateActorSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.UpdateActorSecretResponse)
    MergeFrom(*source);
  }
}

void UpdateActorSecretResponse::MergeFrom(const UpdateActorSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void UpdateActorSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateActorSecretResponse::CopyFrom(const UpdateActorSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.UpdateActorSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateActorSecretResponse::IsInitialized() const {
  return true;
}

void UpdateActorSecretResponse::InternalSwap(UpdateActorSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateActorSecretResponse, statuscode_)
      + sizeof(UpdateActorSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(UpdateActorSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateActorSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const ValidateSecretRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const ValidateSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
ValidateSecretRequest::_Internal::requestheaders(const ValidateSecretRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
ValidateSecretRequest::_Internal::actorid(const ValidateSecretRequest* msg) {
  return *msg->actorid_;
}
void ValidateSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void ValidateSecretRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
ValidateSecretRequest::ValidateSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateSecretRequest)
}
ValidateSecretRequest::ValidateSecretRequest(const ValidateSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authsecret().empty()) {
    authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authsecret(), 
      GetArena());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobilenumber().empty()) {
    mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobilenumber(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  secrettype_ = from.secrettype_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateSecretRequest)
}

void ValidateSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  authsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&secrettype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(secrettype_));
}

ValidateSecretRequest::~ValidateSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobilenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void ValidateSecretRequest::ArenaDtor(void* object) {
  ValidateSecretRequest* _this = reinterpret_cast< ValidateSecretRequest* >(object);
  (void)_this;
}
void ValidateSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateSecretRequest& ValidateSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authsecret_.ClearToEmpty();
  appname_.ClearToEmpty();
  mobilenumber_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  secrettype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string authSecret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_authsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateSecretRequest.authSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SecretType secretType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secrettype(static_cast<::farm::nurture::core::contracts::common::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // string appName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateSecretRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobileNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobilenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string authSecret = 3;
  if (this->authsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authsecret().data(), static_cast<int>(this->_internal_authsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateSecretRequest.authSecret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_authsecret(), target);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_secrettype(), target);
  }

  // string appName = 5;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateSecretRequest.appName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_appname(), target);
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobilenumber().data(), static_cast<int>(this->_internal_mobilenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobilenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateSecretRequest)
  return target;
}

size_t ValidateSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authSecret = 3;
  if (this->authsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authsecret());
  }

  // string appName = 5;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string mobileNumber = 6;
  if (this->mobilenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobilenumber());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secrettype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateSecretRequest)
    MergeFrom(*source);
  }
}

void ValidateSecretRequest::MergeFrom(const ValidateSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.authsecret().size() > 0) {
    _internal_set_authsecret(from._internal_authsecret());
  }
  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.mobilenumber().size() > 0) {
    _internal_set_mobilenumber(from._internal_mobilenumber());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.secrettype() != 0) {
    _internal_set_secrettype(from._internal_secrettype());
  }
}

void ValidateSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateSecretRequest::CopyFrom(const ValidateSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateSecretRequest::IsInitialized() const {
  return true;
}

void ValidateSecretRequest::InternalSwap(ValidateSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  authsecret_.Swap(&other->authsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobilenumber_.Swap(&other->mobilenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateSecretRequest, secrettype_)
      + sizeof(ValidateSecretRequest::secrettype_)
      - PROTOBUF_FIELD_OFFSET(ValidateSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateSecretResponse::_Internal {
 public:
};

ValidateSecretResponse::ValidateSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateSecretResponse)
}
ValidateSecretResponse::ValidateSecretResponse(const ValidateSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateSecretResponse)
}

void ValidateSecretResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

ValidateSecretResponse::~ValidateSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateSecretResponse::ArenaDtor(void* object) {
  ValidateSecretResponse* _this = reinterpret_cast< ValidateSecretResponse* >(object);
  (void)_this;
}
void ValidateSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateSecretResponse& ValidateSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateSecretResponse)
  return target;
}

size_t ValidateSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateSecretResponse)
    MergeFrom(*source);
  }
}

void ValidateSecretResponse::MergeFrom(const ValidateSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void ValidateSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateSecretResponse::CopyFrom(const ValidateSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateSecretResponse::IsInitialized() const {
  return true;
}

void ValidateSecretResponse::InternalSwap(ValidateSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateSecretResponse, statuscode_)
      + sizeof(ValidateSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(ValidateSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateSecretResetTokenRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GenerateSecretResetTokenRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const GenerateSecretResetTokenRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GenerateSecretResetTokenRequest::_Internal::requestheaders(const GenerateSecretResetTokenRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
GenerateSecretResetTokenRequest::_Internal::actorid(const GenerateSecretResetTokenRequest* msg) {
  return *msg->actorid_;
}
void GenerateSecretResetTokenRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void GenerateSecretResetTokenRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
GenerateSecretResetTokenRequest::GenerateSecretResetTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
}
GenerateSecretResetTokenRequest::GenerateSecretResetTokenRequest(const GenerateSecretResetTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArena());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  secrettype_ = from.secrettype_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
}

void GenerateSecretResetTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&secrettype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(secrettype_));
}

GenerateSecretResetTokenRequest::~GenerateSecretResetTokenRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateSecretResetTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void GenerateSecretResetTokenRequest::ArenaDtor(void* object) {
  GenerateSecretResetTokenRequest* _this = reinterpret_cast< GenerateSecretResetTokenRequest* >(object);
  (void)_this;
}
void GenerateSecretResetTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateSecretResetTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateSecretResetTokenRequest& GenerateSecretResetTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateSecretResetTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateSecretResetTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  appname_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  secrettype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateSecretResetTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SecretType secretType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secrettype(static_cast<::farm::nurture::core::contracts::common::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // string appName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateSecretResetTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_secrettype(), target);
  }

  // string appName = 5;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_appname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  return target;
}

size_t GenerateSecretResetTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string appName = 5;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  if (this->secrettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secrettype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateSecretResetTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateSecretResetTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateSecretResetTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
    MergeFrom(*source);
  }
}

void GenerateSecretResetTokenRequest::MergeFrom(const GenerateSecretResetTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.secrettype() != 0) {
    _internal_set_secrettype(from._internal_secrettype());
  }
}

void GenerateSecretResetTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateSecretResetTokenRequest::CopyFrom(const GenerateSecretResetTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateSecretResetTokenRequest::IsInitialized() const {
  return true;
}

void GenerateSecretResetTokenRequest::InternalSwap(GenerateSecretResetTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateSecretResetTokenRequest, secrettype_)
      + sizeof(GenerateSecretResetTokenRequest::secrettype_)
      - PROTOBUF_FIELD_OFFSET(GenerateSecretResetTokenRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateSecretResetTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateSecretResetTokenResponse::_Internal {
 public:
};

GenerateSecretResetTokenResponse::GenerateSecretResetTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
}
GenerateSecretResetTokenResponse::GenerateSecretResetTokenResponse(const GenerateSecretResetTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expirytime_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
}

void GenerateSecretResetTokenResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expirytime_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
}

GenerateSecretResetTokenResponse::~GenerateSecretResetTokenResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateSecretResetTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GenerateSecretResetTokenResponse::ArenaDtor(void* object) {
  GenerateSecretResetTokenResponse* _this = reinterpret_cast< GenerateSecretResetTokenResponse* >(object);
  (void)_this;
}
void GenerateSecretResetTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateSecretResetTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateSecretResetTokenResponse& GenerateSecretResetTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateSecretResetTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateSecretResetTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expirytime_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expirytime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateSecretResetTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 expiryTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expirytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateSecretResetTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // int64 expiryTime = 3;
  if (this->expirytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expirytime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  return target;
}

size_t GenerateSecretResetTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiryTime = 3;
  if (this->expirytime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expirytime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateSecretResetTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateSecretResetTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateSecretResetTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
    MergeFrom(*source);
  }
}

void GenerateSecretResetTokenResponse::MergeFrom(const GenerateSecretResetTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expirytime() != 0) {
    _internal_set_expirytime(from._internal_expirytime());
  }
}

void GenerateSecretResetTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateSecretResetTokenResponse::CopyFrom(const GenerateSecretResetTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateSecretResetTokenResponse::IsInitialized() const {
  return true;
}

void GenerateSecretResetTokenResponse::InternalSwap(GenerateSecretResetTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateSecretResetTokenResponse, expirytime_)
      + sizeof(GenerateSecretResetTokenResponse::expirytime_)
      - PROTOBUF_FIELD_OFFSET(GenerateSecretResetTokenResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateSecretResetTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteSessionRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const DeleteSessionRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const DeleteSessionRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
DeleteSessionRequest::_Internal::requestheaders(const DeleteSessionRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
DeleteSessionRequest::_Internal::actorid(const DeleteSessionRequest* msg) {
  return *msg->actorid_;
}
void DeleteSessionRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void DeleteSessionRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
DeleteSessionRequest::DeleteSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.DeleteSessionRequest)
}
DeleteSessionRequest::DeleteSessionRequest(const DeleteSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArena());
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refreshtoken(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  clienttype_ = from.clienttype_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.DeleteSessionRequest)
}

void DeleteSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto.base);
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(clienttype_));
}

DeleteSessionRequest::~DeleteSessionRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.DeleteSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void DeleteSessionRequest::ArenaDtor(void* object) {
  DeleteSessionRequest* _this = reinterpret_cast< DeleteSessionRequest* >(object);
  (void)_this;
}
void DeleteSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSessionRequest& DeleteSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSessionRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.DeleteSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appname_.ClearToEmpty();
  refreshtoken_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  clienttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.DeleteSessionRequest.appName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // string refreshToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.DeleteSessionRequest.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.DeleteSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string appName = 3;
  if (this->appname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.DeleteSessionRequest.appName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appname(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 4;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_clienttype(), target);
  }

  // string refreshToken = 5;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.DeleteSessionRequest.refreshToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_refreshtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.DeleteSessionRequest)
  return target;
}

size_t DeleteSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.DeleteSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 3;
  if (this->appname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string refreshToken = 5;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 4;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.DeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.DeleteSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.DeleteSessionRequest)
    MergeFrom(*source);
  }
}

void DeleteSessionRequest::MergeFrom(const DeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.DeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appname().size() > 0) {
    _internal_set_appname(from._internal_appname());
  }
  if (from.refreshtoken().size() > 0) {
    _internal_set_refreshtoken(from._internal_refreshtoken());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
}

void DeleteSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.DeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSessionRequest::CopyFrom(const DeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.DeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSessionRequest::IsInitialized() const {
  return true;
}

void DeleteSessionRequest::InternalSwap(DeleteSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appname_.Swap(&other->appname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteSessionRequest, clienttype_)
      + sizeof(DeleteSessionRequest::clienttype_)
      - PROTOBUF_FIELD_OFFSET(DeleteSessionRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteSessionResponse::_Internal {
 public:
};

DeleteSessionResponse::DeleteSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.DeleteSessionResponse)
}
DeleteSessionResponse::DeleteSessionResponse(const DeleteSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.DeleteSessionResponse)
}

void DeleteSessionResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

DeleteSessionResponse::~DeleteSessionResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.DeleteSessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSessionResponse::ArenaDtor(void* object) {
  DeleteSessionResponse* _this = reinterpret_cast< DeleteSessionResponse* >(object);
  (void)_this;
}
void DeleteSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSessionResponse& DeleteSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSessionResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.DeleteSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.DeleteSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.DeleteSessionResponse)
  return target;
}

size_t DeleteSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.DeleteSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.DeleteSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.DeleteSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.DeleteSessionResponse)
    MergeFrom(*source);
  }
}

void DeleteSessionResponse::MergeFrom(const DeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.DeleteSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void DeleteSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.DeleteSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSessionResponse::CopyFrom(const DeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.DeleteSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSessionResponse::IsInitialized() const {
  return true;
}

void DeleteSessionResponse::InternalSwap(DeleteSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteSessionResponse, statuscode_)
      + sizeof(DeleteSessionResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(DeleteSessionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateJWTTokenRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const ValidateJWTTokenRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
ValidateJWTTokenRequest::_Internal::requestheaders(const ValidateJWTTokenRequest* msg) {
  return *msg->requestheaders_;
}
void ValidateJWTTokenRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
ValidateJWTTokenRequest::ValidateJWTTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateJWTTokenRequest)
}
ValidateJWTTokenRequest::ValidateJWTTokenRequest(const ValidateJWTTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateJWTTokenRequest)
}

void ValidateJWTTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

ValidateJWTTokenRequest::~ValidateJWTTokenRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateJWTTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void ValidateJWTTokenRequest::ArenaDtor(void* object) {
  ValidateJWTTokenRequest* _this = reinterpret_cast< ValidateJWTTokenRequest* >(object);
  (void)_this;
}
void ValidateJWTTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateJWTTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateJWTTokenRequest& ValidateJWTTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateJWTTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateJWTTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateJWTTokenRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateJWTTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateJWTTokenRequest.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  return target;
}

size_t ValidateJWTTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateJWTTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateJWTTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateJWTTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateJWTTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateJWTTokenRequest)
    MergeFrom(*source);
  }
}

void ValidateJWTTokenRequest::MergeFrom(const ValidateJWTTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void ValidateJWTTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateJWTTokenRequest::CopyFrom(const ValidateJWTTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateJWTTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTTokenRequest::IsInitialized() const {
  return true;
}

void ValidateJWTTokenRequest::InternalSwap(ValidateJWTTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateJWTTokenResponse::_Internal {
 public:
};

ValidateJWTTokenResponse::ValidateJWTTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateJWTTokenResponse)
}
ValidateJWTTokenResponse::ValidateJWTTokenResponse(const ValidateJWTTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateJWTTokenResponse)
}

void ValidateJWTTokenResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

ValidateJWTTokenResponse::~ValidateJWTTokenResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateJWTTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateJWTTokenResponse::ArenaDtor(void* object) {
  ValidateJWTTokenResponse* _this = reinterpret_cast< ValidateJWTTokenResponse* >(object);
  (void)_this;
}
void ValidateJWTTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateJWTTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateJWTTokenResponse& ValidateJWTTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateJWTTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateJWTTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateJWTTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  return target;
}

size_t ValidateJWTTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateJWTTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateJWTTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateJWTTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateJWTTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateJWTTokenResponse)
    MergeFrom(*source);
  }
}

void ValidateJWTTokenResponse::MergeFrom(const ValidateJWTTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void ValidateJWTTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateJWTTokenResponse::CopyFrom(const ValidateJWTTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateJWTTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTTokenResponse::IsInitialized() const {
  return true;
}

void ValidateJWTTokenResponse::InternalSwap(ValidateJWTTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateJWTTokenResponse, statuscode_)
      + sizeof(ValidateJWTTokenResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(ValidateJWTTokenResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefreshAccessTokenRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const RefreshAccessTokenRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const RefreshAccessTokenRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
RefreshAccessTokenRequest::_Internal::requestheaders(const RefreshAccessTokenRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
RefreshAccessTokenRequest::_Internal::actorid(const RefreshAccessTokenRequest* msg) {
  return *msg->actorid_;
}
void RefreshAccessTokenRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void RefreshAccessTokenRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
RefreshAccessTokenRequest::RefreshAccessTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.RefreshAccessTokenRequest)
}
RefreshAccessTokenRequest::RefreshAccessTokenRequest(const RefreshAccessTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientsecret().empty()) {
    clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientsecret(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refreshtoken(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  clienttype_ = from.clienttype_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.RefreshAccessTokenRequest)
}

void RefreshAccessTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clienttype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(clienttype_));
}

RefreshAccessTokenRequest::~RefreshAccessTokenRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefreshAccessTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void RefreshAccessTokenRequest::ArenaDtor(void* object) {
  RefreshAccessTokenRequest* _this = reinterpret_cast< RefreshAccessTokenRequest* >(object);
  (void)_this;
}
void RefreshAccessTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefreshAccessTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshAccessTokenRequest& RefreshAccessTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshAccessTokenRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RefreshAccessTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmpty();
  clientsecret_.ClearToEmpty();
  scope_.ClearToEmpty();
  refreshtoken_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  clienttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshAccessTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientSecret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clientsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenRequest.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ClientType clientType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clienttype(static_cast<::farm::nurture::core::contracts::common::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // string refreshToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshAccessTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actorid(this), target, stream);
  }

  // string clientId = 3;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientid(), target);
  }

  // string clientSecret = 4;
  if (this->clientsecret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientsecret().data(), static_cast<int>(this->_internal_clientsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clientsecret(), target);
  }

  // string scope = 5;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenRequest.scope");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_scope(), target);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 6;
  if (this->clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_clienttype(), target);
  }

  // string refreshToken = 7;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_refreshtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  return target;
}

size_t RefreshAccessTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 3;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string clientSecret = 4;
  if (this->clientsecret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());
  }

  // string scope = 5;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // string refreshToken = 7;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // .farm.nurture.core.contracts.common.ClientType clientType = 6;
  if (this->clienttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clienttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshAccessTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshAccessTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshAccessTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.RefreshAccessTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.RefreshAccessTokenRequest)
    MergeFrom(*source);
  }
}

void RefreshAccessTokenRequest::MergeFrom(const RefreshAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.clientsecret().size() > 0) {
    _internal_set_clientsecret(from._internal_clientsecret());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.refreshtoken().size() > 0) {
    _internal_set_refreshtoken(from._internal_refreshtoken());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.clienttype() != 0) {
    _internal_set_clienttype(from._internal_clienttype());
  }
}

void RefreshAccessTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshAccessTokenRequest::CopyFrom(const RefreshAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.RefreshAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshAccessTokenRequest::IsInitialized() const {
  return true;
}

void RefreshAccessTokenRequest::InternalSwap(RefreshAccessTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientsecret_.Swap(&other->clientsecret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshAccessTokenRequest, clienttype_)
      + sizeof(RefreshAccessTokenRequest::clienttype_)
      - PROTOBUF_FIELD_OFFSET(RefreshAccessTokenRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshAccessTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefreshAccessTokenResponse::_Internal {
 public:
};

RefreshAccessTokenResponse::RefreshAccessTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.RefreshAccessTokenResponse)
}
RefreshAccessTokenResponse::RefreshAccessTokenResponse(const RefreshAccessTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArena());
  }
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idtoken().empty()) {
    idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idtoken(), 
      GetArena());
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refreshtoken(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokentype().empty()) {
    tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokentype(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
    reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.RefreshAccessTokenResponse)
}

void RefreshAccessTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
}

RefreshAccessTokenResponse::~RefreshAccessTokenResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefreshAccessTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RefreshAccessTokenResponse::ArenaDtor(void* object) {
  RefreshAccessTokenResponse* _this = reinterpret_cast< RefreshAccessTokenResponse* >(object);
  (void)_this;
}
void RefreshAccessTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefreshAccessTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshAccessTokenResponse& RefreshAccessTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshAccessTokenResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RefreshAccessTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesstoken_.ClearToEmpty();
  idtoken_.ClearToEmpty();
  refreshtoken_.ClearToEmpty();
  scope_.ClearToEmpty();
  tokentype_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiresin_) -
      reinterpret_cast<char*>(&status_)) + sizeof(expiresin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshAccessTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string accessToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresIn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiresin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_idtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refreshToken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenResponse.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tokentype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshAccessTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_accesstoken(), target);
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiresin(), target);
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idtoken().data(), static_cast<int>(this->_internal_idtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_idtoken(), target);
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_refreshtoken(), target);
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenResponse.scope");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scope(), target);
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokentype().data(), static_cast<int>(this->_internal_tokentype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tokentype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  return target;
}

size_t RefreshAccessTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 3;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string idToken = 5;
  if (this->idtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idtoken());
  }

  // string refreshToken = 6;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  // string scope = 7;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  // string tokenType = 8;
  if (this->tokentype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokentype());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // int64 expiresIn = 4;
  if (this->expiresin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshAccessTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshAccessTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshAccessTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.RefreshAccessTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.RefreshAccessTokenResponse)
    MergeFrom(*source);
  }
}

void RefreshAccessTokenResponse::MergeFrom(const RefreshAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesstoken().size() > 0) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (from.idtoken().size() > 0) {
    _internal_set_idtoken(from._internal_idtoken());
  }
  if (from.refreshtoken().size() > 0) {
    _internal_set_refreshtoken(from._internal_refreshtoken());
  }
  if (from.scope().size() > 0) {
    _internal_set_scope(from._internal_scope());
  }
  if (from.tokentype().size() > 0) {
    _internal_set_tokentype(from._internal_tokentype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
  if (from.expiresin() != 0) {
    _internal_set_expiresin(from._internal_expiresin());
  }
}

void RefreshAccessTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshAccessTokenResponse::CopyFrom(const RefreshAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.RefreshAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshAccessTokenResponse::IsInitialized() const {
  return true;
}

void RefreshAccessTokenResponse::InternalSwap(RefreshAccessTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idtoken_.Swap(&other->idtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tokentype_.Swap(&other->tokentype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshAccessTokenResponse, expiresin_)
      + sizeof(RefreshAccessTokenResponse::expiresin_)
      - PROTOBUF_FIELD_OFFSET(RefreshAccessTokenResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshAccessTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateActionSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GenerateActionSecretRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& receiveractor(const GenerateActionSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GenerateActionSecretRequest::_Internal::requestheaders(const GenerateActionSecretRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
GenerateActionSecretRequest::_Internal::receiveractor(const GenerateActionSecretRequest* msg) {
  return *msg->receiveractor_;
}
void GenerateActionSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void GenerateActionSecretRequest::clear_receiveractor() {
  if (GetArena() == nullptr && receiveractor_ != nullptr) {
    delete receiveractor_;
  }
  receiveractor_ = nullptr;
}
GenerateActionSecretRequest::GenerateActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communicationdetails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateActionSecretRequest)
}
GenerateActionSecretRequest::GenerateActionSecretRequest(const GenerateActionSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communicationdetails_(from.communicationdetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitytype().empty()) {
    entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entitytype(), 
      GetArena());
  }
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_receiveractor()) {
    receiveractor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.receiveractor_);
  } else {
    receiveractor_ = nullptr;
  }
  ::memcpy(&entityid_, &from.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiryinseconds_) -
    reinterpret_cast<char*>(&entityid_)) + sizeof(expiryinseconds_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateActionSecretRequest)
}

void GenerateActionSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiryinseconds_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(expiryinseconds_));
}

GenerateActionSecretRequest::~GenerateActionSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateActionSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateActionSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete receiveractor_;
}

void GenerateActionSecretRequest::ArenaDtor(void* object) {
  GenerateActionSecretRequest* _this = reinterpret_cast< GenerateActionSecretRequest* >(object);
  (void)_this;
}
void GenerateActionSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateActionSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateActionSecretRequest& GenerateActionSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateActionSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communicationdetails_.Clear();
  entitytype_.ClearToEmpty();
  servicename_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && receiveractor_ != nullptr) {
    delete receiveractor_;
  }
  receiveractor_ = nullptr;
  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiryinseconds_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(expiryinseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateActionSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 entityId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_entitytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateActionSecretRequest.entityType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.GenerateActionSecretRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 secretDigit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          secretdigit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxRetries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expiryInSeconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiryinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID receiverActor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiveractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.platform.auth.CommunicationDetail communicationDetails = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communicationdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateActionSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_entityid(), target);
  }

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytype().data(), static_cast<int>(this->_internal_entitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateActionSecretRequest.entityType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entitytype(), target);
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servicename(), target);
  }

  // string action = 5;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.GenerateActionSecretRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  // int32 secretDigit = 6;
  if (this->secretdigit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_secretdigit(), target);
  }

  // int32 maxRetries = 7;
  if (this->maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_maxretries(), target);
  }

  // int32 expiryInSeconds = 8;
  if (this->expiryinseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_expiryinseconds(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID receiverActor = 9;
  if (this->has_receiveractor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::receiveractor(this), target, stream);
  }

  // repeated .farm.nurture.platform.auth.CommunicationDetail communicationDetails = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communicationdetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_communicationdetails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateActionSecretRequest)
  return target;
}

size_t GenerateActionSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.platform.auth.CommunicationDetail communicationDetails = 10;
  total_size += 1UL * this->_internal_communicationdetails_size();
  for (const auto& msg : this->communicationdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytype());
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string action = 5;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID receiverActor = 9;
  if (this->has_receiveractor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiveractor_);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_entityid());
  }

  // int32 secretDigit = 6;
  if (this->secretdigit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secretdigit());
  }

  // int32 maxRetries = 7;
  if (this->maxretries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxretries());
  }

  // int32 expiryInSeconds = 8;
  if (this->expiryinseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiryinseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateActionSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateActionSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateActionSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateActionSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateActionSecretRequest)
    MergeFrom(*source);
  }
}

void GenerateActionSecretRequest::MergeFrom(const GenerateActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communicationdetails_.MergeFrom(from.communicationdetails_);
  if (from.entitytype().size() > 0) {
    _internal_set_entitytype(from._internal_entitytype());
  }
  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_receiveractor()) {
    _internal_mutable_receiveractor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_receiveractor());
  }
  if (from.entityid() != 0) {
    _internal_set_entityid(from._internal_entityid());
  }
  if (from.secretdigit() != 0) {
    _internal_set_secretdigit(from._internal_secretdigit());
  }
  if (from.maxretries() != 0) {
    _internal_set_maxretries(from._internal_maxretries());
  }
  if (from.expiryinseconds() != 0) {
    _internal_set_expiryinseconds(from._internal_expiryinseconds());
  }
}

void GenerateActionSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateActionSecretRequest::CopyFrom(const GenerateActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateActionSecretRequest::IsInitialized() const {
  return true;
}

void GenerateActionSecretRequest::InternalSwap(GenerateActionSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communicationdetails_.InternalSwap(&other->communicationdetails_);
  entitytype_.Swap(&other->entitytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateActionSecretRequest, expiryinseconds_)
      + sizeof(GenerateActionSecretRequest::expiryinseconds_)
      - PROTOBUF_FIELD_OFFSET(GenerateActionSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateActionSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommunicationDetail::_Internal {
 public:
};

CommunicationDetail::CommunicationDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.CommunicationDetail)
}
CommunicationDetail::CommunicationDetail(const CommunicationDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_templatename().empty()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  communicationchannel_ = from.communicationchannel_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.CommunicationDetail)
}

void CommunicationDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto.base);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communicationchannel_ = 0;
}

CommunicationDetail::~CommunicationDetail() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.CommunicationDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommunicationDetail::ArenaDtor(void* object) {
  CommunicationDetail* _this = reinterpret_cast< CommunicationDetail* >(object);
  (void)_this;
}
void CommunicationDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunicationDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationDetail& CommunicationDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationDetail_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CommunicationDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.CommunicationDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templatename_.ClearToEmpty();
  communicationchannel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string templateName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.CommunicationDetail.templateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_communicationchannel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.CommunicationDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string templateName = 1;
  if (this->templatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.CommunicationDetail.templateName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_templatename(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 2;
  if (this->communicationchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_communicationchannel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.CommunicationDetail)
  return target;
}

size_t CommunicationDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.CommunicationDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string templateName = 1;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_templatename());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 2;
  if (this->communicationchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_communicationchannel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.CommunicationDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.CommunicationDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.CommunicationDetail)
    MergeFrom(*source);
  }
}

void CommunicationDetail::MergeFrom(const CommunicationDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.CommunicationDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.templatename().size() > 0) {
    _internal_set_templatename(from._internal_templatename());
  }
  if (from.communicationchannel() != 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
}

void CommunicationDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.CommunicationDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationDetail::CopyFrom(const CommunicationDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.CommunicationDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationDetail::IsInitialized() const {
  return true;
}

void CommunicationDetail::InternalSwap(CommunicationDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(communicationchannel_, other->communicationchannel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateActionSecretResponse::_Internal {
 public:
};

GenerateActionSecretResponse::GenerateActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.GenerateActionSecretResponse)
}
GenerateActionSecretResponse::GenerateActionSecretResponse(const GenerateActionSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.GenerateActionSecretResponse)
}

void GenerateActionSecretResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

GenerateActionSecretResponse::~GenerateActionSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.GenerateActionSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateActionSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GenerateActionSecretResponse::ArenaDtor(void* object) {
  GenerateActionSecretResponse* _this = reinterpret_cast< GenerateActionSecretResponse* >(object);
  (void)_this;
}
void GenerateActionSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateActionSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateActionSecretResponse& GenerateActionSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GenerateActionSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateActionSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateActionSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.GenerateActionSecretResponse)
  return target;
}

size_t GenerateActionSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateActionSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateActionSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateActionSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.GenerateActionSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.GenerateActionSecretResponse)
    MergeFrom(*source);
  }
}

void GenerateActionSecretResponse::MergeFrom(const GenerateActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void GenerateActionSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateActionSecretResponse::CopyFrom(const GenerateActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.GenerateActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateActionSecretResponse::IsInitialized() const {
  return true;
}

void GenerateActionSecretResponse::InternalSwap(GenerateActionSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateActionSecretResponse, statuscode_)
      + sizeof(GenerateActionSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(GenerateActionSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateActionSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchActionSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FetchActionSecretRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actorid(const FetchActionSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FetchActionSecretRequest::_Internal::requestheaders(const FetchActionSecretRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
FetchActionSecretRequest::_Internal::actorid(const FetchActionSecretRequest* msg) {
  return *msg->actorid_;
}
void FetchActionSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void FetchActionSecretRequest::clear_actorid() {
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
}
FetchActionSecretRequest::FetchActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.FetchActionSecretRequest)
}
FetchActionSecretRequest::FetchActionSecretRequest(const FetchActionSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitytype().empty()) {
    entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entitytype(), 
      GetArena());
  }
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_actorid()) {
    actorid_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actorid_);
  } else {
    actorid_ = nullptr;
  }
  entityid_ = from.entityid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.FetchActionSecretRequest)
}

void FetchActionSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(entityid_));
}

FetchActionSecretRequest::~FetchActionSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.FetchActionSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchActionSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete actorid_;
}

void FetchActionSecretRequest::ArenaDtor(void* object) {
  FetchActionSecretRequest* _this = reinterpret_cast< FetchActionSecretRequest* >(object);
  (void)_this;
}
void FetchActionSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchActionSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchActionSecretRequest& FetchActionSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchActionSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entitytype_.ClearToEmpty();
  servicename_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && actorid_ != nullptr) {
    delete actorid_;
  }
  actorid_ = nullptr;
  entityid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchActionSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 entityId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_entitytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.FetchActionSecretRequest.entityType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.FetchActionSecretRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.FetchActionSecretRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actorId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchActionSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_entityid(), target);
  }

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytype().data(), static_cast<int>(this->_internal_entitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.FetchActionSecretRequest.entityType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entitytype(), target);
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.FetchActionSecretRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servicename(), target);
  }

  // string action = 5;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.FetchActionSecretRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 6;
  if (this->has_actorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::actorid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.FetchActionSecretRequest)
  return target;
}

size_t FetchActionSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytype());
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string action = 5;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID actorId = 6;
  if (this->has_actorid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actorid_);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_entityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchActionSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchActionSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchActionSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.FetchActionSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.FetchActionSecretRequest)
    MergeFrom(*source);
  }
}

void FetchActionSecretRequest::MergeFrom(const FetchActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entitytype().size() > 0) {
    _internal_set_entitytype(from._internal_entitytype());
  }
  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_actorid()) {
    _internal_mutable_actorid()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actorid());
  }
  if (from.entityid() != 0) {
    _internal_set_entityid(from._internal_entityid());
  }
}

void FetchActionSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchActionSecretRequest::CopyFrom(const FetchActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.FetchActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchActionSecretRequest::IsInitialized() const {
  return true;
}

void FetchActionSecretRequest::InternalSwap(FetchActionSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entitytype_.Swap(&other->entitytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchActionSecretRequest, entityid_)
      + sizeof(FetchActionSecretRequest::entityid_)
      - PROTOBUF_FIELD_OFFSET(FetchActionSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchActionSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchActionSecretResponse::_Internal {
 public:
};

FetchActionSecretResponse::FetchActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.FetchActionSecretResponse)
}
FetchActionSecretResponse::FetchActionSecretResponse(const FetchActionSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.FetchActionSecretResponse)
}

void FetchActionSecretResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

FetchActionSecretResponse::~FetchActionSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.FetchActionSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchActionSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FetchActionSecretResponse::ArenaDtor(void* object) {
  FetchActionSecretResponse* _this = reinterpret_cast< FetchActionSecretResponse* >(object);
  (void)_this;
}
void FetchActionSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchActionSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchActionSecretResponse& FetchActionSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchActionSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchActionSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string secret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.FetchActionSecretResponse.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchActionSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // string secret = 3;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.FetchActionSecretResponse.secret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.FetchActionSecretResponse)
  return target;
}

size_t FetchActionSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string secret = 3;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchActionSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchActionSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchActionSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.FetchActionSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.FetchActionSecretResponse)
    MergeFrom(*source);
  }
}

void FetchActionSecretResponse::MergeFrom(const FetchActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.secret().size() > 0) {
    _internal_set_secret(from._internal_secret());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void FetchActionSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchActionSecretResponse::CopyFrom(const FetchActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.FetchActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchActionSecretResponse::IsInitialized() const {
  return true;
}

void FetchActionSecretResponse::InternalSwap(FetchActionSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchActionSecretResponse, statuscode_)
      + sizeof(FetchActionSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(FetchActionSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchActionSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateActionSecretRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const ValidateActionSecretRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
ValidateActionSecretRequest::_Internal::requestheaders(const ValidateActionSecretRequest* msg) {
  return *msg->requestheaders_;
}
void ValidateActionSecretRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
ValidateActionSecretRequest::ValidateActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateActionSecretRequest)
}
ValidateActionSecretRequest::ValidateActionSecretRequest(const ValidateActionSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitytype().empty()) {
    entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entitytype(), 
      GetArena());
  }
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  entityid_ = from.entityid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateActionSecretRequest)
}

void ValidateActionSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  entitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(entityid_));
}

ValidateActionSecretRequest::~ValidateActionSecretRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateActionSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateActionSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void ValidateActionSecretRequest::ArenaDtor(void* object) {
  ValidateActionSecretRequest* _this = reinterpret_cast< ValidateActionSecretRequest* >(object);
  (void)_this;
}
void ValidateActionSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateActionSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateActionSecretRequest& ValidateActionSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateActionSecretRequest_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateActionSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entitytype_.ClearToEmpty();
  servicename_.ClearToEmpty();
  action_.ClearToEmpty();
  secret_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  entityid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateActionSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 entityId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_entitytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateActionSecretRequest.entityType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateActionSecretRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.platform.auth.ValidateActionSecretRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateActionSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_entityid(), target);
  }

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytype().data(), static_cast<int>(this->_internal_entitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateActionSecretRequest.entityType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entitytype(), target);
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servicename(), target);
  }

  // string action = 5;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateActionSecretRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  // string secret = 6;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.platform.auth.ValidateActionSecretRequest.secret");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateActionSecretRequest)
  return target;
}

size_t ValidateActionSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entityType = 3;
  if (this->entitytype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytype());
  }

  // string serviceName = 4;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string action = 5;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string secret = 6;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 entityId = 2;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_entityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateActionSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateActionSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateActionSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateActionSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateActionSecretRequest)
    MergeFrom(*source);
  }
}

void ValidateActionSecretRequest::MergeFrom(const ValidateActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entitytype().size() > 0) {
    _internal_set_entitytype(from._internal_entitytype());
  }
  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.secret().size() > 0) {
    _internal_set_secret(from._internal_secret());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.entityid() != 0) {
    _internal_set_entityid(from._internal_entityid());
  }
}

void ValidateActionSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateActionSecretRequest::CopyFrom(const ValidateActionSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateActionSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateActionSecretRequest::IsInitialized() const {
  return true;
}

void ValidateActionSecretRequest::InternalSwap(ValidateActionSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entitytype_.Swap(&other->entitytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateActionSecretRequest, entityid_)
      + sizeof(ValidateActionSecretRequest::entityid_)
      - PROTOBUF_FIELD_OFFSET(ValidateActionSecretRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateActionSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateActionSecretResponse::_Internal {
 public:
};

ValidateActionSecretResponse::ValidateActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.platform.auth.ValidateActionSecretResponse)
}
ValidateActionSecretResponse::ValidateActionSecretResponse(const ValidateActionSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.platform.auth.ValidateActionSecretResponse)
}

void ValidateActionSecretResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
}

ValidateActionSecretResponse::~ValidateActionSecretResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.platform.auth.ValidateActionSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateActionSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateActionSecretResponse::ArenaDtor(void* object) {
  ValidateActionSecretResponse* _this = reinterpret_cast< ValidateActionSecretResponse* >(object);
  (void)_this;
}
void ValidateActionSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateActionSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateActionSecretResponse& ValidateActionSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateActionSecretResponse_AuthService_2fauth_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateActionSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&status_)) + sizeof(statuscode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateActionSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateActionSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.platform.auth.ValidateActionSecretResponse)
  return target;
}

size_t ValidateActionSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateActionSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateActionSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateActionSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.platform.auth.ValidateActionSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.platform.auth.ValidateActionSecretResponse)
    MergeFrom(*source);
  }
}

void ValidateActionSecretResponse::MergeFrom(const ValidateActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.statuscode() != 0) {
    _internal_set_statuscode(from._internal_statuscode());
  }
}

void ValidateActionSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateActionSecretResponse::CopyFrom(const ValidateActionSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.platform.auth.ValidateActionSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateActionSecretResponse::IsInitialized() const {
  return true;
}

void ValidateActionSecretResponse::InternalSwap(ValidateActionSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateActionSecretResponse, statuscode_)
      + sizeof(ValidateActionSecretResponse::statuscode_)
      - PROTOBUF_FIELD_OFFSET(ValidateActionSecretResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateActionSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace platform
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateOtpRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateOtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateOtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateOtpResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateOtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateOtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ResendOtpRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ResendOtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ResendOtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ResendOtpResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ResendOtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ResendOtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateOtpRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateOtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateOtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateOtpResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateOtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateOtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GetAuthTokenRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GetAuthTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GetAuthTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GetAuthTokenResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GetAuthTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GetAuthTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::OldTokenExchangeRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::OldTokenExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::OldTokenExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::OldTokenExchangeResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::OldTokenExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::OldTokenExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GetOtpRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GetOtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GetOtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GetOtpResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GetOtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GetOtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::AddActorSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::AddActorSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::AddActorSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::AddActorSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::AddActorSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::AddActorSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::UpdateActorSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::UpdateActorSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::UpdateActorSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::UpdateActorSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::UpdateActorSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::UpdateActorSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateSecretResetTokenRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateSecretResetTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateSecretResetTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateSecretResetTokenResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateSecretResetTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateSecretResetTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::DeleteSessionRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::DeleteSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::DeleteSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::DeleteSessionResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::DeleteSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::DeleteSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateJWTTokenRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateJWTTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateJWTTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateJWTTokenResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateJWTTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateJWTTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::RefreshAccessTokenRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::RefreshAccessTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::RefreshAccessTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::RefreshAccessTokenResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::RefreshAccessTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::RefreshAccessTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateActionSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateActionSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateActionSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::CommunicationDetail* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::CommunicationDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::CommunicationDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::GenerateActionSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::GenerateActionSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::GenerateActionSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::FetchActionSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::FetchActionSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::FetchActionSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::FetchActionSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::FetchActionSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::FetchActionSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateActionSecretRequest* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateActionSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateActionSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::platform::auth::ValidateActionSecretResponse* Arena::CreateMaybeMessage< ::farm::nurture::platform::auth::ValidateActionSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::platform::auth::ValidateActionSecretResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
