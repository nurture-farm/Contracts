// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthService/auth_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthService_2fauth_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthService_2fauth_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/headers.pb.h"
#include "Common/entities.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthService_2fauth_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthService_2fauth_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthService_2fauth_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace platform {
namespace auth {
class AddActorSecretRequest;
class AddActorSecretRequestDefaultTypeInternal;
extern AddActorSecretRequestDefaultTypeInternal _AddActorSecretRequest_default_instance_;
class AddActorSecretResponse;
class AddActorSecretResponseDefaultTypeInternal;
extern AddActorSecretResponseDefaultTypeInternal _AddActorSecretResponse_default_instance_;
class CommunicationDetail;
class CommunicationDetailDefaultTypeInternal;
extern CommunicationDetailDefaultTypeInternal _CommunicationDetail_default_instance_;
class DeleteSessionRequest;
class DeleteSessionRequestDefaultTypeInternal;
extern DeleteSessionRequestDefaultTypeInternal _DeleteSessionRequest_default_instance_;
class DeleteSessionResponse;
class DeleteSessionResponseDefaultTypeInternal;
extern DeleteSessionResponseDefaultTypeInternal _DeleteSessionResponse_default_instance_;
class FetchActionSecretRequest;
class FetchActionSecretRequestDefaultTypeInternal;
extern FetchActionSecretRequestDefaultTypeInternal _FetchActionSecretRequest_default_instance_;
class FetchActionSecretResponse;
class FetchActionSecretResponseDefaultTypeInternal;
extern FetchActionSecretResponseDefaultTypeInternal _FetchActionSecretResponse_default_instance_;
class GenerateActionSecretRequest;
class GenerateActionSecretRequestDefaultTypeInternal;
extern GenerateActionSecretRequestDefaultTypeInternal _GenerateActionSecretRequest_default_instance_;
class GenerateActionSecretResponse;
class GenerateActionSecretResponseDefaultTypeInternal;
extern GenerateActionSecretResponseDefaultTypeInternal _GenerateActionSecretResponse_default_instance_;
class GenerateOtpRequest;
class GenerateOtpRequestDefaultTypeInternal;
extern GenerateOtpRequestDefaultTypeInternal _GenerateOtpRequest_default_instance_;
class GenerateOtpResponse;
class GenerateOtpResponseDefaultTypeInternal;
extern GenerateOtpResponseDefaultTypeInternal _GenerateOtpResponse_default_instance_;
class GenerateSecretResetTokenRequest;
class GenerateSecretResetTokenRequestDefaultTypeInternal;
extern GenerateSecretResetTokenRequestDefaultTypeInternal _GenerateSecretResetTokenRequest_default_instance_;
class GenerateSecretResetTokenResponse;
class GenerateSecretResetTokenResponseDefaultTypeInternal;
extern GenerateSecretResetTokenResponseDefaultTypeInternal _GenerateSecretResetTokenResponse_default_instance_;
class GetAuthTokenRequest;
class GetAuthTokenRequestDefaultTypeInternal;
extern GetAuthTokenRequestDefaultTypeInternal _GetAuthTokenRequest_default_instance_;
class GetAuthTokenResponse;
class GetAuthTokenResponseDefaultTypeInternal;
extern GetAuthTokenResponseDefaultTypeInternal _GetAuthTokenResponse_default_instance_;
class GetOtpRequest;
class GetOtpRequestDefaultTypeInternal;
extern GetOtpRequestDefaultTypeInternal _GetOtpRequest_default_instance_;
class GetOtpResponse;
class GetOtpResponseDefaultTypeInternal;
extern GetOtpResponseDefaultTypeInternal _GetOtpResponse_default_instance_;
class OldTokenExchangeRequest;
class OldTokenExchangeRequestDefaultTypeInternal;
extern OldTokenExchangeRequestDefaultTypeInternal _OldTokenExchangeRequest_default_instance_;
class OldTokenExchangeResponse;
class OldTokenExchangeResponseDefaultTypeInternal;
extern OldTokenExchangeResponseDefaultTypeInternal _OldTokenExchangeResponse_default_instance_;
class RefreshAccessTokenRequest;
class RefreshAccessTokenRequestDefaultTypeInternal;
extern RefreshAccessTokenRequestDefaultTypeInternal _RefreshAccessTokenRequest_default_instance_;
class RefreshAccessTokenResponse;
class RefreshAccessTokenResponseDefaultTypeInternal;
extern RefreshAccessTokenResponseDefaultTypeInternal _RefreshAccessTokenResponse_default_instance_;
class ResendOtpRequest;
class ResendOtpRequestDefaultTypeInternal;
extern ResendOtpRequestDefaultTypeInternal _ResendOtpRequest_default_instance_;
class ResendOtpResponse;
class ResendOtpResponseDefaultTypeInternal;
extern ResendOtpResponseDefaultTypeInternal _ResendOtpResponse_default_instance_;
class UpdateActorSecretRequest;
class UpdateActorSecretRequestDefaultTypeInternal;
extern UpdateActorSecretRequestDefaultTypeInternal _UpdateActorSecretRequest_default_instance_;
class UpdateActorSecretResponse;
class UpdateActorSecretResponseDefaultTypeInternal;
extern UpdateActorSecretResponseDefaultTypeInternal _UpdateActorSecretResponse_default_instance_;
class ValidateActionSecretRequest;
class ValidateActionSecretRequestDefaultTypeInternal;
extern ValidateActionSecretRequestDefaultTypeInternal _ValidateActionSecretRequest_default_instance_;
class ValidateActionSecretResponse;
class ValidateActionSecretResponseDefaultTypeInternal;
extern ValidateActionSecretResponseDefaultTypeInternal _ValidateActionSecretResponse_default_instance_;
class ValidateJWTTokenRequest;
class ValidateJWTTokenRequestDefaultTypeInternal;
extern ValidateJWTTokenRequestDefaultTypeInternal _ValidateJWTTokenRequest_default_instance_;
class ValidateJWTTokenResponse;
class ValidateJWTTokenResponseDefaultTypeInternal;
extern ValidateJWTTokenResponseDefaultTypeInternal _ValidateJWTTokenResponse_default_instance_;
class ValidateOtpRequest;
class ValidateOtpRequestDefaultTypeInternal;
extern ValidateOtpRequestDefaultTypeInternal _ValidateOtpRequest_default_instance_;
class ValidateOtpResponse;
class ValidateOtpResponseDefaultTypeInternal;
extern ValidateOtpResponseDefaultTypeInternal _ValidateOtpResponse_default_instance_;
class ValidateSecretRequest;
class ValidateSecretRequestDefaultTypeInternal;
extern ValidateSecretRequestDefaultTypeInternal _ValidateSecretRequest_default_instance_;
class ValidateSecretResponse;
class ValidateSecretResponseDefaultTypeInternal;
extern ValidateSecretResponseDefaultTypeInternal _ValidateSecretResponse_default_instance_;
}  // namespace auth
}  // namespace platform
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::platform::auth::AddActorSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::AddActorSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::AddActorSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::AddActorSecretResponse>(Arena*);
template<> ::farm::nurture::platform::auth::CommunicationDetail* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::CommunicationDetail>(Arena*);
template<> ::farm::nurture::platform::auth::DeleteSessionRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::DeleteSessionRequest>(Arena*);
template<> ::farm::nurture::platform::auth::DeleteSessionResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::DeleteSessionResponse>(Arena*);
template<> ::farm::nurture::platform::auth::FetchActionSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::FetchActionSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::FetchActionSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::FetchActionSecretResponse>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateActionSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateActionSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateActionSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateActionSecretResponse>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateOtpRequest>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateOtpResponse>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateSecretResetTokenRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateSecretResetTokenRequest>(Arena*);
template<> ::farm::nurture::platform::auth::GenerateSecretResetTokenResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GenerateSecretResetTokenResponse>(Arena*);
template<> ::farm::nurture::platform::auth::GetAuthTokenRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GetAuthTokenRequest>(Arena*);
template<> ::farm::nurture::platform::auth::GetAuthTokenResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GetAuthTokenResponse>(Arena*);
template<> ::farm::nurture::platform::auth::GetOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GetOtpRequest>(Arena*);
template<> ::farm::nurture::platform::auth::GetOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::GetOtpResponse>(Arena*);
template<> ::farm::nurture::platform::auth::OldTokenExchangeRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::OldTokenExchangeRequest>(Arena*);
template<> ::farm::nurture::platform::auth::OldTokenExchangeResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::OldTokenExchangeResponse>(Arena*);
template<> ::farm::nurture::platform::auth::RefreshAccessTokenRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::RefreshAccessTokenRequest>(Arena*);
template<> ::farm::nurture::platform::auth::RefreshAccessTokenResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::RefreshAccessTokenResponse>(Arena*);
template<> ::farm::nurture::platform::auth::ResendOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ResendOtpRequest>(Arena*);
template<> ::farm::nurture::platform::auth::ResendOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ResendOtpResponse>(Arena*);
template<> ::farm::nurture::platform::auth::UpdateActorSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::UpdateActorSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::UpdateActorSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::UpdateActorSecretResponse>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateActionSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateActionSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateActionSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateActionSecretResponse>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateJWTTokenRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateJWTTokenRequest>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateJWTTokenResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateJWTTokenResponse>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateOtpRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateOtpRequest>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateOtpResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateOtpResponse>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateSecretRequest* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateSecretRequest>(Arena*);
template<> ::farm::nurture::platform::auth::ValidateSecretResponse* Arena::CreateMaybeMessage<::farm::nurture::platform::auth::ValidateSecretResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace platform {
namespace auth {

// ===================================================================

class GenerateOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateOtpRequest) */ {
 public:
  inline GenerateOtpRequest() : GenerateOtpRequest(nullptr) {}
  virtual ~GenerateOtpRequest();

  GenerateOtpRequest(const GenerateOtpRequest& from);
  GenerateOtpRequest(GenerateOtpRequest&& from) noexcept
    : GenerateOtpRequest() {
    *this = ::std::move(from);
  }

  inline GenerateOtpRequest& operator=(const GenerateOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateOtpRequest& operator=(GenerateOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateOtpRequest& default_instance();

  static inline const GenerateOtpRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateOtpRequest*>(
               &_GenerateOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenerateOtpRequest& a, GenerateOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateOtpRequest* New() const final {
    return CreateMaybeMessage<GenerateOtpRequest>(nullptr);
  }

  GenerateOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateOtpRequest& from);
  void MergeFrom(const GenerateOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateOtpRequest";
  }
  protected:
  explicit GenerateOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 3,
    kMobileNumberFieldNumber = 7,
    kCountryIsoCodeFieldNumber = 8,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kExpiryInSecondsFieldNumber = 4,
    kOtpDigitFieldNumber = 5,
    kMaxRetriesFieldNumber = 6,
    kClientTypeFieldNumber = 9,
    kCommunicationChannelFieldNumber = 10,
  };
  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 7;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // string countryIsoCode = 8;
  void clear_countryisocode();
  const std::string& countryisocode() const;
  void set_countryisocode(const std::string& value);
  void set_countryisocode(std::string&& value);
  void set_countryisocode(const char* value);
  void set_countryisocode(const char* value, size_t size);
  std::string* mutable_countryisocode();
  std::string* release_countryisocode();
  void set_allocated_countryisocode(std::string* countryisocode);
  private:
  const std::string& _internal_countryisocode() const;
  void _internal_set_countryisocode(const std::string& value);
  std::string* _internal_mutable_countryisocode();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // int32 expiryInSeconds = 4;
  void clear_expiryinseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds() const;
  void set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiryinseconds() const;
  void _internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 otpDigit = 5;
  void clear_otpdigit();
  ::PROTOBUF_NAMESPACE_ID::int32 otpdigit() const;
  void set_otpdigit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_otpdigit() const;
  void _internal_set_otpdigit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxRetries = 6;
  void clear_maxretries();
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries() const;
  void set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxretries() const;
  void _internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.ClientType clientType = 9;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 10;
  void clear_communicationchannel();
  ::farm::nurture::core::contracts::common::CommunicationChannel communicationchannel() const;
  void set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_communicationchannel() const;
  void _internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryisocode_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 otpdigit_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries_;
  int clienttype_;
  int communicationchannel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenerateOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateOtpResponse) */ {
 public:
  inline GenerateOtpResponse() : GenerateOtpResponse(nullptr) {}
  virtual ~GenerateOtpResponse();

  GenerateOtpResponse(const GenerateOtpResponse& from);
  GenerateOtpResponse(GenerateOtpResponse&& from) noexcept
    : GenerateOtpResponse() {
    *this = ::std::move(from);
  }

  inline GenerateOtpResponse& operator=(const GenerateOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateOtpResponse& operator=(GenerateOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateOtpResponse& default_instance();

  static inline const GenerateOtpResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateOtpResponse*>(
               &_GenerateOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateOtpResponse& a, GenerateOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateOtpResponse* New() const final {
    return CreateMaybeMessage<GenerateOtpResponse>(nullptr);
  }

  GenerateOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateOtpResponse& from);
  void MergeFrom(const GenerateOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateOtpResponse";
  }
  protected:
  explicit GenerateOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 4,
    kMobileNumberFieldNumber = 6,
    kActorIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiryFieldNumber = 5,
  };
  // string appName = 4;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 6;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiry = 5;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResendOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ResendOtpRequest) */ {
 public:
  inline ResendOtpRequest() : ResendOtpRequest(nullptr) {}
  virtual ~ResendOtpRequest();

  ResendOtpRequest(const ResendOtpRequest& from);
  ResendOtpRequest(ResendOtpRequest&& from) noexcept
    : ResendOtpRequest() {
    *this = ::std::move(from);
  }

  inline ResendOtpRequest& operator=(const ResendOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResendOtpRequest& operator=(ResendOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResendOtpRequest& default_instance();

  static inline const ResendOtpRequest* internal_default_instance() {
    return reinterpret_cast<const ResendOtpRequest*>(
               &_ResendOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResendOtpRequest& a, ResendOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResendOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResendOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResendOtpRequest* New() const final {
    return CreateMaybeMessage<ResendOtpRequest>(nullptr);
  }

  ResendOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResendOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResendOtpRequest& from);
  void MergeFrom(const ResendOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResendOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ResendOtpRequest";
  }
  protected:
  explicit ResendOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 3,
    kMobileNumberFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kClientTypeFieldNumber = 5,
    kCommunicationChannelFieldNumber = 6,
  };
  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 4;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ClientType clientType = 5;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 6;
  void clear_communicationchannel();
  ::farm::nurture::core::contracts::common::CommunicationChannel communicationchannel() const;
  void set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_communicationchannel() const;
  void _internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ResendOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int clienttype_;
  int communicationchannel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResendOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ResendOtpResponse) */ {
 public:
  inline ResendOtpResponse() : ResendOtpResponse(nullptr) {}
  virtual ~ResendOtpResponse();

  ResendOtpResponse(const ResendOtpResponse& from);
  ResendOtpResponse(ResendOtpResponse&& from) noexcept
    : ResendOtpResponse() {
    *this = ::std::move(from);
  }

  inline ResendOtpResponse& operator=(const ResendOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResendOtpResponse& operator=(ResendOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResendOtpResponse& default_instance();

  static inline const ResendOtpResponse* internal_default_instance() {
    return reinterpret_cast<const ResendOtpResponse*>(
               &_ResendOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResendOtpResponse& a, ResendOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResendOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResendOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResendOtpResponse* New() const final {
    return CreateMaybeMessage<ResendOtpResponse>(nullptr);
  }

  ResendOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResendOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResendOtpResponse& from);
  void MergeFrom(const ResendOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResendOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ResendOtpResponse";
  }
  protected:
  explicit ResendOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 4,
    kMobileNumberFieldNumber = 6,
    kActorIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiryFieldNumber = 5,
  };
  // string appName = 4;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 6;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.ActorID actorId = 3;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiry = 5;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ResendOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateOtpRequest) */ {
 public:
  inline ValidateOtpRequest() : ValidateOtpRequest(nullptr) {}
  virtual ~ValidateOtpRequest();

  ValidateOtpRequest(const ValidateOtpRequest& from);
  ValidateOtpRequest(ValidateOtpRequest&& from) noexcept
    : ValidateOtpRequest() {
    *this = ::std::move(from);
  }

  inline ValidateOtpRequest& operator=(const ValidateOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateOtpRequest& operator=(ValidateOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateOtpRequest& default_instance();

  static inline const ValidateOtpRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateOtpRequest*>(
               &_ValidateOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ValidateOtpRequest& a, ValidateOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateOtpRequest* New() const final {
    return CreateMaybeMessage<ValidateOtpRequest>(nullptr);
  }

  ValidateOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateOtpRequest& from);
  void MergeFrom(const ValidateOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateOtpRequest";
  }
  protected:
  explicit ValidateOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 3,
    kOtpFieldNumber = 4,
    kMobileNumberFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
  };
  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string otp = 4;
  void clear_otp();
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);
  private:
  const std::string& _internal_otp() const;
  void _internal_set_otp(const std::string& value);
  std::string* _internal_mutable_otp();
  public:

  // string mobileNumber = 5;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateOtpResponse) */ {
 public:
  inline ValidateOtpResponse() : ValidateOtpResponse(nullptr) {}
  virtual ~ValidateOtpResponse();

  ValidateOtpResponse(const ValidateOtpResponse& from);
  ValidateOtpResponse(ValidateOtpResponse&& from) noexcept
    : ValidateOtpResponse() {
    *this = ::std::move(from);
  }

  inline ValidateOtpResponse& operator=(const ValidateOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateOtpResponse& operator=(ValidateOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateOtpResponse& default_instance();

  static inline const ValidateOtpResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateOtpResponse*>(
               &_ValidateOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ValidateOtpResponse& a, ValidateOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateOtpResponse* New() const final {
    return CreateMaybeMessage<ValidateOtpResponse>(nullptr);
  }

  ValidateOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateOtpResponse& from);
  void MergeFrom(const ValidateOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateOtpResponse";
  }
  protected:
  explicit ValidateOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAuthTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GetAuthTokenRequest) */ {
 public:
  inline GetAuthTokenRequest() : GetAuthTokenRequest(nullptr) {}
  virtual ~GetAuthTokenRequest();

  GetAuthTokenRequest(const GetAuthTokenRequest& from);
  GetAuthTokenRequest(GetAuthTokenRequest&& from) noexcept
    : GetAuthTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthTokenRequest& operator=(const GetAuthTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthTokenRequest& operator=(GetAuthTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthTokenRequest& default_instance();

  static inline const GetAuthTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthTokenRequest*>(
               &_GetAuthTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAuthTokenRequest& a, GetAuthTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthTokenRequest* New() const final {
    return CreateMaybeMessage<GetAuthTokenRequest>(nullptr);
  }

  GetAuthTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthTokenRequest& from);
  void MergeFrom(const GetAuthTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GetAuthTokenRequest";
  }
  protected:
  explicit GetAuthTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClaimsFieldNumber = 12,
    kAppNameFieldNumber = 3,
    kOtpFieldNumber = 4,
    kClientIdFieldNumber = 5,
    kClientSecretFieldNumber = 6,
    kScopeFieldNumber = 7,
    kAuthSecretFieldNumber = 9,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSecretTypeFieldNumber = 10,
    kClientTypeFieldNumber = 11,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs claims = 12;
  int claims_size() const;
  private:
  int _internal_claims_size() const;
  public:
  void clear_claims();
  ::farm::nurture::core::contracts::common::Attribs* mutable_claims(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_claims();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_claims(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_claims();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& claims(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_claims();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      claims() const;

  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string otp = 4;
  void clear_otp();
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);
  private:
  const std::string& _internal_otp() const;
  void _internal_set_otp(const std::string& value);
  std::string* _internal_mutable_otp();
  public:

  // string clientId = 5;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string clientSecret = 6;
  void clear_clientsecret();
  const std::string& clientsecret() const;
  void set_clientsecret(const std::string& value);
  void set_clientsecret(std::string&& value);
  void set_clientsecret(const char* value);
  void set_clientsecret(const char* value, size_t size);
  std::string* mutable_clientsecret();
  std::string* release_clientsecret();
  void set_allocated_clientsecret(std::string* clientsecret);
  private:
  const std::string& _internal_clientsecret() const;
  void _internal_set_clientsecret(const std::string& value);
  std::string* _internal_mutable_clientsecret();
  public:

  // string scope = 7;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string authSecret = 9;
  void clear_authsecret();
  const std::string& authsecret() const;
  void set_authsecret(const std::string& value);
  void set_authsecret(std::string&& value);
  void set_authsecret(const char* value);
  void set_authsecret(const char* value, size_t size);
  std::string* mutable_authsecret();
  std::string* release_authsecret();
  void set_allocated_authsecret(std::string* authsecret);
  private:
  const std::string& _internal_authsecret() const;
  void _internal_set_authsecret(const std::string& value);
  std::string* _internal_mutable_authsecret();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.SecretType secretType = 10;
  void clear_secrettype();
  ::farm::nurture::core::contracts::common::SecretType secrettype() const;
  void set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  private:
  ::farm::nurture::core::contracts::common::SecretType _internal_secrettype() const;
  void _internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  public:

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GetAuthTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > claims_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authsecret_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int secrettype_;
  int clienttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAuthTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GetAuthTokenResponse) */ {
 public:
  inline GetAuthTokenResponse() : GetAuthTokenResponse(nullptr) {}
  virtual ~GetAuthTokenResponse();

  GetAuthTokenResponse(const GetAuthTokenResponse& from);
  GetAuthTokenResponse(GetAuthTokenResponse&& from) noexcept
    : GetAuthTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthTokenResponse& operator=(const GetAuthTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthTokenResponse& operator=(GetAuthTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthTokenResponse& default_instance();

  static inline const GetAuthTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthTokenResponse*>(
               &_GetAuthTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAuthTokenResponse& a, GetAuthTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthTokenResponse* New() const final {
    return CreateMaybeMessage<GetAuthTokenResponse>(nullptr);
  }

  GetAuthTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthTokenResponse& from);
  void MergeFrom(const GetAuthTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GetAuthTokenResponse";
  }
  protected:
  explicit GetAuthTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 3,
    kIdTokenFieldNumber = 5,
    kRefreshTokenFieldNumber = 6,
    kScopeFieldNumber = 7,
    kTokenTypeFieldNumber = 8,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiresInFieldNumber = 4,
  };
  // string accessToken = 3;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string idToken = 5;
  void clear_idtoken();
  const std::string& idtoken() const;
  void set_idtoken(const std::string& value);
  void set_idtoken(std::string&& value);
  void set_idtoken(const char* value);
  void set_idtoken(const char* value, size_t size);
  std::string* mutable_idtoken();
  std::string* release_idtoken();
  void set_allocated_idtoken(std::string* idtoken);
  private:
  const std::string& _internal_idtoken() const;
  void _internal_set_idtoken(const std::string& value);
  std::string* _internal_mutable_idtoken();
  public:

  // string refreshToken = 6;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // string scope = 7;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string tokenType = 8;
  void clear_tokentype();
  const std::string& tokentype() const;
  void set_tokentype(const std::string& value);
  void set_tokentype(std::string&& value);
  void set_tokentype(const char* value);
  void set_tokentype(const char* value, size_t size);
  std::string* mutable_tokentype();
  std::string* release_tokentype();
  void set_allocated_tokentype(std::string* tokentype);
  private:
  const std::string& _internal_tokentype() const;
  void _internal_set_tokentype(const std::string& value);
  std::string* _internal_mutable_tokentype();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiresIn = 4;
  void clear_expiresin();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin() const;
  void set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresin() const;
  void _internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GetAuthTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokentype_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OldTokenExchangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.OldTokenExchangeRequest) */ {
 public:
  inline OldTokenExchangeRequest() : OldTokenExchangeRequest(nullptr) {}
  virtual ~OldTokenExchangeRequest();

  OldTokenExchangeRequest(const OldTokenExchangeRequest& from);
  OldTokenExchangeRequest(OldTokenExchangeRequest&& from) noexcept
    : OldTokenExchangeRequest() {
    *this = ::std::move(from);
  }

  inline OldTokenExchangeRequest& operator=(const OldTokenExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OldTokenExchangeRequest& operator=(OldTokenExchangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OldTokenExchangeRequest& default_instance();

  static inline const OldTokenExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const OldTokenExchangeRequest*>(
               &_OldTokenExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OldTokenExchangeRequest& a, OldTokenExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OldTokenExchangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OldTokenExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OldTokenExchangeRequest* New() const final {
    return CreateMaybeMessage<OldTokenExchangeRequest>(nullptr);
  }

  OldTokenExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OldTokenExchangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OldTokenExchangeRequest& from);
  void MergeFrom(const OldTokenExchangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OldTokenExchangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.OldTokenExchangeRequest";
  }
  protected:
  explicit OldTokenExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 4,
    kClientIdFieldNumber = 5,
    kClientSecretFieldNumber = 6,
    kScopeFieldNumber = 7,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kClientTypeFieldNumber = 11,
  };
  // string appName = 4;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string clientId = 5;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string clientSecret = 6;
  void clear_clientsecret();
  const std::string& clientsecret() const;
  void set_clientsecret(const std::string& value);
  void set_clientsecret(std::string&& value);
  void set_clientsecret(const char* value);
  void set_clientsecret(const char* value, size_t size);
  std::string* mutable_clientsecret();
  std::string* release_clientsecret();
  void set_allocated_clientsecret(std::string* clientsecret);
  private:
  const std::string& _internal_clientsecret() const;
  void _internal_set_clientsecret(const std::string& value);
  std::string* _internal_mutable_clientsecret();
  public:

  // string scope = 7;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ClientType clientType = 11;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.OldTokenExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int clienttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OldTokenExchangeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.OldTokenExchangeResponse) */ {
 public:
  inline OldTokenExchangeResponse() : OldTokenExchangeResponse(nullptr) {}
  virtual ~OldTokenExchangeResponse();

  OldTokenExchangeResponse(const OldTokenExchangeResponse& from);
  OldTokenExchangeResponse(OldTokenExchangeResponse&& from) noexcept
    : OldTokenExchangeResponse() {
    *this = ::std::move(from);
  }

  inline OldTokenExchangeResponse& operator=(const OldTokenExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OldTokenExchangeResponse& operator=(OldTokenExchangeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OldTokenExchangeResponse& default_instance();

  static inline const OldTokenExchangeResponse* internal_default_instance() {
    return reinterpret_cast<const OldTokenExchangeResponse*>(
               &_OldTokenExchangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OldTokenExchangeResponse& a, OldTokenExchangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OldTokenExchangeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OldTokenExchangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OldTokenExchangeResponse* New() const final {
    return CreateMaybeMessage<OldTokenExchangeResponse>(nullptr);
  }

  OldTokenExchangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OldTokenExchangeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OldTokenExchangeResponse& from);
  void MergeFrom(const OldTokenExchangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OldTokenExchangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.OldTokenExchangeResponse";
  }
  protected:
  explicit OldTokenExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 3,
    kIdTokenFieldNumber = 5,
    kRefreshTokenFieldNumber = 6,
    kScopeFieldNumber = 7,
    kTokenTypeFieldNumber = 8,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiresInFieldNumber = 4,
  };
  // string accessToken = 3;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string idToken = 5;
  void clear_idtoken();
  const std::string& idtoken() const;
  void set_idtoken(const std::string& value);
  void set_idtoken(std::string&& value);
  void set_idtoken(const char* value);
  void set_idtoken(const char* value, size_t size);
  std::string* mutable_idtoken();
  std::string* release_idtoken();
  void set_allocated_idtoken(std::string* idtoken);
  private:
  const std::string& _internal_idtoken() const;
  void _internal_set_idtoken(const std::string& value);
  std::string* _internal_mutable_idtoken();
  public:

  // string refreshToken = 6;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // string scope = 7;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string tokenType = 8;
  void clear_tokentype();
  const std::string& tokentype() const;
  void set_tokentype(const std::string& value);
  void set_tokentype(std::string&& value);
  void set_tokentype(const char* value);
  void set_tokentype(const char* value, size_t size);
  std::string* mutable_tokentype();
  std::string* release_tokentype();
  void set_allocated_tokentype(std::string* tokentype);
  private:
  const std::string& _internal_tokentype() const;
  void _internal_set_tokentype(const std::string& value);
  std::string* _internal_mutable_tokentype();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiresIn = 4;
  void clear_expiresin();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin() const;
  void set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresin() const;
  void _internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.OldTokenExchangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokentype_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GetOtpRequest) */ {
 public:
  inline GetOtpRequest() : GetOtpRequest(nullptr) {}
  virtual ~GetOtpRequest();

  GetOtpRequest(const GetOtpRequest& from);
  GetOtpRequest(GetOtpRequest&& from) noexcept
    : GetOtpRequest() {
    *this = ::std::move(from);
  }

  inline GetOtpRequest& operator=(const GetOtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOtpRequest& operator=(GetOtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOtpRequest& default_instance();

  static inline const GetOtpRequest* internal_default_instance() {
    return reinterpret_cast<const GetOtpRequest*>(
               &_GetOtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetOtpRequest& a, GetOtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOtpRequest* New() const final {
    return CreateMaybeMessage<GetOtpRequest>(nullptr);
  }

  GetOtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOtpRequest& from);
  void MergeFrom(const GetOtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GetOtpRequest";
  }
  protected:
  explicit GetOtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 3,
    kMobileNumberFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
  };
  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 4;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GetOtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GetOtpResponse) */ {
 public:
  inline GetOtpResponse() : GetOtpResponse(nullptr) {}
  virtual ~GetOtpResponse();

  GetOtpResponse(const GetOtpResponse& from);
  GetOtpResponse(GetOtpResponse&& from) noexcept
    : GetOtpResponse() {
    *this = ::std::move(from);
  }

  inline GetOtpResponse& operator=(const GetOtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOtpResponse& operator=(GetOtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOtpResponse& default_instance();

  static inline const GetOtpResponse* internal_default_instance() {
    return reinterpret_cast<const GetOtpResponse*>(
               &_GetOtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetOtpResponse& a, GetOtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOtpResponse* New() const final {
    return CreateMaybeMessage<GetOtpResponse>(nullptr);
  }

  GetOtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOtpResponse& from);
  void MergeFrom(const GetOtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GetOtpResponse";
  }
  protected:
  explicit GetOtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtpFieldNumber = 3,
    kMobileNumberFieldNumber = 6,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kGenerationTimeFieldNumber = 4,
    kExpiryTimeFieldNumber = 5,
  };
  // string otp = 3;
  void clear_otp();
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);
  private:
  const std::string& _internal_otp() const;
  void _internal_set_otp(const std::string& value);
  std::string* _internal_mutable_otp();
  public:

  // string mobileNumber = 6;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 generationTime = 4;
  void clear_generationtime();
  ::PROTOBUF_NAMESPACE_ID::int64 generationtime() const;
  void set_generationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_generationtime() const;
  void _internal_set_generationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiryTime = 5;
  void clear_expirytime();
  ::PROTOBUF_NAMESPACE_ID::int64 expirytime() const;
  void set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expirytime() const;
  void _internal_set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GetOtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 generationtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 expirytime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddActorSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.AddActorSecretRequest) */ {
 public:
  inline AddActorSecretRequest() : AddActorSecretRequest(nullptr) {}
  virtual ~AddActorSecretRequest();

  AddActorSecretRequest(const AddActorSecretRequest& from);
  AddActorSecretRequest(AddActorSecretRequest&& from) noexcept
    : AddActorSecretRequest() {
    *this = ::std::move(from);
  }

  inline AddActorSecretRequest& operator=(const AddActorSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddActorSecretRequest& operator=(AddActorSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddActorSecretRequest& default_instance();

  static inline const AddActorSecretRequest* internal_default_instance() {
    return reinterpret_cast<const AddActorSecretRequest*>(
               &_AddActorSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddActorSecretRequest& a, AddActorSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddActorSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddActorSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddActorSecretRequest* New() const final {
    return CreateMaybeMessage<AddActorSecretRequest>(nullptr);
  }

  AddActorSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddActorSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddActorSecretRequest& from);
  void MergeFrom(const AddActorSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddActorSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.AddActorSecretRequest";
  }
  protected:
  explicit AddActorSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthSecretFieldNumber = 3,
    kAppNameFieldNumber = 7,
    kCountryIsoCodeFieldNumber = 8,
    kMobileNumberFieldNumber = 9,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSecretTypeFieldNumber = 4,
    kExpiryInSecondsFieldNumber = 5,
    kMaxRetriesFieldNumber = 6,
    kClientTypeFieldNumber = 10,
  };
  // string authSecret = 3;
  void clear_authsecret();
  const std::string& authsecret() const;
  void set_authsecret(const std::string& value);
  void set_authsecret(std::string&& value);
  void set_authsecret(const char* value);
  void set_authsecret(const char* value, size_t size);
  std::string* mutable_authsecret();
  std::string* release_authsecret();
  void set_allocated_authsecret(std::string* authsecret);
  private:
  const std::string& _internal_authsecret() const;
  void _internal_set_authsecret(const std::string& value);
  std::string* _internal_mutable_authsecret();
  public:

  // string appName = 7;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string countryIsoCode = 8;
  void clear_countryisocode();
  const std::string& countryisocode() const;
  void set_countryisocode(const std::string& value);
  void set_countryisocode(std::string&& value);
  void set_countryisocode(const char* value);
  void set_countryisocode(const char* value, size_t size);
  std::string* mutable_countryisocode();
  std::string* release_countryisocode();
  void set_allocated_countryisocode(std::string* countryisocode);
  private:
  const std::string& _internal_countryisocode() const;
  void _internal_set_countryisocode(const std::string& value);
  std::string* _internal_mutable_countryisocode();
  public:

  // string mobileNumber = 9;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  void clear_secrettype();
  ::farm::nurture::core::contracts::common::SecretType secrettype() const;
  void set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  private:
  ::farm::nurture::core::contracts::common::SecretType _internal_secrettype() const;
  void _internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  public:

  // int32 expiryInSeconds = 5;
  void clear_expiryinseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds() const;
  void set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiryinseconds() const;
  void _internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxRetries = 6;
  void clear_maxretries();
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries() const;
  void set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxretries() const;
  void _internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.ClientType clientType = 10;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.AddActorSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryisocode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int secrettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries_;
  int clienttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddActorSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.AddActorSecretResponse) */ {
 public:
  inline AddActorSecretResponse() : AddActorSecretResponse(nullptr) {}
  virtual ~AddActorSecretResponse();

  AddActorSecretResponse(const AddActorSecretResponse& from);
  AddActorSecretResponse(AddActorSecretResponse&& from) noexcept
    : AddActorSecretResponse() {
    *this = ::std::move(from);
  }

  inline AddActorSecretResponse& operator=(const AddActorSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddActorSecretResponse& operator=(AddActorSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddActorSecretResponse& default_instance();

  static inline const AddActorSecretResponse* internal_default_instance() {
    return reinterpret_cast<const AddActorSecretResponse*>(
               &_AddActorSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddActorSecretResponse& a, AddActorSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddActorSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddActorSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddActorSecretResponse* New() const final {
    return CreateMaybeMessage<AddActorSecretResponse>(nullptr);
  }

  AddActorSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddActorSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddActorSecretResponse& from);
  void MergeFrom(const AddActorSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddActorSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.AddActorSecretResponse";
  }
  protected:
  explicit AddActorSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.AddActorSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateActorSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.UpdateActorSecretRequest) */ {
 public:
  inline UpdateActorSecretRequest() : UpdateActorSecretRequest(nullptr) {}
  virtual ~UpdateActorSecretRequest();

  UpdateActorSecretRequest(const UpdateActorSecretRequest& from);
  UpdateActorSecretRequest(UpdateActorSecretRequest&& from) noexcept
    : UpdateActorSecretRequest() {
    *this = ::std::move(from);
  }

  inline UpdateActorSecretRequest& operator=(const UpdateActorSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateActorSecretRequest& operator=(UpdateActorSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateActorSecretRequest& default_instance();

  static inline const UpdateActorSecretRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateActorSecretRequest*>(
               &_UpdateActorSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateActorSecretRequest& a, UpdateActorSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateActorSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateActorSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateActorSecretRequest* New() const final {
    return CreateMaybeMessage<UpdateActorSecretRequest>(nullptr);
  }

  UpdateActorSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateActorSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateActorSecretRequest& from);
  void MergeFrom(const UpdateActorSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateActorSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.UpdateActorSecretRequest";
  }
  protected:
  explicit UpdateActorSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldAuthSecretFieldNumber = 3,
    kNewAuthSecretFieldNumber = 4,
    kAccessTokenFieldNumber = 5,
    kAppNameFieldNumber = 9,
    kMobileNumberFieldNumber = 10,
    kResetSecretGuidFieldNumber = 11,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSecretTypeFieldNumber = 6,
    kExpiryInSecondsFieldNumber = 7,
    kMaxRetriesFieldNumber = 8,
    kClientTypeFieldNumber = 13,
    kResetSecretExpiryFieldNumber = 12,
  };
  // string oldAuthSecret = 3;
  void clear_oldauthsecret();
  const std::string& oldauthsecret() const;
  void set_oldauthsecret(const std::string& value);
  void set_oldauthsecret(std::string&& value);
  void set_oldauthsecret(const char* value);
  void set_oldauthsecret(const char* value, size_t size);
  std::string* mutable_oldauthsecret();
  std::string* release_oldauthsecret();
  void set_allocated_oldauthsecret(std::string* oldauthsecret);
  private:
  const std::string& _internal_oldauthsecret() const;
  void _internal_set_oldauthsecret(const std::string& value);
  std::string* _internal_mutable_oldauthsecret();
  public:

  // string newAuthSecret = 4;
  void clear_newauthsecret();
  const std::string& newauthsecret() const;
  void set_newauthsecret(const std::string& value);
  void set_newauthsecret(std::string&& value);
  void set_newauthsecret(const char* value);
  void set_newauthsecret(const char* value, size_t size);
  std::string* mutable_newauthsecret();
  std::string* release_newauthsecret();
  void set_allocated_newauthsecret(std::string* newauthsecret);
  private:
  const std::string& _internal_newauthsecret() const;
  void _internal_set_newauthsecret(const std::string& value);
  std::string* _internal_mutable_newauthsecret();
  public:

  // string accessToken = 5;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string appName = 9;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 10;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // string resetSecretGuid = 11;
  void clear_resetsecretguid();
  const std::string& resetsecretguid() const;
  void set_resetsecretguid(const std::string& value);
  void set_resetsecretguid(std::string&& value);
  void set_resetsecretguid(const char* value);
  void set_resetsecretguid(const char* value, size_t size);
  std::string* mutable_resetsecretguid();
  std::string* release_resetsecretguid();
  void set_allocated_resetsecretguid(std::string* resetsecretguid);
  private:
  const std::string& _internal_resetsecretguid() const;
  void _internal_set_resetsecretguid(const std::string& value);
  std::string* _internal_mutable_resetsecretguid();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.SecretType secretType = 6;
  void clear_secrettype();
  ::farm::nurture::core::contracts::common::SecretType secrettype() const;
  void set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  private:
  ::farm::nurture::core::contracts::common::SecretType _internal_secrettype() const;
  void _internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  public:

  // int32 expiryInSeconds = 7;
  void clear_expiryinseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds() const;
  void set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiryinseconds() const;
  void _internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxRetries = 8;
  void clear_maxretries();
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries() const;
  void set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxretries() const;
  void _internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.ClientType clientType = 13;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // int64 resetSecretExpiry = 12;
  void clear_resetsecretexpiry();
  ::PROTOBUF_NAMESPACE_ID::int64 resetsecretexpiry() const;
  void set_resetsecretexpiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resetsecretexpiry() const;
  void _internal_set_resetsecretexpiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.UpdateActorSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldauthsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newauthsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resetsecretguid_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int secrettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries_;
  int clienttype_;
  ::PROTOBUF_NAMESPACE_ID::int64 resetsecretexpiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateActorSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.UpdateActorSecretResponse) */ {
 public:
  inline UpdateActorSecretResponse() : UpdateActorSecretResponse(nullptr) {}
  virtual ~UpdateActorSecretResponse();

  UpdateActorSecretResponse(const UpdateActorSecretResponse& from);
  UpdateActorSecretResponse(UpdateActorSecretResponse&& from) noexcept
    : UpdateActorSecretResponse() {
    *this = ::std::move(from);
  }

  inline UpdateActorSecretResponse& operator=(const UpdateActorSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateActorSecretResponse& operator=(UpdateActorSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateActorSecretResponse& default_instance();

  static inline const UpdateActorSecretResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateActorSecretResponse*>(
               &_UpdateActorSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateActorSecretResponse& a, UpdateActorSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateActorSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateActorSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateActorSecretResponse* New() const final {
    return CreateMaybeMessage<UpdateActorSecretResponse>(nullptr);
  }

  UpdateActorSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateActorSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateActorSecretResponse& from);
  void MergeFrom(const UpdateActorSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateActorSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.UpdateActorSecretResponse";
  }
  protected:
  explicit UpdateActorSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.UpdateActorSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateSecretRequest) */ {
 public:
  inline ValidateSecretRequest() : ValidateSecretRequest(nullptr) {}
  virtual ~ValidateSecretRequest();

  ValidateSecretRequest(const ValidateSecretRequest& from);
  ValidateSecretRequest(ValidateSecretRequest&& from) noexcept
    : ValidateSecretRequest() {
    *this = ::std::move(from);
  }

  inline ValidateSecretRequest& operator=(const ValidateSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSecretRequest& operator=(ValidateSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateSecretRequest& default_instance();

  static inline const ValidateSecretRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateSecretRequest*>(
               &_ValidateSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ValidateSecretRequest& a, ValidateSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateSecretRequest* New() const final {
    return CreateMaybeMessage<ValidateSecretRequest>(nullptr);
  }

  ValidateSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateSecretRequest& from);
  void MergeFrom(const ValidateSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateSecretRequest";
  }
  protected:
  explicit ValidateSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthSecretFieldNumber = 3,
    kAppNameFieldNumber = 5,
    kMobileNumberFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSecretTypeFieldNumber = 4,
  };
  // string authSecret = 3;
  void clear_authsecret();
  const std::string& authsecret() const;
  void set_authsecret(const std::string& value);
  void set_authsecret(std::string&& value);
  void set_authsecret(const char* value);
  void set_authsecret(const char* value, size_t size);
  std::string* mutable_authsecret();
  std::string* release_authsecret();
  void set_allocated_authsecret(std::string* authsecret);
  private:
  const std::string& _internal_authsecret() const;
  void _internal_set_authsecret(const std::string& value);
  std::string* _internal_mutable_authsecret();
  public:

  // string appName = 5;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string mobileNumber = 6;
  void clear_mobilenumber();
  const std::string& mobilenumber() const;
  void set_mobilenumber(const std::string& value);
  void set_mobilenumber(std::string&& value);
  void set_mobilenumber(const char* value);
  void set_mobilenumber(const char* value, size_t size);
  std::string* mutable_mobilenumber();
  std::string* release_mobilenumber();
  void set_allocated_mobilenumber(std::string* mobilenumber);
  private:
  const std::string& _internal_mobilenumber() const;
  void _internal_set_mobilenumber(const std::string& value);
  std::string* _internal_mutable_mobilenumber();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  void clear_secrettype();
  ::farm::nurture::core::contracts::common::SecretType secrettype() const;
  void set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  private:
  ::farm::nurture::core::contracts::common::SecretType _internal_secrettype() const;
  void _internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobilenumber_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int secrettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateSecretResponse) */ {
 public:
  inline ValidateSecretResponse() : ValidateSecretResponse(nullptr) {}
  virtual ~ValidateSecretResponse();

  ValidateSecretResponse(const ValidateSecretResponse& from);
  ValidateSecretResponse(ValidateSecretResponse&& from) noexcept
    : ValidateSecretResponse() {
    *this = ::std::move(from);
  }

  inline ValidateSecretResponse& operator=(const ValidateSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSecretResponse& operator=(ValidateSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateSecretResponse& default_instance();

  static inline const ValidateSecretResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateSecretResponse*>(
               &_ValidateSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ValidateSecretResponse& a, ValidateSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateSecretResponse* New() const final {
    return CreateMaybeMessage<ValidateSecretResponse>(nullptr);
  }

  ValidateSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateSecretResponse& from);
  void MergeFrom(const ValidateSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateSecretResponse";
  }
  protected:
  explicit ValidateSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenerateSecretResetTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateSecretResetTokenRequest) */ {
 public:
  inline GenerateSecretResetTokenRequest() : GenerateSecretResetTokenRequest(nullptr) {}
  virtual ~GenerateSecretResetTokenRequest();

  GenerateSecretResetTokenRequest(const GenerateSecretResetTokenRequest& from);
  GenerateSecretResetTokenRequest(GenerateSecretResetTokenRequest&& from) noexcept
    : GenerateSecretResetTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateSecretResetTokenRequest& operator=(const GenerateSecretResetTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateSecretResetTokenRequest& operator=(GenerateSecretResetTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateSecretResetTokenRequest& default_instance();

  static inline const GenerateSecretResetTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateSecretResetTokenRequest*>(
               &_GenerateSecretResetTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GenerateSecretResetTokenRequest& a, GenerateSecretResetTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateSecretResetTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateSecretResetTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateSecretResetTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateSecretResetTokenRequest>(nullptr);
  }

  GenerateSecretResetTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateSecretResetTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateSecretResetTokenRequest& from);
  void MergeFrom(const GenerateSecretResetTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateSecretResetTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateSecretResetTokenRequest";
  }
  protected:
  explicit GenerateSecretResetTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 3,
    kAppNameFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kSecretTypeFieldNumber = 4,
  };
  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string appName = 5;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.SecretType secretType = 4;
  void clear_secrettype();
  ::farm::nurture::core::contracts::common::SecretType secrettype() const;
  void set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  private:
  ::farm::nurture::core::contracts::common::SecretType _internal_secrettype() const;
  void _internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateSecretResetTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int secrettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenerateSecretResetTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateSecretResetTokenResponse) */ {
 public:
  inline GenerateSecretResetTokenResponse() : GenerateSecretResetTokenResponse(nullptr) {}
  virtual ~GenerateSecretResetTokenResponse();

  GenerateSecretResetTokenResponse(const GenerateSecretResetTokenResponse& from);
  GenerateSecretResetTokenResponse(GenerateSecretResetTokenResponse&& from) noexcept
    : GenerateSecretResetTokenResponse() {
    *this = ::std::move(from);
  }

  inline GenerateSecretResetTokenResponse& operator=(const GenerateSecretResetTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateSecretResetTokenResponse& operator=(GenerateSecretResetTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateSecretResetTokenResponse& default_instance();

  static inline const GenerateSecretResetTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateSecretResetTokenResponse*>(
               &_GenerateSecretResetTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GenerateSecretResetTokenResponse& a, GenerateSecretResetTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateSecretResetTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateSecretResetTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateSecretResetTokenResponse* New() const final {
    return CreateMaybeMessage<GenerateSecretResetTokenResponse>(nullptr);
  }

  GenerateSecretResetTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateSecretResetTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateSecretResetTokenResponse& from);
  void MergeFrom(const GenerateSecretResetTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateSecretResetTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateSecretResetTokenResponse";
  }
  protected:
  explicit GenerateSecretResetTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiryTimeFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiryTime = 3;
  void clear_expirytime();
  ::PROTOBUF_NAMESPACE_ID::int64 expirytime() const;
  void set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expirytime() const;
  void _internal_set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateSecretResetTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expirytime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.DeleteSessionRequest) */ {
 public:
  inline DeleteSessionRequest() : DeleteSessionRequest(nullptr) {}
  virtual ~DeleteSessionRequest();

  DeleteSessionRequest(const DeleteSessionRequest& from);
  DeleteSessionRequest(DeleteSessionRequest&& from) noexcept
    : DeleteSessionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSessionRequest& operator=(const DeleteSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSessionRequest& operator=(DeleteSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSessionRequest& default_instance();

  static inline const DeleteSessionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSessionRequest*>(
               &_DeleteSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteSessionRequest& a, DeleteSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSessionRequest* New() const final {
    return CreateMaybeMessage<DeleteSessionRequest>(nullptr);
  }

  DeleteSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSessionRequest& from);
  void MergeFrom(const DeleteSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.DeleteSessionRequest";
  }
  protected:
  explicit DeleteSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 3,
    kRefreshTokenFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kClientTypeFieldNumber = 4,
  };
  // string appName = 3;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string refreshToken = 5;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ClientType clientType = 4;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.DeleteSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int clienttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.DeleteSessionResponse) */ {
 public:
  inline DeleteSessionResponse() : DeleteSessionResponse(nullptr) {}
  virtual ~DeleteSessionResponse();

  DeleteSessionResponse(const DeleteSessionResponse& from);
  DeleteSessionResponse(DeleteSessionResponse&& from) noexcept
    : DeleteSessionResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSessionResponse& operator=(const DeleteSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSessionResponse& operator=(DeleteSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSessionResponse& default_instance();

  static inline const DeleteSessionResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSessionResponse*>(
               &_DeleteSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteSessionResponse& a, DeleteSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSessionResponse* New() const final {
    return CreateMaybeMessage<DeleteSessionResponse>(nullptr);
  }

  DeleteSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSessionResponse& from);
  void MergeFrom(const DeleteSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.DeleteSessionResponse";
  }
  protected:
  explicit DeleteSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.DeleteSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateJWTTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateJWTTokenRequest) */ {
 public:
  inline ValidateJWTTokenRequest() : ValidateJWTTokenRequest(nullptr) {}
  virtual ~ValidateJWTTokenRequest();

  ValidateJWTTokenRequest(const ValidateJWTTokenRequest& from);
  ValidateJWTTokenRequest(ValidateJWTTokenRequest&& from) noexcept
    : ValidateJWTTokenRequest() {
    *this = ::std::move(from);
  }

  inline ValidateJWTTokenRequest& operator=(const ValidateJWTTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateJWTTokenRequest& operator=(ValidateJWTTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateJWTTokenRequest& default_instance();

  static inline const ValidateJWTTokenRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateJWTTokenRequest*>(
               &_ValidateJWTTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ValidateJWTTokenRequest& a, ValidateJWTTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateJWTTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateJWTTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateJWTTokenRequest* New() const final {
    return CreateMaybeMessage<ValidateJWTTokenRequest>(nullptr);
  }

  ValidateJWTTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateJWTTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateJWTTokenRequest& from);
  void MergeFrom(const ValidateJWTTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateJWTTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateJWTTokenRequest";
  }
  protected:
  explicit ValidateJWTTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateJWTTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateJWTTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateJWTTokenResponse) */ {
 public:
  inline ValidateJWTTokenResponse() : ValidateJWTTokenResponse(nullptr) {}
  virtual ~ValidateJWTTokenResponse();

  ValidateJWTTokenResponse(const ValidateJWTTokenResponse& from);
  ValidateJWTTokenResponse(ValidateJWTTokenResponse&& from) noexcept
    : ValidateJWTTokenResponse() {
    *this = ::std::move(from);
  }

  inline ValidateJWTTokenResponse& operator=(const ValidateJWTTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateJWTTokenResponse& operator=(ValidateJWTTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateJWTTokenResponse& default_instance();

  static inline const ValidateJWTTokenResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateJWTTokenResponse*>(
               &_ValidateJWTTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ValidateJWTTokenResponse& a, ValidateJWTTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateJWTTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateJWTTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateJWTTokenResponse* New() const final {
    return CreateMaybeMessage<ValidateJWTTokenResponse>(nullptr);
  }

  ValidateJWTTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateJWTTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateJWTTokenResponse& from);
  void MergeFrom(const ValidateJWTTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateJWTTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateJWTTokenResponse";
  }
  protected:
  explicit ValidateJWTTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateJWTTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefreshAccessTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.RefreshAccessTokenRequest) */ {
 public:
  inline RefreshAccessTokenRequest() : RefreshAccessTokenRequest(nullptr) {}
  virtual ~RefreshAccessTokenRequest();

  RefreshAccessTokenRequest(const RefreshAccessTokenRequest& from);
  RefreshAccessTokenRequest(RefreshAccessTokenRequest&& from) noexcept
    : RefreshAccessTokenRequest() {
    *this = ::std::move(from);
  }

  inline RefreshAccessTokenRequest& operator=(const RefreshAccessTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshAccessTokenRequest& operator=(RefreshAccessTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshAccessTokenRequest& default_instance();

  static inline const RefreshAccessTokenRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshAccessTokenRequest*>(
               &_RefreshAccessTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RefreshAccessTokenRequest& a, RefreshAccessTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshAccessTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshAccessTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshAccessTokenRequest* New() const final {
    return CreateMaybeMessage<RefreshAccessTokenRequest>(nullptr);
  }

  RefreshAccessTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshAccessTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshAccessTokenRequest& from);
  void MergeFrom(const RefreshAccessTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshAccessTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.RefreshAccessTokenRequest";
  }
  protected:
  explicit RefreshAccessTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 3,
    kClientSecretFieldNumber = 4,
    kScopeFieldNumber = 5,
    kRefreshTokenFieldNumber = 7,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kClientTypeFieldNumber = 6,
  };
  // string clientId = 3;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string clientSecret = 4;
  void clear_clientsecret();
  const std::string& clientsecret() const;
  void set_clientsecret(const std::string& value);
  void set_clientsecret(std::string&& value);
  void set_clientsecret(const char* value);
  void set_clientsecret(const char* value, size_t size);
  std::string* mutable_clientsecret();
  std::string* release_clientsecret();
  void set_allocated_clientsecret(std::string* clientsecret);
  private:
  const std::string& _internal_clientsecret() const;
  void _internal_set_clientsecret(const std::string& value);
  std::string* _internal_mutable_clientsecret();
  public:

  // string scope = 5;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string refreshToken = 7;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 2;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // .farm.nurture.core.contracts.common.ClientType clientType = 6;
  void clear_clienttype();
  ::farm::nurture::core::contracts::common::ClientType clienttype() const;
  void set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  private:
  ::farm::nurture::core::contracts::common::ClientType _internal_clienttype() const;
  void _internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.RefreshAccessTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientsecret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  int clienttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefreshAccessTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.RefreshAccessTokenResponse) */ {
 public:
  inline RefreshAccessTokenResponse() : RefreshAccessTokenResponse(nullptr) {}
  virtual ~RefreshAccessTokenResponse();

  RefreshAccessTokenResponse(const RefreshAccessTokenResponse& from);
  RefreshAccessTokenResponse(RefreshAccessTokenResponse&& from) noexcept
    : RefreshAccessTokenResponse() {
    *this = ::std::move(from);
  }

  inline RefreshAccessTokenResponse& operator=(const RefreshAccessTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshAccessTokenResponse& operator=(RefreshAccessTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshAccessTokenResponse& default_instance();

  static inline const RefreshAccessTokenResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshAccessTokenResponse*>(
               &_RefreshAccessTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RefreshAccessTokenResponse& a, RefreshAccessTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshAccessTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshAccessTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshAccessTokenResponse* New() const final {
    return CreateMaybeMessage<RefreshAccessTokenResponse>(nullptr);
  }

  RefreshAccessTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshAccessTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshAccessTokenResponse& from);
  void MergeFrom(const RefreshAccessTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshAccessTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.RefreshAccessTokenResponse";
  }
  protected:
  explicit RefreshAccessTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 3,
    kIdTokenFieldNumber = 5,
    kRefreshTokenFieldNumber = 6,
    kScopeFieldNumber = 7,
    kTokenTypeFieldNumber = 8,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kExpiresInFieldNumber = 4,
  };
  // string accessToken = 3;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string idToken = 5;
  void clear_idtoken();
  const std::string& idtoken() const;
  void set_idtoken(const std::string& value);
  void set_idtoken(std::string&& value);
  void set_idtoken(const char* value);
  void set_idtoken(const char* value, size_t size);
  std::string* mutable_idtoken();
  std::string* release_idtoken();
  void set_allocated_idtoken(std::string* idtoken);
  private:
  const std::string& _internal_idtoken() const;
  void _internal_set_idtoken(const std::string& value);
  std::string* _internal_mutable_idtoken();
  public:

  // string refreshToken = 6;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // string scope = 7;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string tokenType = 8;
  void clear_tokentype();
  const std::string& tokentype() const;
  void set_tokentype(const std::string& value);
  void set_tokentype(std::string&& value);
  void set_tokentype(const char* value);
  void set_tokentype(const char* value, size_t size);
  std::string* mutable_tokentype();
  std::string* release_tokentype();
  void set_allocated_tokentype(std::string* tokentype);
  private:
  const std::string& _internal_tokentype() const;
  void _internal_set_tokentype(const std::string& value);
  std::string* _internal_mutable_tokentype();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 expiresIn = 4;
  void clear_expiresin();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin() const;
  void set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresin() const;
  void _internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.RefreshAccessTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokentype_;
  int status_;
  int statuscode_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenerateActionSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateActionSecretRequest) */ {
 public:
  inline GenerateActionSecretRequest() : GenerateActionSecretRequest(nullptr) {}
  virtual ~GenerateActionSecretRequest();

  GenerateActionSecretRequest(const GenerateActionSecretRequest& from);
  GenerateActionSecretRequest(GenerateActionSecretRequest&& from) noexcept
    : GenerateActionSecretRequest() {
    *this = ::std::move(from);
  }

  inline GenerateActionSecretRequest& operator=(const GenerateActionSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateActionSecretRequest& operator=(GenerateActionSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateActionSecretRequest& default_instance();

  static inline const GenerateActionSecretRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateActionSecretRequest*>(
               &_GenerateActionSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GenerateActionSecretRequest& a, GenerateActionSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateActionSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateActionSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateActionSecretRequest* New() const final {
    return CreateMaybeMessage<GenerateActionSecretRequest>(nullptr);
  }

  GenerateActionSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateActionSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateActionSecretRequest& from);
  void MergeFrom(const GenerateActionSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateActionSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateActionSecretRequest";
  }
  protected:
  explicit GenerateActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunicationDetailsFieldNumber = 10,
    kEntityTypeFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kActionFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kReceiverActorFieldNumber = 9,
    kEntityIdFieldNumber = 2,
    kSecretDigitFieldNumber = 6,
    kMaxRetriesFieldNumber = 7,
    kExpiryInSecondsFieldNumber = 8,
  };
  // repeated .farm.nurture.platform.auth.CommunicationDetail communicationDetails = 10;
  int communicationdetails_size() const;
  private:
  int _internal_communicationdetails_size() const;
  public:
  void clear_communicationdetails();
  ::farm::nurture::platform::auth::CommunicationDetail* mutable_communicationdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::platform::auth::CommunicationDetail >*
      mutable_communicationdetails();
  private:
  const ::farm::nurture::platform::auth::CommunicationDetail& _internal_communicationdetails(int index) const;
  ::farm::nurture::platform::auth::CommunicationDetail* _internal_add_communicationdetails();
  public:
  const ::farm::nurture::platform::auth::CommunicationDetail& communicationdetails(int index) const;
  ::farm::nurture::platform::auth::CommunicationDetail* add_communicationdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::platform::auth::CommunicationDetail >&
      communicationdetails() const;

  // string entityType = 3;
  void clear_entitytype();
  const std::string& entitytype() const;
  void set_entitytype(const std::string& value);
  void set_entitytype(std::string&& value);
  void set_entitytype(const char* value);
  void set_entitytype(const char* value, size_t size);
  std::string* mutable_entitytype();
  std::string* release_entitytype();
  void set_allocated_entitytype(std::string* entitytype);
  private:
  const std::string& _internal_entitytype() const;
  void _internal_set_entitytype(const std::string& value);
  std::string* _internal_mutable_entitytype();
  public:

  // string serviceName = 4;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string action = 5;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID receiverActor = 9;
  bool has_receiveractor() const;
  private:
  bool _internal_has_receiveractor() const;
  public:
  void clear_receiveractor();
  const ::farm::nurture::core::contracts::common::ActorID& receiveractor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_receiveractor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_receiveractor();
  void set_allocated_receiveractor(::farm::nurture::core::contracts::common::ActorID* receiveractor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_receiveractor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_receiveractor();
  public:
  void unsafe_arena_set_allocated_receiveractor(
      ::farm::nurture::core::contracts::common::ActorID* receiveractor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_receiveractor();

  // int64 entityId = 2;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 secretDigit = 6;
  void clear_secretdigit();
  ::PROTOBUF_NAMESPACE_ID::int32 secretdigit() const;
  void set_secretdigit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secretdigit() const;
  void _internal_set_secretdigit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxRetries = 7;
  void clear_maxretries();
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries() const;
  void set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxretries() const;
  void _internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expiryInSeconds = 8;
  void clear_expiryinseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds() const;
  void set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiryinseconds() const;
  void _internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateActionSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::platform::auth::CommunicationDetail > communicationdetails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* receiveractor_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 secretdigit_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxretries_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiryinseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CommunicationDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.CommunicationDetail) */ {
 public:
  inline CommunicationDetail() : CommunicationDetail(nullptr) {}
  virtual ~CommunicationDetail();

  CommunicationDetail(const CommunicationDetail& from);
  CommunicationDetail(CommunicationDetail&& from) noexcept
    : CommunicationDetail() {
    *this = ::std::move(from);
  }

  inline CommunicationDetail& operator=(const CommunicationDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationDetail& operator=(CommunicationDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationDetail& default_instance();

  static inline const CommunicationDetail* internal_default_instance() {
    return reinterpret_cast<const CommunicationDetail*>(
               &_CommunicationDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommunicationDetail& a, CommunicationDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationDetail* New() const final {
    return CreateMaybeMessage<CommunicationDetail>(nullptr);
  }

  CommunicationDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationDetail& from);
  void MergeFrom(const CommunicationDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.CommunicationDetail";
  }
  protected:
  explicit CommunicationDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNameFieldNumber = 1,
    kCommunicationChannelFieldNumber = 2,
  };
  // string templateName = 1;
  void clear_templatename();
  const std::string& templatename() const;
  void set_templatename(const std::string& value);
  void set_templatename(std::string&& value);
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  std::string* mutable_templatename();
  std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 2;
  void clear_communicationchannel();
  ::farm::nurture::core::contracts::common::CommunicationChannel communicationchannel() const;
  void set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_communicationchannel() const;
  void _internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.CommunicationDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  int communicationchannel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenerateActionSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.GenerateActionSecretResponse) */ {
 public:
  inline GenerateActionSecretResponse() : GenerateActionSecretResponse(nullptr) {}
  virtual ~GenerateActionSecretResponse();

  GenerateActionSecretResponse(const GenerateActionSecretResponse& from);
  GenerateActionSecretResponse(GenerateActionSecretResponse&& from) noexcept
    : GenerateActionSecretResponse() {
    *this = ::std::move(from);
  }

  inline GenerateActionSecretResponse& operator=(const GenerateActionSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateActionSecretResponse& operator=(GenerateActionSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateActionSecretResponse& default_instance();

  static inline const GenerateActionSecretResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateActionSecretResponse*>(
               &_GenerateActionSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GenerateActionSecretResponse& a, GenerateActionSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateActionSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateActionSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateActionSecretResponse* New() const final {
    return CreateMaybeMessage<GenerateActionSecretResponse>(nullptr);
  }

  GenerateActionSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateActionSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateActionSecretResponse& from);
  void MergeFrom(const GenerateActionSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateActionSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.GenerateActionSecretResponse";
  }
  protected:
  explicit GenerateActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.GenerateActionSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchActionSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.FetchActionSecretRequest) */ {
 public:
  inline FetchActionSecretRequest() : FetchActionSecretRequest(nullptr) {}
  virtual ~FetchActionSecretRequest();

  FetchActionSecretRequest(const FetchActionSecretRequest& from);
  FetchActionSecretRequest(FetchActionSecretRequest&& from) noexcept
    : FetchActionSecretRequest() {
    *this = ::std::move(from);
  }

  inline FetchActionSecretRequest& operator=(const FetchActionSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchActionSecretRequest& operator=(FetchActionSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchActionSecretRequest& default_instance();

  static inline const FetchActionSecretRequest* internal_default_instance() {
    return reinterpret_cast<const FetchActionSecretRequest*>(
               &_FetchActionSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FetchActionSecretRequest& a, FetchActionSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchActionSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchActionSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchActionSecretRequest* New() const final {
    return CreateMaybeMessage<FetchActionSecretRequest>(nullptr);
  }

  FetchActionSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchActionSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchActionSecretRequest& from);
  void MergeFrom(const FetchActionSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchActionSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.FetchActionSecretRequest";
  }
  protected:
  explicit FetchActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypeFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kActionFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kActorIdFieldNumber = 6,
    kEntityIdFieldNumber = 2,
  };
  // string entityType = 3;
  void clear_entitytype();
  const std::string& entitytype() const;
  void set_entitytype(const std::string& value);
  void set_entitytype(std::string&& value);
  void set_entitytype(const char* value);
  void set_entitytype(const char* value, size_t size);
  std::string* mutable_entitytype();
  std::string* release_entitytype();
  void set_allocated_entitytype(std::string* entitytype);
  private:
  const std::string& _internal_entitytype() const;
  void _internal_set_entitytype(const std::string& value);
  std::string* _internal_mutable_entitytype();
  public:

  // string serviceName = 4;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string action = 5;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID actorId = 6;
  bool has_actorid() const;
  private:
  bool _internal_has_actorid() const;
  public:
  void clear_actorid();
  const ::farm::nurture::core::contracts::common::ActorID& actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actorid();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actorid();
  void set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actorid() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actorid();
  public:
  void unsafe_arena_set_allocated_actorid(
      ::farm::nurture::core::contracts::common::ActorID* actorid);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actorid();

  // int64 entityId = 2;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.FetchActionSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* actorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchActionSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.FetchActionSecretResponse) */ {
 public:
  inline FetchActionSecretResponse() : FetchActionSecretResponse(nullptr) {}
  virtual ~FetchActionSecretResponse();

  FetchActionSecretResponse(const FetchActionSecretResponse& from);
  FetchActionSecretResponse(FetchActionSecretResponse&& from) noexcept
    : FetchActionSecretResponse() {
    *this = ::std::move(from);
  }

  inline FetchActionSecretResponse& operator=(const FetchActionSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchActionSecretResponse& operator=(FetchActionSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchActionSecretResponse& default_instance();

  static inline const FetchActionSecretResponse* internal_default_instance() {
    return reinterpret_cast<const FetchActionSecretResponse*>(
               &_FetchActionSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FetchActionSecretResponse& a, FetchActionSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchActionSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchActionSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchActionSecretResponse* New() const final {
    return CreateMaybeMessage<FetchActionSecretResponse>(nullptr);
  }

  FetchActionSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchActionSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchActionSecretResponse& from);
  void MergeFrom(const FetchActionSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchActionSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.FetchActionSecretResponse";
  }
  protected:
  explicit FetchActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string secret = 3;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.FetchActionSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateActionSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateActionSecretRequest) */ {
 public:
  inline ValidateActionSecretRequest() : ValidateActionSecretRequest(nullptr) {}
  virtual ~ValidateActionSecretRequest();

  ValidateActionSecretRequest(const ValidateActionSecretRequest& from);
  ValidateActionSecretRequest(ValidateActionSecretRequest&& from) noexcept
    : ValidateActionSecretRequest() {
    *this = ::std::move(from);
  }

  inline ValidateActionSecretRequest& operator=(const ValidateActionSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateActionSecretRequest& operator=(ValidateActionSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateActionSecretRequest& default_instance();

  static inline const ValidateActionSecretRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateActionSecretRequest*>(
               &_ValidateActionSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ValidateActionSecretRequest& a, ValidateActionSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateActionSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateActionSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateActionSecretRequest* New() const final {
    return CreateMaybeMessage<ValidateActionSecretRequest>(nullptr);
  }

  ValidateActionSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateActionSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateActionSecretRequest& from);
  void MergeFrom(const ValidateActionSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateActionSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateActionSecretRequest";
  }
  protected:
  explicit ValidateActionSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypeFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kActionFieldNumber = 5,
    kSecretFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // string entityType = 3;
  void clear_entitytype();
  const std::string& entitytype() const;
  void set_entitytype(const std::string& value);
  void set_entitytype(std::string&& value);
  void set_entitytype(const char* value);
  void set_entitytype(const char* value, size_t size);
  std::string* mutable_entitytype();
  std::string* release_entitytype();
  void set_allocated_entitytype(std::string* entitytype);
  private:
  const std::string& _internal_entitytype() const;
  void _internal_set_entitytype(const std::string& value);
  std::string* _internal_mutable_entitytype();
  public:

  // string serviceName = 4;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string action = 5;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string secret = 6;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 entityId = 2;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateActionSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateActionSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.platform.auth.ValidateActionSecretResponse) */ {
 public:
  inline ValidateActionSecretResponse() : ValidateActionSecretResponse(nullptr) {}
  virtual ~ValidateActionSecretResponse();

  ValidateActionSecretResponse(const ValidateActionSecretResponse& from);
  ValidateActionSecretResponse(ValidateActionSecretResponse&& from) noexcept
    : ValidateActionSecretResponse() {
    *this = ::std::move(from);
  }

  inline ValidateActionSecretResponse& operator=(const ValidateActionSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateActionSecretResponse& operator=(ValidateActionSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateActionSecretResponse& default_instance();

  static inline const ValidateActionSecretResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateActionSecretResponse*>(
               &_ValidateActionSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ValidateActionSecretResponse& a, ValidateActionSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateActionSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateActionSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateActionSecretResponse* New() const final {
    return CreateMaybeMessage<ValidateActionSecretResponse>(nullptr);
  }

  ValidateActionSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateActionSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateActionSecretResponse& from);
  void MergeFrom(const ValidateActionSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateActionSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.platform.auth.ValidateActionSecretResponse";
  }
  protected:
  explicit ValidateActionSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthService_2fauth_5fservice_2eproto);
    return ::descriptor_table_AuthService_2fauth_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
  void clear_statuscode();
  ::farm::nurture::core::contracts::common::ResponseStatusCode statuscode() const;
  void set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.platform.auth.ValidateActionSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthService_2fauth_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenerateOtpRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GenerateOtpRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GenerateOtpRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateOtpRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateOtpRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GenerateOtpRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateOtpRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateOtpRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateOtpRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateOtpRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GenerateOtpRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool GenerateOtpRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool GenerateOtpRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateOtpRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateOtpRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.actorId)
  return _internal_actorid();
}
inline void GenerateOtpRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpRequest.actorId)
  return _internal_mutable_actorid();
}
inline void GenerateOtpRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.actorId)
}

// string appName = 3;
inline void GenerateOtpRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& GenerateOtpRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.appName)
  return _internal_appname();
}
inline void GenerateOtpRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.appName)
}
inline std::string* GenerateOtpRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& GenerateOtpRequest::_internal_appname() const {
  return appname_.Get();
}
inline void GenerateOtpRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateOtpRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateOtpRequest.appName)
}
inline void GenerateOtpRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateOtpRequest.appName)
}
inline void GenerateOtpRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateOtpRequest.appName)
}
inline std::string* GenerateOtpRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateOtpRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateOtpRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.appName)
}

// int32 expiryInSeconds = 4;
inline void GenerateOtpRequest::clear_expiryinseconds() {
  expiryinseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::_internal_expiryinseconds() const {
  return expiryinseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::expiryinseconds() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.expiryInSeconds)
  return _internal_expiryinseconds();
}
inline void GenerateOtpRequest::_internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiryinseconds_ = value;
}
inline void GenerateOtpRequest::set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiryinseconds(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.expiryInSeconds)
}

// int32 otpDigit = 5;
inline void GenerateOtpRequest::clear_otpdigit() {
  otpdigit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::_internal_otpdigit() const {
  return otpdigit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::otpdigit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.otpDigit)
  return _internal_otpdigit();
}
inline void GenerateOtpRequest::_internal_set_otpdigit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  otpdigit_ = value;
}
inline void GenerateOtpRequest::set_otpdigit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_otpdigit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.otpDigit)
}

// int32 maxRetries = 6;
inline void GenerateOtpRequest::clear_maxretries() {
  maxretries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::_internal_maxretries() const {
  return maxretries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateOtpRequest::maxretries() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.maxRetries)
  return _internal_maxretries();
}
inline void GenerateOtpRequest::_internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxretries_ = value;
}
inline void GenerateOtpRequest::set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxretries(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.maxRetries)
}

// string mobileNumber = 7;
inline void GenerateOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GenerateOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void GenerateOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
}
inline std::string* GenerateOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GenerateOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GenerateOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
}
inline void GenerateOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
}
inline void GenerateOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
}
inline std::string* GenerateOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.mobileNumber)
}

// string countryIsoCode = 8;
inline void GenerateOtpRequest::clear_countryisocode() {
  countryisocode_.ClearToEmpty();
}
inline const std::string& GenerateOtpRequest::countryisocode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
  return _internal_countryisocode();
}
inline void GenerateOtpRequest::set_countryisocode(const std::string& value) {
  _internal_set_countryisocode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
}
inline std::string* GenerateOtpRequest::mutable_countryisocode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
  return _internal_mutable_countryisocode();
}
inline const std::string& GenerateOtpRequest::_internal_countryisocode() const {
  return countryisocode_.Get();
}
inline void GenerateOtpRequest::_internal_set_countryisocode(const std::string& value) {
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateOtpRequest::set_countryisocode(std::string&& value) {
  
  countryisocode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
}
inline void GenerateOtpRequest::set_countryisocode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
}
inline void GenerateOtpRequest::set_countryisocode(const char* value,
    size_t size) {
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
}
inline std::string* GenerateOtpRequest::_internal_mutable_countryisocode() {
  
  return countryisocode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateOtpRequest::release_countryisocode() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
  return countryisocode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateOtpRequest::set_allocated_countryisocode(std::string* countryisocode) {
  if (countryisocode != nullptr) {
    
  } else {
    
  }
  countryisocode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countryisocode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpRequest.countryIsoCode)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 9;
inline void GenerateOtpRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType GenerateOtpRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType GenerateOtpRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.clientType)
  return _internal_clienttype();
}
inline void GenerateOtpRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void GenerateOtpRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.clientType)
}

// .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 10;
inline void GenerateOtpRequest::clear_communicationchannel() {
  communicationchannel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel GenerateOtpRequest::_internal_communicationchannel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(communicationchannel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel GenerateOtpRequest::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpRequest.communicationChannel)
  return _internal_communicationchannel();
}
inline void GenerateOtpRequest::_internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  communicationchannel_ = value;
}
inline void GenerateOtpRequest::set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpRequest.communicationChannel)
}

// -------------------------------------------------------------------

// GenerateOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GenerateOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.status)
  return _internal_status();
}
inline void GenerateOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GenerateOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void GenerateOtpResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateOtpResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateOtpResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.statusCode)
  return _internal_statuscode();
}
inline void GenerateOtpResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void GenerateOtpResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpResponse.statusCode)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 3;
inline bool GenerateOtpResponse::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool GenerateOtpResponse::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateOtpResponse::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateOtpResponse::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.actorId)
  return _internal_actorid();
}
inline void GenerateOtpResponse::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateOtpResponse.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpResponse::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpResponse::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpResponse.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpResponse::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateOtpResponse::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpResponse.actorId)
  return _internal_mutable_actorid();
}
inline void GenerateOtpResponse::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpResponse.actorId)
}

// string appName = 4;
inline void GenerateOtpResponse::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& GenerateOtpResponse::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.appName)
  return _internal_appname();
}
inline void GenerateOtpResponse::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpResponse.appName)
}
inline std::string* GenerateOtpResponse::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpResponse.appName)
  return _internal_mutable_appname();
}
inline const std::string& GenerateOtpResponse::_internal_appname() const {
  return appname_.Get();
}
inline void GenerateOtpResponse::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateOtpResponse::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateOtpResponse.appName)
}
inline void GenerateOtpResponse::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateOtpResponse.appName)
}
inline void GenerateOtpResponse::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateOtpResponse.appName)
}
inline std::string* GenerateOtpResponse::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateOtpResponse::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpResponse.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateOtpResponse::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpResponse.appName)
}

// int64 expiry = 5;
inline void GenerateOtpResponse::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateOtpResponse::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateOtpResponse::expiry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.expiry)
  return _internal_expiry();
}
inline void GenerateOtpResponse::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void GenerateOtpResponse::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpResponse.expiry)
}

// string mobileNumber = 6;
inline void GenerateOtpResponse::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GenerateOtpResponse::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
  return _internal_mobilenumber();
}
inline void GenerateOtpResponse::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
}
inline std::string* GenerateOtpResponse::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GenerateOtpResponse::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GenerateOtpResponse::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateOtpResponse::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
}
inline void GenerateOtpResponse::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
}
inline void GenerateOtpResponse::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
}
inline std::string* GenerateOtpResponse::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateOtpResponse::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateOtpResponse::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateOtpResponse.mobileNumber)
}

// -------------------------------------------------------------------

// ResendOtpRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ResendOtpRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ResendOtpRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ResendOtpRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ResendOtpRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ResendOtpRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ResendOtpRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ResendOtpRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ResendOtpRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ResendOtpRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ResendOtpRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool ResendOtpRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool ResendOtpRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& ResendOtpRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ResendOtpRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.actorId)
  return _internal_actorid();
}
inline void ResendOtpRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpRequest.actorId)
  return _internal_mutable_actorid();
}
inline void ResendOtpRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.actorId)
}

// string appName = 3;
inline void ResendOtpRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& ResendOtpRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.appName)
  return _internal_appname();
}
inline void ResendOtpRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpRequest.appName)
}
inline std::string* ResendOtpRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& ResendOtpRequest::_internal_appname() const {
  return appname_.Get();
}
inline void ResendOtpRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResendOtpRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ResendOtpRequest.appName)
}
inline void ResendOtpRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ResendOtpRequest.appName)
}
inline void ResendOtpRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ResendOtpRequest.appName)
}
inline std::string* ResendOtpRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResendOtpRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResendOtpRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.appName)
}

// string mobileNumber = 4;
inline void ResendOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& ResendOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void ResendOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
}
inline std::string* ResendOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& ResendOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void ResendOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResendOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
}
inline void ResendOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
}
inline void ResendOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
}
inline std::string* ResendOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResendOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResendOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpRequest.mobileNumber)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 5;
inline void ResendOtpRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType ResendOtpRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType ResendOtpRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.clientType)
  return _internal_clienttype();
}
inline void ResendOtpRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void ResendOtpRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpRequest.clientType)
}

// .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 6;
inline void ResendOtpRequest::clear_communicationchannel() {
  communicationchannel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel ResendOtpRequest::_internal_communicationchannel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(communicationchannel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel ResendOtpRequest::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpRequest.communicationChannel)
  return _internal_communicationchannel();
}
inline void ResendOtpRequest::_internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  communicationchannel_ = value;
}
inline void ResendOtpRequest::set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpRequest.communicationChannel)
}

// -------------------------------------------------------------------

// ResendOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ResendOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ResendOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ResendOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.status)
  return _internal_status();
}
inline void ResendOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ResendOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void ResendOtpResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ResendOtpResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ResendOtpResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.statusCode)
  return _internal_statuscode();
}
inline void ResendOtpResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void ResendOtpResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpResponse.statusCode)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 3;
inline bool ResendOtpResponse::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool ResendOtpResponse::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& ResendOtpResponse::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ResendOtpResponse::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.actorId)
  return _internal_actorid();
}
inline void ResendOtpResponse::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ResendOtpResponse.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpResponse::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpResponse::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpResponse.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpResponse::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ResendOtpResponse::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpResponse.actorId)
  return _internal_mutable_actorid();
}
inline void ResendOtpResponse::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpResponse.actorId)
}

// string appName = 4;
inline void ResendOtpResponse::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& ResendOtpResponse::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.appName)
  return _internal_appname();
}
inline void ResendOtpResponse::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpResponse.appName)
}
inline std::string* ResendOtpResponse::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpResponse.appName)
  return _internal_mutable_appname();
}
inline const std::string& ResendOtpResponse::_internal_appname() const {
  return appname_.Get();
}
inline void ResendOtpResponse::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResendOtpResponse::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ResendOtpResponse.appName)
}
inline void ResendOtpResponse::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ResendOtpResponse.appName)
}
inline void ResendOtpResponse::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ResendOtpResponse.appName)
}
inline std::string* ResendOtpResponse::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResendOtpResponse::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpResponse.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResendOtpResponse::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpResponse.appName)
}

// int64 expiry = 5;
inline void ResendOtpResponse::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResendOtpResponse::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResendOtpResponse::expiry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.expiry)
  return _internal_expiry();
}
inline void ResendOtpResponse::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void ResendOtpResponse::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpResponse.expiry)
}

// string mobileNumber = 6;
inline void ResendOtpResponse::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& ResendOtpResponse::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
  return _internal_mobilenumber();
}
inline void ResendOtpResponse::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
}
inline std::string* ResendOtpResponse::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& ResendOtpResponse::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void ResendOtpResponse::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResendOtpResponse::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
}
inline void ResendOtpResponse::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
}
inline void ResendOtpResponse::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
}
inline std::string* ResendOtpResponse::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResendOtpResponse::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResendOtpResponse::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ResendOtpResponse.mobileNumber)
}

// -------------------------------------------------------------------

// ValidateOtpRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ValidateOtpRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ValidateOtpRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateOtpRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateOtpRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ValidateOtpRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateOtpRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateOtpRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateOtpRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateOtpRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ValidateOtpRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool ValidateOtpRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool ValidateOtpRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& ValidateOtpRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ValidateOtpRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpRequest.actorId)
  return _internal_actorid();
}
inline void ValidateOtpRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateOtpRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateOtpRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateOtpRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateOtpRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateOtpRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateOtpRequest.actorId)
  return _internal_mutable_actorid();
}
inline void ValidateOtpRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.actorId)
}

// string appName = 3;
inline void ValidateOtpRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& ValidateOtpRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpRequest.appName)
  return _internal_appname();
}
inline void ValidateOtpRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateOtpRequest.appName)
}
inline std::string* ValidateOtpRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateOtpRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& ValidateOtpRequest::_internal_appname() const {
  return appname_.Get();
}
inline void ValidateOtpRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateOtpRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateOtpRequest.appName)
}
inline void ValidateOtpRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateOtpRequest.appName)
}
inline void ValidateOtpRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateOtpRequest.appName)
}
inline std::string* ValidateOtpRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateOtpRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateOtpRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateOtpRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.appName)
}

// string otp = 4;
inline void ValidateOtpRequest::clear_otp() {
  otp_.ClearToEmpty();
}
inline const std::string& ValidateOtpRequest::otp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpRequest.otp)
  return _internal_otp();
}
inline void ValidateOtpRequest::set_otp(const std::string& value) {
  _internal_set_otp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateOtpRequest.otp)
}
inline std::string* ValidateOtpRequest::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateOtpRequest.otp)
  return _internal_mutable_otp();
}
inline const std::string& ValidateOtpRequest::_internal_otp() const {
  return otp_.Get();
}
inline void ValidateOtpRequest::_internal_set_otp(const std::string& value) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateOtpRequest::set_otp(std::string&& value) {
  
  otp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateOtpRequest.otp)
}
inline void ValidateOtpRequest::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateOtpRequest.otp)
}
inline void ValidateOtpRequest::set_otp(const char* value,
    size_t size) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateOtpRequest.otp)
}
inline std::string* ValidateOtpRequest::_internal_mutable_otp() {
  
  return otp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateOtpRequest::release_otp() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateOtpRequest.otp)
  return otp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateOtpRequest::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.otp)
}

// string mobileNumber = 5;
inline void ValidateOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& ValidateOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void ValidateOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
}
inline std::string* ValidateOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& ValidateOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void ValidateOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
}
inline void ValidateOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
}
inline void ValidateOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
}
inline std::string* ValidateOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateOtpRequest.mobileNumber)
}

// -------------------------------------------------------------------

// ValidateOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ValidateOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpResponse.status)
  return _internal_status();
}
inline void ValidateOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ValidateOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateOtpResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void ValidateOtpResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateOtpResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateOtpResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateOtpResponse.statusCode)
  return _internal_statuscode();
}
inline void ValidateOtpResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void ValidateOtpResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateOtpResponse.statusCode)
}

// -------------------------------------------------------------------

// GetAuthTokenRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetAuthTokenRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetAuthTokenRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetAuthTokenRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetAuthTokenRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetAuthTokenRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAuthTokenRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAuthTokenRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAuthTokenRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAuthTokenRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetAuthTokenRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool GetAuthTokenRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool GetAuthTokenRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GetAuthTokenRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GetAuthTokenRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.actorId)
  return _internal_actorid();
}
inline void GetAuthTokenRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* GetAuthTokenRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetAuthTokenRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetAuthTokenRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetAuthTokenRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.actorId)
  return _internal_mutable_actorid();
}
inline void GetAuthTokenRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.actorId)
}

// string appName = 3;
inline void GetAuthTokenRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
  return _internal_appname();
}
inline void GetAuthTokenRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
}
inline std::string* GetAuthTokenRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& GetAuthTokenRequest::_internal_appname() const {
  return appname_.Get();
}
inline void GetAuthTokenRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
}
inline void GetAuthTokenRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
}
inline void GetAuthTokenRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.appName)
}

// string otp = 4;
inline void GetAuthTokenRequest::clear_otp() {
  otp_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::otp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
  return _internal_otp();
}
inline void GetAuthTokenRequest::set_otp(const std::string& value) {
  _internal_set_otp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
}
inline std::string* GetAuthTokenRequest::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
  return _internal_mutable_otp();
}
inline const std::string& GetAuthTokenRequest::_internal_otp() const {
  return otp_.Get();
}
inline void GetAuthTokenRequest::_internal_set_otp(const std::string& value) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_otp(std::string&& value) {
  
  otp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
}
inline void GetAuthTokenRequest::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
}
inline void GetAuthTokenRequest::set_otp(const char* value,
    size_t size) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_otp() {
  
  return otp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_otp() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
  return otp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.otp)
}

// string clientId = 5;
inline void GetAuthTokenRequest::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::clientid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
  return _internal_clientid();
}
inline void GetAuthTokenRequest::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
}
inline std::string* GetAuthTokenRequest::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& GetAuthTokenRequest::_internal_clientid() const {
  return clientid_.Get();
}
inline void GetAuthTokenRequest::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
}
inline void GetAuthTokenRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
}
inline void GetAuthTokenRequest::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.clientId)
}

// string clientSecret = 6;
inline void GetAuthTokenRequest::clear_clientsecret() {
  clientsecret_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::clientsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
  return _internal_clientsecret();
}
inline void GetAuthTokenRequest::set_clientsecret(const std::string& value) {
  _internal_set_clientsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
}
inline std::string* GetAuthTokenRequest::mutable_clientsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
  return _internal_mutable_clientsecret();
}
inline const std::string& GetAuthTokenRequest::_internal_clientsecret() const {
  return clientsecret_.Get();
}
inline void GetAuthTokenRequest::_internal_set_clientsecret(const std::string& value) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_clientsecret(std::string&& value) {
  
  clientsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
}
inline void GetAuthTokenRequest::set_clientsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
}
inline void GetAuthTokenRequest::set_clientsecret(const char* value,
    size_t size) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_clientsecret() {
  
  return clientsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_clientsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
  return clientsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_clientsecret(std::string* clientsecret) {
  if (clientsecret != nullptr) {
    
  } else {
    
  }
  clientsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.clientSecret)
}

// string scope = 7;
inline void GetAuthTokenRequest::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
  return _internal_scope();
}
inline void GetAuthTokenRequest::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
}
inline std::string* GetAuthTokenRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
  return _internal_mutable_scope();
}
inline const std::string& GetAuthTokenRequest::_internal_scope() const {
  return scope_.Get();
}
inline void GetAuthTokenRequest::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
}
inline void GetAuthTokenRequest::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
}
inline void GetAuthTokenRequest::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.scope)
}

// string authSecret = 9;
inline void GetAuthTokenRequest::clear_authsecret() {
  authsecret_.ClearToEmpty();
}
inline const std::string& GetAuthTokenRequest::authsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
  return _internal_authsecret();
}
inline void GetAuthTokenRequest::set_authsecret(const std::string& value) {
  _internal_set_authsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
}
inline std::string* GetAuthTokenRequest::mutable_authsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
  return _internal_mutable_authsecret();
}
inline const std::string& GetAuthTokenRequest::_internal_authsecret() const {
  return authsecret_.Get();
}
inline void GetAuthTokenRequest::_internal_set_authsecret(const std::string& value) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenRequest::set_authsecret(std::string&& value) {
  
  authsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
}
inline void GetAuthTokenRequest::set_authsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
}
inline void GetAuthTokenRequest::set_authsecret(const char* value,
    size_t size) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_authsecret() {
  
  return authsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenRequest::release_authsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
  return authsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_authsecret(std::string* authsecret) {
  if (authsecret != nullptr) {
    
  } else {
    
  }
  authsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenRequest.authSecret)
}

// .farm.nurture.core.contracts.common.SecretType secretType = 10;
inline void GetAuthTokenRequest::clear_secrettype() {
  secrettype_ = 0;
}
inline ::farm::nurture::core::contracts::common::SecretType GetAuthTokenRequest::_internal_secrettype() const {
  return static_cast< ::farm::nurture::core::contracts::common::SecretType >(secrettype_);
}
inline ::farm::nurture::core::contracts::common::SecretType GetAuthTokenRequest::secrettype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.secretType)
  return _internal_secrettype();
}
inline void GetAuthTokenRequest::_internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  
  secrettype_ = value;
}
inline void GetAuthTokenRequest::set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  _internal_set_secrettype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.secretType)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 11;
inline void GetAuthTokenRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType GetAuthTokenRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType GetAuthTokenRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.clientType)
  return _internal_clienttype();
}
inline void GetAuthTokenRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void GetAuthTokenRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenRequest.clientType)
}

// repeated .farm.nurture.core.contracts.common.Attribs claims = 12;
inline int GetAuthTokenRequest::_internal_claims_size() const {
  return claims_.size();
}
inline int GetAuthTokenRequest::claims_size() const {
  return _internal_claims_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetAuthTokenRequest::mutable_claims(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenRequest.claims)
  return claims_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetAuthTokenRequest::mutable_claims() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.platform.auth.GetAuthTokenRequest.claims)
  return &claims_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetAuthTokenRequest::_internal_claims(int index) const {
  return claims_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetAuthTokenRequest::claims(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenRequest.claims)
  return _internal_claims(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetAuthTokenRequest::_internal_add_claims() {
  return claims_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetAuthTokenRequest::add_claims() {
  // @@protoc_insertion_point(field_add:farm.nurture.platform.auth.GetAuthTokenRequest.claims)
  return _internal_add_claims();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetAuthTokenRequest::claims() const {
  // @@protoc_insertion_point(field_list:farm.nurture.platform.auth.GetAuthTokenRequest.claims)
  return claims_;
}

// -------------------------------------------------------------------

// GetAuthTokenResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GetAuthTokenResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetAuthTokenResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetAuthTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.status)
  return _internal_status();
}
inline void GetAuthTokenResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GetAuthTokenResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void GetAuthTokenResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetAuthTokenResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetAuthTokenResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.statusCode)
  return _internal_statuscode();
}
inline void GetAuthTokenResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void GetAuthTokenResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.statusCode)
}

// string accessToken = 3;
inline void GetAuthTokenResponse::clear_accesstoken() {
  accesstoken_.ClearToEmpty();
}
inline const std::string& GetAuthTokenResponse::accesstoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
  return _internal_accesstoken();
}
inline void GetAuthTokenResponse::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
}
inline std::string* GetAuthTokenResponse::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& GetAuthTokenResponse::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void GetAuthTokenResponse::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenResponse::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
}
inline void GetAuthTokenResponse::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
}
inline void GetAuthTokenResponse::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenResponse::release_accesstoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenResponse.accessToken)
}

// int64 expiresIn = 4;
inline void GetAuthTokenResponse::clear_expiresin() {
  expiresin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAuthTokenResponse::_internal_expiresin() const {
  return expiresin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAuthTokenResponse::expiresin() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.expiresIn)
  return _internal_expiresin();
}
inline void GetAuthTokenResponse::_internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresin_ = value;
}
inline void GetAuthTokenResponse::set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresin(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.expiresIn)
}

// string idToken = 5;
inline void GetAuthTokenResponse::clear_idtoken() {
  idtoken_.ClearToEmpty();
}
inline const std::string& GetAuthTokenResponse::idtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
  return _internal_idtoken();
}
inline void GetAuthTokenResponse::set_idtoken(const std::string& value) {
  _internal_set_idtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
}
inline std::string* GetAuthTokenResponse::mutable_idtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
  return _internal_mutable_idtoken();
}
inline const std::string& GetAuthTokenResponse::_internal_idtoken() const {
  return idtoken_.Get();
}
inline void GetAuthTokenResponse::_internal_set_idtoken(const std::string& value) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenResponse::set_idtoken(std::string&& value) {
  
  idtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
}
inline void GetAuthTokenResponse::set_idtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
}
inline void GetAuthTokenResponse::set_idtoken(const char* value,
    size_t size) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_idtoken() {
  
  return idtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenResponse::release_idtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
  return idtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_idtoken(std::string* idtoken) {
  if (idtoken != nullptr) {
    
  } else {
    
  }
  idtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenResponse.idToken)
}

// string refreshToken = 6;
inline void GetAuthTokenResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmpty();
}
inline const std::string& GetAuthTokenResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
  return _internal_refreshtoken();
}
inline void GetAuthTokenResponse::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
}
inline std::string* GetAuthTokenResponse::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& GetAuthTokenResponse::_internal_refreshtoken() const {
  return refreshtoken_.Get();
}
inline void GetAuthTokenResponse::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenResponse::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
}
inline void GetAuthTokenResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
}
inline void GetAuthTokenResponse::set_refreshtoken(const char* value,
    size_t size) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
  return refreshtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenResponse.refreshToken)
}

// string scope = 7;
inline void GetAuthTokenResponse::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& GetAuthTokenResponse::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
  return _internal_scope();
}
inline void GetAuthTokenResponse::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
}
inline std::string* GetAuthTokenResponse::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
  return _internal_mutable_scope();
}
inline const std::string& GetAuthTokenResponse::_internal_scope() const {
  return scope_.Get();
}
inline void GetAuthTokenResponse::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenResponse::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
}
inline void GetAuthTokenResponse::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
}
inline void GetAuthTokenResponse::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenResponse::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenResponse.scope)
}

// string tokenType = 8;
inline void GetAuthTokenResponse::clear_tokentype() {
  tokentype_.ClearToEmpty();
}
inline const std::string& GetAuthTokenResponse::tokentype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
  return _internal_tokentype();
}
inline void GetAuthTokenResponse::set_tokentype(const std::string& value) {
  _internal_set_tokentype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
}
inline std::string* GetAuthTokenResponse::mutable_tokentype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
  return _internal_mutable_tokentype();
}
inline const std::string& GetAuthTokenResponse::_internal_tokentype() const {
  return tokentype_.Get();
}
inline void GetAuthTokenResponse::_internal_set_tokentype(const std::string& value) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAuthTokenResponse::set_tokentype(std::string&& value) {
  
  tokentype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
}
inline void GetAuthTokenResponse::set_tokentype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
}
inline void GetAuthTokenResponse::set_tokentype(const char* value,
    size_t size) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_tokentype() {
  
  return tokentype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAuthTokenResponse::release_tokentype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
  return tokentype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_tokentype(std::string* tokentype) {
  if (tokentype != nullptr) {
    
  } else {
    
  }
  tokentype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokentype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetAuthTokenResponse.tokenType)
}

// -------------------------------------------------------------------

// OldTokenExchangeRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool OldTokenExchangeRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool OldTokenExchangeRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OldTokenExchangeRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OldTokenExchangeRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void OldTokenExchangeRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OldTokenExchangeRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OldTokenExchangeRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OldTokenExchangeRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OldTokenExchangeRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void OldTokenExchangeRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool OldTokenExchangeRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool OldTokenExchangeRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& OldTokenExchangeRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& OldTokenExchangeRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.actorId)
  return _internal_actorid();
}
inline void OldTokenExchangeRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* OldTokenExchangeRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OldTokenExchangeRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OldTokenExchangeRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* OldTokenExchangeRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.actorId)
  return _internal_mutable_actorid();
}
inline void OldTokenExchangeRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.actorId)
}

// string appName = 4;
inline void OldTokenExchangeRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
  return _internal_appname();
}
inline void OldTokenExchangeRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
}
inline std::string* OldTokenExchangeRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& OldTokenExchangeRequest::_internal_appname() const {
  return appname_.Get();
}
inline void OldTokenExchangeRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
}
inline void OldTokenExchangeRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
}
inline void OldTokenExchangeRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
}
inline std::string* OldTokenExchangeRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.appName)
}

// string clientId = 5;
inline void OldTokenExchangeRequest::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeRequest::clientid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
  return _internal_clientid();
}
inline void OldTokenExchangeRequest::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
}
inline std::string* OldTokenExchangeRequest::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& OldTokenExchangeRequest::_internal_clientid() const {
  return clientid_.Get();
}
inline void OldTokenExchangeRequest::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeRequest::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
}
inline void OldTokenExchangeRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
}
inline void OldTokenExchangeRequest::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
}
inline std::string* OldTokenExchangeRequest::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeRequest::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.clientId)
}

// string clientSecret = 6;
inline void OldTokenExchangeRequest::clear_clientsecret() {
  clientsecret_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeRequest::clientsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
  return _internal_clientsecret();
}
inline void OldTokenExchangeRequest::set_clientsecret(const std::string& value) {
  _internal_set_clientsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
}
inline std::string* OldTokenExchangeRequest::mutable_clientsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
  return _internal_mutable_clientsecret();
}
inline const std::string& OldTokenExchangeRequest::_internal_clientsecret() const {
  return clientsecret_.Get();
}
inline void OldTokenExchangeRequest::_internal_set_clientsecret(const std::string& value) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeRequest::set_clientsecret(std::string&& value) {
  
  clientsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
}
inline void OldTokenExchangeRequest::set_clientsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
}
inline void OldTokenExchangeRequest::set_clientsecret(const char* value,
    size_t size) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
}
inline std::string* OldTokenExchangeRequest::_internal_mutable_clientsecret() {
  
  return clientsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeRequest::release_clientsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
  return clientsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeRequest::set_allocated_clientsecret(std::string* clientsecret) {
  if (clientsecret != nullptr) {
    
  } else {
    
  }
  clientsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.clientSecret)
}

// string scope = 7;
inline void OldTokenExchangeRequest::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeRequest::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
  return _internal_scope();
}
inline void OldTokenExchangeRequest::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
}
inline std::string* OldTokenExchangeRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
  return _internal_mutable_scope();
}
inline const std::string& OldTokenExchangeRequest::_internal_scope() const {
  return scope_.Get();
}
inline void OldTokenExchangeRequest::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeRequest::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
}
inline void OldTokenExchangeRequest::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
}
inline void OldTokenExchangeRequest::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
}
inline std::string* OldTokenExchangeRequest::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeRequest::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeRequest::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeRequest.scope)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 11;
inline void OldTokenExchangeRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType OldTokenExchangeRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType OldTokenExchangeRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeRequest.clientType)
  return _internal_clienttype();
}
inline void OldTokenExchangeRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void OldTokenExchangeRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeRequest.clientType)
}

// -------------------------------------------------------------------

// OldTokenExchangeResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void OldTokenExchangeResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OldTokenExchangeResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OldTokenExchangeResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.status)
  return _internal_status();
}
inline void OldTokenExchangeResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void OldTokenExchangeResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void OldTokenExchangeResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OldTokenExchangeResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OldTokenExchangeResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.statusCode)
  return _internal_statuscode();
}
inline void OldTokenExchangeResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void OldTokenExchangeResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.statusCode)
}

// string accessToken = 3;
inline void OldTokenExchangeResponse::clear_accesstoken() {
  accesstoken_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeResponse::accesstoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
  return _internal_accesstoken();
}
inline void OldTokenExchangeResponse::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
}
inline std::string* OldTokenExchangeResponse::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& OldTokenExchangeResponse::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void OldTokenExchangeResponse::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeResponse::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
}
inline void OldTokenExchangeResponse::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
}
inline void OldTokenExchangeResponse::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
}
inline std::string* OldTokenExchangeResponse::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeResponse::release_accesstoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeResponse::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeResponse.accessToken)
}

// int64 expiresIn = 4;
inline void OldTokenExchangeResponse::clear_expiresin() {
  expiresin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OldTokenExchangeResponse::_internal_expiresin() const {
  return expiresin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OldTokenExchangeResponse::expiresin() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.expiresIn)
  return _internal_expiresin();
}
inline void OldTokenExchangeResponse::_internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresin_ = value;
}
inline void OldTokenExchangeResponse::set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresin(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.expiresIn)
}

// string idToken = 5;
inline void OldTokenExchangeResponse::clear_idtoken() {
  idtoken_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeResponse::idtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
  return _internal_idtoken();
}
inline void OldTokenExchangeResponse::set_idtoken(const std::string& value) {
  _internal_set_idtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
}
inline std::string* OldTokenExchangeResponse::mutable_idtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
  return _internal_mutable_idtoken();
}
inline const std::string& OldTokenExchangeResponse::_internal_idtoken() const {
  return idtoken_.Get();
}
inline void OldTokenExchangeResponse::_internal_set_idtoken(const std::string& value) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeResponse::set_idtoken(std::string&& value) {
  
  idtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
}
inline void OldTokenExchangeResponse::set_idtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
}
inline void OldTokenExchangeResponse::set_idtoken(const char* value,
    size_t size) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
}
inline std::string* OldTokenExchangeResponse::_internal_mutable_idtoken() {
  
  return idtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeResponse::release_idtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
  return idtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeResponse::set_allocated_idtoken(std::string* idtoken) {
  if (idtoken != nullptr) {
    
  } else {
    
  }
  idtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeResponse.idToken)
}

// string refreshToken = 6;
inline void OldTokenExchangeResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
  return _internal_refreshtoken();
}
inline void OldTokenExchangeResponse::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
}
inline std::string* OldTokenExchangeResponse::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& OldTokenExchangeResponse::_internal_refreshtoken() const {
  return refreshtoken_.Get();
}
inline void OldTokenExchangeResponse::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeResponse::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
}
inline void OldTokenExchangeResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
}
inline void OldTokenExchangeResponse::set_refreshtoken(const char* value,
    size_t size) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
}
inline std::string* OldTokenExchangeResponse::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
  return refreshtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeResponse::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeResponse.refreshToken)
}

// string scope = 7;
inline void OldTokenExchangeResponse::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeResponse::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
  return _internal_scope();
}
inline void OldTokenExchangeResponse::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
}
inline std::string* OldTokenExchangeResponse::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
  return _internal_mutable_scope();
}
inline const std::string& OldTokenExchangeResponse::_internal_scope() const {
  return scope_.Get();
}
inline void OldTokenExchangeResponse::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeResponse::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
}
inline void OldTokenExchangeResponse::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
}
inline void OldTokenExchangeResponse::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
}
inline std::string* OldTokenExchangeResponse::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeResponse::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeResponse::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeResponse.scope)
}

// string tokenType = 8;
inline void OldTokenExchangeResponse::clear_tokentype() {
  tokentype_.ClearToEmpty();
}
inline const std::string& OldTokenExchangeResponse::tokentype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
  return _internal_tokentype();
}
inline void OldTokenExchangeResponse::set_tokentype(const std::string& value) {
  _internal_set_tokentype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
}
inline std::string* OldTokenExchangeResponse::mutable_tokentype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
  return _internal_mutable_tokentype();
}
inline const std::string& OldTokenExchangeResponse::_internal_tokentype() const {
  return tokentype_.Get();
}
inline void OldTokenExchangeResponse::_internal_set_tokentype(const std::string& value) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OldTokenExchangeResponse::set_tokentype(std::string&& value) {
  
  tokentype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
}
inline void OldTokenExchangeResponse::set_tokentype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
}
inline void OldTokenExchangeResponse::set_tokentype(const char* value,
    size_t size) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
}
inline std::string* OldTokenExchangeResponse::_internal_mutable_tokentype() {
  
  return tokentype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OldTokenExchangeResponse::release_tokentype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
  return tokentype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OldTokenExchangeResponse::set_allocated_tokentype(std::string* tokentype) {
  if (tokentype != nullptr) {
    
  } else {
    
  }
  tokentype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokentype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.OldTokenExchangeResponse.tokenType)
}

// -------------------------------------------------------------------

// GetOtpRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetOtpRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetOtpRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetOtpRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetOtpRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetOtpRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GetOtpRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetOtpRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetOtpRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetOtpRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetOtpRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetOtpRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool GetOtpRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool GetOtpRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GetOtpRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GetOtpRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpRequest.actorId)
  return _internal_actorid();
}
inline void GetOtpRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GetOtpRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* GetOtpRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetOtpRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetOtpRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GetOtpRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpRequest.actorId)
  return _internal_mutable_actorid();
}
inline void GetOtpRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpRequest.actorId)
}

// string appName = 3;
inline void GetOtpRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& GetOtpRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpRequest.appName)
  return _internal_appname();
}
inline void GetOtpRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpRequest.appName)
}
inline std::string* GetOtpRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& GetOtpRequest::_internal_appname() const {
  return appname_.Get();
}
inline void GetOtpRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOtpRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetOtpRequest.appName)
}
inline void GetOtpRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetOtpRequest.appName)
}
inline void GetOtpRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetOtpRequest.appName)
}
inline std::string* GetOtpRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOtpRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOtpRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpRequest.appName)
}

// string mobileNumber = 4;
inline void GetOtpRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GetOtpRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void GetOtpRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
}
inline std::string* GetOtpRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GetOtpRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GetOtpRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOtpRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
}
inline void GetOtpRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
}
inline void GetOtpRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
}
inline std::string* GetOtpRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOtpRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOtpRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpRequest.mobileNumber)
}

// -------------------------------------------------------------------

// GetOtpResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GetOtpResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetOtpResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetOtpResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.status)
  return _internal_status();
}
inline void GetOtpResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GetOtpResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void GetOtpResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetOtpResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetOtpResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.statusCode)
  return _internal_statuscode();
}
inline void GetOtpResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void GetOtpResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.statusCode)
}

// string otp = 3;
inline void GetOtpResponse::clear_otp() {
  otp_.ClearToEmpty();
}
inline const std::string& GetOtpResponse::otp() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.otp)
  return _internal_otp();
}
inline void GetOtpResponse::set_otp(const std::string& value) {
  _internal_set_otp(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.otp)
}
inline std::string* GetOtpResponse::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpResponse.otp)
  return _internal_mutable_otp();
}
inline const std::string& GetOtpResponse::_internal_otp() const {
  return otp_.Get();
}
inline void GetOtpResponse::_internal_set_otp(const std::string& value) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOtpResponse::set_otp(std::string&& value) {
  
  otp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetOtpResponse.otp)
}
inline void GetOtpResponse::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetOtpResponse.otp)
}
inline void GetOtpResponse::set_otp(const char* value,
    size_t size) {
  
  otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetOtpResponse.otp)
}
inline std::string* GetOtpResponse::_internal_mutable_otp() {
  
  return otp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOtpResponse::release_otp() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpResponse.otp)
  return otp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOtpResponse::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpResponse.otp)
}

// int64 generationTime = 4;
inline void GetOtpResponse::clear_generationtime() {
  generationtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOtpResponse::_internal_generationtime() const {
  return generationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOtpResponse::generationtime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.generationTime)
  return _internal_generationtime();
}
inline void GetOtpResponse::_internal_set_generationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  generationtime_ = value;
}
inline void GetOtpResponse::set_generationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_generationtime(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.generationTime)
}

// int64 expiryTime = 5;
inline void GetOtpResponse::clear_expirytime() {
  expirytime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOtpResponse::_internal_expirytime() const {
  return expirytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOtpResponse::expirytime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.expiryTime)
  return _internal_expirytime();
}
inline void GetOtpResponse::_internal_set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expirytime_ = value;
}
inline void GetOtpResponse::set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expirytime(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.expiryTime)
}

// string mobileNumber = 6;
inline void GetOtpResponse::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& GetOtpResponse::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
  return _internal_mobilenumber();
}
inline void GetOtpResponse::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
}
inline std::string* GetOtpResponse::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& GetOtpResponse::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void GetOtpResponse::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOtpResponse::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
}
inline void GetOtpResponse::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
}
inline void GetOtpResponse::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
}
inline std::string* GetOtpResponse::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOtpResponse::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOtpResponse::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GetOtpResponse.mobileNumber)
}

// -------------------------------------------------------------------

// AddActorSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddActorSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddActorSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddActorSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddActorSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddActorSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddActorSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddActorSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddActorSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddActorSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddActorSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool AddActorSecretRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool AddActorSecretRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddActorSecretRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddActorSecretRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.actorId)
  return _internal_actorid();
}
inline void AddActorSecretRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* AddActorSecretRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddActorSecretRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddActorSecretRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddActorSecretRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.actorId)
  return _internal_mutable_actorid();
}
inline void AddActorSecretRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.actorId)
}

// string authSecret = 3;
inline void AddActorSecretRequest::clear_authsecret() {
  authsecret_.ClearToEmpty();
}
inline const std::string& AddActorSecretRequest::authsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
  return _internal_authsecret();
}
inline void AddActorSecretRequest::set_authsecret(const std::string& value) {
  _internal_set_authsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
}
inline std::string* AddActorSecretRequest::mutable_authsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
  return _internal_mutable_authsecret();
}
inline const std::string& AddActorSecretRequest::_internal_authsecret() const {
  return authsecret_.Get();
}
inline void AddActorSecretRequest::_internal_set_authsecret(const std::string& value) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddActorSecretRequest::set_authsecret(std::string&& value) {
  
  authsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
}
inline void AddActorSecretRequest::set_authsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
}
inline void AddActorSecretRequest::set_authsecret(const char* value,
    size_t size) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
}
inline std::string* AddActorSecretRequest::_internal_mutable_authsecret() {
  
  return authsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddActorSecretRequest::release_authsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
  return authsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddActorSecretRequest::set_allocated_authsecret(std::string* authsecret) {
  if (authsecret != nullptr) {
    
  } else {
    
  }
  authsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.authSecret)
}

// .farm.nurture.core.contracts.common.SecretType secretType = 4;
inline void AddActorSecretRequest::clear_secrettype() {
  secrettype_ = 0;
}
inline ::farm::nurture::core::contracts::common::SecretType AddActorSecretRequest::_internal_secrettype() const {
  return static_cast< ::farm::nurture::core::contracts::common::SecretType >(secrettype_);
}
inline ::farm::nurture::core::contracts::common::SecretType AddActorSecretRequest::secrettype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.secretType)
  return _internal_secrettype();
}
inline void AddActorSecretRequest::_internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  
  secrettype_ = value;
}
inline void AddActorSecretRequest::set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  _internal_set_secrettype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.secretType)
}

// int32 expiryInSeconds = 5;
inline void AddActorSecretRequest::clear_expiryinseconds() {
  expiryinseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddActorSecretRequest::_internal_expiryinseconds() const {
  return expiryinseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddActorSecretRequest::expiryinseconds() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.expiryInSeconds)
  return _internal_expiryinseconds();
}
inline void AddActorSecretRequest::_internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiryinseconds_ = value;
}
inline void AddActorSecretRequest::set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiryinseconds(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.expiryInSeconds)
}

// int32 maxRetries = 6;
inline void AddActorSecretRequest::clear_maxretries() {
  maxretries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddActorSecretRequest::_internal_maxretries() const {
  return maxretries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddActorSecretRequest::maxretries() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.maxRetries)
  return _internal_maxretries();
}
inline void AddActorSecretRequest::_internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxretries_ = value;
}
inline void AddActorSecretRequest::set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxretries(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.maxRetries)
}

// string appName = 7;
inline void AddActorSecretRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& AddActorSecretRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.appName)
  return _internal_appname();
}
inline void AddActorSecretRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.appName)
}
inline std::string* AddActorSecretRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& AddActorSecretRequest::_internal_appname() const {
  return appname_.Get();
}
inline void AddActorSecretRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddActorSecretRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.AddActorSecretRequest.appName)
}
inline void AddActorSecretRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.AddActorSecretRequest.appName)
}
inline void AddActorSecretRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.AddActorSecretRequest.appName)
}
inline std::string* AddActorSecretRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddActorSecretRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddActorSecretRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.appName)
}

// string countryIsoCode = 8;
inline void AddActorSecretRequest::clear_countryisocode() {
  countryisocode_.ClearToEmpty();
}
inline const std::string& AddActorSecretRequest::countryisocode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
  return _internal_countryisocode();
}
inline void AddActorSecretRequest::set_countryisocode(const std::string& value) {
  _internal_set_countryisocode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
}
inline std::string* AddActorSecretRequest::mutable_countryisocode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
  return _internal_mutable_countryisocode();
}
inline const std::string& AddActorSecretRequest::_internal_countryisocode() const {
  return countryisocode_.Get();
}
inline void AddActorSecretRequest::_internal_set_countryisocode(const std::string& value) {
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddActorSecretRequest::set_countryisocode(std::string&& value) {
  
  countryisocode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
}
inline void AddActorSecretRequest::set_countryisocode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
}
inline void AddActorSecretRequest::set_countryisocode(const char* value,
    size_t size) {
  
  countryisocode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
}
inline std::string* AddActorSecretRequest::_internal_mutable_countryisocode() {
  
  return countryisocode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddActorSecretRequest::release_countryisocode() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
  return countryisocode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddActorSecretRequest::set_allocated_countryisocode(std::string* countryisocode) {
  if (countryisocode != nullptr) {
    
  } else {
    
  }
  countryisocode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countryisocode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.countryIsoCode)
}

// string mobileNumber = 9;
inline void AddActorSecretRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& AddActorSecretRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void AddActorSecretRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
}
inline std::string* AddActorSecretRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& AddActorSecretRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void AddActorSecretRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddActorSecretRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
}
inline void AddActorSecretRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
}
inline void AddActorSecretRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
}
inline std::string* AddActorSecretRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddActorSecretRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddActorSecretRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.AddActorSecretRequest.mobileNumber)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 10;
inline void AddActorSecretRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType AddActorSecretRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType AddActorSecretRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretRequest.clientType)
  return _internal_clienttype();
}
inline void AddActorSecretRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void AddActorSecretRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretRequest.clientType)
}

// -------------------------------------------------------------------

// AddActorSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void AddActorSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus AddActorSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus AddActorSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretResponse.status)
  return _internal_status();
}
inline void AddActorSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void AddActorSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void AddActorSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode AddActorSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode AddActorSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.AddActorSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void AddActorSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void AddActorSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.AddActorSecretResponse.statusCode)
}

// -------------------------------------------------------------------

// UpdateActorSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateActorSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateActorSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateActorSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateActorSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateActorSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateActorSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateActorSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateActorSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateActorSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateActorSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool UpdateActorSecretRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool UpdateActorSecretRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateActorSecretRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateActorSecretRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.actorId)
  return _internal_actorid();
}
inline void UpdateActorSecretRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorSecretRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorSecretRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorSecretRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateActorSecretRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.actorId)
  return _internal_mutable_actorid();
}
inline void UpdateActorSecretRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.actorId)
}

// string oldAuthSecret = 3;
inline void UpdateActorSecretRequest::clear_oldauthsecret() {
  oldauthsecret_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::oldauthsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
  return _internal_oldauthsecret();
}
inline void UpdateActorSecretRequest::set_oldauthsecret(const std::string& value) {
  _internal_set_oldauthsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
}
inline std::string* UpdateActorSecretRequest::mutable_oldauthsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
  return _internal_mutable_oldauthsecret();
}
inline const std::string& UpdateActorSecretRequest::_internal_oldauthsecret() const {
  return oldauthsecret_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_oldauthsecret(const std::string& value) {
  
  oldauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_oldauthsecret(std::string&& value) {
  
  oldauthsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
}
inline void UpdateActorSecretRequest::set_oldauthsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
}
inline void UpdateActorSecretRequest::set_oldauthsecret(const char* value,
    size_t size) {
  
  oldauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_oldauthsecret() {
  
  return oldauthsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_oldauthsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
  return oldauthsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_oldauthsecret(std::string* oldauthsecret) {
  if (oldauthsecret != nullptr) {
    
  } else {
    
  }
  oldauthsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldauthsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.oldAuthSecret)
}

// string newAuthSecret = 4;
inline void UpdateActorSecretRequest::clear_newauthsecret() {
  newauthsecret_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::newauthsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
  return _internal_newauthsecret();
}
inline void UpdateActorSecretRequest::set_newauthsecret(const std::string& value) {
  _internal_set_newauthsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
}
inline std::string* UpdateActorSecretRequest::mutable_newauthsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
  return _internal_mutable_newauthsecret();
}
inline const std::string& UpdateActorSecretRequest::_internal_newauthsecret() const {
  return newauthsecret_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_newauthsecret(const std::string& value) {
  
  newauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_newauthsecret(std::string&& value) {
  
  newauthsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
}
inline void UpdateActorSecretRequest::set_newauthsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
}
inline void UpdateActorSecretRequest::set_newauthsecret(const char* value,
    size_t size) {
  
  newauthsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_newauthsecret() {
  
  return newauthsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_newauthsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
  return newauthsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_newauthsecret(std::string* newauthsecret) {
  if (newauthsecret != nullptr) {
    
  } else {
    
  }
  newauthsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newauthsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.newAuthSecret)
}

// string accessToken = 5;
inline void UpdateActorSecretRequest::clear_accesstoken() {
  accesstoken_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
  return _internal_accesstoken();
}
inline void UpdateActorSecretRequest::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
}
inline std::string* UpdateActorSecretRequest::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& UpdateActorSecretRequest::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
}
inline void UpdateActorSecretRequest::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
}
inline void UpdateActorSecretRequest::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.accessToken)
}

// .farm.nurture.core.contracts.common.SecretType secretType = 6;
inline void UpdateActorSecretRequest::clear_secrettype() {
  secrettype_ = 0;
}
inline ::farm::nurture::core::contracts::common::SecretType UpdateActorSecretRequest::_internal_secrettype() const {
  return static_cast< ::farm::nurture::core::contracts::common::SecretType >(secrettype_);
}
inline ::farm::nurture::core::contracts::common::SecretType UpdateActorSecretRequest::secrettype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.secretType)
  return _internal_secrettype();
}
inline void UpdateActorSecretRequest::_internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  
  secrettype_ = value;
}
inline void UpdateActorSecretRequest::set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  _internal_set_secrettype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.secretType)
}

// int32 expiryInSeconds = 7;
inline void UpdateActorSecretRequest::clear_expiryinseconds() {
  expiryinseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorSecretRequest::_internal_expiryinseconds() const {
  return expiryinseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorSecretRequest::expiryinseconds() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.expiryInSeconds)
  return _internal_expiryinseconds();
}
inline void UpdateActorSecretRequest::_internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiryinseconds_ = value;
}
inline void UpdateActorSecretRequest::set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiryinseconds(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.expiryInSeconds)
}

// int32 maxRetries = 8;
inline void UpdateActorSecretRequest::clear_maxretries() {
  maxretries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorSecretRequest::_internal_maxretries() const {
  return maxretries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateActorSecretRequest::maxretries() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.maxRetries)
  return _internal_maxretries();
}
inline void UpdateActorSecretRequest::_internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxretries_ = value;
}
inline void UpdateActorSecretRequest::set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxretries(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.maxRetries)
}

// string appName = 9;
inline void UpdateActorSecretRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
  return _internal_appname();
}
inline void UpdateActorSecretRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
}
inline std::string* UpdateActorSecretRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& UpdateActorSecretRequest::_internal_appname() const {
  return appname_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
}
inline void UpdateActorSecretRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
}
inline void UpdateActorSecretRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.appName)
}

// string mobileNumber = 10;
inline void UpdateActorSecretRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void UpdateActorSecretRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
}
inline std::string* UpdateActorSecretRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& UpdateActorSecretRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
}
inline void UpdateActorSecretRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
}
inline void UpdateActorSecretRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.mobileNumber)
}

// string resetSecretGuid = 11;
inline void UpdateActorSecretRequest::clear_resetsecretguid() {
  resetsecretguid_.ClearToEmpty();
}
inline const std::string& UpdateActorSecretRequest::resetsecretguid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
  return _internal_resetsecretguid();
}
inline void UpdateActorSecretRequest::set_resetsecretguid(const std::string& value) {
  _internal_set_resetsecretguid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
}
inline std::string* UpdateActorSecretRequest::mutable_resetsecretguid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
  return _internal_mutable_resetsecretguid();
}
inline const std::string& UpdateActorSecretRequest::_internal_resetsecretguid() const {
  return resetsecretguid_.Get();
}
inline void UpdateActorSecretRequest::_internal_set_resetsecretguid(const std::string& value) {
  
  resetsecretguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActorSecretRequest::set_resetsecretguid(std::string&& value) {
  
  resetsecretguid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
}
inline void UpdateActorSecretRequest::set_resetsecretguid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resetsecretguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
}
inline void UpdateActorSecretRequest::set_resetsecretguid(const char* value,
    size_t size) {
  
  resetsecretguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
}
inline std::string* UpdateActorSecretRequest::_internal_mutable_resetsecretguid() {
  
  return resetsecretguid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActorSecretRequest::release_resetsecretguid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
  return resetsecretguid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActorSecretRequest::set_allocated_resetsecretguid(std::string* resetsecretguid) {
  if (resetsecretguid != nullptr) {
    
  } else {
    
  }
  resetsecretguid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resetsecretguid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretGuid)
}

// int64 resetSecretExpiry = 12;
inline void UpdateActorSecretRequest::clear_resetsecretexpiry() {
  resetsecretexpiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorSecretRequest::_internal_resetsecretexpiry() const {
  return resetsecretexpiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateActorSecretRequest::resetsecretexpiry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretExpiry)
  return _internal_resetsecretexpiry();
}
inline void UpdateActorSecretRequest::_internal_set_resetsecretexpiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resetsecretexpiry_ = value;
}
inline void UpdateActorSecretRequest::set_resetsecretexpiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resetsecretexpiry(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.resetSecretExpiry)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 13;
inline void UpdateActorSecretRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType UpdateActorSecretRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType UpdateActorSecretRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretRequest.clientType)
  return _internal_clienttype();
}
inline void UpdateActorSecretRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void UpdateActorSecretRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretRequest.clientType)
}

// -------------------------------------------------------------------

// UpdateActorSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void UpdateActorSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus UpdateActorSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus UpdateActorSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretResponse.status)
  return _internal_status();
}
inline void UpdateActorSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void UpdateActorSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void UpdateActorSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode UpdateActorSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode UpdateActorSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.UpdateActorSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void UpdateActorSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void UpdateActorSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.UpdateActorSecretResponse.statusCode)
}

// -------------------------------------------------------------------

// ValidateSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ValidateSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ValidateSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ValidateSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ValidateSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool ValidateSecretRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool ValidateSecretRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& ValidateSecretRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ValidateSecretRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.actorId)
  return _internal_actorid();
}
inline void ValidateSecretRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateSecretRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateSecretRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateSecretRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateSecretRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ValidateSecretRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateSecretRequest.actorId)
  return _internal_mutable_actorid();
}
inline void ValidateSecretRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.actorId)
}

// string authSecret = 3;
inline void ValidateSecretRequest::clear_authsecret() {
  authsecret_.ClearToEmpty();
}
inline const std::string& ValidateSecretRequest::authsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
  return _internal_authsecret();
}
inline void ValidateSecretRequest::set_authsecret(const std::string& value) {
  _internal_set_authsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
}
inline std::string* ValidateSecretRequest::mutable_authsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
  return _internal_mutable_authsecret();
}
inline const std::string& ValidateSecretRequest::_internal_authsecret() const {
  return authsecret_.Get();
}
inline void ValidateSecretRequest::_internal_set_authsecret(const std::string& value) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateSecretRequest::set_authsecret(std::string&& value) {
  
  authsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
}
inline void ValidateSecretRequest::set_authsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
}
inline void ValidateSecretRequest::set_authsecret(const char* value,
    size_t size) {
  
  authsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
}
inline std::string* ValidateSecretRequest::_internal_mutable_authsecret() {
  
  return authsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateSecretRequest::release_authsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
  return authsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateSecretRequest::set_allocated_authsecret(std::string* authsecret) {
  if (authsecret != nullptr) {
    
  } else {
    
  }
  authsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.authSecret)
}

// .farm.nurture.core.contracts.common.SecretType secretType = 4;
inline void ValidateSecretRequest::clear_secrettype() {
  secrettype_ = 0;
}
inline ::farm::nurture::core::contracts::common::SecretType ValidateSecretRequest::_internal_secrettype() const {
  return static_cast< ::farm::nurture::core::contracts::common::SecretType >(secrettype_);
}
inline ::farm::nurture::core::contracts::common::SecretType ValidateSecretRequest::secrettype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.secretType)
  return _internal_secrettype();
}
inline void ValidateSecretRequest::_internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  
  secrettype_ = value;
}
inline void ValidateSecretRequest::set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  _internal_set_secrettype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretRequest.secretType)
}

// string appName = 5;
inline void ValidateSecretRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& ValidateSecretRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.appName)
  return _internal_appname();
}
inline void ValidateSecretRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretRequest.appName)
}
inline std::string* ValidateSecretRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateSecretRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& ValidateSecretRequest::_internal_appname() const {
  return appname_.Get();
}
inline void ValidateSecretRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateSecretRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateSecretRequest.appName)
}
inline void ValidateSecretRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateSecretRequest.appName)
}
inline void ValidateSecretRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateSecretRequest.appName)
}
inline std::string* ValidateSecretRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateSecretRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateSecretRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateSecretRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.appName)
}

// string mobileNumber = 6;
inline void ValidateSecretRequest::clear_mobilenumber() {
  mobilenumber_.ClearToEmpty();
}
inline const std::string& ValidateSecretRequest::mobilenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
  return _internal_mobilenumber();
}
inline void ValidateSecretRequest::set_mobilenumber(const std::string& value) {
  _internal_set_mobilenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
}
inline std::string* ValidateSecretRequest::mutable_mobilenumber() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
  return _internal_mutable_mobilenumber();
}
inline const std::string& ValidateSecretRequest::_internal_mobilenumber() const {
  return mobilenumber_.Get();
}
inline void ValidateSecretRequest::_internal_set_mobilenumber(const std::string& value) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateSecretRequest::set_mobilenumber(std::string&& value) {
  
  mobilenumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
}
inline void ValidateSecretRequest::set_mobilenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
}
inline void ValidateSecretRequest::set_mobilenumber(const char* value,
    size_t size) {
  
  mobilenumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
}
inline std::string* ValidateSecretRequest::_internal_mutable_mobilenumber() {
  
  return mobilenumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateSecretRequest::release_mobilenumber() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
  return mobilenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateSecretRequest::set_allocated_mobilenumber(std::string* mobilenumber) {
  if (mobilenumber != nullptr) {
    
  } else {
    
  }
  mobilenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobilenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateSecretRequest.mobileNumber)
}

// -------------------------------------------------------------------

// ValidateSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ValidateSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretResponse.status)
  return _internal_status();
}
inline void ValidateSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ValidateSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void ValidateSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void ValidateSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void ValidateSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateSecretResponse.statusCode)
}

// -------------------------------------------------------------------

// GenerateSecretResetTokenRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GenerateSecretResetTokenRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GenerateSecretResetTokenRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateSecretResetTokenRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateSecretResetTokenRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GenerateSecretResetTokenRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateSecretResetTokenRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateSecretResetTokenRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateSecretResetTokenRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateSecretResetTokenRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GenerateSecretResetTokenRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool GenerateSecretResetTokenRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool GenerateSecretResetTokenRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateSecretResetTokenRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateSecretResetTokenRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId)
  return _internal_actorid();
}
inline void GenerateSecretResetTokenRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateSecretResetTokenRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateSecretResetTokenRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateSecretResetTokenRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateSecretResetTokenRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId)
  return _internal_mutable_actorid();
}
inline void GenerateSecretResetTokenRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.actorId)
}

// string email = 3;
inline void GenerateSecretResetTokenRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GenerateSecretResetTokenRequest::email() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
  return _internal_email();
}
inline void GenerateSecretResetTokenRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
}
inline std::string* GenerateSecretResetTokenRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
  return _internal_mutable_email();
}
inline const std::string& GenerateSecretResetTokenRequest::_internal_email() const {
  return email_.Get();
}
inline void GenerateSecretResetTokenRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateSecretResetTokenRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
}
inline void GenerateSecretResetTokenRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
}
inline void GenerateSecretResetTokenRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
}
inline std::string* GenerateSecretResetTokenRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateSecretResetTokenRequest::release_email() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateSecretResetTokenRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.email)
}

// .farm.nurture.core.contracts.common.SecretType secretType = 4;
inline void GenerateSecretResetTokenRequest::clear_secrettype() {
  secrettype_ = 0;
}
inline ::farm::nurture::core::contracts::common::SecretType GenerateSecretResetTokenRequest::_internal_secrettype() const {
  return static_cast< ::farm::nurture::core::contracts::common::SecretType >(secrettype_);
}
inline ::farm::nurture::core::contracts::common::SecretType GenerateSecretResetTokenRequest::secrettype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.secretType)
  return _internal_secrettype();
}
inline void GenerateSecretResetTokenRequest::_internal_set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  
  secrettype_ = value;
}
inline void GenerateSecretResetTokenRequest::set_secrettype(::farm::nurture::core::contracts::common::SecretType value) {
  _internal_set_secrettype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.secretType)
}

// string appName = 5;
inline void GenerateSecretResetTokenRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& GenerateSecretResetTokenRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
  return _internal_appname();
}
inline void GenerateSecretResetTokenRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
}
inline std::string* GenerateSecretResetTokenRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& GenerateSecretResetTokenRequest::_internal_appname() const {
  return appname_.Get();
}
inline void GenerateSecretResetTokenRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateSecretResetTokenRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
}
inline void GenerateSecretResetTokenRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
}
inline void GenerateSecretResetTokenRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
}
inline std::string* GenerateSecretResetTokenRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateSecretResetTokenRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateSecretResetTokenRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateSecretResetTokenRequest.appName)
}

// -------------------------------------------------------------------

// GenerateSecretResetTokenResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GenerateSecretResetTokenResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateSecretResetTokenResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateSecretResetTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.status)
  return _internal_status();
}
inline void GenerateSecretResetTokenResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GenerateSecretResetTokenResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void GenerateSecretResetTokenResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateSecretResetTokenResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateSecretResetTokenResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.statusCode)
  return _internal_statuscode();
}
inline void GenerateSecretResetTokenResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void GenerateSecretResetTokenResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.statusCode)
}

// int64 expiryTime = 3;
inline void GenerateSecretResetTokenResponse::clear_expirytime() {
  expirytime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateSecretResetTokenResponse::_internal_expirytime() const {
  return expirytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateSecretResetTokenResponse::expirytime() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.expiryTime)
  return _internal_expirytime();
}
inline void GenerateSecretResetTokenResponse::_internal_set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expirytime_ = value;
}
inline void GenerateSecretResetTokenResponse::set_expirytime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expirytime(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateSecretResetTokenResponse.expiryTime)
}

// -------------------------------------------------------------------

// DeleteSessionRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool DeleteSessionRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool DeleteSessionRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& DeleteSessionRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& DeleteSessionRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void DeleteSessionRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteSessionRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteSessionRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteSessionRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteSessionRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void DeleteSessionRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool DeleteSessionRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool DeleteSessionRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& DeleteSessionRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& DeleteSessionRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionRequest.actorId)
  return _internal_actorid();
}
inline void DeleteSessionRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* DeleteSessionRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DeleteSessionRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.DeleteSessionRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* DeleteSessionRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* DeleteSessionRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.DeleteSessionRequest.actorId)
  return _internal_mutable_actorid();
}
inline void DeleteSessionRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.actorId)
}

// string appName = 3;
inline void DeleteSessionRequest::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& DeleteSessionRequest::appname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionRequest.appName)
  return _internal_appname();
}
inline void DeleteSessionRequest::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.DeleteSessionRequest.appName)
}
inline std::string* DeleteSessionRequest::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.DeleteSessionRequest.appName)
  return _internal_mutable_appname();
}
inline const std::string& DeleteSessionRequest::_internal_appname() const {
  return appname_.Get();
}
inline void DeleteSessionRequest::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSessionRequest::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.DeleteSessionRequest.appName)
}
inline void DeleteSessionRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.DeleteSessionRequest.appName)
}
inline void DeleteSessionRequest::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.DeleteSessionRequest.appName)
}
inline std::string* DeleteSessionRequest::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSessionRequest::release_appname() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.DeleteSessionRequest.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSessionRequest::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.appName)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 4;
inline void DeleteSessionRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType DeleteSessionRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType DeleteSessionRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionRequest.clientType)
  return _internal_clienttype();
}
inline void DeleteSessionRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void DeleteSessionRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.DeleteSessionRequest.clientType)
}

// string refreshToken = 5;
inline void DeleteSessionRequest::clear_refreshtoken() {
  refreshtoken_.ClearToEmpty();
}
inline const std::string& DeleteSessionRequest::refreshtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
  return _internal_refreshtoken();
}
inline void DeleteSessionRequest::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
}
inline std::string* DeleteSessionRequest::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& DeleteSessionRequest::_internal_refreshtoken() const {
  return refreshtoken_.Get();
}
inline void DeleteSessionRequest::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSessionRequest::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
}
inline void DeleteSessionRequest::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
}
inline void DeleteSessionRequest::set_refreshtoken(const char* value,
    size_t size) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
}
inline std::string* DeleteSessionRequest::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSessionRequest::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
  return refreshtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSessionRequest::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.DeleteSessionRequest.refreshToken)
}

// -------------------------------------------------------------------

// DeleteSessionResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void DeleteSessionResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus DeleteSessionResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus DeleteSessionResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionResponse.status)
  return _internal_status();
}
inline void DeleteSessionResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void DeleteSessionResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.DeleteSessionResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void DeleteSessionResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode DeleteSessionResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode DeleteSessionResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.DeleteSessionResponse.statusCode)
  return _internal_statuscode();
}
inline void DeleteSessionResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void DeleteSessionResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.DeleteSessionResponse.statusCode)
}

// -------------------------------------------------------------------

// ValidateJWTTokenRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ValidateJWTTokenRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ValidateJWTTokenRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateJWTTokenRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateJWTTokenRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ValidateJWTTokenRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateJWTTokenRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateJWTTokenRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateJWTTokenRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateJWTTokenRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ValidateJWTTokenRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateJWTTokenRequest.requestHeaders)
}

// string token = 2;
inline void ValidateJWTTokenRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ValidateJWTTokenRequest::token() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
  return _internal_token();
}
inline void ValidateJWTTokenRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
}
inline std::string* ValidateJWTTokenRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
  return _internal_mutable_token();
}
inline const std::string& ValidateJWTTokenRequest::_internal_token() const {
  return token_.Get();
}
inline void ValidateJWTTokenRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateJWTTokenRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
}
inline void ValidateJWTTokenRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
}
inline void ValidateJWTTokenRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
}
inline std::string* ValidateJWTTokenRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateJWTTokenRequest::release_token() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateJWTTokenRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateJWTTokenRequest.token)
}

// -------------------------------------------------------------------

// ValidateJWTTokenResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ValidateJWTTokenResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateJWTTokenResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateJWTTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateJWTTokenResponse.status)
  return _internal_status();
}
inline void ValidateJWTTokenResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ValidateJWTTokenResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateJWTTokenResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void ValidateJWTTokenResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateJWTTokenResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateJWTTokenResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateJWTTokenResponse.statusCode)
  return _internal_statuscode();
}
inline void ValidateJWTTokenResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void ValidateJWTTokenResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateJWTTokenResponse.statusCode)
}

// -------------------------------------------------------------------

// RefreshAccessTokenRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool RefreshAccessTokenRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool RefreshAccessTokenRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& RefreshAccessTokenRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& RefreshAccessTokenRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void RefreshAccessTokenRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* RefreshAccessTokenRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* RefreshAccessTokenRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* RefreshAccessTokenRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* RefreshAccessTokenRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void RefreshAccessTokenRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 2;
inline bool RefreshAccessTokenRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool RefreshAccessTokenRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& RefreshAccessTokenRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& RefreshAccessTokenRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId)
  return _internal_actorid();
}
inline void RefreshAccessTokenRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshAccessTokenRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshAccessTokenRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshAccessTokenRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* RefreshAccessTokenRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId)
  return _internal_mutable_actorid();
}
inline void RefreshAccessTokenRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.actorId)
}

// string clientId = 3;
inline void RefreshAccessTokenRequest::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenRequest::clientid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
  return _internal_clientid();
}
inline void RefreshAccessTokenRequest::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
}
inline std::string* RefreshAccessTokenRequest::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& RefreshAccessTokenRequest::_internal_clientid() const {
  return clientid_.Get();
}
inline void RefreshAccessTokenRequest::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenRequest::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
}
inline void RefreshAccessTokenRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
}
inline void RefreshAccessTokenRequest::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
}
inline std::string* RefreshAccessTokenRequest::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenRequest::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientId)
}

// string clientSecret = 4;
inline void RefreshAccessTokenRequest::clear_clientsecret() {
  clientsecret_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenRequest::clientsecret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
  return _internal_clientsecret();
}
inline void RefreshAccessTokenRequest::set_clientsecret(const std::string& value) {
  _internal_set_clientsecret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
}
inline std::string* RefreshAccessTokenRequest::mutable_clientsecret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
  return _internal_mutable_clientsecret();
}
inline const std::string& RefreshAccessTokenRequest::_internal_clientsecret() const {
  return clientsecret_.Get();
}
inline void RefreshAccessTokenRequest::_internal_set_clientsecret(const std::string& value) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenRequest::set_clientsecret(std::string&& value) {
  
  clientsecret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
}
inline void RefreshAccessTokenRequest::set_clientsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
}
inline void RefreshAccessTokenRequest::set_clientsecret(const char* value,
    size_t size) {
  
  clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
}
inline std::string* RefreshAccessTokenRequest::_internal_mutable_clientsecret() {
  
  return clientsecret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenRequest::release_clientsecret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
  return clientsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenRequest::set_allocated_clientsecret(std::string* clientsecret) {
  if (clientsecret != nullptr) {
    
  } else {
    
  }
  clientsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientSecret)
}

// string scope = 5;
inline void RefreshAccessTokenRequest::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenRequest::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
  return _internal_scope();
}
inline void RefreshAccessTokenRequest::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
}
inline std::string* RefreshAccessTokenRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
  return _internal_mutable_scope();
}
inline const std::string& RefreshAccessTokenRequest::_internal_scope() const {
  return scope_.Get();
}
inline void RefreshAccessTokenRequest::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenRequest::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
}
inline void RefreshAccessTokenRequest::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
}
inline void RefreshAccessTokenRequest::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
}
inline std::string* RefreshAccessTokenRequest::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenRequest::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenRequest::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.scope)
}

// .farm.nurture.core.contracts.common.ClientType clientType = 6;
inline void RefreshAccessTokenRequest::clear_clienttype() {
  clienttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ClientType RefreshAccessTokenRequest::_internal_clienttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ClientType >(clienttype_);
}
inline ::farm::nurture::core::contracts::common::ClientType RefreshAccessTokenRequest::clienttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientType)
  return _internal_clienttype();
}
inline void RefreshAccessTokenRequest::_internal_set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  
  clienttype_ = value;
}
inline void RefreshAccessTokenRequest::set_clienttype(::farm::nurture::core::contracts::common::ClientType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenRequest.clientType)
}

// string refreshToken = 7;
inline void RefreshAccessTokenRequest::clear_refreshtoken() {
  refreshtoken_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenRequest::refreshtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
  return _internal_refreshtoken();
}
inline void RefreshAccessTokenRequest::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
}
inline std::string* RefreshAccessTokenRequest::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& RefreshAccessTokenRequest::_internal_refreshtoken() const {
  return refreshtoken_.Get();
}
inline void RefreshAccessTokenRequest::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenRequest::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
}
inline void RefreshAccessTokenRequest::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
}
inline void RefreshAccessTokenRequest::set_refreshtoken(const char* value,
    size_t size) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
}
inline std::string* RefreshAccessTokenRequest::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenRequest::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
  return refreshtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenRequest::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenRequest.refreshToken)
}

// -------------------------------------------------------------------

// RefreshAccessTokenResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void RefreshAccessTokenResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RefreshAccessTokenResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus RefreshAccessTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.status)
  return _internal_status();
}
inline void RefreshAccessTokenResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void RefreshAccessTokenResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void RefreshAccessTokenResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode RefreshAccessTokenResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode RefreshAccessTokenResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.statusCode)
  return _internal_statuscode();
}
inline void RefreshAccessTokenResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void RefreshAccessTokenResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.statusCode)
}

// string accessToken = 3;
inline void RefreshAccessTokenResponse::clear_accesstoken() {
  accesstoken_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenResponse::accesstoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
  return _internal_accesstoken();
}
inline void RefreshAccessTokenResponse::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
}
inline std::string* RefreshAccessTokenResponse::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& RefreshAccessTokenResponse::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void RefreshAccessTokenResponse::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenResponse::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
}
inline void RefreshAccessTokenResponse::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
}
inline void RefreshAccessTokenResponse::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
}
inline std::string* RefreshAccessTokenResponse::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenResponse::release_accesstoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenResponse::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenResponse.accessToken)
}

// int64 expiresIn = 4;
inline void RefreshAccessTokenResponse::clear_expiresin() {
  expiresin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefreshAccessTokenResponse::_internal_expiresin() const {
  return expiresin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefreshAccessTokenResponse::expiresin() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.expiresIn)
  return _internal_expiresin();
}
inline void RefreshAccessTokenResponse::_internal_set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresin_ = value;
}
inline void RefreshAccessTokenResponse::set_expiresin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresin(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.expiresIn)
}

// string idToken = 5;
inline void RefreshAccessTokenResponse::clear_idtoken() {
  idtoken_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenResponse::idtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
  return _internal_idtoken();
}
inline void RefreshAccessTokenResponse::set_idtoken(const std::string& value) {
  _internal_set_idtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
}
inline std::string* RefreshAccessTokenResponse::mutable_idtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
  return _internal_mutable_idtoken();
}
inline const std::string& RefreshAccessTokenResponse::_internal_idtoken() const {
  return idtoken_.Get();
}
inline void RefreshAccessTokenResponse::_internal_set_idtoken(const std::string& value) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenResponse::set_idtoken(std::string&& value) {
  
  idtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
}
inline void RefreshAccessTokenResponse::set_idtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
}
inline void RefreshAccessTokenResponse::set_idtoken(const char* value,
    size_t size) {
  
  idtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
}
inline std::string* RefreshAccessTokenResponse::_internal_mutable_idtoken() {
  
  return idtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenResponse::release_idtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
  return idtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenResponse::set_allocated_idtoken(std::string* idtoken) {
  if (idtoken != nullptr) {
    
  } else {
    
  }
  idtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenResponse.idToken)
}

// string refreshToken = 6;
inline void RefreshAccessTokenResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
  return _internal_refreshtoken();
}
inline void RefreshAccessTokenResponse::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
}
inline std::string* RefreshAccessTokenResponse::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& RefreshAccessTokenResponse::_internal_refreshtoken() const {
  return refreshtoken_.Get();
}
inline void RefreshAccessTokenResponse::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenResponse::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
}
inline void RefreshAccessTokenResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
}
inline void RefreshAccessTokenResponse::set_refreshtoken(const char* value,
    size_t size) {
  
  refreshtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
}
inline std::string* RefreshAccessTokenResponse::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
  return refreshtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenResponse::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenResponse.refreshToken)
}

// string scope = 7;
inline void RefreshAccessTokenResponse::clear_scope() {
  scope_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenResponse::scope() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
  return _internal_scope();
}
inline void RefreshAccessTokenResponse::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
}
inline std::string* RefreshAccessTokenResponse::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
  return _internal_mutable_scope();
}
inline const std::string& RefreshAccessTokenResponse::_internal_scope() const {
  return scope_.Get();
}
inline void RefreshAccessTokenResponse::_internal_set_scope(const std::string& value) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenResponse::set_scope(std::string&& value) {
  
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
}
inline void RefreshAccessTokenResponse::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
}
inline void RefreshAccessTokenResponse::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
}
inline std::string* RefreshAccessTokenResponse::_internal_mutable_scope() {
  
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenResponse::release_scope() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenResponse::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenResponse.scope)
}

// string tokenType = 8;
inline void RefreshAccessTokenResponse::clear_tokentype() {
  tokentype_.ClearToEmpty();
}
inline const std::string& RefreshAccessTokenResponse::tokentype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
  return _internal_tokentype();
}
inline void RefreshAccessTokenResponse::set_tokentype(const std::string& value) {
  _internal_set_tokentype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
}
inline std::string* RefreshAccessTokenResponse::mutable_tokentype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
  return _internal_mutable_tokentype();
}
inline const std::string& RefreshAccessTokenResponse::_internal_tokentype() const {
  return tokentype_.Get();
}
inline void RefreshAccessTokenResponse::_internal_set_tokentype(const std::string& value) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefreshAccessTokenResponse::set_tokentype(std::string&& value) {
  
  tokentype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
}
inline void RefreshAccessTokenResponse::set_tokentype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
}
inline void RefreshAccessTokenResponse::set_tokentype(const char* value,
    size_t size) {
  
  tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
}
inline std::string* RefreshAccessTokenResponse::_internal_mutable_tokentype() {
  
  return tokentype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefreshAccessTokenResponse::release_tokentype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
  return tokentype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshAccessTokenResponse::set_allocated_tokentype(std::string* tokentype) {
  if (tokentype != nullptr) {
    
  } else {
    
  }
  tokentype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokentype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.RefreshAccessTokenResponse.tokenType)
}

// -------------------------------------------------------------------

// GenerateActionSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GenerateActionSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GenerateActionSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateActionSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GenerateActionSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GenerateActionSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateActionSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateActionSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateActionSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GenerateActionSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GenerateActionSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.requestHeaders)
}

// int64 entityId = 2;
inline void GenerateActionSecretRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateActionSecretRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateActionSecretRequest::entityid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.entityId)
  return _internal_entityid();
}
inline void GenerateActionSecretRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void GenerateActionSecretRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.entityId)
}

// string entityType = 3;
inline void GenerateActionSecretRequest::clear_entitytype() {
  entitytype_.ClearToEmpty();
}
inline const std::string& GenerateActionSecretRequest::entitytype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
  return _internal_entitytype();
}
inline void GenerateActionSecretRequest::set_entitytype(const std::string& value) {
  _internal_set_entitytype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
}
inline std::string* GenerateActionSecretRequest::mutable_entitytype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
  return _internal_mutable_entitytype();
}
inline const std::string& GenerateActionSecretRequest::_internal_entitytype() const {
  return entitytype_.Get();
}
inline void GenerateActionSecretRequest::_internal_set_entitytype(const std::string& value) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateActionSecretRequest::set_entitytype(std::string&& value) {
  
  entitytype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
}
inline void GenerateActionSecretRequest::set_entitytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
}
inline void GenerateActionSecretRequest::set_entitytype(const char* value,
    size_t size) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
}
inline std::string* GenerateActionSecretRequest::_internal_mutable_entitytype() {
  
  return entitytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateActionSecretRequest::release_entitytype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
  return entitytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateActionSecretRequest::set_allocated_entitytype(std::string* entitytype) {
  if (entitytype != nullptr) {
    
  } else {
    
  }
  entitytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.entityType)
}

// string serviceName = 4;
inline void GenerateActionSecretRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& GenerateActionSecretRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
  return _internal_servicename();
}
inline void GenerateActionSecretRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
}
inline std::string* GenerateActionSecretRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& GenerateActionSecretRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void GenerateActionSecretRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateActionSecretRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
}
inline void GenerateActionSecretRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
}
inline void GenerateActionSecretRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
}
inline std::string* GenerateActionSecretRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateActionSecretRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateActionSecretRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.serviceName)
}

// string action = 5;
inline void GenerateActionSecretRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& GenerateActionSecretRequest::action() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
  return _internal_action();
}
inline void GenerateActionSecretRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
}
inline std::string* GenerateActionSecretRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
  return _internal_mutable_action();
}
inline const std::string& GenerateActionSecretRequest::_internal_action() const {
  return action_.Get();
}
inline void GenerateActionSecretRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateActionSecretRequest::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
}
inline void GenerateActionSecretRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
}
inline void GenerateActionSecretRequest::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
}
inline std::string* GenerateActionSecretRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateActionSecretRequest::release_action() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateActionSecretRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.action)
}

// int32 secretDigit = 6;
inline void GenerateActionSecretRequest::clear_secretdigit() {
  secretdigit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::_internal_secretdigit() const {
  return secretdigit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::secretdigit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.secretDigit)
  return _internal_secretdigit();
}
inline void GenerateActionSecretRequest::_internal_set_secretdigit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secretdigit_ = value;
}
inline void GenerateActionSecretRequest::set_secretdigit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secretdigit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.secretDigit)
}

// int32 maxRetries = 7;
inline void GenerateActionSecretRequest::clear_maxretries() {
  maxretries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::_internal_maxretries() const {
  return maxretries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::maxretries() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.maxRetries)
  return _internal_maxretries();
}
inline void GenerateActionSecretRequest::_internal_set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxretries_ = value;
}
inline void GenerateActionSecretRequest::set_maxretries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxretries(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.maxRetries)
}

// int32 expiryInSeconds = 8;
inline void GenerateActionSecretRequest::clear_expiryinseconds() {
  expiryinseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::_internal_expiryinseconds() const {
  return expiryinseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenerateActionSecretRequest::expiryinseconds() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.expiryInSeconds)
  return _internal_expiryinseconds();
}
inline void GenerateActionSecretRequest::_internal_set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiryinseconds_ = value;
}
inline void GenerateActionSecretRequest::set_expiryinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiryinseconds(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretRequest.expiryInSeconds)
}

// .farm.nurture.core.contracts.common.ActorID receiverActor = 9;
inline bool GenerateActionSecretRequest::_internal_has_receiveractor() const {
  return this != internal_default_instance() && receiveractor_ != nullptr;
}
inline bool GenerateActionSecretRequest::has_receiveractor() const {
  return _internal_has_receiveractor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateActionSecretRequest::_internal_receiveractor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = receiveractor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& GenerateActionSecretRequest::receiveractor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor)
  return _internal_receiveractor();
}
inline void GenerateActionSecretRequest::unsafe_arena_set_allocated_receiveractor(
    ::farm::nurture::core::contracts::common::ActorID* receiveractor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiveractor_);
  }
  receiveractor_ = receiveractor;
  if (receiveractor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor)
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateActionSecretRequest::release_receiveractor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = receiveractor_;
  receiveractor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateActionSecretRequest::unsafe_arena_release_receiveractor() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = receiveractor_;
  receiveractor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateActionSecretRequest::_internal_mutable_receiveractor() {
  
  if (receiveractor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    receiveractor_ = p;
  }
  return receiveractor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* GenerateActionSecretRequest::mutable_receiveractor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor)
  return _internal_mutable_receiveractor();
}
inline void GenerateActionSecretRequest::set_allocated_receiveractor(::farm::nurture::core::contracts::common::ActorID* receiveractor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiveractor_);
  }
  if (receiveractor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiveractor)->GetArena();
    if (message_arena != submessage_arena) {
      receiveractor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiveractor, submessage_arena);
    }
    
  } else {
    
  }
  receiveractor_ = receiveractor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.GenerateActionSecretRequest.receiverActor)
}

// repeated .farm.nurture.platform.auth.CommunicationDetail communicationDetails = 10;
inline int GenerateActionSecretRequest::_internal_communicationdetails_size() const {
  return communicationdetails_.size();
}
inline int GenerateActionSecretRequest::communicationdetails_size() const {
  return _internal_communicationdetails_size();
}
inline void GenerateActionSecretRequest::clear_communicationdetails() {
  communicationdetails_.Clear();
}
inline ::farm::nurture::platform::auth::CommunicationDetail* GenerateActionSecretRequest::mutable_communicationdetails(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails)
  return communicationdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::platform::auth::CommunicationDetail >*
GenerateActionSecretRequest::mutable_communicationdetails() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails)
  return &communicationdetails_;
}
inline const ::farm::nurture::platform::auth::CommunicationDetail& GenerateActionSecretRequest::_internal_communicationdetails(int index) const {
  return communicationdetails_.Get(index);
}
inline const ::farm::nurture::platform::auth::CommunicationDetail& GenerateActionSecretRequest::communicationdetails(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails)
  return _internal_communicationdetails(index);
}
inline ::farm::nurture::platform::auth::CommunicationDetail* GenerateActionSecretRequest::_internal_add_communicationdetails() {
  return communicationdetails_.Add();
}
inline ::farm::nurture::platform::auth::CommunicationDetail* GenerateActionSecretRequest::add_communicationdetails() {
  // @@protoc_insertion_point(field_add:farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails)
  return _internal_add_communicationdetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::platform::auth::CommunicationDetail >&
GenerateActionSecretRequest::communicationdetails() const {
  // @@protoc_insertion_point(field_list:farm.nurture.platform.auth.GenerateActionSecretRequest.communicationDetails)
  return communicationdetails_;
}

// -------------------------------------------------------------------

// CommunicationDetail

// string templateName = 1;
inline void CommunicationDetail::clear_templatename() {
  templatename_.ClearToEmpty();
}
inline const std::string& CommunicationDetail::templatename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.CommunicationDetail.templateName)
  return _internal_templatename();
}
inline void CommunicationDetail::set_templatename(const std::string& value) {
  _internal_set_templatename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.CommunicationDetail.templateName)
}
inline std::string* CommunicationDetail::mutable_templatename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.CommunicationDetail.templateName)
  return _internal_mutable_templatename();
}
inline const std::string& CommunicationDetail::_internal_templatename() const {
  return templatename_.Get();
}
inline void CommunicationDetail::_internal_set_templatename(const std::string& value) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationDetail::set_templatename(std::string&& value) {
  
  templatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.CommunicationDetail.templateName)
}
inline void CommunicationDetail::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.CommunicationDetail.templateName)
}
inline void CommunicationDetail::set_templatename(const char* value,
    size_t size) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.CommunicationDetail.templateName)
}
inline std::string* CommunicationDetail::_internal_mutable_templatename() {
  
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationDetail::release_templatename() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.CommunicationDetail.templateName)
  return templatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationDetail::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    
  } else {
    
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.CommunicationDetail.templateName)
}

// .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 2;
inline void CommunicationDetail::clear_communicationchannel() {
  communicationchannel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel CommunicationDetail::_internal_communicationchannel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(communicationchannel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel CommunicationDetail::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.CommunicationDetail.communicationChannel)
  return _internal_communicationchannel();
}
inline void CommunicationDetail::_internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  communicationchannel_ = value;
}
inline void CommunicationDetail::set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.CommunicationDetail.communicationChannel)
}

// -------------------------------------------------------------------

// GenerateActionSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GenerateActionSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateActionSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GenerateActionSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretResponse.status)
  return _internal_status();
}
inline void GenerateActionSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GenerateActionSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void GenerateActionSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateActionSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GenerateActionSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.GenerateActionSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void GenerateActionSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void GenerateActionSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.GenerateActionSecretResponse.statusCode)
}

// -------------------------------------------------------------------

// FetchActionSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchActionSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchActionSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchActionSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchActionSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchActionSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchActionSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchActionSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchActionSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchActionSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchActionSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.requestHeaders)
}

// int64 entityId = 2;
inline void FetchActionSecretRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchActionSecretRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchActionSecretRequest::entityid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.entityId)
  return _internal_entityid();
}
inline void FetchActionSecretRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void FetchActionSecretRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretRequest.entityId)
}

// string entityType = 3;
inline void FetchActionSecretRequest::clear_entitytype() {
  entitytype_.ClearToEmpty();
}
inline const std::string& FetchActionSecretRequest::entitytype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
  return _internal_entitytype();
}
inline void FetchActionSecretRequest::set_entitytype(const std::string& value) {
  _internal_set_entitytype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
}
inline std::string* FetchActionSecretRequest::mutable_entitytype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
  return _internal_mutable_entitytype();
}
inline const std::string& FetchActionSecretRequest::_internal_entitytype() const {
  return entitytype_.Get();
}
inline void FetchActionSecretRequest::_internal_set_entitytype(const std::string& value) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchActionSecretRequest::set_entitytype(std::string&& value) {
  
  entitytype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
}
inline void FetchActionSecretRequest::set_entitytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
}
inline void FetchActionSecretRequest::set_entitytype(const char* value,
    size_t size) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
}
inline std::string* FetchActionSecretRequest::_internal_mutable_entitytype() {
  
  return entitytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchActionSecretRequest::release_entitytype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
  return entitytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchActionSecretRequest::set_allocated_entitytype(std::string* entitytype) {
  if (entitytype != nullptr) {
    
  } else {
    
  }
  entitytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.entityType)
}

// string serviceName = 4;
inline void FetchActionSecretRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& FetchActionSecretRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
  return _internal_servicename();
}
inline void FetchActionSecretRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
}
inline std::string* FetchActionSecretRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& FetchActionSecretRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void FetchActionSecretRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchActionSecretRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
}
inline void FetchActionSecretRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
}
inline void FetchActionSecretRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
}
inline std::string* FetchActionSecretRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchActionSecretRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchActionSecretRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.serviceName)
}

// string action = 5;
inline void FetchActionSecretRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& FetchActionSecretRequest::action() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.action)
  return _internal_action();
}
inline void FetchActionSecretRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretRequest.action)
}
inline std::string* FetchActionSecretRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretRequest.action)
  return _internal_mutable_action();
}
inline const std::string& FetchActionSecretRequest::_internal_action() const {
  return action_.Get();
}
inline void FetchActionSecretRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchActionSecretRequest::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.FetchActionSecretRequest.action)
}
inline void FetchActionSecretRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.FetchActionSecretRequest.action)
}
inline void FetchActionSecretRequest::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.FetchActionSecretRequest.action)
}
inline std::string* FetchActionSecretRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchActionSecretRequest::release_action() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchActionSecretRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.action)
}

// .farm.nurture.core.contracts.common.ActorID actorId = 6;
inline bool FetchActionSecretRequest::_internal_has_actorid() const {
  return this != internal_default_instance() && actorid_ != nullptr;
}
inline bool FetchActionSecretRequest::has_actorid() const {
  return _internal_has_actorid();
}
inline const ::farm::nurture::core::contracts::common::ActorID& FetchActionSecretRequest::_internal_actorid() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actorid_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& FetchActionSecretRequest::actorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretRequest.actorId)
  return _internal_actorid();
}
inline void FetchActionSecretRequest::unsafe_arena_set_allocated_actorid(
    ::farm::nurture::core::contracts::common::ActorID* actorid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  actorid_ = actorid;
  if (actorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.actorId)
}
inline ::farm::nurture::core::contracts::common::ActorID* FetchActionSecretRequest::release_actorid() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* FetchActionSecretRequest::unsafe_arena_release_actorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretRequest.actorId)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actorid_;
  actorid_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* FetchActionSecretRequest::_internal_mutable_actorid() {
  
  if (actorid_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actorid_ = p;
  }
  return actorid_;
}
inline ::farm::nurture::core::contracts::common::ActorID* FetchActionSecretRequest::mutable_actorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretRequest.actorId)
  return _internal_mutable_actorid();
}
inline void FetchActionSecretRequest::set_allocated_actorid(::farm::nurture::core::contracts::common::ActorID* actorid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid_);
  }
  if (actorid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actorid)->GetArena();
    if (message_arena != submessage_arena) {
      actorid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actorid, submessage_arena);
    }
    
  } else {
    
  }
  actorid_ = actorid;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretRequest.actorId)
}

// -------------------------------------------------------------------

// FetchActionSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void FetchActionSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus FetchActionSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus FetchActionSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretResponse.status)
  return _internal_status();
}
inline void FetchActionSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void FetchActionSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void FetchActionSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode FetchActionSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode FetchActionSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void FetchActionSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void FetchActionSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretResponse.statusCode)
}

// string secret = 3;
inline void FetchActionSecretResponse::clear_secret() {
  secret_.ClearToEmpty();
}
inline const std::string& FetchActionSecretResponse::secret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
  return _internal_secret();
}
inline void FetchActionSecretResponse::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
}
inline std::string* FetchActionSecretResponse::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
  return _internal_mutable_secret();
}
inline const std::string& FetchActionSecretResponse::_internal_secret() const {
  return secret_.Get();
}
inline void FetchActionSecretResponse::_internal_set_secret(const std::string& value) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchActionSecretResponse::set_secret(std::string&& value) {
  
  secret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
}
inline void FetchActionSecretResponse::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
}
inline void FetchActionSecretResponse::set_secret(const char* value,
    size_t size) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
}
inline std::string* FetchActionSecretResponse::_internal_mutable_secret() {
  
  return secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchActionSecretResponse::release_secret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
  return secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchActionSecretResponse::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.FetchActionSecretResponse.secret)
}

// -------------------------------------------------------------------

// ValidateActionSecretRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool ValidateActionSecretRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool ValidateActionSecretRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateActionSecretRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& ValidateActionSecretRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void ValidateActionSecretRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateActionSecretRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateActionSecretRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateActionSecretRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* ValidateActionSecretRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void ValidateActionSecretRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.requestHeaders)
}

// int64 entityId = 2;
inline void ValidateActionSecretRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateActionSecretRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateActionSecretRequest::entityid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.entityId)
  return _internal_entityid();
}
inline void ValidateActionSecretRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void ValidateActionSecretRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretRequest.entityId)
}

// string entityType = 3;
inline void ValidateActionSecretRequest::clear_entitytype() {
  entitytype_.ClearToEmpty();
}
inline const std::string& ValidateActionSecretRequest::entitytype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
  return _internal_entitytype();
}
inline void ValidateActionSecretRequest::set_entitytype(const std::string& value) {
  _internal_set_entitytype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
}
inline std::string* ValidateActionSecretRequest::mutable_entitytype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
  return _internal_mutable_entitytype();
}
inline const std::string& ValidateActionSecretRequest::_internal_entitytype() const {
  return entitytype_.Get();
}
inline void ValidateActionSecretRequest::_internal_set_entitytype(const std::string& value) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateActionSecretRequest::set_entitytype(std::string&& value) {
  
  entitytype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
}
inline void ValidateActionSecretRequest::set_entitytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
}
inline void ValidateActionSecretRequest::set_entitytype(const char* value,
    size_t size) {
  
  entitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
}
inline std::string* ValidateActionSecretRequest::_internal_mutable_entitytype() {
  
  return entitytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateActionSecretRequest::release_entitytype() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
  return entitytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateActionSecretRequest::set_allocated_entitytype(std::string* entitytype) {
  if (entitytype != nullptr) {
    
  } else {
    
  }
  entitytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.entityType)
}

// string serviceName = 4;
inline void ValidateActionSecretRequest::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& ValidateActionSecretRequest::servicename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
  return _internal_servicename();
}
inline void ValidateActionSecretRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
}
inline std::string* ValidateActionSecretRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& ValidateActionSecretRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void ValidateActionSecretRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateActionSecretRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
}
inline void ValidateActionSecretRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
}
inline void ValidateActionSecretRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
}
inline std::string* ValidateActionSecretRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateActionSecretRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateActionSecretRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.serviceName)
}

// string action = 5;
inline void ValidateActionSecretRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& ValidateActionSecretRequest::action() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
  return _internal_action();
}
inline void ValidateActionSecretRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
}
inline std::string* ValidateActionSecretRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
  return _internal_mutable_action();
}
inline const std::string& ValidateActionSecretRequest::_internal_action() const {
  return action_.Get();
}
inline void ValidateActionSecretRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateActionSecretRequest::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
}
inline void ValidateActionSecretRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
}
inline void ValidateActionSecretRequest::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
}
inline std::string* ValidateActionSecretRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateActionSecretRequest::release_action() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateActionSecretRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.action)
}

// string secret = 6;
inline void ValidateActionSecretRequest::clear_secret() {
  secret_.ClearToEmpty();
}
inline const std::string& ValidateActionSecretRequest::secret() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
  return _internal_secret();
}
inline void ValidateActionSecretRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
}
inline std::string* ValidateActionSecretRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& ValidateActionSecretRequest::_internal_secret() const {
  return secret_.Get();
}
inline void ValidateActionSecretRequest::_internal_set_secret(const std::string& value) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateActionSecretRequest::set_secret(std::string&& value) {
  
  secret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
}
inline void ValidateActionSecretRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
}
inline void ValidateActionSecretRequest::set_secret(const char* value,
    size_t size) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
}
inline std::string* ValidateActionSecretRequest::_internal_mutable_secret() {
  
  return secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateActionSecretRequest::release_secret() {
  // @@protoc_insertion_point(field_release:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
  return secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateActionSecretRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.platform.auth.ValidateActionSecretRequest.secret)
}

// -------------------------------------------------------------------

// ValidateActionSecretResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void ValidateActionSecretResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateActionSecretResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus ValidateActionSecretResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretResponse.status)
  return _internal_status();
}
inline void ValidateActionSecretResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void ValidateActionSecretResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode statusCode = 2;
inline void ValidateActionSecretResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateActionSecretResponse::_internal_statuscode() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(statuscode_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode ValidateActionSecretResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.platform.auth.ValidateActionSecretResponse.statusCode)
  return _internal_statuscode();
}
inline void ValidateActionSecretResponse::_internal_set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  statuscode_ = value;
}
inline void ValidateActionSecretResponse::set_statuscode(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.platform.auth.ValidateActionSecretResponse.statusCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace platform
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthService_2fauth_5fservice_2eproto
