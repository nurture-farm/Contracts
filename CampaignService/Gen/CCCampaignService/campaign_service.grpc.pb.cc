// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CampaignService/campaign_service.proto

#include "CampaignService/campaign_service.pb.h"
#include "CampaignService/campaign_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {

static const char* CampaignService_method_names[] = {
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaign",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaign",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaignBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplate",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplateBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaign",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaignBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteCampaign",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignById",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignTemplateById",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindTargetUserById",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUser",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUserBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUser",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUserBulk",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindInactionTargetUserByCampaignId",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/Execute",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAthenaQuery",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteTestNewCampaign",
  "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFilterCampaigns",
};

std::unique_ptr< CampaignService::Stub> CampaignService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CampaignService::Stub> stub(new CampaignService::Stub(channel, options));
  return stub;
}

CampaignService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ExecuteAddCampaign_(CampaignService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddCampaignBulk_(CampaignService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateCampaign_(CampaignService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUpdateCampaignBulk_(CampaignService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddCampaignTemplate_(CampaignService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddCampaignTemplateBulk_(CampaignService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddNewCampaign_(CampaignService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddNewCampaignBulk_(CampaignService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteCampaign_(CampaignService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFindCampaignById_(CampaignService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFindCampaignTemplateById_(CampaignService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFindTargetUserById_(CampaignService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddTargetUser_(CampaignService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddTargetUserBulk_(CampaignService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddInactionTargetUser_(CampaignService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAddInactionTargetUserBulk_(CampaignService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFindInactionTargetUserByCampaignId_(CampaignService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(CampaignService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAthenaQuery_(CampaignService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteTestNewCampaign_(CampaignService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteFilterCampaigns_(CampaignService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CampaignService::Stub::ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddCampaign_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaign_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* CampaignService::Stub::AsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddCampaignBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddCampaignBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* CampaignService::Stub::AsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddCampaignBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateCampaign_, context, request, response);
}

void CampaignService::Stub::async::ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateCampaign_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* CampaignService::Stub::AsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteUpdateCampaignBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateCampaignBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteUpdateCampaignBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteUpdateCampaignBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* CampaignService::Stub::AsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteUpdateCampaignBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddCampaignTemplate_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignTemplate_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* CampaignService::Stub::PrepareAsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddCampaignTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* CampaignService::Stub::AsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddCampaignTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddCampaignTemplateBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignTemplateBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddCampaignTemplateBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* CampaignService::Stub::PrepareAsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddCampaignTemplateBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* CampaignService::Stub::AsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddCampaignTemplateBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddNewCampaign_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddNewCampaign_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddNewCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddNewCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* CampaignService::Stub::AsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddNewCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddNewCampaignBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddNewCampaignBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddNewCampaignBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddNewCampaignBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* CampaignService::Stub::AsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddNewCampaignBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteCampaign_, context, request, response);
}

void CampaignService::Stub::async::ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCampaign_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::CampaignResponse, ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* CampaignService::Stub::AsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFindCampaignById_, context, request, response);
}

void CampaignService::Stub::async::ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindCampaignById_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindCampaignById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* CampaignService::Stub::PrepareAsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFindCampaignById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* CampaignService::Stub::AsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFindCampaignByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFindCampaignTemplateById_, context, request, response);
}

void CampaignService::Stub::async::ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindCampaignTemplateById_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindCampaignTemplateById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* CampaignService::Stub::PrepareAsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFindCampaignTemplateById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* CampaignService::Stub::AsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFindCampaignTemplateByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFindTargetUserById_, context, request, response);
}

void CampaignService::Stub::async::ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindTargetUserById_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindTargetUserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* CampaignService::Stub::PrepareAsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFindTargetUserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* CampaignService::Stub::AsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFindTargetUserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddTargetUser_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddTargetUser_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddTargetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* CampaignService::Stub::PrepareAsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddTargetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* CampaignService::Stub::AsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddTargetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddTargetUserBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddTargetUserBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddTargetUserBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* CampaignService::Stub::PrepareAsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddTargetUserBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* CampaignService::Stub::AsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddTargetUserBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddInactionTargetUser_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddInactionTargetUser_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddInactionTargetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* CampaignService::Stub::PrepareAsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddInactionTargetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* CampaignService::Stub::AsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddInactionTargetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAddInactionTargetUserBulk_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddInactionTargetUserBulk_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAddInactionTargetUserBulk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* CampaignService::Stub::PrepareAsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAddInactionTargetUserBulk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* CampaignService::Stub::AsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAddInactionTargetUserBulkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFindInactionTargetUserByCampaignId_, context, request, response);
}

void CampaignService::Stub::async::ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindInactionTargetUserByCampaignId_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFindInactionTargetUserByCampaignId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* CampaignService::Stub::PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFindInactionTargetUserByCampaignId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* CampaignService::Stub::AsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void CampaignService::Stub::async::Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* CampaignService::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::MultiResponses, ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Execute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* CampaignService::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteAthenaQuery_, context, request, response);
}

void CampaignService::Stub::async::ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAthenaQuery_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteAthenaQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* CampaignService::Stub::PrepareAsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteAthenaQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* CampaignService::Stub::AsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteAthenaQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteTestNewCampaign_, context, request, response);
}

void CampaignService::Stub::async::ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTestNewCampaign_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTestNewCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteTestNewCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* CampaignService::Stub::AsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteTestNewCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CampaignService::Stub::ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteFilterCampaigns_, context, request, response);
}

void CampaignService::Stub::async::ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFilterCampaigns_, context, request, response, std::move(f));
}

void CampaignService::Stub::async::ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteFilterCampaigns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* CampaignService::Stub::PrepareAsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteFilterCampaigns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* CampaignService::Stub::AsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteFilterCampaignsRaw(context, request, cq);
  result->StartCall();
  return result;
}

CampaignService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resp) {
               return service->ExecuteAddCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resp) {
               return service->ExecuteAddCampaignBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resp) {
               return service->ExecuteUpdateCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resp) {
               return service->ExecuteUpdateCampaignBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resp) {
               return service->ExecuteAddCampaignTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resp) {
               return service->ExecuteAddCampaignTemplateBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resp) {
               return service->ExecuteAddNewCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resp) {
               return service->ExecuteAddNewCampaignBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::CampaignResponse* resp) {
               return service->ExecuteCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* req,
             ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resp) {
               return service->ExecuteFindCampaignById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* req,
             ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resp) {
               return service->ExecuteFindCampaignTemplateById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* req,
             ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* resp) {
               return service->ExecuteFindTargetUserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resp) {
               return service->ExecuteAddTargetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resp) {
               return service->ExecuteAddTargetUserBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resp) {
               return service->ExecuteAddInactionTargetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* req,
             ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resp) {
               return service->ExecuteAddInactionTargetUserBulk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* req,
             ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resp) {
               return service->ExecuteFindInactionTargetUserByCampaignId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::MultiRequests* req,
             ::farm::nurture::core::contracts::CampaignService::MultiResponses* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* req,
             ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* resp) {
               return service->ExecuteAthenaQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* resp) {
               return service->ExecuteTestNewCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CampaignService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* req,
             ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* resp) {
               return service->ExecuteFilterCampaigns(ctx, req, resp);
             }, this)));
}

CampaignService::Service::~Service() {
}

::grpc::Status CampaignService::Service::ExecuteAddCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteUpdateCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteUpdateCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddCampaignTemplate(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddNewCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddNewCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteFindCampaignById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteFindCampaignTemplateById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteFindTargetUserById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddTargetUser(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddTargetUserBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddInactionTargetUser(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::Execute(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteAthenaQuery(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteTestNewCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::ExecuteFilterCampaigns(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace farm
}  // namespace nurture
}  // namespace core
}  // namespace contracts
}  // namespace CampaignService

