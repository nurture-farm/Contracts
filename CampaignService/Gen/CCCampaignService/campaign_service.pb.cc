// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CampaignService/campaign_service.proto

#include "CampaignService/campaign_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeaders_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2futils_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStatusResult_Common_2futils_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {
class AddCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCampaignRequest> _instance;
} _AddCampaignRequest_default_instance_;
class TestCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCampaignRequest> _instance;
} _TestCampaignRequest_default_instance_;
class BulkAddCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddCampaignRequest> _instance;
} _BulkAddCampaignRequest_default_instance_;
class AddCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCampaignResponse> _instance;
} _AddCampaignResponse_default_instance_;
class BulkAddCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddCampaignResponse> _instance;
} _BulkAddCampaignResponse_default_instance_;
class UpdateCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCampaignRequest> _instance;
} _UpdateCampaignRequest_default_instance_;
class BulkUpdateCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateCampaignRequest> _instance;
} _BulkUpdateCampaignRequest_default_instance_;
class UpdateCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCampaignResponse> _instance;
} _UpdateCampaignResponse_default_instance_;
class BulkUpdateCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateCampaignResponse> _instance;
} _BulkUpdateCampaignResponse_default_instance_;
class AddCampaignTemplateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCampaignTemplateRequest> _instance;
} _AddCampaignTemplateRequest_default_instance_;
class TestCampaignTemplateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCampaignTemplateRequest> _instance;
} _TestCampaignTemplateRequest_default_instance_;
class BulkAddCampaignTemplateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddCampaignTemplateRequest> _instance;
} _BulkAddCampaignTemplateRequest_default_instance_;
class AddCampaignTemplateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCampaignTemplateResponse> _instance;
} _AddCampaignTemplateResponse_default_instance_;
class BulkAddCampaignTemplateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddCampaignTemplateResponse> _instance;
} _BulkAddCampaignTemplateResponse_default_instance_;
class AddNewCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNewCampaignRequest> _instance;
} _AddNewCampaignRequest_default_instance_;
class BulkAddNewCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddNewCampaignRequest> _instance;
} _BulkAddNewCampaignRequest_default_instance_;
class AddNewCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNewCampaignResponse> _instance;
} _AddNewCampaignResponse_default_instance_;
class BulkAddNewCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddNewCampaignResponse> _instance;
} _BulkAddNewCampaignResponse_default_instance_;
class CampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CampaignRequest> _instance;
} _CampaignRequest_default_instance_;
class CampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CampaignResponse> _instance;
} _CampaignResponse_default_instance_;
class FindCampaignByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignByIdRequest> _instance;
} _FindCampaignByIdRequest_default_instance_;
class FindCampaignByIdResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignByIdResponseRecord> _instance;
} _FindCampaignByIdResponseRecord_default_instance_;
class FindCampaignByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignByIdResponse> _instance;
} _FindCampaignByIdResponse_default_instance_;
class FindCampaignTemplateByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignTemplateByIdRequest> _instance;
} _FindCampaignTemplateByIdRequest_default_instance_;
class FindCampaignTemplateByIdResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignTemplateByIdResponseRecord> _instance;
} _FindCampaignTemplateByIdResponseRecord_default_instance_;
class FindCampaignTemplateByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindCampaignTemplateByIdResponse> _instance;
} _FindCampaignTemplateByIdResponse_default_instance_;
class FindTargetUserByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindTargetUserByIdRequest> _instance;
} _FindTargetUserByIdRequest_default_instance_;
class FindTargetUserByIdResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindTargetUserByIdResponseRecord> _instance;
} _FindTargetUserByIdResponseRecord_default_instance_;
class FindTargetUserByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindTargetUserByIdResponse> _instance;
} _FindTargetUserByIdResponse_default_instance_;
class GetDynamicDataByKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDynamicDataByKeyRequest> _instance;
} _GetDynamicDataByKeyRequest_default_instance_;
class GetDynamicDataByKeyResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDynamicDataByKeyResponseRecord> _instance;
} _GetDynamicDataByKeyResponseRecord_default_instance_;
class GetDynamicDataByKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDynamicDataByKeyResponse> _instance;
} _GetDynamicDataByKeyResponse_default_instance_;
class AddDynamicDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDynamicDataRequest> _instance;
} _AddDynamicDataRequest_default_instance_;
class BulkAddDynamicDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddDynamicDataRequest> _instance;
} _BulkAddDynamicDataRequest_default_instance_;
class AddDynamicDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDynamicDataResponse> _instance;
} _AddDynamicDataResponse_default_instance_;
class BulkAddDynamicDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddDynamicDataResponse> _instance;
} _BulkAddDynamicDataResponse_default_instance_;
class AddTargetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTargetUserRequest> _instance;
} _AddTargetUserRequest_default_instance_;
class TestTargetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestTargetUserRequest> _instance;
} _TestTargetUserRequest_default_instance_;
class BulkAddTargetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddTargetUserRequest> _instance;
} _BulkAddTargetUserRequest_default_instance_;
class AddTargetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTargetUserResponse> _instance;
} _AddTargetUserResponse_default_instance_;
class BulkAddTargetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddTargetUserResponse> _instance;
} _BulkAddTargetUserResponse_default_instance_;
class AddInactionTargetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddInactionTargetUserRequest> _instance;
} _AddInactionTargetUserRequest_default_instance_;
class BulkAddInactionTargetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddInactionTargetUserRequest> _instance;
} _BulkAddInactionTargetUserRequest_default_instance_;
class AddInactionTargetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddInactionTargetUserResponse> _instance;
} _AddInactionTargetUserResponse_default_instance_;
class BulkAddInactionTargetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkAddInactionTargetUserResponse> _instance;
} _BulkAddInactionTargetUserResponse_default_instance_;
class FindInactionTargetUserByCampaignIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindInactionTargetUserByCampaignIdRequest> _instance;
} _FindInactionTargetUserByCampaignIdRequest_default_instance_;
class FindInactionTargetUserByCampaignIdResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindInactionTargetUserByCampaignIdResponseRecord> _instance;
} _FindInactionTargetUserByCampaignIdResponseRecord_default_instance_;
class FindInactionTargetUserByCampaignIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindInactionTargetUserByCampaignIdResponse> _instance;
} _FindInactionTargetUserByCampaignIdResponse_default_instance_;
class AthenaQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AthenaQueryRequest> _instance;
} _AthenaQueryRequest_default_instance_;
class AthenaQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AthenaQueryResponse> _instance;
} _AthenaQueryResponse_default_instance_;
class TestNewCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNewCampaignRequest> _instance;
} _TestNewCampaignRequest_default_instance_;
class TestNewCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNewCampaignResponse> _instance;
} _TestNewCampaignResponse_default_instance_;
class MultiRequestsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRequests> _instance;
} _MultiRequests_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class MultiResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiResponses> _instance;
} _MultiResponses_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class FilterCampaignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterCampaignRequest> _instance;
} _FilterCampaignRequest_default_instance_;
class FilterCampaignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterCampaignResponse> _instance;
} _FilterCampaignResponse_default_instance_;
class TestCampaignByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCampaignByIdRequest> _instance;
} _TestCampaignByIdRequest_default_instance_;
class TestCampaignByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCampaignByIdResponse> _instance;
} _TestCampaignByIdResponse_default_instance_;
}  // namespace CampaignService
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddDynamicDataRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddDynamicDataResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddNewCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddNewCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddTargetUserRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AddTargetUserResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AthenaQueryRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_AthenaQueryResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_CampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::CampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_CampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::CampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,}};

static void InitDefaultsscc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FilterCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FilterCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyResponseRecord_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_MultiRequests_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::MultiRequests();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_MultiResponses_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::MultiResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Request_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_Request_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_Request_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Response_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_Response_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, 0, InitDefaultsscc_info_Response_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestCampaignByIdRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestCampaignByIdResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,}};

static void InitDefaultsscc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestCampaignTemplateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestNewCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
      &scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestNewCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,}};

static void InitDefaultsscc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_TestTargetUserRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_UpdateCampaignRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::CampaignService::_UpdateCampaignResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto}, {
      &scc_info_RequestStatusResult_Common_2futils_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CampaignService_2fcampaign_5fservice_2eproto[60];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CampaignService_2fcampaign_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CampaignService_2fcampaign_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CampaignService_2fcampaign_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, description_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, cronexpression_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, occurrences_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, content_metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, communicationchannel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, campaignscheduletype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, inactionduration_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, query_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, inaction_query_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, createdbyactor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, media_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, channel_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, content_metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, communicationchannel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, query_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, media_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest, channel_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, cronexpression_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, query_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, updatedbyactor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, occurrences_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, templatename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, campaignname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, distributionpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest, templatename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest, distributionpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, addcampaignrequest_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, addcampaigntemplaterequests_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, addtargetuserrequests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignRequest, campaignid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::CampaignResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, description_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, cronexpression_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, occurrences_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, communicationchannel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, scheduletype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, query_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, inactionquery_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, inactionduration_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, attributes_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, createdbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, createdbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, updatedbyactorid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, updatedbyactortype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, version_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, createdat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, updatedat_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord, deletedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, campaignid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, templatename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, campaignname_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord, distributionpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, campaignid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord, userid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord, usertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest, dynamickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord, dynamickey_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord, ctalink_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord, media_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, dynamickey_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, ctalink_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest, media_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, recordid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse, attribs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, isstaleallowed_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, campaignid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord, userid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord, usertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, athenaquery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, testcampaignrequest_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, testcampaigntemplaterequests_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, testtargetuserrequests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiRequests, ontxn_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiRequests, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Request, index_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Request, ARequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiResponses, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::MultiResponses, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Response, index_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Response, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::Response, AResponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, description_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, templatename_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, pagenumber_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest, requestheaders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest, campaignid_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest, athenaquery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest)},
  { 22, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest)},
  { 35, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest)},
  { 42, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse)},
  { 51, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse)},
  { 59, -1, sizeof(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest)},
  { 72, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest)},
  { 79, -1, sizeof(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse)},
  { 88, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse)},
  { 96, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest)},
  { 106, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest)},
  { 114, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest)},
  { 121, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse)},
  { 130, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse)},
  { 138, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest)},
  { 147, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest)},
  { 154, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse)},
  { 163, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse)},
  { 171, -1, sizeof(::farm::nurture::core::contracts::CampaignService::CampaignRequest)},
  { 179, -1, sizeof(::farm::nurture::core::contracts::CampaignService::CampaignResponse)},
  { 186, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest)},
  { 194, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord)},
  { 221, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse)},
  { 230, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest)},
  { 238, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord)},
  { 248, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse)},
  { 257, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest)},
  { 265, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord)},
  { 274, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse)},
  { 283, -1, sizeof(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest)},
  { 292, -1, sizeof(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord)},
  { 301, -1, sizeof(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse)},
  { 310, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest)},
  { 320, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest)},
  { 327, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse)},
  { 336, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse)},
  { 344, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest)},
  { 352, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest)},
  { 359, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest)},
  { 366, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse)},
  { 375, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse)},
  { 383, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest)},
  { 391, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest)},
  { 398, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse)},
  { 407, -1, sizeof(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse)},
  { 415, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest)},
  { 423, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord)},
  { 432, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse)},
  { 441, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest)},
  { 448, -1, sizeof(::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse)},
  { 455, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest)},
  { 464, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse)},
  { 470, -1, sizeof(::farm::nurture::core::contracts::CampaignService::MultiRequests)},
  { 477, -1, sizeof(::farm::nurture::core::contracts::CampaignService::Request)},
  { 503, -1, sizeof(::farm::nurture::core::contracts::CampaignService::MultiResponses)},
  { 510, -1, sizeof(::farm::nurture::core::contracts::CampaignService::Response)},
  { 537, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest)},
  { 549, -1, sizeof(::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse)},
  { 557, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest)},
  { 565, -1, sizeof(::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_UpdateCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_UpdateCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestCampaignTemplateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddNewCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddNewCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_CampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_CampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindTargetUserByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddDynamicDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddDynamicDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddTargetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestTargetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddTargetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AthenaQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_AthenaQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestNewCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestNewCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_MultiRequests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_MultiResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FilterCampaignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_FilterCampaignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestCampaignByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::CampaignService::_TestCampaignByIdResponse_default_instance_),
};

const char descriptor_table_protodef_CampaignService_2fcampaign_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&CampaignService/campaign_service.proto"
  "\022+farm.nurture.core.contracts.CampaignSe"
  "rvice\032\022Common/enums.proto\032\022Common/utils."
  "proto\032\024Common/headers.proto\032\025Common/enti"
  "ties.proto\032\034Common/event_reference.proto"
  "\032\026Common/time_slot.proto\032\021Common/tags.pr"
  "oto\032.CommunicationEngine/communication_e"
  "ngine.proto\032\036google/protobuf/duration.pr"
  "oto\"\245\007\n\022AddCampaignRequest\022J\n\016requestHea"
  "ders\030\001 \001(\01322.farm.nurture.core.contracts"
  ".common.RequestHeaders\022@\n\tnamespace\030\002 \001("
  "\0162-.farm.nurture.core.contracts.common.N"
  "ameSpace\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 "
  "\001(\t\022\026\n\016cronExpression\030\005 \001(\t\022\023\n\013occurrenc"
  "es\030\006 \001(\005\022E\n\020content_metadata\030\007 \003(\0132+.far"
  "m.nurture.core.contracts.common.Attribs\022"
  "V\n\024communicationChannel\030\010 \001(\01628.farm.nur"
  "ture.core.contracts.common.Communication"
  "Channel\022B\n\006status\030\t \001(\01622.farm.nurture.c"
  "ore.contracts.common.CampaignStatus\022C\n\004t"
  "ype\030\n \001(\01625.farm.nurture.core.contracts."
  "common.CampaignQueryType\022V\n\024campaignSche"
  "duleType\030\013 \001(\01628.farm.nurture.core.contr"
  "acts.common.CampaignScheduleType\0223\n\020inac"
  "tionDuration\030\014 \001(\0132\031.google.protobuf.Dur"
  "ation\022\r\n\005query\030\r \001(\t\022\026\n\016inaction_query\030\016"
  " \001(\t\022C\n\016createdByActor\030\017 \001(\0132+.farm.nurt"
  "ure.core.contracts.common.ActorID\0224\n\005med"
  "ia\030\020 \001(\0132%.farm.nurture.core.contracts.c"
  "e.Media\022Z\n\022channel_attributes\030\021 \001(\0132>.fa"
  "rm.nurture.core.contracts.ce.Communicati"
  "onChannelAttributes\"\250\004\n\023TestCampaignRequ"
  "est\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtu"
  "re.core.contracts.common.RequestHeaders\022"
  "@\n\tnamespace\030\002 \001(\0162-.farm.nurture.core.c"
  "ontracts.common.NameSpace\022E\n\020content_met"
  "adata\030\003 \003(\0132+.farm.nurture.core.contract"
  "s.common.Attribs\022V\n\024communicationChannel"
  "\030\004 \001(\01628.farm.nurture.core.contracts.com"
  "mon.CommunicationChannel\022C\n\004type\030\005 \001(\01625"
  ".farm.nurture.core.contracts.common.Camp"
  "aignQueryType\022\r\n\005query\030\006 \001(\t\0224\n\005media\030\007 "
  "\001(\0132%.farm.nurture.core.contracts.ce.Med"
  "ia\022Z\n\022channel_attributes\030\010 \001(\0132>.farm.nu"
  "rture.core.contracts.ce.CommunicationCha"
  "nnelAttributes\"\267\001\n\026BulkAddCampaignReques"
  "t\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurture"
  ".core.contracts.common.RequestHeaders\022Q\n"
  "\010requests\030\002 \003(\0132\?.farm.nurture.core.cont"
  "racts.CampaignService.AddCampaignRequest"
  "\"\275\001\n\023AddCampaignResponse\022G\n\006status\030\001 \001(\013"
  "27.farm.nurture.core.contracts.common.Re"
  "questStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010reco"
  "rdId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurtu"
  "re.core.contracts.common.Attribs\"\306\001\n\027Bul"
  "kAddCampaignResponse\022G\n\006status\030\001 \001(\01327.f"
  "arm.nurture.core.contracts.common.Reques"
  "tStatusResult\022\r\n\005count\030\002 \001(\005\022S\n\tresponse"
  "s\030\003 \003(\0132@.farm.nurture.core.contracts.Ca"
  "mpaignService.AddCampaignResponse\"\302\002\n\025Up"
  "dateCampaignRequest\022J\n\016requestHeaders\030\001 "
  "\001(\01322.farm.nurture.core.contracts.common"
  ".RequestHeaders\022\014\n\004name\030\002 \001(\t\022\026\n\016cronExp"
  "ression\030\003 \001(\t\022B\n\006status\030\004 \001(\01622.farm.nur"
  "ture.core.contracts.common.CampaignStatu"
  "s\022\r\n\005query\030\005 \001(\t\022C\n\016updatedByActor\030\006 \001(\013"
  "2+.farm.nurture.core.contracts.common.Ac"
  "torID\022\023\n\013occurrences\030\007 \001(\005\022\n\n\002id\030\010 \001(\003\"\275"
  "\001\n\031BulkUpdateCampaignRequest\022J\n\016requestH"
  "eaders\030\001 \001(\01322.farm.nurture.core.contrac"
  "ts.common.RequestHeaders\022T\n\010requests\030\002 \003"
  "(\0132B.farm.nurture.core.contracts.Campaig"
  "nService.UpdateCampaignRequest\"\300\001\n\026Updat"
  "eCampaignResponse\022G\n\006status\030\001 \001(\01327.farm"
  ".nurture.core.contracts.common.RequestSt"
  "atusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 "
  "\001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurture.core"
  ".contracts.common.Attribs\"\314\001\n\032BulkUpdate"
  "CampaignResponse\022G\n\006status\030\001 \001(\01327.farm."
  "nurture.core.contracts.common.RequestSta"
  "tusResult\022\r\n\005count\030\002 \001(\005\022V\n\tresponses\030\003 "
  "\003(\0132C.farm.nurture.core.contracts.Campai"
  "gnService.UpdateCampaignResponse\"\305\001\n\032Add"
  "CampaignTemplateRequest\022J\n\016requestHeader"
  "s\030\001 \001(\01322.farm.nurture.core.contracts.co"
  "mmon.RequestHeaders\022\022\n\ncampaignId\030\002 \001(\003\022"
  "\024\n\014templateName\030\003 \001(\t\022\024\n\014campaignName\030\004 "
  "\001(\t\022\033\n\023distributionPercent\030\005 \001(\005\"\234\001\n\033Tes"
  "tCampaignTemplateRequest\022J\n\016requestHeade"
  "rs\030\001 \001(\01322.farm.nurture.core.contracts.c"
  "ommon.RequestHeaders\022\024\n\014templateName\030\002 \001"
  "(\t\022\033\n\023distributionPercent\030\003 \001(\005\"\307\001\n\036Bulk"
  "AddCampaignTemplateRequest\022J\n\016requestHea"
  "ders\030\001 \001(\01322.farm.nurture.core.contracts"
  ".common.RequestHeaders\022Y\n\010requests\030\002 \003(\013"
  "2G.farm.nurture.core.contracts.CampaignS"
  "ervice.AddCampaignTemplateRequest\"\305\001\n\033Ad"
  "dCampaignTemplateResponse\022G\n\006status\030\001 \001("
  "\01327.farm.nurture.core.contracts.common.R"
  "equestStatusResult\022\r\n\005count\030\002 \001(\005\022\020\n\010rec"
  "ordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.farm.nurt"
  "ure.core.contracts.common.Attribs\"\326\001\n\037Bu"
  "lkAddCampaignTemplateResponse\022G\n\006status\030"
  "\001 \001(\01327.farm.nurture.core.contracts.comm"
  "on.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022[\n"
  "\tresponses\030\003 \003(\0132H.farm.nurture.core.con"
  "tracts.CampaignService.AddCampaignTempla"
  "teResponse\"\220\003\n\025AddNewCampaignRequest\022J\n\016"
  "requestHeaders\030\001 \001(\01322.farm.nurture.core"
  ".contracts.common.RequestHeaders\022[\n\022addC"
  "ampaignRequest\030\003 \001(\0132\?.farm.nurture.core"
  ".contracts.CampaignService.AddCampaignRe"
  "quest\022l\n\033addCampaignTemplateRequests\030\004 \003"
  "(\0132G.farm.nurture.core.contracts.Campaig"
  "nService.AddCampaignTemplateRequest\022`\n\025a"
  "ddTargetUserRequests\030\005 \003(\0132A.farm.nurtur"
  "e.core.contracts.CampaignService.AddTarg"
  "etUserRequest\"\275\001\n\031BulkAddNewCampaignRequ"
  "est\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtu"
  "re.core.contracts.common.RequestHeaders\022"
  "T\n\010requests\030\002 \003(\0132B.farm.nurture.core.co"
  "ntracts.CampaignService.AddNewCampaignRe"
  "quest\"\300\001\n\026AddNewCampaignResponse\022G\n\006stat"
  "us\030\001 \001(\01327.farm.nurture.core.contracts.c"
  "ommon.RequestStatusResult\022\r\n\005count\030\002 \001(\005"
  "\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132+.fa"
  "rm.nurture.core.contracts.common.Attribs"
  "\"\314\001\n\032BulkAddNewCampaignResponse\022G\n\006statu"
  "s\030\001 \001(\01327.farm.nurture.core.contracts.co"
  "mmon.RequestStatusResult\022\r\n\005count\030\002 \001(\005\022"
  "V\n\tresponses\030\003 \003(\0132C.farm.nurture.core.c"
  "ontracts.CampaignService.AddNewCampaignR"
  "esponse\"\211\001\n\017CampaignRequest\022J\n\016requestHe"
  "aders\030\001 \001(\01322.farm.nurture.core.contract"
  "s.common.RequestHeaders\022\026\n\016isStaleAllowe"
  "d\030\002 \001(\010\022\022\n\ncampaignId\030\003 \001(\003\"j\n\020CampaignR"
  "esponse\022G\n\006status\030\001 \001(\01327.farm.nurture.c"
  "ore.contracts.common.RequestStatusResult"
  "\022\r\n\005count\030\002 \001(\005\"\211\001\n\027FindCampaignByIdRequ"
  "est\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurtu"
  "re.core.contracts.common.RequestHeaders\022"
  "\026\n\016isStaleAllowed\030\002 \001(\010\022\n\n\002id\030\003 \001(\003\"\353\003\n\036"
  "FindCampaignByIdResponseRecord\022\n\n\002id\030\001 \001"
  "(\003\022\021\n\tnamespace\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\023\n\013d"
  "escription\030\004 \001(\t\022\026\n\016cronExpression\030\005 \001(\t"
  "\022\023\n\013occurrences\030\006 \001(\005\022\034\n\024communicationCh"
  "annel\030\007 \001(\t\022\016\n\006status\030\010 \001(\t\022\014\n\004type\030\t \001("
  "\t\022\024\n\014scheduleType\030\n \001(\t\022\r\n\005query\030\013 \001(\t\022\025"
  "\n\rinactionQuery\030\014 \001(\t\022\030\n\020inactionDuratio"
  "n\030\r \001(\003\022\022\n\nattributes\030\016 \001(\t\022\030\n\020createdBy"
  "Actorid\030\017 \001(\003\022\032\n\022createdByActortype\030\020 \001("
  "\t\022\030\n\020updatedByActorid\030\021 \001(\003\022\032\n\022updatedBy"
  "Actortype\030\022 \001(\t\022\017\n\007version\030\023 \001(\003\022\021\n\tcrea"
  "tedAt\030\024 \001(\003\022\021\n\tupdatedAt\030\025 \001(\003\022\021\n\tdelete"
  "dAt\030\026 \001(\003\"\216\002\n\030FindCampaignByIdResponse\022G"
  "\n\006status\030\001 \001(\01327.farm.nurture.core.contr"
  "acts.common.RequestStatusResult\022\r\n\005count"
  "\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.c"
  "ore.contracts.common.Attribs\022\\\n\007records\030"
  "\004 \001(\0132K.farm.nurture.core.contracts.Camp"
  "aignService.FindCampaignByIdResponseReco"
  "rd\"\231\001\n\037FindCampaignTemplateByIdRequest\022J"
  "\n\016requestHeaders\030\001 \001(\01322.farm.nurture.co"
  "re.contracts.common.RequestHeaders\022\026\n\016is"
  "StaleAllowed\030\002 \001(\010\022\022\n\ncampaignId\030\003 \001(\003\"\221"
  "\001\n&FindCampaignTemplateByIdResponseRecor"
  "d\022\n\n\002id\030\001 \001(\003\022\022\n\ncampaignId\030\002 \001(\003\022\024\n\014tem"
  "plateName\030\003 \001(\t\022\024\n\014campaignName\030\004 \001(\t\022\033\n"
  "\023distributionPercent\030\005 \001(\005\"\236\002\n FindCampa"
  "ignTemplateByIdResponse\022G\n\006status\030\001 \001(\0132"
  "7.farm.nurture.core.contracts.common.Req"
  "uestStatusResult\022\r\n\005count\030\002 \001(\005\022<\n\007attri"
  "bs\030\003 \003(\0132+.farm.nurture.core.contracts.c"
  "ommon.Attribs\022d\n\007records\030\004 \003(\0132S.farm.nu"
  "rture.core.contracts.CampaignService.Fin"
  "dCampaignTemplateByIdResponseRecord\"\223\001\n\031"
  "FindTargetUserByIdRequest\022J\n\016requestHead"
  "ers\030\001 \001(\01322.farm.nurture.core.contracts."
  "common.RequestHeaders\022\026\n\016isStaleAllowed\030"
  "\002 \001(\010\022\022\n\ncampaignId\030\003 \001(\003\"d\n FindTargetU"
  "serByIdResponseRecord\022\n\n\002id\030\001 \001(\003\022\022\n\ncam"
  "paignId\030\002 \001(\003\022\016\n\006userId\030\003 \001(\003\022\020\n\010userTyp"
  "e\030\004 \001(\t\"\222\002\n\032FindTargetUserByIdResponse\022G"
  "\n\006status\030\001 \001(\01327.farm.nurture.core.contr"
  "acts.common.RequestStatusResult\022\r\n\005count"
  "\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.c"
  "ore.contracts.common.Attribs\022^\n\007records\030"
  "\004 \003(\0132M.farm.nurture.core.contracts.Camp"
  "aignService.FindTargetUserByIdResponseRe"
  "cord\"\250\001\n\032GetDynamicDataByKeyRequest\022J\n\016r"
  "equestHeaders\030\001 \001(\01322.farm.nurture.core."
  "contracts.common.RequestHeaders\022\026\n\016isSta"
  "leAllowed\030\002 \001(\010\022\022\n\ncampaignId\030\003 \001(\003\022\022\n\nd"
  "ynamicKey\030\004 \001(\t\"k\n!GetDynamicDataByKeyRe"
  "sponseRecord\022\022\n\ncampaignId\030\001 \001(\003\022\022\n\ndyna"
  "micKey\030\002 \001(\t\022\017\n\007ctaLink\030\003 \001(\t\022\r\n\005media\030\004"
  " \001(\t\"\224\002\n\033GetDynamicDataByKeyResponse\022G\n\006"
  "status\030\001 \001(\01327.farm.nurture.core.contrac"
  "ts.common.RequestStatusResult\022\r\n\005count\030\002"
  " \001(\005\022<\n\007attribs\030\003 \003(\0132+.farm.nurture.cor"
  "e.contracts.common.Attribs\022_\n\007records\030\004 "
  "\003(\0132N.farm.nurture.core.contracts.Campai"
  "gnService.GetDynamicDataByKeyResponseRec"
  "ord\"\253\001\n\025AddDynamicDataRequest\022J\n\016request"
  "Headers\030\001 \001(\01322.farm.nurture.core.contra"
  "cts.common.RequestHeaders\022\022\n\ncampaignId\030"
  "\002 \001(\003\022\022\n\ndynamicKey\030\003 \001(\t\022\017\n\007ctaLink\030\004 \001"
  "(\t\022\r\n\005media\030\005 \001(\t\"\275\001\n\031BulkAddDynamicData"
  "Request\022J\n\016requestHeaders\030\001 \001(\01322.farm.n"
  "urture.core.contracts.common.RequestHead"
  "ers\022T\n\010requests\030\002 \003(\0132B.farm.nurture.cor"
  "e.contracts.CampaignService.AddDynamicDa"
  "taRequest\"\300\001\n\026AddDynamicDataResponse\022G\n\006"
  "status\030\001 \001(\01327.farm.nurture.core.contrac"
  "ts.common.RequestStatusResult\022\r\n\005count\030\002"
  " \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007attribs\030\004 \003(\0132"
  "+.farm.nurture.core.contracts.common.Att"
  "ribs\"\314\001\n\032BulkAddDynamicDataResponse\022G\n\006s"
  "tatus\030\001 \001(\01327.farm.nurture.core.contract"
  "s.common.RequestStatusResult\022\r\n\005count\030\002 "
  "\001(\005\022V\n\tresponses\030\003 \003(\0132C.farm.nurture.co"
  "re.contracts.CampaignService.AddDynamicD"
  "ataResponse\"\261\001\n\024AddTargetUserRequest\022J\n\016"
  "requestHeaders\030\001 \001(\01322.farm.nurture.core"
  ".contracts.common.RequestHeaders\022\022\n\ncamp"
  "aignId\030\002 \001(\003\0229\n\004user\030\003 \001(\0132+.farm.nurtur"
  "e.core.contracts.common.ActorID\"\236\001\n\025Test"
  "TargetUserRequest\022J\n\016requestHeaders\030\001 \001("
  "\01322.farm.nurture.core.contracts.common.R"
  "equestHeaders\0229\n\004user\030\002 \001(\0132+.farm.nurtu"
  "re.core.contracts.common.ActorID\"\273\001\n\030Bul"
  "kAddTargetUserRequest\022J\n\016requestHeaders\030"
  "\001 \001(\01322.farm.nurture.core.contracts.comm"
  "on.RequestHeaders\022S\n\010requests\030\002 \003(\0132A.fa"
  "rm.nurture.core.contracts.CampaignServic"
  "e.AddTargetUserRequest\"\277\001\n\025AddTargetUser"
  "Response\022G\n\006status\030\001 \001(\01327.farm.nurture."
  "core.contracts.common.RequestStatusResul"
  "t\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007at"
  "tribs\030\004 \003(\0132+.farm.nurture.core.contract"
  "s.common.Attribs\"\312\001\n\031BulkAddTargetUserRe"
  "sponse\022G\n\006status\030\001 \001(\01327.farm.nurture.co"
  "re.contracts.common.RequestStatusResult\022"
  "\r\n\005count\030\002 \001(\005\022U\n\tresponses\030\003 \003(\0132B.farm"
  ".nurture.core.contracts.CampaignService."
  "AddTargetUserResponse\"\271\001\n\034AddInactionTar"
  "getUserRequest\022J\n\016requestHeaders\030\001 \001(\01322"
  ".farm.nurture.core.contracts.common.Requ"
  "estHeaders\022\022\n\ncampaignId\030\002 \001(\003\0229\n\004user\030\003"
  " \001(\0132+.farm.nurture.core.contracts.commo"
  "n.ActorID\"\313\001\n BulkAddInactionTargetUserR"
  "equest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nu"
  "rture.core.contracts.common.RequestHeade"
  "rs\022[\n\010requests\030\002 \003(\0132I.farm.nurture.core"
  ".contracts.CampaignService.AddInactionTa"
  "rgetUserRequest\"\307\001\n\035AddInactionTargetUse"
  "rResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022\r\n\005count\030\002 \001(\005\022\020\n\010recordId\030\003 \001(\t\022<\n\007a"
  "ttribs\030\004 \003(\0132+.farm.nurture.core.contrac"
  "ts.common.Attribs\"\332\001\n!BulkAddInactionTar"
  "getUserResponse\022G\n\006status\030\001 \001(\01327.farm.n"
  "urture.core.contracts.common.RequestStat"
  "usResult\022\r\n\005count\030\002 \001(\005\022]\n\tresponses\030\003 \003"
  "(\0132J.farm.nurture.core.contracts.Campaig"
  "nService.AddInactionTargetUserResponse\"\243"
  "\001\n)FindInactionTargetUserByCampaignIdReq"
  "uest\022J\n\016requestHeaders\030\001 \001(\01322.farm.nurt"
  "ure.core.contracts.common.RequestHeaders"
  "\022\026\n\016isStaleAllowed\030\002 \001(\010\022\022\n\ncampaignId\030\003"
  " \001(\003\"t\n0FindInactionTargetUserByCampaign"
  "IdResponseRecord\022\n\n\002id\030\001 \001(\003\022\022\n\ncampaign"
  "Id\030\002 \001(\003\022\016\n\006userId\030\003 \001(\003\022\020\n\010userType\030\004 \001"
  "(\t\"\262\002\n*FindInactionTargetUserByCampaignI"
  "dResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022\r\n\005count\030\002 \001(\005\022<\n\007attribs\030\003 \003(\0132+.far"
  "m.nurture.core.contracts.common.Attribs\022"
  "n\n\007records\030\004 \003(\0132].farm.nurture.core.con"
  "tracts.CampaignService.FindInactionTarge"
  "tUserByCampaignIdResponseRecord\"u\n\022Athen"
  "aQueryRequest\022J\n\016requestHeaders\030\001 \001(\01322."
  "farm.nurture.core.contracts.common.Reque"
  "stHeaders\022\023\n\013athenaQuery\030\002 \001(\t\"m\n\023Athena"
  "QueryResponse\022G\n\006status\030\001 \001(\01327.farm.nur"
  "ture.core.contracts.common.RequestStatus"
  "Result\022\r\n\005count\030\002 \001(\003\"\227\003\n\026TestNewCampaig"
  "nRequest\022J\n\016requestHeaders\030\001 \001(\01322.farm."
  "nurture.core.contracts.common.RequestHea"
  "ders\022]\n\023testCampaignRequest\030\003 \001(\0132@.farm"
  ".nurture.core.contracts.CampaignService."
  "TestCampaignRequest\022n\n\034testCampaignTempl"
  "ateRequests\030\004 \003(\0132H.farm.nurture.core.co"
  "ntracts.CampaignService.TestCampaignTemp"
  "lateRequest\022b\n\026testTargetUserRequests\030\005 "
  "\003(\0132B.farm.nurture.core.contracts.Campai"
  "gnService.TestTargetUserRequest\"b\n\027TestN"
  "ewCampaignResponse\022G\n\006status\030\001 \001(\01327.far"
  "m.nurture.core.contracts.common.RequestS"
  "tatusResult\"e\n\rMultiRequests\022\r\n\005onTxn\030\001 "
  "\001(\010\022E\n\007request\030\002 \003(\01324.farm.nurture.core"
  ".contracts.CampaignService.Request\"\361\017\n\007R"
  "equest\022\r\n\005index\030\001 \001(\t\022Y\n\016reqAddCampaign\030"
  "\002 \001(\0132\?.farm.nurture.core.contracts.Camp"
  "aignService.AddCampaignRequestH\000\022a\n\022reqA"
  "ddCampaignBulk\030\003 \001(\0132C.farm.nurture.core"
  ".contracts.CampaignService.BulkAddCampai"
  "gnRequestH\000\022_\n\021reqUpdateCampaign\030\004 \001(\0132B"
  ".farm.nurture.core.contracts.CampaignSer"
  "vice.UpdateCampaignRequestH\000\022g\n\025reqUpdat"
  "eCampaignBulk\030\005 \001(\0132F.farm.nurture.core."
  "contracts.CampaignService.BulkUpdateCamp"
  "aignRequestH\000\022i\n\026reqAddCampaignTemplate\030"
  "\006 \001(\0132G.farm.nurture.core.contracts.Camp"
  "aignService.AddCampaignTemplateRequestH\000"
  "\022q\n\032reqAddCampaignTemplateBulk\030\007 \001(\0132K.f"
  "arm.nurture.core.contracts.CampaignServi"
  "ce.BulkAddCampaignTemplateRequestH\000\022_\n\021r"
  "eqAddNewCampaign\030\010 \001(\0132B.farm.nurture.co"
  "re.contracts.CampaignService.AddNewCampa"
  "ignRequestH\000\022g\n\025reqAddNewCampaignBulk\030\t "
  "\001(\0132F.farm.nurture.core.contracts.Campai"
  "gnService.BulkAddNewCampaignRequestH\000\022V\n"
  "\016reqGetUserList\030\n \001(\0132<.farm.nurture.cor"
  "e.contracts.CampaignService.CampaignRequ"
  "estH\000\022c\n\023reqFindCampaignById\030\013 \001(\0132D.far"
  "m.nurture.core.contracts.CampaignService"
  ".FindCampaignByIdRequestH\000\022s\n\033reqFindCam"
  "paignTemplateById\030\014 \001(\0132L.farm.nurture.c"
  "ore.contracts.CampaignService.FindCampai"
  "gnTemplateByIdRequestH\000\022]\n\020reqAddTargetU"
  "ser\030\r \001(\0132A.farm.nurture.core.contracts."
  "CampaignService.AddTargetUserRequestH\000\022e"
  "\n\024reqAddTargetUserBulk\030\016 \001(\0132E.farm.nurt"
  "ure.core.contracts.CampaignService.BulkA"
  "ddTargetUserRequestH\000\022m\n\030reqAddInactionT"
  "argetUser\030\017 \001(\0132I.farm.nurture.core.cont"
  "racts.CampaignService.AddInactionTargetU"
  "serRequestH\000\022u\n\034reqAddInactionTargetUser"
  "Bulk\030\020 \001(\0132M.farm.nurture.core.contracts"
  ".CampaignService.BulkAddInactionTargetUs"
  "erRequestH\000\022\207\001\n%reqFindInactionTargetUse"
  "rByCampaignId\030\021 \001(\0132V.farm.nurture.core."
  "contracts.CampaignService.FindInactionTa"
  "rgetUserByCampaignIdRequestH\000\022i\n\026reqGetD"
  "ynamicDataByKey\030\022 \001(\0132G.farm.nurture.cor"
  "e.contracts.CampaignService.GetDynamicDa"
  "taByKeyRequestH\000\022_\n\021reqAddDynamicData\030\023 "
  "\001(\0132B.farm.nurture.core.contracts.Campai"
  "gnService.AddDynamicDataRequestH\000\022g\n\025req"
  "AddDynamicDataBulk\030\024 \001(\0132F.farm.nurture."
  "core.contracts.CampaignService.BulkAddDy"
  "namicDataRequestH\000B\n\n\010ARequest\"\242\001\n\016Multi"
  "Responses\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt\022G\n\010response\030\002 \003(\01325.farm.nurture.core"
  ".contracts.CampaignService.Response\"\317\020\n\010"
  "Response\022\r\n\005index\030\001 \001(\t\022G\n\006status\030\002 \001(\0132"
  "7.farm.nurture.core.contracts.common.Req"
  "uestStatusResult\022Z\n\016resAddCampaign\030\003 \001(\013"
  "2@.farm.nurture.core.contracts.CampaignS"
  "ervice.AddCampaignResponseH\000\022b\n\022resAddCa"
  "mpaignBulk\030\004 \001(\0132D.farm.nurture.core.con"
  "tracts.CampaignService.BulkAddCampaignRe"
  "sponseH\000\022`\n\021resUpdateCampaign\030\005 \001(\0132C.fa"
  "rm.nurture.core.contracts.CampaignServic"
  "e.UpdateCampaignResponseH\000\022h\n\025resUpdateC"
  "ampaignBulk\030\006 \001(\0132G.farm.nurture.core.co"
  "ntracts.CampaignService.BulkUpdateCampai"
  "gnResponseH\000\022j\n\026resAddCampaignTemplate\030\007"
  " \001(\0132H.farm.nurture.core.contracts.Campa"
  "ignService.AddCampaignTemplateResponseH\000"
  "\022r\n\032resAddCampaignTemplateBulk\030\010 \001(\0132L.f"
  "arm.nurture.core.contracts.CampaignServi"
  "ce.BulkAddCampaignTemplateResponseH\000\022`\n\021"
  "resAddNewCampaign\030\t \001(\0132C.farm.nurture.c"
  "ore.contracts.CampaignService.AddNewCamp"
  "aignResponseH\000\022h\n\025resAddNewCampaignBulk\030"
  "\n \001(\0132G.farm.nurture.core.contracts.Camp"
  "aignService.BulkAddNewCampaignResponseH\000"
  "\022W\n\016resGetUserList\030\013 \001(\0132=.farm.nurture."
  "core.contracts.CampaignService.CampaignR"
  "esponseH\000\022d\n\023resFindCampaignById\030\014 \001(\0132E"
  ".farm.nurture.core.contracts.CampaignSer"
  "vice.FindCampaignByIdResponseH\000\022t\n\033resFi"
  "ndCampaignTemplateById\030\r \001(\0132M.farm.nurt"
  "ure.core.contracts.CampaignService.FindC"
  "ampaignTemplateByIdResponseH\000\022^\n\020resAddT"
  "argetUser\030\016 \001(\0132B.farm.nurture.core.cont"
  "racts.CampaignService.AddTargetUserRespo"
  "nseH\000\022f\n\024resAddTargetUserBulk\030\017 \001(\0132F.fa"
  "rm.nurture.core.contracts.CampaignServic"
  "e.BulkAddTargetUserResponseH\000\022n\n\030resAddI"
  "nactionTargetUser\030\020 \001(\0132J.farm.nurture.c"
  "ore.contracts.CampaignService.AddInactio"
  "nTargetUserResponseH\000\022v\n\034resAddInactionT"
  "argetUserBulk\030\021 \001(\0132N.farm.nurture.core."
  "contracts.CampaignService.BulkAddInactio"
  "nTargetUserResponseH\000\022\210\001\n%resFindInactio"
  "nTargetUserByCampaignId\030\022 \001(\0132W.farm.nur"
  "ture.core.contracts.CampaignService.Find"
  "InactionTargetUserByCampaignIdResponseH\000"
  "\022j\n\026resGetDynamicDataByKey\030\023 \001(\0132H.farm."
  "nurture.core.contracts.CampaignService.G"
  "etDynamicDataByKeyResponseH\000\022`\n\021resAddDy"
  "namicData\030\024 \001(\0132C.farm.nurture.core.cont"
  "racts.CampaignService.AddDynamicDataResp"
  "onseH\000\022h\n\025resAddDynamicDataBulk\030\025 \001(\0132G."
  "farm.nurture.core.contracts.CampaignServ"
  "ice.BulkAddDynamicDataResponseH\000B\013\n\tARes"
  "ponse\"\203\002\n\025FilterCampaignRequest\022J\n\016reque"
  "stHeaders\030\001 \001(\01322.farm.nurture.core.cont"
  "racts.common.RequestHeaders\022\014\n\004name\030\002 \001("
  "\t\022B\n\006status\030\003 \001(\01622.farm.nurture.core.co"
  "ntracts.common.CampaignStatus\022\023\n\013descrip"
  "tion\030\004 \001(\t\022\024\n\014templateName\030\005 \001(\t\022\022\n\npage"
  "Number\030\006 \001(\005\022\r\n\005limit\030\007 \001(\005\"\316\001\n\026FilterCa"
  "mpaignResponse\022G\n\006status\030\001 \001(\01327.farm.nu"
  "rture.core.contracts.common.RequestStatu"
  "sResult\022\r\n\005count\030\002 \001(\005\022\\\n\007records\030\003 \003(\0132"
  "K.farm.nurture.core.contracts.CampaignSe"
  "rvice.FindCampaignByIdResponseRecord\"\216\001\n"
  "\027TestCampaignByIdRequest\022J\n\016requestHeade"
  "rs\030\001 \001(\01322.farm.nurture.core.contracts.c"
  "ommon.RequestHeaders\022\022\n\ncampaignId\030\002 \001(\003"
  "\022\023\n\013athenaQuery\030\003 \001(\t\"c\n\030TestCampaignByI"
  "dResponse\022G\n\006status\030\001 \001(\01327.farm.nurture"
  ".core.contracts.common.RequestStatusResu"
  "lt2\376!\n\017CampaignService\022\231\001\n\022ExecuteAddCam"
  "paign\022\?.farm.nurture.core.contracts.Camp"
  "aignService.AddCampaignRequest\032@.farm.nu"
  "rture.core.contracts.CampaignService.Add"
  "CampaignResponse\"\000\022\245\001\n\026ExecuteAddCampaig"
  "nBulk\022C.farm.nurture.core.contracts.Camp"
  "aignService.BulkAddCampaignRequest\032D.far"
  "m.nurture.core.contracts.CampaignService"
  ".BulkAddCampaignResponse\"\000\022\242\001\n\025ExecuteUp"
  "dateCampaign\022B.farm.nurture.core.contrac"
  "ts.CampaignService.UpdateCampaignRequest"
  "\032C.farm.nurture.core.contracts.CampaignS"
  "ervice.UpdateCampaignResponse\"\000\022\256\001\n\031Exec"
  "uteUpdateCampaignBulk\022F.farm.nurture.cor"
  "e.contracts.CampaignService.BulkUpdateCa"
  "mpaignRequest\032G.farm.nurture.core.contra"
  "cts.CampaignService.BulkUpdateCampaignRe"
  "sponse\"\000\022\261\001\n\032ExecuteAddCampaignTemplate\022"
  "G.farm.nurture.core.contracts.CampaignSe"
  "rvice.AddCampaignTemplateRequest\032H.farm."
  "nurture.core.contracts.CampaignService.A"
  "ddCampaignTemplateResponse\"\000\022\275\001\n\036Execute"
  "AddCampaignTemplateBulk\022K.farm.nurture.c"
  "ore.contracts.CampaignService.BulkAddCam"
  "paignTemplateRequest\032L.farm.nurture.core"
  ".contracts.CampaignService.BulkAddCampai"
  "gnTemplateResponse\"\000\022\242\001\n\025ExecuteAddNewCa"
  "mpaign\022B.farm.nurture.core.contracts.Cam"
  "paignService.AddNewCampaignRequest\032C.far"
  "m.nurture.core.contracts.CampaignService"
  ".AddNewCampaignResponse\"\000\022\256\001\n\031ExecuteAdd"
  "NewCampaignBulk\022F.farm.nurture.core.cont"
  "racts.CampaignService.BulkAddNewCampaign"
  "Request\032G.farm.nurture.core.contracts.Ca"
  "mpaignService.BulkAddNewCampaignResponse"
  "\"\000\022\220\001\n\017ExecuteCampaign\022<.farm.nurture.co"
  "re.contracts.CampaignService.CampaignReq"
  "uest\032=.farm.nurture.core.contracts.Campa"
  "ignService.CampaignResponse\"\000\022\250\001\n\027Execut"
  "eFindCampaignById\022D.farm.nurture.core.co"
  "ntracts.CampaignService.FindCampaignById"
  "Request\032E.farm.nurture.core.contracts.Ca"
  "mpaignService.FindCampaignByIdResponse\"\000"
  "\022\300\001\n\037ExecuteFindCampaignTemplateById\022L.f"
  "arm.nurture.core.contracts.CampaignServi"
  "ce.FindCampaignTemplateByIdRequest\032M.far"
  "m.nurture.core.contracts.CampaignService"
  ".FindCampaignTemplateByIdResponse\"\000\022\256\001\n\031"
  "ExecuteFindTargetUserById\022F.farm.nurture"
  ".core.contracts.CampaignService.FindTarg"
  "etUserByIdRequest\032G.farm.nurture.core.co"
  "ntracts.CampaignService.FindTargetUserBy"
  "IdResponse\"\000\022\237\001\n\024ExecuteAddTargetUser\022A."
  "farm.nurture.core.contracts.CampaignServ"
  "ice.AddTargetUserRequest\032B.farm.nurture."
  "core.contracts.CampaignService.AddTarget"
  "UserResponse\"\000\022\253\001\n\030ExecuteAddTargetUserB"
  "ulk\022E.farm.nurture.core.contracts.Campai"
  "gnService.BulkAddTargetUserRequest\032F.far"
  "m.nurture.core.contracts.CampaignService"
  ".BulkAddTargetUserResponse\"\000\022\267\001\n\034Execute"
  "AddInactionTargetUser\022I.farm.nurture.cor"
  "e.contracts.CampaignService.AddInactionT"
  "argetUserRequest\032J.farm.nurture.core.con"
  "tracts.CampaignService.AddInactionTarget"
  "UserResponse\"\000\022\303\001\n ExecuteAddInactionTar"
  "getUserBulk\022M.farm.nurture.core.contract"
  "s.CampaignService.BulkAddInactionTargetU"
  "serRequest\032N.farm.nurture.core.contracts"
  ".CampaignService.BulkAddInactionTargetUs"
  "erResponse\"\000\022\336\001\n)ExecuteFindInactionTarg"
  "etUserByCampaignId\022V.farm.nurture.core.c"
  "ontracts.CampaignService.FindInactionTar"
  "getUserByCampaignIdRequest\032W.farm.nurtur"
  "e.core.contracts.CampaignService.FindIna"
  "ctionTargetUserByCampaignIdResponse\"\000\022\204\001"
  "\n\007Execute\022:.farm.nurture.core.contracts."
  "CampaignService.MultiRequests\032;.farm.nur"
  "ture.core.contracts.CampaignService.Mult"
  "iResponses\"\000\022\231\001\n\022ExecuteAthenaQuery\022\?.fa"
  "rm.nurture.core.contracts.CampaignServic"
  "e.AthenaQueryRequest\032@.farm.nurture.core"
  ".contracts.CampaignService.AthenaQueryRe"
  "sponse\"\000\022\245\001\n\026ExecuteTestNewCampaign\022C.fa"
  "rm.nurture.core.contracts.CampaignServic"
  "e.TestNewCampaignRequest\032D.farm.nurture."
  "core.contracts.CampaignService.TestNewCa"
  "mpaignResponse\"\000\022\243\001\n\026ExecuteFilterCampai"
  "gns\022B.farm.nurture.core.contracts.Campai"
  "gnService.FilterCampaignRequest\032C.farm.n"
  "urture.core.contracts.CampaignService.Fi"
  "lterCampaignResponse\"\000\022\250\001\n\027ExecuteTestCa"
  "mpaignById\022D.farm.nurture.core.contracts"
  ".CampaignService.TestCampaignByIdRequest"
  "\032E.farm.nurture.core.contracts.CampaignS"
  "ervice.TestCampaignByIdResponse\"\000\022\261\001\n\032Ex"
  "ecuteGetDynamicDataByKey\022G.farm.nurture."
  "core.contracts.CampaignService.GetDynami"
  "cDataByKeyRequest\032H.farm.nurture.core.co"
  "ntracts.CampaignService.GetDynamicDataBy"
  "KeyResponse\"\000\022\242\001\n\025ExecuteAddDynamicData\022"
  "B.farm.nurture.core.contracts.CampaignSe"
  "rvice.AddDynamicDataRequest\032C.farm.nurtu"
  "re.core.contracts.CampaignService.AddDyn"
  "amicDataResponse\"\000\022\256\001\n\031ExecuteAddDynamic"
  "DataBulk\022F.farm.nurture.core.contracts.C"
  "ampaignService.BulkAddDynamicDataRequest"
  "\032G.farm.nurture.core.contracts.CampaignS"
  "ervice.BulkAddDynamicDataResponse\"\000BU\n\037f"
  "arm.nurture.farm.service.protoP\001Z0code.n"
  "urture.farm/Core/Contracts/CampaignServi"
  "ceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_deps[9] = {
  &::descriptor_table_Common_2fentities_2eproto,
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_Common_2fevent_5freference_2eproto,
  &::descriptor_table_Common_2fheaders_2eproto,
  &::descriptor_table_Common_2ftags_2eproto,
  &::descriptor_table_Common_2ftime_5fslot_2eproto,
  &::descriptor_table_Common_2futils_2eproto,
  &::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_sccs[60] = {
  &scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base,
  &scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CampaignService_2fcampaign_5fservice_2eproto = {
  false, false, descriptor_table_protodef_CampaignService_2fcampaign_5fservice_2eproto, "CampaignService/campaign_service.proto", 21570,
  &descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_once, descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_sccs, descriptor_table_CampaignService_2fcampaign_5fservice_2eproto_deps, 60, 9,
  schemas, file_default_instances, TableStruct_CampaignService_2fcampaign_5fservice_2eproto::offsets,
  file_level_metadata_CampaignService_2fcampaign_5fservice_2eproto, 60, file_level_enum_descriptors_CampaignService_2fcampaign_5fservice_2eproto, file_level_service_descriptors_CampaignService_2fcampaign_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CampaignService_2fcampaign_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CampaignService_2fcampaign_5fservice_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {

// ===================================================================

class AddCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddCampaignRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& inactionduration(const AddCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& createdbyactor(const AddCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::ce::Media& media(const AddCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes(const AddCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddCampaignRequest::_Internal::requestheaders(const AddCampaignRequest* msg) {
  return *msg->requestheaders_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
AddCampaignRequest::_Internal::inactionduration(const AddCampaignRequest* msg) {
  return *msg->inactionduration_;
}
const ::farm::nurture::core::contracts::common::ActorID&
AddCampaignRequest::_Internal::createdbyactor(const AddCampaignRequest* msg) {
  return *msg->createdbyactor_;
}
const ::farm::nurture::core::contracts::ce::Media&
AddCampaignRequest::_Internal::media(const AddCampaignRequest* msg) {
  return *msg->media_;
}
const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&
AddCampaignRequest::_Internal::channel_attributes(const AddCampaignRequest* msg) {
  return *msg->channel_attributes_;
}
void AddCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void AddCampaignRequest::clear_content_metadata() {
  content_metadata_.Clear();
}
void AddCampaignRequest::clear_inactionduration() {
  if (GetArena() == nullptr && inactionduration_ != nullptr) {
    delete inactionduration_;
  }
  inactionduration_ = nullptr;
}
void AddCampaignRequest::clear_createdbyactor() {
  if (GetArena() == nullptr && createdbyactor_ != nullptr) {
    delete createdbyactor_;
  }
  createdbyactor_ = nullptr;
}
void AddCampaignRequest::clear_media() {
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
}
void AddCampaignRequest::clear_channel_attributes() {
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
}
AddCampaignRequest::AddCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
}
AddCampaignRequest::AddCampaignRequest(const AddCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_metadata_(from.content_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cronexpression().empty()) {
    cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cronexpression(), 
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  inaction_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inaction_query().empty()) {
    inaction_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inaction_query(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_inactionduration()) {
    inactionduration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.inactionduration_);
  } else {
    inactionduration_ = nullptr;
  }
  if (from._internal_has_createdbyactor()) {
    createdbyactor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.createdbyactor_);
  } else {
    createdbyactor_ = nullptr;
  }
  if (from._internal_has_media()) {
    media_ = new ::farm::nurture::core::contracts::ce::Media(*from.media_);
  } else {
    media_ = nullptr;
  }
  if (from._internal_has_channel_attributes()) {
    channel_attributes_ = new ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes(*from.channel_attributes_);
  } else {
    channel_attributes_ = nullptr;
  }
  ::memcpy(&namespace__, &from.namespace__,
    static_cast<size_t>(reinterpret_cast<char*>(&campaignscheduletype_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(campaignscheduletype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
}

void AddCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inaction_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&campaignscheduletype_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(campaignscheduletype_));
}

AddCampaignRequest::~AddCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inaction_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete inactionduration_;
  if (this != internal_default_instance()) delete createdbyactor_;
  if (this != internal_default_instance()) delete media_;
  if (this != internal_default_instance()) delete channel_attributes_;
}

void AddCampaignRequest::ArenaDtor(void* object) {
  AddCampaignRequest* _this = reinterpret_cast< AddCampaignRequest* >(object);
  (void)_this;
}
void AddCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCampaignRequest& AddCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_metadata_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  cronexpression_.ClearToEmpty();
  query_.ClearToEmpty();
  inaction_query_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && inactionduration_ != nullptr) {
    delete inactionduration_;
  }
  inactionduration_ = nullptr;
  if (GetArena() == nullptr && createdbyactor_ != nullptr) {
    delete createdbyactor_;
  }
  createdbyactor_ = nullptr;
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
  ::memset(&namespace__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campaignscheduletype_) -
      reinterpret_cast<char*>(&namespace__)) + sizeof(campaignscheduletype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cronExpression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cronexpression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occurrences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_communicationchannel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::CampaignStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignQueryType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::farm::nurture::core::contracts::common::CampaignQueryType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_campaignscheduletype(static_cast<::farm::nurture::core::contracts::common::CampaignScheduleType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration inactionDuration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_inactionduration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inaction_query = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_inaction_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID createdByActor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_createdbyactor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.Media media = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_namespace_(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string cronExpression = 5;
  if (this->cronexpression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cronexpression().data(), static_cast<int>(this->_internal_cronexpression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cronexpression(), target);
  }

  // int32 occurrences = 6;
  if (this->occurrences() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_occurrences(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_content_metadata(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 8;
  if (this->communicationchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_communicationchannel(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 10;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 11;
  if (this->campaignscheduletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_campaignscheduletype(), target);
  }

  // .google.protobuf.Duration inactionDuration = 12;
  if (this->has_inactionduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::inactionduration(this), target, stream);
  }

  // string query = 13;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_query(), target);
  }

  // string inaction_query = 14;
  if (this->inaction_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inaction_query().data(), static_cast<int>(this->_internal_inaction_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_inaction_query(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID createdByActor = 15;
  if (this->has_createdbyactor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::createdbyactor(this), target, stream);
  }

  // .farm.nurture.core.contracts.ce.Media media = 16;
  if (this->has_media()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::media(this), target, stream);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 17;
  if (this->has_channel_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::channel_attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  return target;
}

size_t AddCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 7;
  total_size += 1UL * this->_internal_content_metadata_size();
  for (const auto& msg : this->content_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string cronExpression = 5;
  if (this->cronexpression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cronexpression());
  }

  // string query = 13;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string inaction_query = 14;
  if (this->inaction_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inaction_query());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .google.protobuf.Duration inactionDuration = 12;
  if (this->has_inactionduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inactionduration_);
  }

  // .farm.nurture.core.contracts.common.ActorID createdByActor = 15;
  if (this->has_createdbyactor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createdbyactor_);
  }

  // .farm.nurture.core.contracts.ce.Media media = 16;
  if (this->has_media()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *media_);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 17;
  if (this->has_channel_attributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_attributes_);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  // int32 occurrences = 6;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occurrences());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 8;
  if (this->communicationchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_communicationchannel());
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 11;
  if (this->campaignscheduletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_campaignscheduletype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
    MergeFrom(*source);
  }
}

void AddCampaignRequest::MergeFrom(const AddCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_metadata_.MergeFrom(from.content_metadata_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.cronexpression().size() > 0) {
    _internal_set_cronexpression(from._internal_cronexpression());
  }
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.inaction_query().size() > 0) {
    _internal_set_inaction_query(from._internal_inaction_query());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_inactionduration()) {
    _internal_mutable_inactionduration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_inactionduration());
  }
  if (from.has_createdbyactor()) {
    _internal_mutable_createdbyactor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_createdbyactor());
  }
  if (from.has_media()) {
    _internal_mutable_media()->::farm::nurture::core::contracts::ce::Media::MergeFrom(from._internal_media());
  }
  if (from.has_channel_attributes()) {
    _internal_mutable_channel_attributes()->::farm::nurture::core::contracts::ce::CommunicationChannelAttributes::MergeFrom(from._internal_channel_attributes());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.occurrences() != 0) {
    _internal_set_occurrences(from._internal_occurrences());
  }
  if (from.communicationchannel() != 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.campaignscheduletype() != 0) {
    _internal_set_campaignscheduletype(from._internal_campaignscheduletype());
  }
}

void AddCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCampaignRequest::CopyFrom(const AddCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCampaignRequest::IsInitialized() const {
  return true;
}

void AddCampaignRequest::InternalSwap(AddCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_metadata_.InternalSwap(&other->content_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cronexpression_.Swap(&other->cronexpression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inaction_query_.Swap(&other->inaction_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCampaignRequest, campaignscheduletype_)
      + sizeof(AddCampaignRequest::campaignscheduletype_)
      - PROTOBUF_FIELD_OFFSET(AddCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const TestCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::ce::Media& media(const TestCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes(const TestCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
TestCampaignRequest::_Internal::requestheaders(const TestCampaignRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::ce::Media&
TestCampaignRequest::_Internal::media(const TestCampaignRequest* msg) {
  return *msg->media_;
}
const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&
TestCampaignRequest::_Internal::channel_attributes(const TestCampaignRequest* msg) {
  return *msg->channel_attributes_;
}
void TestCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void TestCampaignRequest::clear_content_metadata() {
  content_metadata_.Clear();
}
void TestCampaignRequest::clear_media() {
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
}
void TestCampaignRequest::clear_channel_attributes() {
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
}
TestCampaignRequest::TestCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
}
TestCampaignRequest::TestCampaignRequest(const TestCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_metadata_(from.content_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_media()) {
    media_ = new ::farm::nurture::core::contracts::ce::Media(*from.media_);
  } else {
    media_ = nullptr;
  }
  if (from._internal_has_channel_attributes()) {
    channel_attributes_ = new ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes(*from.channel_attributes_);
  } else {
    channel_attributes_ = nullptr;
  }
  ::memcpy(&namespace__, &from.namespace__,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
}

void TestCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(type_));
}

TestCampaignRequest::~TestCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete media_;
  if (this != internal_default_instance()) delete channel_attributes_;
}

void TestCampaignRequest::ArenaDtor(void* object) {
  TestCampaignRequest* _this = reinterpret_cast< TestCampaignRequest* >(object);
  (void)_this;
}
void TestCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCampaignRequest& TestCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_metadata_.Clear();
  query_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
  ::memset(&namespace__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&namespace__)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_communicationchannel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignQueryType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::farm::nurture::core::contracts::common::CampaignQueryType>(val));
        } else goto handle_unusual;
        continue;
      // string query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.Media media = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_namespace_(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_content_metadata(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 4;
  if (this->communicationchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_communicationchannel(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // string query = 6;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_query(), target);
  }

  // .farm.nurture.core.contracts.ce.Media media = 7;
  if (this->has_media()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::media(this), target, stream);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 8;
  if (this->has_channel_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::channel_attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  return target;
}

size_t TestCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 3;
  total_size += 1UL * this->_internal_content_metadata_size();
  for (const auto& msg : this->content_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string query = 6;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.ce.Media media = 7;
  if (this->has_media()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *media_);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 8;
  if (this->has_channel_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_attributes_);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 4;
  if (this->communicationchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_communicationchannel());
  }

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
    MergeFrom(*source);
  }
}

void TestCampaignRequest::MergeFrom(const TestCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_metadata_.MergeFrom(from.content_metadata_);
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_media()) {
    _internal_mutable_media()->::farm::nurture::core::contracts::ce::Media::MergeFrom(from._internal_media());
  }
  if (from.has_channel_attributes()) {
    _internal_mutable_channel_attributes()->::farm::nurture::core::contracts::ce::CommunicationChannelAttributes::MergeFrom(from._internal_channel_attributes());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.communicationchannel() != 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TestCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCampaignRequest::CopyFrom(const TestCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCampaignRequest::IsInitialized() const {
  return true;
}

void TestCampaignRequest::InternalSwap(TestCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_metadata_.InternalSwap(&other->content_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCampaignRequest, type_)
      + sizeof(TestCampaignRequest::type_)
      - PROTOBUF_FIELD_OFFSET(TestCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddCampaignRequest::_Internal::requestheaders(const BulkAddCampaignRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddCampaignRequest::BulkAddCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
}
BulkAddCampaignRequest::BulkAddCampaignRequest(const BulkAddCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
}

void BulkAddCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddCampaignRequest::~BulkAddCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddCampaignRequest::ArenaDtor(void* object) {
  BulkAddCampaignRequest* _this = reinterpret_cast< BulkAddCampaignRequest* >(object);
  (void)_this;
}
void BulkAddCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddCampaignRequest& BulkAddCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  return target;
}

size_t BulkAddCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
    MergeFrom(*source);
  }
}

void BulkAddCampaignRequest::MergeFrom(const BulkAddCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddCampaignRequest::CopyFrom(const BulkAddCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddCampaignRequest::IsInitialized() const {
  return true;
}

void BulkAddCampaignRequest::InternalSwap(BulkAddCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddCampaignResponse::_Internal::status(const AddCampaignResponse* msg) {
  return *msg->status_;
}
void AddCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddCampaignResponse::clear_attribs() {
  attribs_.Clear();
}
AddCampaignResponse::AddCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
}
AddCampaignResponse::AddCampaignResponse(const AddCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
}

void AddCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddCampaignResponse::~AddCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddCampaignResponse::ArenaDtor(void* object) {
  AddCampaignResponse* _this = reinterpret_cast< AddCampaignResponse* >(object);
  (void)_this;
}
void AddCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCampaignResponse& AddCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  return target;
}

size_t AddCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
    MergeFrom(*source);
  }
}

void AddCampaignResponse::MergeFrom(const AddCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCampaignResponse::CopyFrom(const AddCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCampaignResponse::IsInitialized() const {
  return true;
}

void AddCampaignResponse::InternalSwap(AddCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCampaignResponse, count_)
      + sizeof(AddCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddCampaignResponse::_Internal::status(const BulkAddCampaignResponse* msg) {
  return *msg->status_;
}
void BulkAddCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddCampaignResponse::BulkAddCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
}
BulkAddCampaignResponse::BulkAddCampaignResponse(const BulkAddCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
}

void BulkAddCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddCampaignResponse::~BulkAddCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddCampaignResponse::ArenaDtor(void* object) {
  BulkAddCampaignResponse* _this = reinterpret_cast< BulkAddCampaignResponse* >(object);
  (void)_this;
}
void BulkAddCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddCampaignResponse& BulkAddCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  return target;
}

size_t BulkAddCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
    MergeFrom(*source);
  }
}

void BulkAddCampaignResponse::MergeFrom(const BulkAddCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddCampaignResponse::CopyFrom(const BulkAddCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddCampaignResponse::IsInitialized() const {
  return true;
}

void BulkAddCampaignResponse::InternalSwap(BulkAddCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddCampaignResponse, count_)
      + sizeof(BulkAddCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const UpdateCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& updatedbyactor(const UpdateCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
UpdateCampaignRequest::_Internal::requestheaders(const UpdateCampaignRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
UpdateCampaignRequest::_Internal::updatedbyactor(const UpdateCampaignRequest* msg) {
  return *msg->updatedbyactor_;
}
void UpdateCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void UpdateCampaignRequest::clear_updatedbyactor() {
  if (GetArena() == nullptr && updatedbyactor_ != nullptr) {
    delete updatedbyactor_;
  }
  updatedbyactor_ = nullptr;
}
UpdateCampaignRequest::UpdateCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
}
UpdateCampaignRequest::UpdateCampaignRequest(const UpdateCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cronexpression().empty()) {
    cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cronexpression(), 
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_updatedbyactor()) {
    updatedbyactor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.updatedbyactor_);
  } else {
    updatedbyactor_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
}

void UpdateCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(id_));
}

UpdateCampaignRequest::~UpdateCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete updatedbyactor_;
}

void UpdateCampaignRequest::ArenaDtor(void* object) {
  UpdateCampaignRequest* _this = reinterpret_cast< UpdateCampaignRequest* >(object);
  (void)_this;
}
void UpdateCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCampaignRequest& UpdateCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cronexpression_.ClearToEmpty();
  query_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && updatedbyactor_ != nullptr) {
    delete updatedbyactor_;
  }
  updatedbyactor_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cronExpression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cronexpression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::CampaignStatus>(val));
        } else goto handle_unusual;
        continue;
      // string query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID updatedByActor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedbyactor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occurrences = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string cronExpression = 3;
  if (this->cronexpression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cronexpression().data(), static_cast<int>(this->_internal_cronexpression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cronexpression(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // string query = 5;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_query(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID updatedByActor = 6;
  if (this->has_updatedbyactor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::updatedbyactor(this), target, stream);
  }

  // int32 occurrences = 7;
  if (this->occurrences() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_occurrences(), target);
  }

  // int64 id = 8;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  return target;
}

size_t UpdateCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cronExpression = 3;
  if (this->cronexpression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cronexpression());
  }

  // string query = 5;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID updatedByActor = 6;
  if (this->has_updatedbyactor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedbyactor_);
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 occurrences = 7;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occurrences());
  }

  // int64 id = 8;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
    MergeFrom(*source);
  }
}

void UpdateCampaignRequest::MergeFrom(const UpdateCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cronexpression().size() > 0) {
    _internal_set_cronexpression(from._internal_cronexpression());
  }
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_updatedbyactor()) {
    _internal_mutable_updatedbyactor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_updatedbyactor());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.occurrences() != 0) {
    _internal_set_occurrences(from._internal_occurrences());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCampaignRequest::CopyFrom(const UpdateCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCampaignRequest::IsInitialized() const {
  return true;
}

void UpdateCampaignRequest::InternalSwap(UpdateCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cronexpression_.Swap(&other->cronexpression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCampaignRequest, id_)
      + sizeof(UpdateCampaignRequest::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkUpdateCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkUpdateCampaignRequest::_Internal::requestheaders(const BulkUpdateCampaignRequest* msg) {
  return *msg->requestheaders_;
}
void BulkUpdateCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkUpdateCampaignRequest::BulkUpdateCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
}
BulkUpdateCampaignRequest::BulkUpdateCampaignRequest(const BulkUpdateCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
}

void BulkUpdateCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkUpdateCampaignRequest::~BulkUpdateCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkUpdateCampaignRequest::ArenaDtor(void* object) {
  BulkUpdateCampaignRequest* _this = reinterpret_cast< BulkUpdateCampaignRequest* >(object);
  (void)_this;
}
void BulkUpdateCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateCampaignRequest& BulkUpdateCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  return target;
}

size_t BulkUpdateCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateCampaignRequest::MergeFrom(const BulkUpdateCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkUpdateCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateCampaignRequest::CopyFrom(const BulkUpdateCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateCampaignRequest::IsInitialized() const {
  return true;
}

void BulkUpdateCampaignRequest::InternalSwap(BulkUpdateCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const UpdateCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
UpdateCampaignResponse::_Internal::status(const UpdateCampaignResponse* msg) {
  return *msg->status_;
}
void UpdateCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void UpdateCampaignResponse::clear_attribs() {
  attribs_.Clear();
}
UpdateCampaignResponse::UpdateCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
}
UpdateCampaignResponse::UpdateCampaignResponse(const UpdateCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
}

void UpdateCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

UpdateCampaignResponse::~UpdateCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UpdateCampaignResponse::ArenaDtor(void* object) {
  UpdateCampaignResponse* _this = reinterpret_cast< UpdateCampaignResponse* >(object);
  (void)_this;
}
void UpdateCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCampaignResponse& UpdateCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  return target;
}

size_t UpdateCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
    MergeFrom(*source);
  }
}

void UpdateCampaignResponse::MergeFrom(const UpdateCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UpdateCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCampaignResponse::CopyFrom(const UpdateCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCampaignResponse::IsInitialized() const {
  return true;
}

void UpdateCampaignResponse::InternalSwap(UpdateCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCampaignResponse, count_)
      + sizeof(UpdateCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(UpdateCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkUpdateCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkUpdateCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkUpdateCampaignResponse::_Internal::status(const BulkUpdateCampaignResponse* msg) {
  return *msg->status_;
}
void BulkUpdateCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkUpdateCampaignResponse::BulkUpdateCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
}
BulkUpdateCampaignResponse::BulkUpdateCampaignResponse(const BulkUpdateCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
}

void BulkUpdateCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkUpdateCampaignResponse::~BulkUpdateCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkUpdateCampaignResponse::ArenaDtor(void* object) {
  BulkUpdateCampaignResponse* _this = reinterpret_cast< BulkUpdateCampaignResponse* >(object);
  (void)_this;
}
void BulkUpdateCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateCampaignResponse& BulkUpdateCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  return target;
}

size_t BulkUpdateCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateCampaignResponse::MergeFrom(const BulkUpdateCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkUpdateCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateCampaignResponse::CopyFrom(const BulkUpdateCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateCampaignResponse::IsInitialized() const {
  return true;
}

void BulkUpdateCampaignResponse::InternalSwap(BulkUpdateCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkUpdateCampaignResponse, count_)
      + sizeof(BulkUpdateCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkUpdateCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddCampaignTemplateRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddCampaignTemplateRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddCampaignTemplateRequest::_Internal::requestheaders(const AddCampaignTemplateRequest* msg) {
  return *msg->requestheaders_;
}
void AddCampaignTemplateRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AddCampaignTemplateRequest::AddCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
}
AddCampaignTemplateRequest::AddCampaignTemplateRequest(const AddCampaignTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_templatename().empty()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  campaignname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_campaignname().empty()) {
    campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_campaignname(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&distributionpercent_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(distributionpercent_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
}

void AddCampaignTemplateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaignname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&distributionpercent_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(distributionpercent_));
}

AddCampaignTemplateRequest::~AddCampaignTemplateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCampaignTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaignname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddCampaignTemplateRequest::ArenaDtor(void* object) {
  AddCampaignTemplateRequest* _this = reinterpret_cast< AddCampaignTemplateRequest* >(object);
  (void)_this;
}
void AddCampaignTemplateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCampaignTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCampaignTemplateRequest& AddCampaignTemplateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddCampaignTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templatename_.ClearToEmpty();
  campaignname_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distributionpercent_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(distributionpercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCampaignTemplateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string templateName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string campaignName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_campaignname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 distributionPercent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          distributionpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCampaignTemplateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // string templateName = 3;
  if (this->templatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_templatename(), target);
  }

  // string campaignName = 4;
  if (this->campaignname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaignname().data(), static_cast<int>(this->_internal_campaignname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_campaignname(), target);
  }

  // int32 distributionPercent = 5;
  if (this->distributionpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_distributionpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  return target;
}

size_t AddCampaignTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string templateName = 3;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_templatename());
  }

  // string campaignName = 4;
  if (this->campaignname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaignname());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // int32 distributionPercent = 5;
  if (this->distributionpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distributionpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCampaignTemplateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCampaignTemplateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCampaignTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
    MergeFrom(*source);
  }
}

void AddCampaignTemplateRequest::MergeFrom(const AddCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.templatename().size() > 0) {
    _internal_set_templatename(from._internal_templatename());
  }
  if (from.campaignname().size() > 0) {
    _internal_set_campaignname(from._internal_campaignname());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.distributionpercent() != 0) {
    _internal_set_distributionpercent(from._internal_distributionpercent());
  }
}

void AddCampaignTemplateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCampaignTemplateRequest::CopyFrom(const AddCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCampaignTemplateRequest::IsInitialized() const {
  return true;
}

void AddCampaignTemplateRequest::InternalSwap(AddCampaignTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaignname_.Swap(&other->campaignname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCampaignTemplateRequest, distributionpercent_)
      + sizeof(AddCampaignTemplateRequest::distributionpercent_)
      - PROTOBUF_FIELD_OFFSET(AddCampaignTemplateRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCampaignTemplateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestCampaignTemplateRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const TestCampaignTemplateRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
TestCampaignTemplateRequest::_Internal::requestheaders(const TestCampaignTemplateRequest* msg) {
  return *msg->requestheaders_;
}
void TestCampaignTemplateRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
TestCampaignTemplateRequest::TestCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
}
TestCampaignTemplateRequest::TestCampaignTemplateRequest(const TestCampaignTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_templatename().empty()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  distributionpercent_ = from.distributionpercent_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
}

void TestCampaignTemplateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&distributionpercent_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(distributionpercent_));
}

TestCampaignTemplateRequest::~TestCampaignTemplateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestCampaignTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void TestCampaignTemplateRequest::ArenaDtor(void* object) {
  TestCampaignTemplateRequest* _this = reinterpret_cast< TestCampaignTemplateRequest* >(object);
  (void)_this;
}
void TestCampaignTemplateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCampaignTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCampaignTemplateRequest& TestCampaignTemplateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestCampaignTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templatename_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  distributionpercent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCampaignTemplateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string templateName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 distributionPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          distributionpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCampaignTemplateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string templateName = 2;
  if (this->templatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_templatename(), target);
  }

  // int32 distributionPercent = 3;
  if (this->distributionpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_distributionpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  return target;
}

size_t TestCampaignTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string templateName = 2;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_templatename());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int32 distributionPercent = 3;
  if (this->distributionpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distributionpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCampaignTemplateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCampaignTemplateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCampaignTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
    MergeFrom(*source);
  }
}

void TestCampaignTemplateRequest::MergeFrom(const TestCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.templatename().size() > 0) {
    _internal_set_templatename(from._internal_templatename());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.distributionpercent() != 0) {
    _internal_set_distributionpercent(from._internal_distributionpercent());
  }
}

void TestCampaignTemplateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCampaignTemplateRequest::CopyFrom(const TestCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCampaignTemplateRequest::IsInitialized() const {
  return true;
}

void TestCampaignTemplateRequest::InternalSwap(TestCampaignTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCampaignTemplateRequest, distributionpercent_)
      + sizeof(TestCampaignTemplateRequest::distributionpercent_)
      - PROTOBUF_FIELD_OFFSET(TestCampaignTemplateRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCampaignTemplateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddCampaignTemplateRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddCampaignTemplateRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddCampaignTemplateRequest::_Internal::requestheaders(const BulkAddCampaignTemplateRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddCampaignTemplateRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddCampaignTemplateRequest::BulkAddCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
}
BulkAddCampaignTemplateRequest::BulkAddCampaignTemplateRequest(const BulkAddCampaignTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
}

void BulkAddCampaignTemplateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddCampaignTemplateRequest::~BulkAddCampaignTemplateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddCampaignTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddCampaignTemplateRequest::ArenaDtor(void* object) {
  BulkAddCampaignTemplateRequest* _this = reinterpret_cast< BulkAddCampaignTemplateRequest* >(object);
  (void)_this;
}
void BulkAddCampaignTemplateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddCampaignTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddCampaignTemplateRequest& BulkAddCampaignTemplateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddCampaignTemplateRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddCampaignTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddCampaignTemplateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddCampaignTemplateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  return target;
}

size_t BulkAddCampaignTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddCampaignTemplateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddCampaignTemplateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddCampaignTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
    MergeFrom(*source);
  }
}

void BulkAddCampaignTemplateRequest::MergeFrom(const BulkAddCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddCampaignTemplateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddCampaignTemplateRequest::CopyFrom(const BulkAddCampaignTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddCampaignTemplateRequest::IsInitialized() const {
  return true;
}

void BulkAddCampaignTemplateRequest::InternalSwap(BulkAddCampaignTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddCampaignTemplateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddCampaignTemplateResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddCampaignTemplateResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddCampaignTemplateResponse::_Internal::status(const AddCampaignTemplateResponse* msg) {
  return *msg->status_;
}
void AddCampaignTemplateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddCampaignTemplateResponse::clear_attribs() {
  attribs_.Clear();
}
AddCampaignTemplateResponse::AddCampaignTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
}
AddCampaignTemplateResponse::AddCampaignTemplateResponse(const AddCampaignTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
}

void AddCampaignTemplateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddCampaignTemplateResponse::~AddCampaignTemplateResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCampaignTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddCampaignTemplateResponse::ArenaDtor(void* object) {
  AddCampaignTemplateResponse* _this = reinterpret_cast< AddCampaignTemplateResponse* >(object);
  (void)_this;
}
void AddCampaignTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCampaignTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCampaignTemplateResponse& AddCampaignTemplateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddCampaignTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCampaignTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCampaignTemplateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  return target;
}

size_t AddCampaignTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCampaignTemplateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCampaignTemplateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCampaignTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
    MergeFrom(*source);
  }
}

void AddCampaignTemplateResponse::MergeFrom(const AddCampaignTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddCampaignTemplateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCampaignTemplateResponse::CopyFrom(const AddCampaignTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCampaignTemplateResponse::IsInitialized() const {
  return true;
}

void AddCampaignTemplateResponse::InternalSwap(AddCampaignTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCampaignTemplateResponse, count_)
      + sizeof(AddCampaignTemplateResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddCampaignTemplateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCampaignTemplateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddCampaignTemplateResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddCampaignTemplateResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddCampaignTemplateResponse::_Internal::status(const BulkAddCampaignTemplateResponse* msg) {
  return *msg->status_;
}
void BulkAddCampaignTemplateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddCampaignTemplateResponse::BulkAddCampaignTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
}
BulkAddCampaignTemplateResponse::BulkAddCampaignTemplateResponse(const BulkAddCampaignTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
}

void BulkAddCampaignTemplateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddCampaignTemplateResponse::~BulkAddCampaignTemplateResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddCampaignTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddCampaignTemplateResponse::ArenaDtor(void* object) {
  BulkAddCampaignTemplateResponse* _this = reinterpret_cast< BulkAddCampaignTemplateResponse* >(object);
  (void)_this;
}
void BulkAddCampaignTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddCampaignTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddCampaignTemplateResponse& BulkAddCampaignTemplateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddCampaignTemplateResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddCampaignTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddCampaignTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddCampaignTemplateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  return target;
}

size_t BulkAddCampaignTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddCampaignTemplateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddCampaignTemplateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddCampaignTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
    MergeFrom(*source);
  }
}

void BulkAddCampaignTemplateResponse::MergeFrom(const BulkAddCampaignTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddCampaignTemplateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddCampaignTemplateResponse::CopyFrom(const BulkAddCampaignTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddCampaignTemplateResponse::IsInitialized() const {
  return true;
}

void BulkAddCampaignTemplateResponse::InternalSwap(BulkAddCampaignTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddCampaignTemplateResponse, count_)
      + sizeof(BulkAddCampaignTemplateResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddCampaignTemplateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddCampaignTemplateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddNewCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddNewCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& addcampaignrequest(const AddNewCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddNewCampaignRequest::_Internal::requestheaders(const AddNewCampaignRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest&
AddNewCampaignRequest::_Internal::addcampaignrequest(const AddNewCampaignRequest* msg) {
  return *msg->addcampaignrequest_;
}
void AddNewCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AddNewCampaignRequest::AddNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addcampaigntemplaterequests_(arena),
  addtargetuserrequests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
}
AddNewCampaignRequest::AddNewCampaignRequest(const AddNewCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addcampaigntemplaterequests_(from.addcampaigntemplaterequests_),
      addtargetuserrequests_(from.addtargetuserrequests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_addcampaignrequest()) {
    addcampaignrequest_ = new ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest(*from.addcampaignrequest_);
  } else {
    addcampaignrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
}

void AddNewCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addcampaignrequest_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(addcampaignrequest_));
}

AddNewCampaignRequest::~AddNewCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddNewCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete addcampaignrequest_;
}

void AddNewCampaignRequest::ArenaDtor(void* object) {
  AddNewCampaignRequest* _this = reinterpret_cast< AddNewCampaignRequest* >(object);
  (void)_this;
}
void AddNewCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddNewCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNewCampaignRequest& AddNewCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddNewCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addcampaigntemplaterequests_.Clear();
  addtargetuserrequests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && addcampaignrequest_ != nullptr) {
    delete addcampaignrequest_;
  }
  addcampaignrequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddNewCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest addCampaignRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_addcampaignrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest addCampaignTemplateRequests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addcampaigntemplaterequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest addTargetUserRequests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addtargetuserrequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNewCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest addCampaignRequest = 3;
  if (this->has_addcampaignrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::addcampaignrequest(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest addCampaignTemplateRequests = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addcampaigntemplaterequests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_addcampaigntemplaterequests(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest addTargetUserRequests = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addtargetuserrequests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_addtargetuserrequests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  return target;
}

size_t AddNewCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest addCampaignTemplateRequests = 4;
  total_size += 1UL * this->_internal_addcampaigntemplaterequests_size();
  for (const auto& msg : this->addcampaigntemplaterequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest addTargetUserRequests = 5;
  total_size += 1UL * this->_internal_addtargetuserrequests_size();
  for (const auto& msg : this->addtargetuserrequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest addCampaignRequest = 3;
  if (this->has_addcampaignrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addcampaignrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNewCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNewCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNewCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
    MergeFrom(*source);
  }
}

void AddNewCampaignRequest::MergeFrom(const AddNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addcampaigntemplaterequests_.MergeFrom(from.addcampaigntemplaterequests_);
  addtargetuserrequests_.MergeFrom(from.addtargetuserrequests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_addcampaignrequest()) {
    _internal_mutable_addcampaignrequest()->::farm::nurture::core::contracts::CampaignService::AddCampaignRequest::MergeFrom(from._internal_addcampaignrequest());
  }
}

void AddNewCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewCampaignRequest::CopyFrom(const AddNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewCampaignRequest::IsInitialized() const {
  return true;
}

void AddNewCampaignRequest::InternalSwap(AddNewCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addcampaigntemplaterequests_.InternalSwap(&other->addcampaigntemplaterequests_);
  addtargetuserrequests_.InternalSwap(&other->addtargetuserrequests_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddNewCampaignRequest, addcampaignrequest_)
      + sizeof(AddNewCampaignRequest::addcampaignrequest_)
      - PROTOBUF_FIELD_OFFSET(AddNewCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNewCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddNewCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddNewCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddNewCampaignRequest::_Internal::requestheaders(const BulkAddNewCampaignRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddNewCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddNewCampaignRequest::BulkAddNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
}
BulkAddNewCampaignRequest::BulkAddNewCampaignRequest(const BulkAddNewCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
}

void BulkAddNewCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddNewCampaignRequest::~BulkAddNewCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddNewCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddNewCampaignRequest::ArenaDtor(void* object) {
  BulkAddNewCampaignRequest* _this = reinterpret_cast< BulkAddNewCampaignRequest* >(object);
  (void)_this;
}
void BulkAddNewCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddNewCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddNewCampaignRequest& BulkAddNewCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddNewCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddNewCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddNewCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  return target;
}

size_t BulkAddNewCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddNewCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddNewCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddNewCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
    MergeFrom(*source);
  }
}

void BulkAddNewCampaignRequest::MergeFrom(const BulkAddNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddNewCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddNewCampaignRequest::CopyFrom(const BulkAddNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddNewCampaignRequest::IsInitialized() const {
  return true;
}

void BulkAddNewCampaignRequest::InternalSwap(BulkAddNewCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddNewCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddNewCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddNewCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddNewCampaignResponse::_Internal::status(const AddNewCampaignResponse* msg) {
  return *msg->status_;
}
void AddNewCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddNewCampaignResponse::clear_attribs() {
  attribs_.Clear();
}
AddNewCampaignResponse::AddNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
}
AddNewCampaignResponse::AddNewCampaignResponse(const AddNewCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
}

void AddNewCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddNewCampaignResponse::~AddNewCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddNewCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddNewCampaignResponse::ArenaDtor(void* object) {
  AddNewCampaignResponse* _this = reinterpret_cast< AddNewCampaignResponse* >(object);
  (void)_this;
}
void AddNewCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddNewCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNewCampaignResponse& AddNewCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddNewCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddNewCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNewCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  return target;
}

size_t AddNewCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNewCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNewCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNewCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
    MergeFrom(*source);
  }
}

void AddNewCampaignResponse::MergeFrom(const AddNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddNewCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewCampaignResponse::CopyFrom(const AddNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewCampaignResponse::IsInitialized() const {
  return true;
}

void AddNewCampaignResponse::InternalSwap(AddNewCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddNewCampaignResponse, count_)
      + sizeof(AddNewCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddNewCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNewCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddNewCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddNewCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddNewCampaignResponse::_Internal::status(const BulkAddNewCampaignResponse* msg) {
  return *msg->status_;
}
void BulkAddNewCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddNewCampaignResponse::BulkAddNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
}
BulkAddNewCampaignResponse::BulkAddNewCampaignResponse(const BulkAddNewCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
}

void BulkAddNewCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddNewCampaignResponse::~BulkAddNewCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddNewCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddNewCampaignResponse::ArenaDtor(void* object) {
  BulkAddNewCampaignResponse* _this = reinterpret_cast< BulkAddNewCampaignResponse* >(object);
  (void)_this;
}
void BulkAddNewCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddNewCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddNewCampaignResponse& BulkAddNewCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddNewCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddNewCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddNewCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  return target;
}

size_t BulkAddNewCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddNewCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddNewCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddNewCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
    MergeFrom(*source);
  }
}

void BulkAddNewCampaignResponse::MergeFrom(const BulkAddNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddNewCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddNewCampaignResponse::CopyFrom(const BulkAddNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddNewCampaignResponse::IsInitialized() const {
  return true;
}

void BulkAddNewCampaignResponse::InternalSwap(BulkAddNewCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddNewCampaignResponse, count_)
      + sizeof(BulkAddNewCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddNewCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddNewCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const CampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
CampaignRequest::_Internal::requestheaders(const CampaignRequest* msg) {
  return *msg->requestheaders_;
}
void CampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
CampaignRequest::CampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.CampaignRequest)
}
CampaignRequest::CampaignRequest(const CampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.CampaignRequest)
}

void CampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

CampaignRequest::~CampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void CampaignRequest::ArenaDtor(void* object) {
  CampaignRequest* _this = reinterpret_cast< CampaignRequest* >(object);
  (void)_this;
}
void CampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CampaignRequest& CampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_campaignid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  return target;
}

size_t CampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.CampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.CampaignRequest)
    MergeFrom(*source);
  }
}

void CampaignRequest::MergeFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void CampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignRequest::CopyFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignRequest::IsInitialized() const {
  return true;
}

void CampaignRequest::InternalSwap(CampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CampaignRequest, isstaleallowed_)
      + sizeof(CampaignRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(CampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const CampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
CampaignResponse::_Internal::status(const CampaignResponse* msg) {
  return *msg->status_;
}
void CampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
CampaignResponse::CampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.CampaignResponse)
}
CampaignResponse::CampaignResponse(const CampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.CampaignResponse)
}

void CampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

CampaignResponse::~CampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void CampaignResponse::ArenaDtor(void* object) {
  CampaignResponse* _this = reinterpret_cast< CampaignResponse* >(object);
  (void)_this;
}
void CampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CampaignResponse& CampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  return target;
}

size_t CampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.CampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.CampaignResponse)
    MergeFrom(*source);
  }
}

void CampaignResponse::MergeFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void CampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignResponse::CopyFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignResponse::IsInitialized() const {
  return true;
}

void CampaignResponse::InternalSwap(CampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CampaignResponse, count_)
      + sizeof(CampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(CampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FindCampaignByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FindCampaignByIdRequest::_Internal::requestheaders(const FindCampaignByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FindCampaignByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FindCampaignByIdRequest::FindCampaignByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
}
FindCampaignByIdRequest::FindCampaignByIdRequest(const FindCampaignByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
}

void FindCampaignByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FindCampaignByIdRequest::~FindCampaignByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FindCampaignByIdRequest::ArenaDtor(void* object) {
  FindCampaignByIdRequest* _this = reinterpret_cast< FindCampaignByIdRequest* >(object);
  (void)_this;
}
void FindCampaignByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignByIdRequest& FindCampaignByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  return target;
}

size_t FindCampaignByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
    MergeFrom(*source);
  }
}

void FindCampaignByIdRequest::MergeFrom(const FindCampaignByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FindCampaignByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignByIdRequest::CopyFrom(const FindCampaignByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignByIdRequest::IsInitialized() const {
  return true;
}

void FindCampaignByIdRequest::InternalSwap(FindCampaignByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignByIdRequest, isstaleallowed_)
      + sizeof(FindCampaignByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignByIdResponseRecord::_Internal {
 public:
};

FindCampaignByIdResponseRecord::FindCampaignByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
}
FindCampaignByIdResponseRecord::FindCampaignByIdResponseRecord(const FindCampaignByIdResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cronexpression().empty()) {
    cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cronexpression(), 
      GetArena());
  }
  communicationchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communicationchannel().empty()) {
    communicationchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_communicationchannel(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  scheduletype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scheduletype().empty()) {
    scheduletype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scheduletype(), 
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  inactionquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inactionquery().empty()) {
    inactionquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inactionquery(), 
      GetArena());
  }
  attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attributes().empty()) {
    attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes(), 
      GetArena());
  }
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdbyactortype().empty()) {
    createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_createdbyactortype(), 
      GetArena());
  }
  updatedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updatedbyactortype().empty()) {
    updatedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updatedbyactortype(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&occurrences_) -
    reinterpret_cast<char*>(&id_)) + sizeof(occurrences_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
}

void FindCampaignByIdResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communicationchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inactionquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatedbyactortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&occurrences_) -
      reinterpret_cast<char*>(&id_)) + sizeof(occurrences_));
}

FindCampaignByIdResponseRecord::~FindCampaignByIdResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignByIdResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cronexpression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communicationchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inactionquery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attributes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatedbyactortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindCampaignByIdResponseRecord::ArenaDtor(void* object) {
  FindCampaignByIdResponseRecord* _this = reinterpret_cast< FindCampaignByIdResponseRecord* >(object);
  (void)_this;
}
void FindCampaignByIdResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignByIdResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignByIdResponseRecord& FindCampaignByIdResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignByIdResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  cronexpression_.ClearToEmpty();
  communicationchannel_.ClearToEmpty();
  status_.ClearToEmpty();
  type_.ClearToEmpty();
  scheduletype_.ClearToEmpty();
  query_.ClearToEmpty();
  inactionquery_.ClearToEmpty();
  attributes_.ClearToEmpty();
  createdbyactortype_.ClearToEmpty();
  updatedbyactortype_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occurrences_) -
      reinterpret_cast<char*>(&id_)) + sizeof(occurrences_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignByIdResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cronExpression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cronexpression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occurrences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communicationChannel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_communicationchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scheduleType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_scheduletype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inactionQuery = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_inactionquery();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inactionDuration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          inactionduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attributes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_attributes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdByActorid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          createdbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdByActortype = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_createdbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedByActorid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          updatedbyactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updatedByActortype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_updatedbyactortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletedAt = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          deletedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignByIdResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string cronExpression = 5;
  if (this->cronexpression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cronexpression().data(), static_cast<int>(this->_internal_cronexpression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cronexpression(), target);
  }

  // int32 occurrences = 6;
  if (this->occurrences() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_occurrences(), target);
  }

  // string communicationChannel = 7;
  if (this->communicationchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communicationchannel().data(), static_cast<int>(this->_internal_communicationchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_communicationchannel(), target);
  }

  // string status = 8;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  // string type = 9;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_type(), target);
  }

  // string scheduleType = 10;
  if (this->scheduletype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheduletype().data(), static_cast<int>(this->_internal_scheduletype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_scheduletype(), target);
  }

  // string query = 11;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_query(), target);
  }

  // string inactionQuery = 12;
  if (this->inactionquery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inactionquery().data(), static_cast<int>(this->_internal_inactionquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_inactionquery(), target);
  }

  // int64 inactionDuration = 13;
  if (this->inactionduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_inactionduration(), target);
  }

  // string attributes = 14;
  if (this->attributes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attributes().data(), static_cast<int>(this->_internal_attributes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_attributes(), target);
  }

  // int64 createdByActorid = 15;
  if (this->createdbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_createdbyactorid(), target);
  }

  // string createdByActortype = 16;
  if (this->createdbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdbyactortype().data(), static_cast<int>(this->_internal_createdbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_createdbyactortype(), target);
  }

  // int64 updatedByActorid = 17;
  if (this->updatedbyactorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_updatedbyactorid(), target);
  }

  // string updatedByActortype = 18;
  if (this->updatedbyactortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatedbyactortype().data(), static_cast<int>(this->_internal_updatedbyactortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_updatedbyactortype(), target);
  }

  // int64 version = 19;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_version(), target);
  }

  // int64 createdAt = 20;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 21;
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_updatedat(), target);
  }

  // int64 deletedAt = 22;
  if (this->deletedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_deletedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  return target;
}

size_t FindCampaignByIdResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string cronExpression = 5;
  if (this->cronexpression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cronexpression());
  }

  // string communicationChannel = 7;
  if (this->communicationchannel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communicationchannel());
  }

  // string status = 8;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string type = 9;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string scheduleType = 10;
  if (this->scheduletype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduletype());
  }

  // string query = 11;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string inactionQuery = 12;
  if (this->inactionquery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inactionquery());
  }

  // string attributes = 14;
  if (this->attributes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attributes());
  }

  // string createdByActortype = 16;
  if (this->createdbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdbyactortype());
  }

  // string updatedByActortype = 18;
  if (this->updatedbyactortype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedbyactortype());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 inactionDuration = 13;
  if (this->inactionduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inactionduration());
  }

  // int64 createdByActorid = 15;
  if (this->createdbyactorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdbyactorid());
  }

  // int64 updatedByActorid = 17;
  if (this->updatedbyactorid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedbyactorid());
  }

  // int64 version = 19;
  if (this->version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  // int64 createdAt = 20;
  if (this->createdat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 21;
  if (this->updatedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // int64 deletedAt = 22;
  if (this->deletedat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletedat());
  }

  // int32 occurrences = 6;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occurrences());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignByIdResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignByIdResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignByIdResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
    MergeFrom(*source);
  }
}

void FindCampaignByIdResponseRecord::MergeFrom(const FindCampaignByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.cronexpression().size() > 0) {
    _internal_set_cronexpression(from._internal_cronexpression());
  }
  if (from.communicationchannel().size() > 0) {
    _internal_set_communicationchannel(from._internal_communicationchannel());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.scheduletype().size() > 0) {
    _internal_set_scheduletype(from._internal_scheduletype());
  }
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.inactionquery().size() > 0) {
    _internal_set_inactionquery(from._internal_inactionquery());
  }
  if (from.attributes().size() > 0) {
    _internal_set_attributes(from._internal_attributes());
  }
  if (from.createdbyactortype().size() > 0) {
    _internal_set_createdbyactortype(from._internal_createdbyactortype());
  }
  if (from.updatedbyactortype().size() > 0) {
    _internal_set_updatedbyactortype(from._internal_updatedbyactortype());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.inactionduration() != 0) {
    _internal_set_inactionduration(from._internal_inactionduration());
  }
  if (from.createdbyactorid() != 0) {
    _internal_set_createdbyactorid(from._internal_createdbyactorid());
  }
  if (from.updatedbyactorid() != 0) {
    _internal_set_updatedbyactorid(from._internal_updatedbyactorid());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.deletedat() != 0) {
    _internal_set_deletedat(from._internal_deletedat());
  }
  if (from.occurrences() != 0) {
    _internal_set_occurrences(from._internal_occurrences());
  }
}

void FindCampaignByIdResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignByIdResponseRecord::CopyFrom(const FindCampaignByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignByIdResponseRecord::IsInitialized() const {
  return true;
}

void FindCampaignByIdResponseRecord::InternalSwap(FindCampaignByIdResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cronexpression_.Swap(&other->cronexpression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communicationchannel_.Swap(&other->communicationchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scheduletype_.Swap(&other->scheduletype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inactionquery_.Swap(&other->inactionquery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attributes_.Swap(&other->attributes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createdbyactortype_.Swap(&other->createdbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatedbyactortype_.Swap(&other->updatedbyactortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignByIdResponseRecord, occurrences_)
      + sizeof(FindCampaignByIdResponseRecord::occurrences_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignByIdResponseRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignByIdResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FindCampaignByIdResponse* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& records(const FindCampaignByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FindCampaignByIdResponse::_Internal::status(const FindCampaignByIdResponse* msg) {
  return *msg->status_;
}
const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord&
FindCampaignByIdResponse::_Internal::records(const FindCampaignByIdResponse* msg) {
  return *msg->records_;
}
void FindCampaignByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FindCampaignByIdResponse::clear_attribs() {
  attribs_.Clear();
}
FindCampaignByIdResponse::FindCampaignByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
}
FindCampaignByIdResponse::FindCampaignByIdResponse(const FindCampaignByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord(*from.records_);
  } else {
    records_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
}

void FindCampaignByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FindCampaignByIdResponse::~FindCampaignByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete records_;
}

void FindCampaignByIdResponse::ArenaDtor(void* object) {
  FindCampaignByIdResponse* _this = reinterpret_cast< FindCampaignByIdResponse* >(object);
  (void)_this;
}
void FindCampaignByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignByIdResponse& FindCampaignByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 4;
  if (this->has_records()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  return target;
}

size_t FindCampaignByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 4;
  if (this->has_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
    MergeFrom(*source);
  }
}

void FindCampaignByIdResponse::MergeFrom(const FindCampaignByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.has_records()) {
    _internal_mutable_records()->::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord::MergeFrom(from._internal_records());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FindCampaignByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignByIdResponse::CopyFrom(const FindCampaignByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignByIdResponse::IsInitialized() const {
  return true;
}

void FindCampaignByIdResponse::InternalSwap(FindCampaignByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignByIdResponse, count_)
      + sizeof(FindCampaignByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignTemplateByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FindCampaignTemplateByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FindCampaignTemplateByIdRequest::_Internal::requestheaders(const FindCampaignTemplateByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FindCampaignTemplateByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FindCampaignTemplateByIdRequest::FindCampaignTemplateByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
}
FindCampaignTemplateByIdRequest::FindCampaignTemplateByIdRequest(const FindCampaignTemplateByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
}

void FindCampaignTemplateByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FindCampaignTemplateByIdRequest::~FindCampaignTemplateByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignTemplateByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FindCampaignTemplateByIdRequest::ArenaDtor(void* object) {
  FindCampaignTemplateByIdRequest* _this = reinterpret_cast< FindCampaignTemplateByIdRequest* >(object);
  (void)_this;
}
void FindCampaignTemplateByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignTemplateByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignTemplateByIdRequest& FindCampaignTemplateByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignTemplateByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignTemplateByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignTemplateByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignTemplateByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_campaignid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  return target;
}

size_t FindCampaignTemplateByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignTemplateByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignTemplateByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignTemplateByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
    MergeFrom(*source);
  }
}

void FindCampaignTemplateByIdRequest::MergeFrom(const FindCampaignTemplateByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FindCampaignTemplateByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignTemplateByIdRequest::CopyFrom(const FindCampaignTemplateByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignTemplateByIdRequest::IsInitialized() const {
  return true;
}

void FindCampaignTemplateByIdRequest::InternalSwap(FindCampaignTemplateByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdRequest, isstaleallowed_)
      + sizeof(FindCampaignTemplateByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignTemplateByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignTemplateByIdResponseRecord::_Internal {
 public:
};

FindCampaignTemplateByIdResponseRecord::FindCampaignTemplateByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
}
FindCampaignTemplateByIdResponseRecord::FindCampaignTemplateByIdResponseRecord(const FindCampaignTemplateByIdResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_templatename().empty()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  campaignname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_campaignname().empty()) {
    campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_campaignname(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distributionpercent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distributionpercent_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
}

void FindCampaignTemplateByIdResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaignname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&distributionpercent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distributionpercent_));
}

FindCampaignTemplateByIdResponseRecord::~FindCampaignTemplateByIdResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignTemplateByIdResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaignname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindCampaignTemplateByIdResponseRecord::ArenaDtor(void* object) {
  FindCampaignTemplateByIdResponseRecord* _this = reinterpret_cast< FindCampaignTemplateByIdResponseRecord* >(object);
  (void)_this;
}
void FindCampaignTemplateByIdResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignTemplateByIdResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignTemplateByIdResponseRecord& FindCampaignTemplateByIdResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignTemplateByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignTemplateByIdResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templatename_.ClearToEmpty();
  campaignname_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distributionpercent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distributionpercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignTemplateByIdResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string templateName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string campaignName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_campaignname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 distributionPercent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          distributionpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignTemplateByIdResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // string templateName = 3;
  if (this->templatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_templatename(), target);
  }

  // string campaignName = 4;
  if (this->campaignname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaignname().data(), static_cast<int>(this->_internal_campaignname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_campaignname(), target);
  }

  // int32 distributionPercent = 5;
  if (this->distributionpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_distributionpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  return target;
}

size_t FindCampaignTemplateByIdResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string templateName = 3;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_templatename());
  }

  // string campaignName = 4;
  if (this->campaignname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaignname());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // int32 distributionPercent = 5;
  if (this->distributionpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distributionpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignTemplateByIdResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignTemplateByIdResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignTemplateByIdResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
    MergeFrom(*source);
  }
}

void FindCampaignTemplateByIdResponseRecord::MergeFrom(const FindCampaignTemplateByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.templatename().size() > 0) {
    _internal_set_templatename(from._internal_templatename());
  }
  if (from.campaignname().size() > 0) {
    _internal_set_campaignname(from._internal_campaignname());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.distributionpercent() != 0) {
    _internal_set_distributionpercent(from._internal_distributionpercent());
  }
}

void FindCampaignTemplateByIdResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignTemplateByIdResponseRecord::CopyFrom(const FindCampaignTemplateByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignTemplateByIdResponseRecord::IsInitialized() const {
  return true;
}

void FindCampaignTemplateByIdResponseRecord::InternalSwap(FindCampaignTemplateByIdResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaignname_.Swap(&other->campaignname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdResponseRecord, distributionpercent_)
      + sizeof(FindCampaignTemplateByIdResponseRecord::distributionpercent_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdResponseRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignTemplateByIdResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindCampaignTemplateByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FindCampaignTemplateByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FindCampaignTemplateByIdResponse::_Internal::status(const FindCampaignTemplateByIdResponse* msg) {
  return *msg->status_;
}
void FindCampaignTemplateByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FindCampaignTemplateByIdResponse::clear_attribs() {
  attribs_.Clear();
}
FindCampaignTemplateByIdResponse::FindCampaignTemplateByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
}
FindCampaignTemplateByIdResponse::FindCampaignTemplateByIdResponse(const FindCampaignTemplateByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
}

void FindCampaignTemplateByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FindCampaignTemplateByIdResponse::~FindCampaignTemplateByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindCampaignTemplateByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FindCampaignTemplateByIdResponse::ArenaDtor(void* object) {
  FindCampaignTemplateByIdResponse* _this = reinterpret_cast< FindCampaignTemplateByIdResponse* >(object);
  (void)_this;
}
void FindCampaignTemplateByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindCampaignTemplateByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindCampaignTemplateByIdResponse& FindCampaignTemplateByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindCampaignTemplateByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindCampaignTemplateByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindCampaignTemplateByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindCampaignTemplateByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  return target;
}

size_t FindCampaignTemplateByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindCampaignTemplateByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindCampaignTemplateByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindCampaignTemplateByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
    MergeFrom(*source);
  }
}

void FindCampaignTemplateByIdResponse::MergeFrom(const FindCampaignTemplateByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FindCampaignTemplateByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindCampaignTemplateByIdResponse::CopyFrom(const FindCampaignTemplateByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindCampaignTemplateByIdResponse::IsInitialized() const {
  return true;
}

void FindCampaignTemplateByIdResponse::InternalSwap(FindCampaignTemplateByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdResponse, count_)
      + sizeof(FindCampaignTemplateByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FindCampaignTemplateByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindCampaignTemplateByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindTargetUserByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FindTargetUserByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FindTargetUserByIdRequest::_Internal::requestheaders(const FindTargetUserByIdRequest* msg) {
  return *msg->requestheaders_;
}
void FindTargetUserByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FindTargetUserByIdRequest::FindTargetUserByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
}
FindTargetUserByIdRequest::FindTargetUserByIdRequest(const FindTargetUserByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
}

void FindTargetUserByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FindTargetUserByIdRequest::~FindTargetUserByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindTargetUserByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FindTargetUserByIdRequest::ArenaDtor(void* object) {
  FindTargetUserByIdRequest* _this = reinterpret_cast< FindTargetUserByIdRequest* >(object);
  (void)_this;
}
void FindTargetUserByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindTargetUserByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindTargetUserByIdRequest& FindTargetUserByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindTargetUserByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindTargetUserByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindTargetUserByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindTargetUserByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_campaignid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  return target;
}

size_t FindTargetUserByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindTargetUserByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindTargetUserByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindTargetUserByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
    MergeFrom(*source);
  }
}

void FindTargetUserByIdRequest::MergeFrom(const FindTargetUserByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FindTargetUserByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindTargetUserByIdRequest::CopyFrom(const FindTargetUserByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindTargetUserByIdRequest::IsInitialized() const {
  return true;
}

void FindTargetUserByIdRequest::InternalSwap(FindTargetUserByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindTargetUserByIdRequest, isstaleallowed_)
      + sizeof(FindTargetUserByIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FindTargetUserByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindTargetUserByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindTargetUserByIdResponseRecord::_Internal {
 public:
};

FindTargetUserByIdResponseRecord::FindTargetUserByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
}
FindTargetUserByIdResponseRecord::FindTargetUserByIdResponseRecord(const FindTargetUserByIdResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  usertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usertype().empty()) {
    usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usertype(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
}

void FindTargetUserByIdResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  usertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(userid_));
}

FindTargetUserByIdResponseRecord::~FindTargetUserByIdResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindTargetUserByIdResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  usertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindTargetUserByIdResponseRecord::ArenaDtor(void* object) {
  FindTargetUserByIdResponseRecord* _this = reinterpret_cast< FindTargetUserByIdResponseRecord* >(object);
  (void)_this;
}
void FindTargetUserByIdResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindTargetUserByIdResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindTargetUserByIdResponseRecord& FindTargetUserByIdResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindTargetUserByIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindTargetUserByIdResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usertype_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindTargetUserByIdResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 userId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_usertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindTargetUserByIdResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // int64 userId = 3;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_userid(), target);
  }

  // string userType = 4;
  if (this->usertype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usertype().data(), static_cast<int>(this->_internal_usertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  return target;
}

size_t FindTargetUserByIdResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userType = 4;
  if (this->usertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usertype());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // int64 userId = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindTargetUserByIdResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FindTargetUserByIdResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindTargetUserByIdResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
    MergeFrom(*source);
  }
}

void FindTargetUserByIdResponseRecord::MergeFrom(const FindTargetUserByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usertype().size() > 0) {
    _internal_set_usertype(from._internal_usertype());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void FindTargetUserByIdResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindTargetUserByIdResponseRecord::CopyFrom(const FindTargetUserByIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindTargetUserByIdResponseRecord::IsInitialized() const {
  return true;
}

void FindTargetUserByIdResponseRecord::InternalSwap(FindTargetUserByIdResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usertype_.Swap(&other->usertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindTargetUserByIdResponseRecord, userid_)
      + sizeof(FindTargetUserByIdResponseRecord::userid_)
      - PROTOBUF_FIELD_OFFSET(FindTargetUserByIdResponseRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindTargetUserByIdResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindTargetUserByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FindTargetUserByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FindTargetUserByIdResponse::_Internal::status(const FindTargetUserByIdResponse* msg) {
  return *msg->status_;
}
void FindTargetUserByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FindTargetUserByIdResponse::clear_attribs() {
  attribs_.Clear();
}
FindTargetUserByIdResponse::FindTargetUserByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
}
FindTargetUserByIdResponse::FindTargetUserByIdResponse(const FindTargetUserByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
}

void FindTargetUserByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FindTargetUserByIdResponse::~FindTargetUserByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindTargetUserByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FindTargetUserByIdResponse::ArenaDtor(void* object) {
  FindTargetUserByIdResponse* _this = reinterpret_cast< FindTargetUserByIdResponse* >(object);
  (void)_this;
}
void FindTargetUserByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindTargetUserByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindTargetUserByIdResponse& FindTargetUserByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindTargetUserByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindTargetUserByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindTargetUserByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindTargetUserByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  return target;
}

size_t FindTargetUserByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindTargetUserByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindTargetUserByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindTargetUserByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
    MergeFrom(*source);
  }
}

void FindTargetUserByIdResponse::MergeFrom(const FindTargetUserByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FindTargetUserByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindTargetUserByIdResponse::CopyFrom(const FindTargetUserByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindTargetUserByIdResponse::IsInitialized() const {
  return true;
}

void FindTargetUserByIdResponse::InternalSwap(FindTargetUserByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindTargetUserByIdResponse, count_)
      + sizeof(FindTargetUserByIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FindTargetUserByIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindTargetUserByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDynamicDataByKeyRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const GetDynamicDataByKeyRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetDynamicDataByKeyRequest::_Internal::requestheaders(const GetDynamicDataByKeyRequest* msg) {
  return *msg->requestheaders_;
}
void GetDynamicDataByKeyRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
GetDynamicDataByKeyRequest::GetDynamicDataByKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
}
GetDynamicDataByKeyRequest::GetDynamicDataByKeyRequest(const GetDynamicDataByKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dynamickey().empty()) {
    dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dynamickey(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
}

void GetDynamicDataByKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

GetDynamicDataByKeyRequest::~GetDynamicDataByKeyRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDynamicDataByKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dynamickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void GetDynamicDataByKeyRequest::ArenaDtor(void* object) {
  GetDynamicDataByKeyRequest* _this = reinterpret_cast< GetDynamicDataByKeyRequest* >(object);
  (void)_this;
}
void GetDynamicDataByKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDynamicDataByKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDynamicDataByKeyRequest& GetDynamicDataByKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDynamicDataByKeyRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDynamicDataByKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamickey_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDynamicDataByKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dynamicKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dynamickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDynamicDataByKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_campaignid(), target);
  }

  // string dynamicKey = 4;
  if (this->dynamickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dynamickey().data(), static_cast<int>(this->_internal_dynamickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dynamickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  return target;
}

size_t GetDynamicDataByKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dynamicKey = 4;
  if (this->dynamickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dynamickey());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDynamicDataByKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDynamicDataByKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDynamicDataByKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
    MergeFrom(*source);
  }
}

void GetDynamicDataByKeyRequest::MergeFrom(const GetDynamicDataByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dynamickey().size() > 0) {
    _internal_set_dynamickey(from._internal_dynamickey());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void GetDynamicDataByKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDynamicDataByKeyRequest::CopyFrom(const GetDynamicDataByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDynamicDataByKeyRequest::IsInitialized() const {
  return true;
}

void GetDynamicDataByKeyRequest::InternalSwap(GetDynamicDataByKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dynamickey_.Swap(&other->dynamickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDynamicDataByKeyRequest, isstaleallowed_)
      + sizeof(GetDynamicDataByKeyRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(GetDynamicDataByKeyRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDynamicDataByKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDynamicDataByKeyResponseRecord::_Internal {
 public:
};

GetDynamicDataByKeyResponseRecord::GetDynamicDataByKeyResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
}
GetDynamicDataByKeyResponseRecord::GetDynamicDataByKeyResponseRecord(const GetDynamicDataByKeyResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dynamickey().empty()) {
    dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dynamickey(), 
      GetArena());
  }
  ctalink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ctalink().empty()) {
    ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ctalink(), 
      GetArena());
  }
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media().empty()) {
    media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media(), 
      GetArena());
  }
  campaignid_ = from.campaignid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
}

void GetDynamicDataByKeyResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ctalink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaignid_ = PROTOBUF_LONGLONG(0);
}

GetDynamicDataByKeyResponseRecord::~GetDynamicDataByKeyResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDynamicDataByKeyResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dynamickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ctalink_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDynamicDataByKeyResponseRecord::ArenaDtor(void* object) {
  GetDynamicDataByKeyResponseRecord* _this = reinterpret_cast< GetDynamicDataByKeyResponseRecord* >(object);
  (void)_this;
}
void GetDynamicDataByKeyResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDynamicDataByKeyResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDynamicDataByKeyResponseRecord& GetDynamicDataByKeyResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDynamicDataByKeyResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDynamicDataByKeyResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamickey_.ClearToEmpty();
  ctalink_.ClearToEmpty();
  media_.ClearToEmpty();
  campaignid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDynamicDataByKeyResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 campaignId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dynamicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dynamickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ctaLink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ctalink();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_media();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDynamicDataByKeyResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 campaignId = 1;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_campaignid(), target);
  }

  // string dynamicKey = 2;
  if (this->dynamickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dynamickey().data(), static_cast<int>(this->_internal_dynamickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dynamickey(), target);
  }

  // string ctaLink = 3;
  if (this->ctalink().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctalink().data(), static_cast<int>(this->_internal_ctalink().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ctalink(), target);
  }

  // string media = 4;
  if (this->media().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media().data(), static_cast<int>(this->_internal_media().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_media(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  return target;
}

size_t GetDynamicDataByKeyResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dynamicKey = 2;
  if (this->dynamickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dynamickey());
  }

  // string ctaLink = 3;
  if (this->ctalink().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctalink());
  }

  // string media = 4;
  if (this->media().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media());
  }

  // int64 campaignId = 1;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDynamicDataByKeyResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDynamicDataByKeyResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDynamicDataByKeyResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
    MergeFrom(*source);
  }
}

void GetDynamicDataByKeyResponseRecord::MergeFrom(const GetDynamicDataByKeyResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dynamickey().size() > 0) {
    _internal_set_dynamickey(from._internal_dynamickey());
  }
  if (from.ctalink().size() > 0) {
    _internal_set_ctalink(from._internal_ctalink());
  }
  if (from.media().size() > 0) {
    _internal_set_media(from._internal_media());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
}

void GetDynamicDataByKeyResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDynamicDataByKeyResponseRecord::CopyFrom(const GetDynamicDataByKeyResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDynamicDataByKeyResponseRecord::IsInitialized() const {
  return true;
}

void GetDynamicDataByKeyResponseRecord::InternalSwap(GetDynamicDataByKeyResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dynamickey_.Swap(&other->dynamickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ctalink_.Swap(&other->ctalink_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  media_.Swap(&other->media_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(campaignid_, other->campaignid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDynamicDataByKeyResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDynamicDataByKeyResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const GetDynamicDataByKeyResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
GetDynamicDataByKeyResponse::_Internal::status(const GetDynamicDataByKeyResponse* msg) {
  return *msg->status_;
}
void GetDynamicDataByKeyResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetDynamicDataByKeyResponse::clear_attribs() {
  attribs_.Clear();
}
GetDynamicDataByKeyResponse::GetDynamicDataByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
}
GetDynamicDataByKeyResponse::GetDynamicDataByKeyResponse(const GetDynamicDataByKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
}

void GetDynamicDataByKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

GetDynamicDataByKeyResponse::~GetDynamicDataByKeyResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDynamicDataByKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetDynamicDataByKeyResponse::ArenaDtor(void* object) {
  GetDynamicDataByKeyResponse* _this = reinterpret_cast< GetDynamicDataByKeyResponse* >(object);
  (void)_this;
}
void GetDynamicDataByKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDynamicDataByKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDynamicDataByKeyResponse& GetDynamicDataByKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDynamicDataByKeyResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDynamicDataByKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDynamicDataByKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDynamicDataByKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  return target;
}

size_t GetDynamicDataByKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDynamicDataByKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDynamicDataByKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDynamicDataByKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
    MergeFrom(*source);
  }
}

void GetDynamicDataByKeyResponse::MergeFrom(const GetDynamicDataByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetDynamicDataByKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDynamicDataByKeyResponse::CopyFrom(const GetDynamicDataByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDynamicDataByKeyResponse::IsInitialized() const {
  return true;
}

void GetDynamicDataByKeyResponse::InternalSwap(GetDynamicDataByKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDynamicDataByKeyResponse, count_)
      + sizeof(GetDynamicDataByKeyResponse::count_)
      - PROTOBUF_FIELD_OFFSET(GetDynamicDataByKeyResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDynamicDataByKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddDynamicDataRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddDynamicDataRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddDynamicDataRequest::_Internal::requestheaders(const AddDynamicDataRequest* msg) {
  return *msg->requestheaders_;
}
void AddDynamicDataRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AddDynamicDataRequest::AddDynamicDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
}
AddDynamicDataRequest::AddDynamicDataRequest(const AddDynamicDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dynamickey().empty()) {
    dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dynamickey(), 
      GetArena());
  }
  ctalink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ctalink().empty()) {
    ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ctalink(), 
      GetArena());
  }
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media().empty()) {
    media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  campaignid_ = from.campaignid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
}

void AddDynamicDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  dynamickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ctalink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&campaignid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(campaignid_));
}

AddDynamicDataRequest::~AddDynamicDataRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDynamicDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dynamickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ctalink_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AddDynamicDataRequest::ArenaDtor(void* object) {
  AddDynamicDataRequest* _this = reinterpret_cast< AddDynamicDataRequest* >(object);
  (void)_this;
}
void AddDynamicDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDynamicDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDynamicDataRequest& AddDynamicDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddDynamicDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamickey_.ClearToEmpty();
  ctalink_.ClearToEmpty();
  media_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  campaignid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDynamicDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dynamicKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dynamickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ctaLink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ctalink();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_media();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDynamicDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // string dynamicKey = 3;
  if (this->dynamickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dynamickey().data(), static_cast<int>(this->_internal_dynamickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dynamickey(), target);
  }

  // string ctaLink = 4;
  if (this->ctalink().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctalink().data(), static_cast<int>(this->_internal_ctalink().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ctalink(), target);
  }

  // string media = 5;
  if (this->media().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media().data(), static_cast<int>(this->_internal_media().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_media(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  return target;
}

size_t AddDynamicDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dynamicKey = 3;
  if (this->dynamickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dynamickey());
  }

  // string ctaLink = 4;
  if (this->ctalink().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctalink());
  }

  // string media = 5;
  if (this->media().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDynamicDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDynamicDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDynamicDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
    MergeFrom(*source);
  }
}

void AddDynamicDataRequest::MergeFrom(const AddDynamicDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dynamickey().size() > 0) {
    _internal_set_dynamickey(from._internal_dynamickey());
  }
  if (from.ctalink().size() > 0) {
    _internal_set_ctalink(from._internal_ctalink());
  }
  if (from.media().size() > 0) {
    _internal_set_media(from._internal_media());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
}

void AddDynamicDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDynamicDataRequest::CopyFrom(const AddDynamicDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDynamicDataRequest::IsInitialized() const {
  return true;
}

void AddDynamicDataRequest::InternalSwap(AddDynamicDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dynamickey_.Swap(&other->dynamickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ctalink_.Swap(&other->ctalink_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  media_.Swap(&other->media_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddDynamicDataRequest, campaignid_)
      + sizeof(AddDynamicDataRequest::campaignid_)
      - PROTOBUF_FIELD_OFFSET(AddDynamicDataRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDynamicDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddDynamicDataRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddDynamicDataRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddDynamicDataRequest::_Internal::requestheaders(const BulkAddDynamicDataRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddDynamicDataRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddDynamicDataRequest::BulkAddDynamicDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
}
BulkAddDynamicDataRequest::BulkAddDynamicDataRequest(const BulkAddDynamicDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
}

void BulkAddDynamicDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddDynamicDataRequest::~BulkAddDynamicDataRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddDynamicDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddDynamicDataRequest::ArenaDtor(void* object) {
  BulkAddDynamicDataRequest* _this = reinterpret_cast< BulkAddDynamicDataRequest* >(object);
  (void)_this;
}
void BulkAddDynamicDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddDynamicDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddDynamicDataRequest& BulkAddDynamicDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddDynamicDataRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddDynamicDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddDynamicDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddDynamicDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  return target;
}

size_t BulkAddDynamicDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddDynamicDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddDynamicDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddDynamicDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
    MergeFrom(*source);
  }
}

void BulkAddDynamicDataRequest::MergeFrom(const BulkAddDynamicDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddDynamicDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddDynamicDataRequest::CopyFrom(const BulkAddDynamicDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddDynamicDataRequest::IsInitialized() const {
  return true;
}

void BulkAddDynamicDataRequest::InternalSwap(BulkAddDynamicDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddDynamicDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddDynamicDataResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddDynamicDataResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddDynamicDataResponse::_Internal::status(const AddDynamicDataResponse* msg) {
  return *msg->status_;
}
void AddDynamicDataResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddDynamicDataResponse::clear_attribs() {
  attribs_.Clear();
}
AddDynamicDataResponse::AddDynamicDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
}
AddDynamicDataResponse::AddDynamicDataResponse(const AddDynamicDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
}

void AddDynamicDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddDynamicDataResponse::~AddDynamicDataResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDynamicDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddDynamicDataResponse::ArenaDtor(void* object) {
  AddDynamicDataResponse* _this = reinterpret_cast< AddDynamicDataResponse* >(object);
  (void)_this;
}
void AddDynamicDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDynamicDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDynamicDataResponse& AddDynamicDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddDynamicDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDynamicDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDynamicDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  return target;
}

size_t AddDynamicDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDynamicDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDynamicDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDynamicDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
    MergeFrom(*source);
  }
}

void AddDynamicDataResponse::MergeFrom(const AddDynamicDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddDynamicDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDynamicDataResponse::CopyFrom(const AddDynamicDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDynamicDataResponse::IsInitialized() const {
  return true;
}

void AddDynamicDataResponse::InternalSwap(AddDynamicDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddDynamicDataResponse, count_)
      + sizeof(AddDynamicDataResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddDynamicDataResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDynamicDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddDynamicDataResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddDynamicDataResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddDynamicDataResponse::_Internal::status(const BulkAddDynamicDataResponse* msg) {
  return *msg->status_;
}
void BulkAddDynamicDataResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddDynamicDataResponse::BulkAddDynamicDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
}
BulkAddDynamicDataResponse::BulkAddDynamicDataResponse(const BulkAddDynamicDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
}

void BulkAddDynamicDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddDynamicDataResponse::~BulkAddDynamicDataResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddDynamicDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddDynamicDataResponse::ArenaDtor(void* object) {
  BulkAddDynamicDataResponse* _this = reinterpret_cast< BulkAddDynamicDataResponse* >(object);
  (void)_this;
}
void BulkAddDynamicDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddDynamicDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddDynamicDataResponse& BulkAddDynamicDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddDynamicDataResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddDynamicDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddDynamicDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddDynamicDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  return target;
}

size_t BulkAddDynamicDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddDynamicDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddDynamicDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddDynamicDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
    MergeFrom(*source);
  }
}

void BulkAddDynamicDataResponse::MergeFrom(const BulkAddDynamicDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddDynamicDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddDynamicDataResponse::CopyFrom(const BulkAddDynamicDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddDynamicDataResponse::IsInitialized() const {
  return true;
}

void BulkAddDynamicDataResponse::InternalSwap(BulkAddDynamicDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddDynamicDataResponse, count_)
      + sizeof(BulkAddDynamicDataResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddDynamicDataResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddDynamicDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddTargetUserRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddTargetUserRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& user(const AddTargetUserRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddTargetUserRequest::_Internal::requestheaders(const AddTargetUserRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
AddTargetUserRequest::_Internal::user(const AddTargetUserRequest* msg) {
  return *msg->user_;
}
void AddTargetUserRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void AddTargetUserRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
AddTargetUserRequest::AddTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
}
AddTargetUserRequest::AddTargetUserRequest(const AddTargetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::farm::nurture::core::contracts::common::ActorID(*from.user_);
  } else {
    user_ = nullptr;
  }
  campaignid_ = from.campaignid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
}

void AddTargetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&campaignid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(campaignid_));
}

AddTargetUserRequest::~AddTargetUserRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddTargetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete user_;
}

void AddTargetUserRequest::ArenaDtor(void* object) {
  AddTargetUserRequest* _this = reinterpret_cast< AddTargetUserRequest* >(object);
  (void)_this;
}
void AddTargetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTargetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTargetUserRequest& AddTargetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddTargetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  campaignid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTargetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTargetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  return target;
}

size_t AddTargetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTargetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTargetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTargetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
    MergeFrom(*source);
  }
}

void AddTargetUserRequest::MergeFrom(const AddTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_user());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
}

void AddTargetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTargetUserRequest::CopyFrom(const AddTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTargetUserRequest::IsInitialized() const {
  return true;
}

void AddTargetUserRequest::InternalSwap(AddTargetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTargetUserRequest, campaignid_)
      + sizeof(AddTargetUserRequest::campaignid_)
      - PROTOBUF_FIELD_OFFSET(AddTargetUserRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTargetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestTargetUserRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const TestTargetUserRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& user(const TestTargetUserRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
TestTargetUserRequest::_Internal::requestheaders(const TestTargetUserRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
TestTargetUserRequest::_Internal::user(const TestTargetUserRequest* msg) {
  return *msg->user_;
}
void TestTargetUserRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void TestTargetUserRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
TestTargetUserRequest::TestTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
}
TestTargetUserRequest::TestTargetUserRequest(const TestTargetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::farm::nurture::core::contracts::common::ActorID(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
}

void TestTargetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(user_));
}

TestTargetUserRequest::~TestTargetUserRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestTargetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete user_;
}

void TestTargetUserRequest::ArenaDtor(void* object) {
  TestTargetUserRequest* _this = reinterpret_cast< TestTargetUserRequest* >(object);
  (void)_this;
}
void TestTargetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestTargetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestTargetUserRequest& TestTargetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestTargetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestTargetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestTargetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  return target;
}

size_t TestTargetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestTargetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestTargetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestTargetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
    MergeFrom(*source);
  }
}

void TestTargetUserRequest::MergeFrom(const TestTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_user());
  }
}

void TestTargetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestTargetUserRequest::CopyFrom(const TestTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestTargetUserRequest::IsInitialized() const {
  return true;
}

void TestTargetUserRequest::InternalSwap(TestTargetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTargetUserRequest, user_)
      + sizeof(TestTargetUserRequest::user_)
      - PROTOBUF_FIELD_OFFSET(TestTargetUserRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestTargetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddTargetUserRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddTargetUserRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddTargetUserRequest::_Internal::requestheaders(const BulkAddTargetUserRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddTargetUserRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddTargetUserRequest::BulkAddTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
}
BulkAddTargetUserRequest::BulkAddTargetUserRequest(const BulkAddTargetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
}

void BulkAddTargetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddTargetUserRequest::~BulkAddTargetUserRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddTargetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddTargetUserRequest::ArenaDtor(void* object) {
  BulkAddTargetUserRequest* _this = reinterpret_cast< BulkAddTargetUserRequest* >(object);
  (void)_this;
}
void BulkAddTargetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddTargetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddTargetUserRequest& BulkAddTargetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddTargetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddTargetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddTargetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  return target;
}

size_t BulkAddTargetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddTargetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddTargetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddTargetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
    MergeFrom(*source);
  }
}

void BulkAddTargetUserRequest::MergeFrom(const BulkAddTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddTargetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddTargetUserRequest::CopyFrom(const BulkAddTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddTargetUserRequest::IsInitialized() const {
  return true;
}

void BulkAddTargetUserRequest::InternalSwap(BulkAddTargetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddTargetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddTargetUserResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddTargetUserResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddTargetUserResponse::_Internal::status(const AddTargetUserResponse* msg) {
  return *msg->status_;
}
void AddTargetUserResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddTargetUserResponse::clear_attribs() {
  attribs_.Clear();
}
AddTargetUserResponse::AddTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
}
AddTargetUserResponse::AddTargetUserResponse(const AddTargetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
}

void AddTargetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddTargetUserResponse::~AddTargetUserResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddTargetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddTargetUserResponse::ArenaDtor(void* object) {
  AddTargetUserResponse* _this = reinterpret_cast< AddTargetUserResponse* >(object);
  (void)_this;
}
void AddTargetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTargetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTargetUserResponse& AddTargetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddTargetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTargetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTargetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  return target;
}

size_t AddTargetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTargetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTargetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTargetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
    MergeFrom(*source);
  }
}

void AddTargetUserResponse::MergeFrom(const AddTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddTargetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTargetUserResponse::CopyFrom(const AddTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTargetUserResponse::IsInitialized() const {
  return true;
}

void AddTargetUserResponse::InternalSwap(AddTargetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTargetUserResponse, count_)
      + sizeof(AddTargetUserResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddTargetUserResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTargetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddTargetUserResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddTargetUserResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddTargetUserResponse::_Internal::status(const BulkAddTargetUserResponse* msg) {
  return *msg->status_;
}
void BulkAddTargetUserResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddTargetUserResponse::BulkAddTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
}
BulkAddTargetUserResponse::BulkAddTargetUserResponse(const BulkAddTargetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
}

void BulkAddTargetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddTargetUserResponse::~BulkAddTargetUserResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddTargetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddTargetUserResponse::ArenaDtor(void* object) {
  BulkAddTargetUserResponse* _this = reinterpret_cast< BulkAddTargetUserResponse* >(object);
  (void)_this;
}
void BulkAddTargetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddTargetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddTargetUserResponse& BulkAddTargetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddTargetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddTargetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddTargetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  return target;
}

size_t BulkAddTargetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddTargetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddTargetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddTargetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
    MergeFrom(*source);
  }
}

void BulkAddTargetUserResponse::MergeFrom(const BulkAddTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddTargetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddTargetUserResponse::CopyFrom(const BulkAddTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddTargetUserResponse::IsInitialized() const {
  return true;
}

void BulkAddTargetUserResponse::InternalSwap(BulkAddTargetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddTargetUserResponse, count_)
      + sizeof(BulkAddTargetUserResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddTargetUserResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddTargetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddInactionTargetUserRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AddInactionTargetUserRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& user(const AddInactionTargetUserRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AddInactionTargetUserRequest::_Internal::requestheaders(const AddInactionTargetUserRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::common::ActorID&
AddInactionTargetUserRequest::_Internal::user(const AddInactionTargetUserRequest* msg) {
  return *msg->user_;
}
void AddInactionTargetUserRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
void AddInactionTargetUserRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
AddInactionTargetUserRequest::AddInactionTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
}
AddInactionTargetUserRequest::AddInactionTargetUserRequest(const AddInactionTargetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::farm::nurture::core::contracts::common::ActorID(*from.user_);
  } else {
    user_ = nullptr;
  }
  campaignid_ = from.campaignid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
}

void AddInactionTargetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&campaignid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(campaignid_));
}

AddInactionTargetUserRequest::~AddInactionTargetUserRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddInactionTargetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete user_;
}

void AddInactionTargetUserRequest::ArenaDtor(void* object) {
  AddInactionTargetUserRequest* _this = reinterpret_cast< AddInactionTargetUserRequest* >(object);
  (void)_this;
}
void AddInactionTargetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddInactionTargetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddInactionTargetUserRequest& AddInactionTargetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddInactionTargetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  campaignid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddInactionTargetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddInactionTargetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  return target;
}

size_t AddInactionTargetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddInactionTargetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddInactionTargetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddInactionTargetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
    MergeFrom(*source);
  }
}

void AddInactionTargetUserRequest::MergeFrom(const AddInactionTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_user());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
}

void AddInactionTargetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddInactionTargetUserRequest::CopyFrom(const AddInactionTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddInactionTargetUserRequest::IsInitialized() const {
  return true;
}

void AddInactionTargetUserRequest::InternalSwap(AddInactionTargetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddInactionTargetUserRequest, campaignid_)
      + sizeof(AddInactionTargetUserRequest::campaignid_)
      - PROTOBUF_FIELD_OFFSET(AddInactionTargetUserRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddInactionTargetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddInactionTargetUserRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const BulkAddInactionTargetUserRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
BulkAddInactionTargetUserRequest::_Internal::requestheaders(const BulkAddInactionTargetUserRequest* msg) {
  return *msg->requestheaders_;
}
void BulkAddInactionTargetUserRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
BulkAddInactionTargetUserRequest::BulkAddInactionTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
}
BulkAddInactionTargetUserRequest::BulkAddInactionTargetUserRequest(const BulkAddInactionTargetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
}

void BulkAddInactionTargetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  requestheaders_ = nullptr;
}

BulkAddInactionTargetUserRequest::~BulkAddInactionTargetUserRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddInactionTargetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void BulkAddInactionTargetUserRequest::ArenaDtor(void* object) {
  BulkAddInactionTargetUserRequest* _this = reinterpret_cast< BulkAddInactionTargetUserRequest* >(object);
  (void)_this;
}
void BulkAddInactionTargetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddInactionTargetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddInactionTargetUserRequest& BulkAddInactionTargetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddInactionTargetUserRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddInactionTargetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddInactionTargetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddInactionTargetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  return target;
}

size_t BulkAddInactionTargetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddInactionTargetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddInactionTargetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddInactionTargetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
    MergeFrom(*source);
  }
}

void BulkAddInactionTargetUserRequest::MergeFrom(const BulkAddInactionTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void BulkAddInactionTargetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddInactionTargetUserRequest::CopyFrom(const BulkAddInactionTargetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddInactionTargetUserRequest::IsInitialized() const {
  return true;
}

void BulkAddInactionTargetUserRequest::InternalSwap(BulkAddInactionTargetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddInactionTargetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddInactionTargetUserResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AddInactionTargetUserResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AddInactionTargetUserResponse::_Internal::status(const AddInactionTargetUserResponse* msg) {
  return *msg->status_;
}
void AddInactionTargetUserResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AddInactionTargetUserResponse::clear_attribs() {
  attribs_.Clear();
}
AddInactionTargetUserResponse::AddInactionTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
}
AddInactionTargetUserResponse::AddInactionTargetUserResponse(const AddInactionTargetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordid().empty()) {
    recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recordid(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
}

void AddInactionTargetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  recordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AddInactionTargetUserResponse::~AddInactionTargetUserResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddInactionTargetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AddInactionTargetUserResponse::ArenaDtor(void* object) {
  AddInactionTargetUserResponse* _this = reinterpret_cast< AddInactionTargetUserResponse* >(object);
  (void)_this;
}
void AddInactionTargetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddInactionTargetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddInactionTargetUserResponse& AddInactionTargetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddInactionTargetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  recordid_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddInactionTargetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddInactionTargetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordid().data(), static_cast<int>(this->_internal_recordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recordid(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  return target;
}

size_t AddInactionTargetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string recordId = 3;
  if (this->recordid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordid());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddInactionTargetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddInactionTargetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddInactionTargetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
    MergeFrom(*source);
  }
}

void AddInactionTargetUserResponse::MergeFrom(const AddInactionTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.recordid().size() > 0) {
    _internal_set_recordid(from._internal_recordid());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AddInactionTargetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddInactionTargetUserResponse::CopyFrom(const AddInactionTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddInactionTargetUserResponse::IsInitialized() const {
  return true;
}

void AddInactionTargetUserResponse::InternalSwap(AddInactionTargetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  recordid_.Swap(&other->recordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddInactionTargetUserResponse, count_)
      + sizeof(AddInactionTargetUserResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AddInactionTargetUserResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddInactionTargetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkAddInactionTargetUserResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const BulkAddInactionTargetUserResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
BulkAddInactionTargetUserResponse::_Internal::status(const BulkAddInactionTargetUserResponse* msg) {
  return *msg->status_;
}
void BulkAddInactionTargetUserResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BulkAddInactionTargetUserResponse::BulkAddInactionTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
}
BulkAddInactionTargetUserResponse::BulkAddInactionTargetUserResponse(const BulkAddInactionTargetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
}

void BulkAddInactionTargetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

BulkAddInactionTargetUserResponse::~BulkAddInactionTargetUserResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkAddInactionTargetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BulkAddInactionTargetUserResponse::ArenaDtor(void* object) {
  BulkAddInactionTargetUserResponse* _this = reinterpret_cast< BulkAddInactionTargetUserResponse* >(object);
  (void)_this;
}
void BulkAddInactionTargetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkAddInactionTargetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkAddInactionTargetUserResponse& BulkAddInactionTargetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkAddInactionTargetUserResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BulkAddInactionTargetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkAddInactionTargetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkAddInactionTargetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  return target;
}

size_t BulkAddInactionTargetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkAddInactionTargetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkAddInactionTargetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkAddInactionTargetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
    MergeFrom(*source);
  }
}

void BulkAddInactionTargetUserResponse::MergeFrom(const BulkAddInactionTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void BulkAddInactionTargetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkAddInactionTargetUserResponse::CopyFrom(const BulkAddInactionTargetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkAddInactionTargetUserResponse::IsInitialized() const {
  return true;
}

void BulkAddInactionTargetUserResponse::InternalSwap(BulkAddInactionTargetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkAddInactionTargetUserResponse, count_)
      + sizeof(BulkAddInactionTargetUserResponse::count_)
      - PROTOBUF_FIELD_OFFSET(BulkAddInactionTargetUserResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkAddInactionTargetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindInactionTargetUserByCampaignIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FindInactionTargetUserByCampaignIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FindInactionTargetUserByCampaignIdRequest::_Internal::requestheaders(const FindInactionTargetUserByCampaignIdRequest* msg) {
  return *msg->requestheaders_;
}
void FindInactionTargetUserByCampaignIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FindInactionTargetUserByCampaignIdRequest::FindInactionTargetUserByCampaignIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
}
FindInactionTargetUserByCampaignIdRequest::FindInactionTargetUserByCampaignIdRequest(const FindInactionTargetUserByCampaignIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&campaignid_, &from.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
    reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
}

void FindInactionTargetUserByCampaignIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(isstaleallowed_));
}

FindInactionTargetUserByCampaignIdRequest::~FindInactionTargetUserByCampaignIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindInactionTargetUserByCampaignIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
}

void FindInactionTargetUserByCampaignIdRequest::ArenaDtor(void* object) {
  FindInactionTargetUserByCampaignIdRequest* _this = reinterpret_cast< FindInactionTargetUserByCampaignIdRequest* >(object);
  (void)_this;
}
void FindInactionTargetUserByCampaignIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindInactionTargetUserByCampaignIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindInactionTargetUserByCampaignIdRequest& FindInactionTargetUserByCampaignIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindInactionTargetUserByCampaignIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindInactionTargetUserByCampaignIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&campaignid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isstaleallowed_) -
      reinterpret_cast<char*>(&campaignid_)) + sizeof(isstaleallowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindInactionTargetUserByCampaignIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isStaleAllowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isstaleallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindInactionTargetUserByCampaignIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstaleallowed(), target);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_campaignid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  return target;
}

size_t FindInactionTargetUserByCampaignIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 3;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // bool isStaleAllowed = 2;
  if (this->isstaleallowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindInactionTargetUserByCampaignIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindInactionTargetUserByCampaignIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindInactionTargetUserByCampaignIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
    MergeFrom(*source);
  }
}

void FindInactionTargetUserByCampaignIdRequest::MergeFrom(const FindInactionTargetUserByCampaignIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.isstaleallowed() != 0) {
    _internal_set_isstaleallowed(from._internal_isstaleallowed());
  }
}

void FindInactionTargetUserByCampaignIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindInactionTargetUserByCampaignIdRequest::CopyFrom(const FindInactionTargetUserByCampaignIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindInactionTargetUserByCampaignIdRequest::IsInitialized() const {
  return true;
}

void FindInactionTargetUserByCampaignIdRequest::InternalSwap(FindInactionTargetUserByCampaignIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdRequest, isstaleallowed_)
      + sizeof(FindInactionTargetUserByCampaignIdRequest::isstaleallowed_)
      - PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindInactionTargetUserByCampaignIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindInactionTargetUserByCampaignIdResponseRecord::_Internal {
 public:
};

FindInactionTargetUserByCampaignIdResponseRecord::FindInactionTargetUserByCampaignIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
}
FindInactionTargetUserByCampaignIdResponseRecord::FindInactionTargetUserByCampaignIdResponseRecord(const FindInactionTargetUserByCampaignIdResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  usertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usertype().empty()) {
    usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usertype(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
}

void FindInactionTargetUserByCampaignIdResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  usertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(userid_));
}

FindInactionTargetUserByCampaignIdResponseRecord::~FindInactionTargetUserByCampaignIdResponseRecord() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindInactionTargetUserByCampaignIdResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  usertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindInactionTargetUserByCampaignIdResponseRecord::ArenaDtor(void* object) {
  FindInactionTargetUserByCampaignIdResponseRecord* _this = reinterpret_cast< FindInactionTargetUserByCampaignIdResponseRecord* >(object);
  (void)_this;
}
void FindInactionTargetUserByCampaignIdResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindInactionTargetUserByCampaignIdResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindInactionTargetUserByCampaignIdResponseRecord& FindInactionTargetUserByCampaignIdResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindInactionTargetUserByCampaignIdResponseRecord_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindInactionTargetUserByCampaignIdResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usertype_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindInactionTargetUserByCampaignIdResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 userId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_usertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindInactionTargetUserByCampaignIdResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // int64 userId = 3;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_userid(), target);
  }

  // string userType = 4;
  if (this->usertype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usertype().data(), static_cast<int>(this->_internal_usertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  return target;
}

size_t FindInactionTargetUserByCampaignIdResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userType = 4;
  if (this->usertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usertype());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  // int64 userId = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindInactionTargetUserByCampaignIdResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FindInactionTargetUserByCampaignIdResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindInactionTargetUserByCampaignIdResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
    MergeFrom(*source);
  }
}

void FindInactionTargetUserByCampaignIdResponseRecord::MergeFrom(const FindInactionTargetUserByCampaignIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usertype().size() > 0) {
    _internal_set_usertype(from._internal_usertype());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void FindInactionTargetUserByCampaignIdResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindInactionTargetUserByCampaignIdResponseRecord::CopyFrom(const FindInactionTargetUserByCampaignIdResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindInactionTargetUserByCampaignIdResponseRecord::IsInitialized() const {
  return true;
}

void FindInactionTargetUserByCampaignIdResponseRecord::InternalSwap(FindInactionTargetUserByCampaignIdResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usertype_.Swap(&other->usertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdResponseRecord, userid_)
      + sizeof(FindInactionTargetUserByCampaignIdResponseRecord::userid_)
      - PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdResponseRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindInactionTargetUserByCampaignIdResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindInactionTargetUserByCampaignIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FindInactionTargetUserByCampaignIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FindInactionTargetUserByCampaignIdResponse::_Internal::status(const FindInactionTargetUserByCampaignIdResponse* msg) {
  return *msg->status_;
}
void FindInactionTargetUserByCampaignIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FindInactionTargetUserByCampaignIdResponse::clear_attribs() {
  attribs_.Clear();
}
FindInactionTargetUserByCampaignIdResponse::FindInactionTargetUserByCampaignIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
}
FindInactionTargetUserByCampaignIdResponse::FindInactionTargetUserByCampaignIdResponse(const FindInactionTargetUserByCampaignIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
}

void FindInactionTargetUserByCampaignIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FindInactionTargetUserByCampaignIdResponse::~FindInactionTargetUserByCampaignIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindInactionTargetUserByCampaignIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FindInactionTargetUserByCampaignIdResponse::ArenaDtor(void* object) {
  FindInactionTargetUserByCampaignIdResponse* _this = reinterpret_cast< FindInactionTargetUserByCampaignIdResponse* >(object);
  (void)_this;
}
void FindInactionTargetUserByCampaignIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindInactionTargetUserByCampaignIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindInactionTargetUserByCampaignIdResponse& FindInactionTargetUserByCampaignIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindInactionTargetUserByCampaignIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FindInactionTargetUserByCampaignIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindInactionTargetUserByCampaignIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindInactionTargetUserByCampaignIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  return target;
}

size_t FindInactionTargetUserByCampaignIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindInactionTargetUserByCampaignIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindInactionTargetUserByCampaignIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindInactionTargetUserByCampaignIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
    MergeFrom(*source);
  }
}

void FindInactionTargetUserByCampaignIdResponse::MergeFrom(const FindInactionTargetUserByCampaignIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FindInactionTargetUserByCampaignIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindInactionTargetUserByCampaignIdResponse::CopyFrom(const FindInactionTargetUserByCampaignIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindInactionTargetUserByCampaignIdResponse::IsInitialized() const {
  return true;
}

void FindInactionTargetUserByCampaignIdResponse::InternalSwap(FindInactionTargetUserByCampaignIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdResponse, count_)
      + sizeof(FindInactionTargetUserByCampaignIdResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FindInactionTargetUserByCampaignIdResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindInactionTargetUserByCampaignIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AthenaQueryRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const AthenaQueryRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
AthenaQueryRequest::_Internal::requestheaders(const AthenaQueryRequest* msg) {
  return *msg->requestheaders_;
}
void AthenaQueryRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
AthenaQueryRequest::AthenaQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
}
AthenaQueryRequest::AthenaQueryRequest(const AthenaQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  athenaquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_athenaquery().empty()) {
    athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_athenaquery(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
}

void AthenaQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  athenaquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestheaders_ = nullptr;
}

AthenaQueryRequest::~AthenaQueryRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AthenaQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  athenaquery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void AthenaQueryRequest::ArenaDtor(void* object) {
  AthenaQueryRequest* _this = reinterpret_cast< AthenaQueryRequest* >(object);
  (void)_this;
}
void AthenaQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AthenaQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AthenaQueryRequest& AthenaQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AthenaQueryRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AthenaQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  athenaquery_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AthenaQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string athenaQuery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_athenaquery();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AthenaQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string athenaQuery = 2;
  if (this->athenaquery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_athenaquery().data(), static_cast<int>(this->_internal_athenaquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_athenaquery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  return target;
}

size_t AthenaQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string athenaQuery = 2;
  if (this->athenaquery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_athenaquery());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AthenaQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AthenaQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AthenaQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
    MergeFrom(*source);
  }
}

void AthenaQueryRequest::MergeFrom(const AthenaQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.athenaquery().size() > 0) {
    _internal_set_athenaquery(from._internal_athenaquery());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
}

void AthenaQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AthenaQueryRequest::CopyFrom(const AthenaQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AthenaQueryRequest::IsInitialized() const {
  return true;
}

void AthenaQueryRequest::InternalSwap(AthenaQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  athenaquery_.Swap(&other->athenaquery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestheaders_, other->requestheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AthenaQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AthenaQueryResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const AthenaQueryResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
AthenaQueryResponse::_Internal::status(const AthenaQueryResponse* msg) {
  return *msg->status_;
}
void AthenaQueryResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
AthenaQueryResponse::AthenaQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
}
AthenaQueryResponse::AthenaQueryResponse(const AthenaQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
}

void AthenaQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

AthenaQueryResponse::~AthenaQueryResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AthenaQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void AthenaQueryResponse::ArenaDtor(void* object) {
  AthenaQueryResponse* _this = reinterpret_cast< AthenaQueryResponse* >(object);
  (void)_this;
}
void AthenaQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AthenaQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AthenaQueryResponse& AthenaQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AthenaQueryResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AthenaQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AthenaQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AthenaQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  return target;
}

size_t AthenaQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AthenaQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AthenaQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AthenaQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
    MergeFrom(*source);
  }
}

void AthenaQueryResponse::MergeFrom(const AthenaQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AthenaQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AthenaQueryResponse::CopyFrom(const AthenaQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AthenaQueryResponse::IsInitialized() const {
  return true;
}

void AthenaQueryResponse::InternalSwap(AthenaQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AthenaQueryResponse, count_)
      + sizeof(AthenaQueryResponse::count_)
      - PROTOBUF_FIELD_OFFSET(AthenaQueryResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AthenaQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestNewCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const TestNewCampaignRequest* msg);
  static const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest& testcampaignrequest(const TestNewCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
TestNewCampaignRequest::_Internal::requestheaders(const TestNewCampaignRequest* msg) {
  return *msg->requestheaders_;
}
const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest&
TestNewCampaignRequest::_Internal::testcampaignrequest(const TestNewCampaignRequest* msg) {
  return *msg->testcampaignrequest_;
}
void TestNewCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
TestNewCampaignRequest::TestNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  testcampaigntemplaterequests_(arena),
  testtargetuserrequests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
}
TestNewCampaignRequest::TestNewCampaignRequest(const TestNewCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      testcampaigntemplaterequests_(from.testcampaigntemplaterequests_),
      testtargetuserrequests_(from.testtargetuserrequests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  if (from._internal_has_testcampaignrequest()) {
    testcampaignrequest_ = new ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest(*from.testcampaignrequest_);
  } else {
    testcampaignrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
}

void TestNewCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&testcampaignrequest_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(testcampaignrequest_));
}

TestNewCampaignRequest::~TestNewCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestNewCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete requestheaders_;
  if (this != internal_default_instance()) delete testcampaignrequest_;
}

void TestNewCampaignRequest::ArenaDtor(void* object) {
  TestNewCampaignRequest* _this = reinterpret_cast< TestNewCampaignRequest* >(object);
  (void)_this;
}
void TestNewCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNewCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNewCampaignRequest& TestNewCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNewCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestNewCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testcampaigntemplaterequests_.Clear();
  testtargetuserrequests_.Clear();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  if (GetArena() == nullptr && testcampaignrequest_ != nullptr) {
    delete testcampaignrequest_;
  }
  testcampaignrequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNewCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.TestCampaignRequest testCampaignRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_testcampaignrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest testCampaignTemplateRequests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testcampaigntemplaterequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.TestTargetUserRequest testTargetUserRequests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testtargetuserrequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNewCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.TestCampaignRequest testCampaignRequest = 3;
  if (this->has_testcampaignrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::testcampaignrequest(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest testCampaignTemplateRequests = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testcampaigntemplaterequests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_testcampaigntemplaterequests(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.TestTargetUserRequest testTargetUserRequests = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testtargetuserrequests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_testtargetuserrequests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  return target;
}

size_t TestNewCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest testCampaignTemplateRequests = 4;
  total_size += 1UL * this->_internal_testcampaigntemplaterequests_size();
  for (const auto& msg : this->testcampaigntemplaterequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.TestTargetUserRequest testTargetUserRequests = 5;
  total_size += 1UL * this->_internal_testtargetuserrequests_size();
  for (const auto& msg : this->testtargetuserrequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.CampaignService.TestCampaignRequest testCampaignRequest = 3;
  if (this->has_testcampaignrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testcampaignrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNewCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNewCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNewCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
    MergeFrom(*source);
  }
}

void TestNewCampaignRequest::MergeFrom(const TestNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testcampaigntemplaterequests_.MergeFrom(from.testcampaigntemplaterequests_);
  testtargetuserrequests_.MergeFrom(from.testtargetuserrequests_);
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.has_testcampaignrequest()) {
    _internal_mutable_testcampaignrequest()->::farm::nurture::core::contracts::CampaignService::TestCampaignRequest::MergeFrom(from._internal_testcampaignrequest());
  }
}

void TestNewCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNewCampaignRequest::CopyFrom(const TestNewCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNewCampaignRequest::IsInitialized() const {
  return true;
}

void TestNewCampaignRequest::InternalSwap(TestNewCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  testcampaigntemplaterequests_.InternalSwap(&other->testcampaigntemplaterequests_);
  testtargetuserrequests_.InternalSwap(&other->testtargetuserrequests_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNewCampaignRequest, testcampaignrequest_)
      + sizeof(TestNewCampaignRequest::testcampaignrequest_)
      - PROTOBUF_FIELD_OFFSET(TestNewCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNewCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestNewCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const TestNewCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
TestNewCampaignResponse::_Internal::status(const TestNewCampaignResponse* msg) {
  return *msg->status_;
}
void TestNewCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
TestNewCampaignResponse::TestNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
}
TestNewCampaignResponse::TestNewCampaignResponse(const TestNewCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
}

void TestNewCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  status_ = nullptr;
}

TestNewCampaignResponse::~TestNewCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestNewCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void TestNewCampaignResponse::ArenaDtor(void* object) {
  TestNewCampaignResponse* _this = reinterpret_cast< TestNewCampaignResponse* >(object);
  (void)_this;
}
void TestNewCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNewCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNewCampaignResponse& TestNewCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNewCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestNewCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNewCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNewCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  return target;
}

size_t TestNewCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNewCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNewCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNewCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
    MergeFrom(*source);
  }
}

void TestNewCampaignResponse::MergeFrom(const TestNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
}

void TestNewCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNewCampaignResponse::CopyFrom(const TestNewCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNewCampaignResponse::IsInitialized() const {
  return true;
}

void TestNewCampaignResponse::InternalSwap(TestNewCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNewCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiRequests::_Internal {
 public:
};

MultiRequests::MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.MultiRequests)
}
MultiRequests::MultiRequests(const MultiRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ontxn_ = from.ontxn_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.MultiRequests)
}

void MultiRequests::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto.base);
  ontxn_ = false;
}

MultiRequests::~MultiRequests() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.MultiRequests)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiRequests::ArenaDtor(void* object) {
  MultiRequests* _this = reinterpret_cast< MultiRequests* >(object);
  (void)_this;
}
void MultiRequests::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiRequests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRequests& MultiRequests::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRequests_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  ontxn_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiRequests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool onTxn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ontxn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRequests::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ontxn(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.Request request = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.MultiRequests)
  return target;
}

size_t MultiRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.Request request = 2;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool onTxn = 1;
  if (this->ontxn() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRequests::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRequests* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRequests>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.MultiRequests)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.MultiRequests)
    MergeFrom(*source);
  }
}

void MultiRequests::MergeFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  if (from.ontxn() != 0) {
    _internal_set_ontxn(from._internal_ontxn());
  }
}

void MultiRequests::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRequests::CopyFrom(const MultiRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.MultiRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRequests::IsInitialized() const {
  return true;
}

void MultiRequests::InternalSwap(MultiRequests* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_.InternalSwap(&other->request_);
  swap(ontxn_, other->ontxn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRequests::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& reqaddcampaign(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& reqaddcampaignbulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& requpdatecampaign(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& requpdatecampaignbulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& reqaddcampaigntemplate(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& reqaddcampaigntemplatebulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& reqaddnewcampaign(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& reqaddnewcampaignbulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& reqgetuserlist(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& reqfindcampaignbyid(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& reqfindcampaigntemplatebyid(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& reqaddtargetuser(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& reqaddtargetuserbulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& reqaddinactiontargetuser(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& reqaddinactiontargetuserbulk(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& reqfindinactiontargetuserbycampaignid(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest& reqgetdynamicdatabykey(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& reqadddynamicdata(const Request* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest& reqadddynamicdatabulk(const Request* msg);
};

const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest&
Request::_Internal::reqaddcampaign(const Request* msg) {
  return *msg->ARequest_.reqaddcampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest&
Request::_Internal::reqaddcampaignbulk(const Request* msg) {
  return *msg->ARequest_.reqaddcampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest&
Request::_Internal::requpdatecampaign(const Request* msg) {
  return *msg->ARequest_.requpdatecampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest&
Request::_Internal::requpdatecampaignbulk(const Request* msg) {
  return *msg->ARequest_.requpdatecampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest&
Request::_Internal::reqaddcampaigntemplate(const Request* msg) {
  return *msg->ARequest_.reqaddcampaigntemplate_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest&
Request::_Internal::reqaddcampaigntemplatebulk(const Request* msg) {
  return *msg->ARequest_.reqaddcampaigntemplatebulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest&
Request::_Internal::reqaddnewcampaign(const Request* msg) {
  return *msg->ARequest_.reqaddnewcampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest&
Request::_Internal::reqaddnewcampaignbulk(const Request* msg) {
  return *msg->ARequest_.reqaddnewcampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::CampaignRequest&
Request::_Internal::reqgetuserlist(const Request* msg) {
  return *msg->ARequest_.reqgetuserlist_;
}
const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest&
Request::_Internal::reqfindcampaignbyid(const Request* msg) {
  return *msg->ARequest_.reqfindcampaignbyid_;
}
const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest&
Request::_Internal::reqfindcampaigntemplatebyid(const Request* msg) {
  return *msg->ARequest_.reqfindcampaigntemplatebyid_;
}
const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest&
Request::_Internal::reqaddtargetuser(const Request* msg) {
  return *msg->ARequest_.reqaddtargetuser_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest&
Request::_Internal::reqaddtargetuserbulk(const Request* msg) {
  return *msg->ARequest_.reqaddtargetuserbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest&
Request::_Internal::reqaddinactiontargetuser(const Request* msg) {
  return *msg->ARequest_.reqaddinactiontargetuser_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest&
Request::_Internal::reqaddinactiontargetuserbulk(const Request* msg) {
  return *msg->ARequest_.reqaddinactiontargetuserbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest&
Request::_Internal::reqfindinactiontargetuserbycampaignid(const Request* msg) {
  return *msg->ARequest_.reqfindinactiontargetuserbycampaignid_;
}
const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest&
Request::_Internal::reqgetdynamicdatabykey(const Request* msg) {
  return *msg->ARequest_.reqgetdynamicdatabykey_;
}
const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest&
Request::_Internal::reqadddynamicdata(const Request* msg) {
  return *msg->ARequest_.reqadddynamicdata_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest&
Request::_Internal::reqadddynamicdatabulk(const Request* msg) {
  return *msg->ARequest_.reqadddynamicdatabulk_;
}
void Request::set_allocated_reqaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* reqaddcampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddcampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddcampaign);
    if (message_arena != submessage_arena) {
      reqaddcampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddcampaign, submessage_arena);
    }
    set_has_reqaddcampaign();
    ARequest_.reqaddcampaign_ = reqaddcampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
}
void Request::set_allocated_reqaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* reqaddcampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddcampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddcampaignbulk);
    if (message_arena != submessage_arena) {
      reqaddcampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddcampaignbulk, submessage_arena);
    }
    set_has_reqaddcampaignbulk();
    ARequest_.reqaddcampaignbulk_ = reqaddcampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
}
void Request::set_allocated_requpdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* requpdatecampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatecampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatecampaign);
    if (message_arena != submessage_arena) {
      requpdatecampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatecampaign, submessage_arena);
    }
    set_has_requpdatecampaign();
    ARequest_.requpdatecampaign_ = requpdatecampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
}
void Request::set_allocated_requpdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* requpdatecampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (requpdatecampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requpdatecampaignbulk);
    if (message_arena != submessage_arena) {
      requpdatecampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requpdatecampaignbulk, submessage_arena);
    }
    set_has_requpdatecampaignbulk();
    ARequest_.requpdatecampaignbulk_ = requpdatecampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
}
void Request::set_allocated_reqaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* reqaddcampaigntemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddcampaigntemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddcampaigntemplate);
    if (message_arena != submessage_arena) {
      reqaddcampaigntemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddcampaigntemplate, submessage_arena);
    }
    set_has_reqaddcampaigntemplate();
    ARequest_.reqaddcampaigntemplate_ = reqaddcampaigntemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
}
void Request::set_allocated_reqaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* reqaddcampaigntemplatebulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddcampaigntemplatebulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddcampaigntemplatebulk);
    if (message_arena != submessage_arena) {
      reqaddcampaigntemplatebulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddcampaigntemplatebulk, submessage_arena);
    }
    set_has_reqaddcampaigntemplatebulk();
    ARequest_.reqaddcampaigntemplatebulk_ = reqaddcampaigntemplatebulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
}
void Request::set_allocated_reqaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* reqaddnewcampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddnewcampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddnewcampaign);
    if (message_arena != submessage_arena) {
      reqaddnewcampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddnewcampaign, submessage_arena);
    }
    set_has_reqaddnewcampaign();
    ARequest_.reqaddnewcampaign_ = reqaddnewcampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
}
void Request::set_allocated_reqaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* reqaddnewcampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddnewcampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddnewcampaignbulk);
    if (message_arena != submessage_arena) {
      reqaddnewcampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddnewcampaignbulk, submessage_arena);
    }
    set_has_reqaddnewcampaignbulk();
    ARequest_.reqaddnewcampaignbulk_ = reqaddnewcampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
}
void Request::set_allocated_reqgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignRequest* reqgetuserlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetuserlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetuserlist);
    if (message_arena != submessage_arena) {
      reqgetuserlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetuserlist, submessage_arena);
    }
    set_has_reqgetuserlist();
    ARequest_.reqgetuserlist_ = reqgetuserlist;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
}
void Request::set_allocated_reqfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* reqfindcampaignbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfindcampaignbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfindcampaignbyid);
    if (message_arena != submessage_arena) {
      reqfindcampaignbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfindcampaignbyid, submessage_arena);
    }
    set_has_reqfindcampaignbyid();
    ARequest_.reqfindcampaignbyid_ = reqfindcampaignbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
}
void Request::set_allocated_reqfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* reqfindcampaigntemplatebyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfindcampaigntemplatebyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfindcampaigntemplatebyid);
    if (message_arena != submessage_arena) {
      reqfindcampaigntemplatebyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfindcampaigntemplatebyid, submessage_arena);
    }
    set_has_reqfindcampaigntemplatebyid();
    ARequest_.reqfindcampaigntemplatebyid_ = reqfindcampaigntemplatebyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
}
void Request::set_allocated_reqaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* reqaddtargetuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddtargetuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddtargetuser);
    if (message_arena != submessage_arena) {
      reqaddtargetuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddtargetuser, submessage_arena);
    }
    set_has_reqaddtargetuser();
    ARequest_.reqaddtargetuser_ = reqaddtargetuser;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
}
void Request::set_allocated_reqaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* reqaddtargetuserbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddtargetuserbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddtargetuserbulk);
    if (message_arena != submessage_arena) {
      reqaddtargetuserbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddtargetuserbulk, submessage_arena);
    }
    set_has_reqaddtargetuserbulk();
    ARequest_.reqaddtargetuserbulk_ = reqaddtargetuserbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
}
void Request::set_allocated_reqaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* reqaddinactiontargetuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddinactiontargetuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddinactiontargetuser);
    if (message_arena != submessage_arena) {
      reqaddinactiontargetuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddinactiontargetuser, submessage_arena);
    }
    set_has_reqaddinactiontargetuser();
    ARequest_.reqaddinactiontargetuser_ = reqaddinactiontargetuser;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
}
void Request::set_allocated_reqaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* reqaddinactiontargetuserbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqaddinactiontargetuserbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqaddinactiontargetuserbulk);
    if (message_arena != submessage_arena) {
      reqaddinactiontargetuserbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqaddinactiontargetuserbulk, submessage_arena);
    }
    set_has_reqaddinactiontargetuserbulk();
    ARequest_.reqaddinactiontargetuserbulk_ = reqaddinactiontargetuserbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
}
void Request::set_allocated_reqfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* reqfindinactiontargetuserbycampaignid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqfindinactiontargetuserbycampaignid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqfindinactiontargetuserbycampaignid);
    if (message_arena != submessage_arena) {
      reqfindinactiontargetuserbycampaignid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqfindinactiontargetuserbycampaignid, submessage_arena);
    }
    set_has_reqfindinactiontargetuserbycampaignid();
    ARequest_.reqfindinactiontargetuserbycampaignid_ = reqfindinactiontargetuserbycampaignid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
}
void Request::set_allocated_reqgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* reqgetdynamicdatabykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqgetdynamicdatabykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqgetdynamicdatabykey);
    if (message_arena != submessage_arena) {
      reqgetdynamicdatabykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqgetdynamicdatabykey, submessage_arena);
    }
    set_has_reqgetdynamicdatabykey();
    ARequest_.reqgetdynamicdatabykey_ = reqgetdynamicdatabykey;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
}
void Request::set_allocated_reqadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* reqadddynamicdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqadddynamicdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqadddynamicdata);
    if (message_arena != submessage_arena) {
      reqadddynamicdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqadddynamicdata, submessage_arena);
    }
    set_has_reqadddynamicdata();
    ARequest_.reqadddynamicdata_ = reqadddynamicdata;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
}
void Request::set_allocated_reqadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* reqadddynamicdatabulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ARequest();
  if (reqadddynamicdatabulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqadddynamicdatabulk);
    if (message_arena != submessage_arena) {
      reqadddynamicdatabulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqadddynamicdatabulk, submessage_arena);
    }
    set_has_reqadddynamicdatabulk();
    ARequest_.reqadddynamicdatabulk_ = reqadddynamicdatabulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  clear_has_ARequest();
  switch (from.ARequest_case()) {
    case kReqAddCampaign: {
      _internal_mutable_reqaddcampaign()->::farm::nurture::core::contracts::CampaignService::AddCampaignRequest::MergeFrom(from._internal_reqaddcampaign());
      break;
    }
    case kReqAddCampaignBulk: {
      _internal_mutable_reqaddcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest::MergeFrom(from._internal_reqaddcampaignbulk());
      break;
    }
    case kReqUpdateCampaign: {
      _internal_mutable_requpdatecampaign()->::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest::MergeFrom(from._internal_requpdatecampaign());
      break;
    }
    case kReqUpdateCampaignBulk: {
      _internal_mutable_requpdatecampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest::MergeFrom(from._internal_requpdatecampaignbulk());
      break;
    }
    case kReqAddCampaignTemplate: {
      _internal_mutable_reqaddcampaigntemplate()->::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest::MergeFrom(from._internal_reqaddcampaigntemplate());
      break;
    }
    case kReqAddCampaignTemplateBulk: {
      _internal_mutable_reqaddcampaigntemplatebulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest::MergeFrom(from._internal_reqaddcampaigntemplatebulk());
      break;
    }
    case kReqAddNewCampaign: {
      _internal_mutable_reqaddnewcampaign()->::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest::MergeFrom(from._internal_reqaddnewcampaign());
      break;
    }
    case kReqAddNewCampaignBulk: {
      _internal_mutable_reqaddnewcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest::MergeFrom(from._internal_reqaddnewcampaignbulk());
      break;
    }
    case kReqGetUserList: {
      _internal_mutable_reqgetuserlist()->::farm::nurture::core::contracts::CampaignService::CampaignRequest::MergeFrom(from._internal_reqgetuserlist());
      break;
    }
    case kReqFindCampaignById: {
      _internal_mutable_reqfindcampaignbyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest::MergeFrom(from._internal_reqfindcampaignbyid());
      break;
    }
    case kReqFindCampaignTemplateById: {
      _internal_mutable_reqfindcampaigntemplatebyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest::MergeFrom(from._internal_reqfindcampaigntemplatebyid());
      break;
    }
    case kReqAddTargetUser: {
      _internal_mutable_reqaddtargetuser()->::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest::MergeFrom(from._internal_reqaddtargetuser());
      break;
    }
    case kReqAddTargetUserBulk: {
      _internal_mutable_reqaddtargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest::MergeFrom(from._internal_reqaddtargetuserbulk());
      break;
    }
    case kReqAddInactionTargetUser: {
      _internal_mutable_reqaddinactiontargetuser()->::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest::MergeFrom(from._internal_reqaddinactiontargetuser());
      break;
    }
    case kReqAddInactionTargetUserBulk: {
      _internal_mutable_reqaddinactiontargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest::MergeFrom(from._internal_reqaddinactiontargetuserbulk());
      break;
    }
    case kReqFindInactionTargetUserByCampaignId: {
      _internal_mutable_reqfindinactiontargetuserbycampaignid()->::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest::MergeFrom(from._internal_reqfindinactiontargetuserbycampaignid());
      break;
    }
    case kReqGetDynamicDataByKey: {
      _internal_mutable_reqgetdynamicdatabykey()->::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest::MergeFrom(from._internal_reqgetdynamicdatabykey());
      break;
    }
    case kReqAddDynamicData: {
      _internal_mutable_reqadddynamicdata()->::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest::MergeFrom(from._internal_reqadddynamicdata());
      break;
    }
    case kReqAddDynamicDataBulk: {
      _internal_mutable_reqadddynamicdatabulk()->::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest::MergeFrom(from._internal_reqadddynamicdatabulk());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_ARequest();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ARequest()) {
    clear_ARequest();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_ARequest() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.core.contracts.CampaignService.Request)
  switch (ARequest_case()) {
    case kReqAddCampaign: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddcampaign_;
      }
      break;
    }
    case kReqAddCampaignBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddcampaignbulk_;
      }
      break;
    }
    case kReqUpdateCampaign: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatecampaign_;
      }
      break;
    }
    case kReqUpdateCampaignBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.requpdatecampaignbulk_;
      }
      break;
    }
    case kReqAddCampaignTemplate: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddcampaigntemplate_;
      }
      break;
    }
    case kReqAddCampaignTemplateBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddcampaigntemplatebulk_;
      }
      break;
    }
    case kReqAddNewCampaign: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddnewcampaign_;
      }
      break;
    }
    case kReqAddNewCampaignBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddnewcampaignbulk_;
      }
      break;
    }
    case kReqGetUserList: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetuserlist_;
      }
      break;
    }
    case kReqFindCampaignById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfindcampaignbyid_;
      }
      break;
    }
    case kReqFindCampaignTemplateById: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfindcampaigntemplatebyid_;
      }
      break;
    }
    case kReqAddTargetUser: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddtargetuser_;
      }
      break;
    }
    case kReqAddTargetUserBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddtargetuserbulk_;
      }
      break;
    }
    case kReqAddInactionTargetUser: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddinactiontargetuser_;
      }
      break;
    }
    case kReqAddInactionTargetUserBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqaddinactiontargetuserbulk_;
      }
      break;
    }
    case kReqFindInactionTargetUserByCampaignId: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqfindinactiontargetuserbycampaignid_;
      }
      break;
    }
    case kReqGetDynamicDataByKey: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqgetdynamicdatabykey_;
      }
      break;
    }
    case kReqAddDynamicData: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqadddynamicdata_;
      }
      break;
    }
    case kReqAddDynamicDataBulk: {
      if (GetArena() == nullptr) {
        delete ARequest_.reqadddynamicdatabulk_;
      }
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AREQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  clear_ARequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.Request.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest reqAddCampaign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddcampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest reqAddCampaignBulk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddcampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest reqUpdateCampaign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatecampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest reqUpdateCampaignBulk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_requpdatecampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest reqAddCampaignTemplate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddcampaigntemplate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest reqAddCampaignTemplateBulk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddcampaigntemplatebulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest reqAddNewCampaign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddnewcampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest reqAddNewCampaignBulk = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddnewcampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.CampaignRequest reqGetUserList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetuserlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest reqFindCampaignById = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfindcampaignbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest reqFindCampaignTemplateById = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfindcampaigntemplatebyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest reqAddTargetUser = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddtargetuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest reqAddTargetUserBulk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddtargetuserbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest reqAddInactionTargetUser = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddinactiontargetuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest reqAddInactionTargetUserBulk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqaddinactiontargetuserbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest reqFindInactionTargetUserByCampaignId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqfindinactiontargetuserbycampaignid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest reqGetDynamicDataByKey = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqgetdynamicdatabykey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest reqAddDynamicData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqadddynamicdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest reqAddDynamicDataBulk = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqadddynamicdatabulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.Request.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest reqAddCampaign = 2;
  if (_internal_has_reqaddcampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reqaddcampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest reqAddCampaignBulk = 3;
  if (_internal_has_reqaddcampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reqaddcampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest reqUpdateCampaign = 4;
  if (_internal_has_requpdatecampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::requpdatecampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest reqUpdateCampaignBulk = 5;
  if (_internal_has_requpdatecampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::requpdatecampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest reqAddCampaignTemplate = 6;
  if (_internal_has_reqaddcampaigntemplate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reqaddcampaigntemplate(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest reqAddCampaignTemplateBulk = 7;
  if (_internal_has_reqaddcampaigntemplatebulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reqaddcampaigntemplatebulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest reqAddNewCampaign = 8;
  if (_internal_has_reqaddnewcampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reqaddnewcampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest reqAddNewCampaignBulk = 9;
  if (_internal_has_reqaddnewcampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::reqaddnewcampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.CampaignRequest reqGetUserList = 10;
  if (_internal_has_reqgetuserlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reqgetuserlist(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest reqFindCampaignById = 11;
  if (_internal_has_reqfindcampaignbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::reqfindcampaignbyid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest reqFindCampaignTemplateById = 12;
  if (_internal_has_reqfindcampaigntemplatebyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reqfindcampaigntemplatebyid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest reqAddTargetUser = 13;
  if (_internal_has_reqaddtargetuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::reqaddtargetuser(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest reqAddTargetUserBulk = 14;
  if (_internal_has_reqaddtargetuserbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::reqaddtargetuserbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest reqAddInactionTargetUser = 15;
  if (_internal_has_reqaddinactiontargetuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::reqaddinactiontargetuser(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest reqAddInactionTargetUserBulk = 16;
  if (_internal_has_reqaddinactiontargetuserbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::reqaddinactiontargetuserbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest reqFindInactionTargetUserByCampaignId = 17;
  if (_internal_has_reqfindinactiontargetuserbycampaignid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::reqfindinactiontargetuserbycampaignid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest reqGetDynamicDataByKey = 18;
  if (_internal_has_reqgetdynamicdatabykey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::reqgetdynamicdatabykey(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest reqAddDynamicData = 19;
  if (_internal_has_reqadddynamicdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::reqadddynamicdata(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest reqAddDynamicDataBulk = 20;
  if (_internal_has_reqadddynamicdatabulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::reqadddynamicdatabulk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  switch (ARequest_case()) {
    // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest reqAddCampaign = 2;
    case kReqAddCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddcampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest reqAddCampaignBulk = 3;
    case kReqAddCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddcampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest reqUpdateCampaign = 4;
    case kReqUpdateCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatecampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest reqUpdateCampaignBulk = 5;
    case kReqUpdateCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.requpdatecampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest reqAddCampaignTemplate = 6;
    case kReqAddCampaignTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddcampaigntemplate_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest reqAddCampaignTemplateBulk = 7;
    case kReqAddCampaignTemplateBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddcampaigntemplatebulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest reqAddNewCampaign = 8;
    case kReqAddNewCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddnewcampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest reqAddNewCampaignBulk = 9;
    case kReqAddNewCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddnewcampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.CampaignRequest reqGetUserList = 10;
    case kReqGetUserList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetuserlist_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest reqFindCampaignById = 11;
    case kReqFindCampaignById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfindcampaignbyid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest reqFindCampaignTemplateById = 12;
    case kReqFindCampaignTemplateById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfindcampaigntemplatebyid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest reqAddTargetUser = 13;
    case kReqAddTargetUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddtargetuser_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest reqAddTargetUserBulk = 14;
    case kReqAddTargetUserBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddtargetuserbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest reqAddInactionTargetUser = 15;
    case kReqAddInactionTargetUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddinactiontargetuser_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest reqAddInactionTargetUserBulk = 16;
    case kReqAddInactionTargetUserBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqaddinactiontargetuserbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest reqFindInactionTargetUserByCampaignId = 17;
    case kReqFindInactionTargetUserByCampaignId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqfindinactiontargetuserbycampaignid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest reqGetDynamicDataByKey = 18;
    case kReqGetDynamicDataByKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqgetdynamicdatabykey_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest reqAddDynamicData = 19;
    case kReqAddDynamicData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqadddynamicdata_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest reqAddDynamicDataBulk = 20;
    case kReqAddDynamicDataBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ARequest_.reqadddynamicdatabulk_);
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  switch (from.ARequest_case()) {
    case kReqAddCampaign: {
      _internal_mutable_reqaddcampaign()->::farm::nurture::core::contracts::CampaignService::AddCampaignRequest::MergeFrom(from._internal_reqaddcampaign());
      break;
    }
    case kReqAddCampaignBulk: {
      _internal_mutable_reqaddcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest::MergeFrom(from._internal_reqaddcampaignbulk());
      break;
    }
    case kReqUpdateCampaign: {
      _internal_mutable_requpdatecampaign()->::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest::MergeFrom(from._internal_requpdatecampaign());
      break;
    }
    case kReqUpdateCampaignBulk: {
      _internal_mutable_requpdatecampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest::MergeFrom(from._internal_requpdatecampaignbulk());
      break;
    }
    case kReqAddCampaignTemplate: {
      _internal_mutable_reqaddcampaigntemplate()->::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest::MergeFrom(from._internal_reqaddcampaigntemplate());
      break;
    }
    case kReqAddCampaignTemplateBulk: {
      _internal_mutable_reqaddcampaigntemplatebulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest::MergeFrom(from._internal_reqaddcampaigntemplatebulk());
      break;
    }
    case kReqAddNewCampaign: {
      _internal_mutable_reqaddnewcampaign()->::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest::MergeFrom(from._internal_reqaddnewcampaign());
      break;
    }
    case kReqAddNewCampaignBulk: {
      _internal_mutable_reqaddnewcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest::MergeFrom(from._internal_reqaddnewcampaignbulk());
      break;
    }
    case kReqGetUserList: {
      _internal_mutable_reqgetuserlist()->::farm::nurture::core::contracts::CampaignService::CampaignRequest::MergeFrom(from._internal_reqgetuserlist());
      break;
    }
    case kReqFindCampaignById: {
      _internal_mutable_reqfindcampaignbyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest::MergeFrom(from._internal_reqfindcampaignbyid());
      break;
    }
    case kReqFindCampaignTemplateById: {
      _internal_mutable_reqfindcampaigntemplatebyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest::MergeFrom(from._internal_reqfindcampaigntemplatebyid());
      break;
    }
    case kReqAddTargetUser: {
      _internal_mutable_reqaddtargetuser()->::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest::MergeFrom(from._internal_reqaddtargetuser());
      break;
    }
    case kReqAddTargetUserBulk: {
      _internal_mutable_reqaddtargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest::MergeFrom(from._internal_reqaddtargetuserbulk());
      break;
    }
    case kReqAddInactionTargetUser: {
      _internal_mutable_reqaddinactiontargetuser()->::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest::MergeFrom(from._internal_reqaddinactiontargetuser());
      break;
    }
    case kReqAddInactionTargetUserBulk: {
      _internal_mutable_reqaddinactiontargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest::MergeFrom(from._internal_reqaddinactiontargetuserbulk());
      break;
    }
    case kReqFindInactionTargetUserByCampaignId: {
      _internal_mutable_reqfindinactiontargetuserbycampaignid()->::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest::MergeFrom(from._internal_reqfindinactiontargetuserbycampaignid());
      break;
    }
    case kReqGetDynamicDataByKey: {
      _internal_mutable_reqgetdynamicdatabykey()->::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest::MergeFrom(from._internal_reqgetdynamicdatabykey());
      break;
    }
    case kReqAddDynamicData: {
      _internal_mutable_reqadddynamicdata()->::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest::MergeFrom(from._internal_reqadddynamicdata());
      break;
    }
    case kReqAddDynamicDataBulk: {
      _internal_mutable_reqadddynamicdatabulk()->::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest::MergeFrom(from._internal_reqadddynamicdatabulk());
      break;
    }
    case AREQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ARequest_, other->ARequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiResponses::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const MultiResponses* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
MultiResponses::_Internal::status(const MultiResponses* msg) {
  return *msg->status_;
}
void MultiResponses::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiResponses::MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.MultiResponses)
}
MultiResponses::MultiResponses(const MultiResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.MultiResponses)
}

void MultiResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto.base);
  status_ = nullptr;
}

MultiResponses::~MultiResponses() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.MultiResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiResponses::ArenaDtor(void* object) {
  MultiResponses* _this = reinterpret_cast< MultiResponses* >(object);
  (void)_this;
}
void MultiResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiResponses& MultiResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiResponses_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.Response response = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.MultiResponses)
  return target;
}

size_t MultiResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.Response response = 2;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.MultiResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.MultiResponses)
    MergeFrom(*source);
  }
}

void MultiResponses::MergeFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
}

void MultiResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResponses::CopyFrom(const MultiResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.MultiResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResponses::IsInitialized() const {
  return true;
}

void MultiResponses::InternalSwap(MultiResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Response::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& resaddcampaign(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse& resaddcampaignbulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& resupdatecampaign(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse& resupdatecampaignbulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& resaddcampaigntemplate(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse& resaddcampaigntemplatebulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& resaddnewcampaign(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse& resaddnewcampaignbulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::CampaignResponse& resgetuserlist(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse& resfindcampaignbyid(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse& resfindcampaigntemplatebyid(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& resaddtargetuser(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse& resaddtargetuserbulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& resaddinactiontargetuser(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse& resaddinactiontargetuserbulk(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse& resfindinactiontargetuserbycampaignid(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse& resgetdynamicdatabykey(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& resadddynamicdata(const Response* msg);
  static const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse& resadddynamicdatabulk(const Response* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
Response::_Internal::status(const Response* msg) {
  return *msg->status_;
}
const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse&
Response::_Internal::resaddcampaign(const Response* msg) {
  return *msg->AResponse_.resaddcampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse&
Response::_Internal::resaddcampaignbulk(const Response* msg) {
  return *msg->AResponse_.resaddcampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse&
Response::_Internal::resupdatecampaign(const Response* msg) {
  return *msg->AResponse_.resupdatecampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse&
Response::_Internal::resupdatecampaignbulk(const Response* msg) {
  return *msg->AResponse_.resupdatecampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse&
Response::_Internal::resaddcampaigntemplate(const Response* msg) {
  return *msg->AResponse_.resaddcampaigntemplate_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse&
Response::_Internal::resaddcampaigntemplatebulk(const Response* msg) {
  return *msg->AResponse_.resaddcampaigntemplatebulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse&
Response::_Internal::resaddnewcampaign(const Response* msg) {
  return *msg->AResponse_.resaddnewcampaign_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse&
Response::_Internal::resaddnewcampaignbulk(const Response* msg) {
  return *msg->AResponse_.resaddnewcampaignbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::CampaignResponse&
Response::_Internal::resgetuserlist(const Response* msg) {
  return *msg->AResponse_.resgetuserlist_;
}
const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse&
Response::_Internal::resfindcampaignbyid(const Response* msg) {
  return *msg->AResponse_.resfindcampaignbyid_;
}
const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse&
Response::_Internal::resfindcampaigntemplatebyid(const Response* msg) {
  return *msg->AResponse_.resfindcampaigntemplatebyid_;
}
const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse&
Response::_Internal::resaddtargetuser(const Response* msg) {
  return *msg->AResponse_.resaddtargetuser_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse&
Response::_Internal::resaddtargetuserbulk(const Response* msg) {
  return *msg->AResponse_.resaddtargetuserbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse&
Response::_Internal::resaddinactiontargetuser(const Response* msg) {
  return *msg->AResponse_.resaddinactiontargetuser_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse&
Response::_Internal::resaddinactiontargetuserbulk(const Response* msg) {
  return *msg->AResponse_.resaddinactiontargetuserbulk_;
}
const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse&
Response::_Internal::resfindinactiontargetuserbycampaignid(const Response* msg) {
  return *msg->AResponse_.resfindinactiontargetuserbycampaignid_;
}
const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse&
Response::_Internal::resgetdynamicdatabykey(const Response* msg) {
  return *msg->AResponse_.resgetdynamicdatabykey_;
}
const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse&
Response::_Internal::resadddynamicdata(const Response* msg) {
  return *msg->AResponse_.resadddynamicdata_;
}
const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse&
Response::_Internal::resadddynamicdatabulk(const Response* msg) {
  return *msg->AResponse_.resadddynamicdatabulk_;
}
void Response::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Response::set_allocated_resaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resaddcampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddcampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddcampaign);
    if (message_arena != submessage_arena) {
      resaddcampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddcampaign, submessage_arena);
    }
    set_has_resaddcampaign();
    AResponse_.resaddcampaign_ = resaddcampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
}
void Response::set_allocated_resaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resaddcampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddcampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddcampaignbulk);
    if (message_arena != submessage_arena) {
      resaddcampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddcampaignbulk, submessage_arena);
    }
    set_has_resaddcampaignbulk();
    AResponse_.resaddcampaignbulk_ = resaddcampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
}
void Response::set_allocated_resupdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resupdatecampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatecampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatecampaign);
    if (message_arena != submessage_arena) {
      resupdatecampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatecampaign, submessage_arena);
    }
    set_has_resupdatecampaign();
    AResponse_.resupdatecampaign_ = resupdatecampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
}
void Response::set_allocated_resupdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resupdatecampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resupdatecampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resupdatecampaignbulk);
    if (message_arena != submessage_arena) {
      resupdatecampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resupdatecampaignbulk, submessage_arena);
    }
    set_has_resupdatecampaignbulk();
    AResponse_.resupdatecampaignbulk_ = resupdatecampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
}
void Response::set_allocated_resaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resaddcampaigntemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddcampaigntemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddcampaigntemplate);
    if (message_arena != submessage_arena) {
      resaddcampaigntemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddcampaigntemplate, submessage_arena);
    }
    set_has_resaddcampaigntemplate();
    AResponse_.resaddcampaigntemplate_ = resaddcampaigntemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
}
void Response::set_allocated_resaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resaddcampaigntemplatebulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddcampaigntemplatebulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddcampaigntemplatebulk);
    if (message_arena != submessage_arena) {
      resaddcampaigntemplatebulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddcampaigntemplatebulk, submessage_arena);
    }
    set_has_resaddcampaigntemplatebulk();
    AResponse_.resaddcampaigntemplatebulk_ = resaddcampaigntemplatebulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
}
void Response::set_allocated_resaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resaddnewcampaign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddnewcampaign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddnewcampaign);
    if (message_arena != submessage_arena) {
      resaddnewcampaign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddnewcampaign, submessage_arena);
    }
    set_has_resaddnewcampaign();
    AResponse_.resaddnewcampaign_ = resaddnewcampaign;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
}
void Response::set_allocated_resaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resaddnewcampaignbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddnewcampaignbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddnewcampaignbulk);
    if (message_arena != submessage_arena) {
      resaddnewcampaignbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddnewcampaignbulk, submessage_arena);
    }
    set_has_resaddnewcampaignbulk();
    AResponse_.resaddnewcampaignbulk_ = resaddnewcampaignbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
}
void Response::set_allocated_resgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignResponse* resgetuserlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetuserlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetuserlist);
    if (message_arena != submessage_arena) {
      resgetuserlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetuserlist, submessage_arena);
    }
    set_has_resgetuserlist();
    AResponse_.resgetuserlist_ = resgetuserlist;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
}
void Response::set_allocated_resfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resfindcampaignbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfindcampaignbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfindcampaignbyid);
    if (message_arena != submessage_arena) {
      resfindcampaignbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfindcampaignbyid, submessage_arena);
    }
    set_has_resfindcampaignbyid();
    AResponse_.resfindcampaignbyid_ = resfindcampaignbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
}
void Response::set_allocated_resfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resfindcampaigntemplatebyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfindcampaigntemplatebyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfindcampaigntemplatebyid);
    if (message_arena != submessage_arena) {
      resfindcampaigntemplatebyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfindcampaigntemplatebyid, submessage_arena);
    }
    set_has_resfindcampaigntemplatebyid();
    AResponse_.resfindcampaigntemplatebyid_ = resfindcampaigntemplatebyid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
}
void Response::set_allocated_resaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resaddtargetuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddtargetuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddtargetuser);
    if (message_arena != submessage_arena) {
      resaddtargetuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddtargetuser, submessage_arena);
    }
    set_has_resaddtargetuser();
    AResponse_.resaddtargetuser_ = resaddtargetuser;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
}
void Response::set_allocated_resaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resaddtargetuserbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddtargetuserbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddtargetuserbulk);
    if (message_arena != submessage_arena) {
      resaddtargetuserbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddtargetuserbulk, submessage_arena);
    }
    set_has_resaddtargetuserbulk();
    AResponse_.resaddtargetuserbulk_ = resaddtargetuserbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
}
void Response::set_allocated_resaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resaddinactiontargetuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddinactiontargetuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddinactiontargetuser);
    if (message_arena != submessage_arena) {
      resaddinactiontargetuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddinactiontargetuser, submessage_arena);
    }
    set_has_resaddinactiontargetuser();
    AResponse_.resaddinactiontargetuser_ = resaddinactiontargetuser;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
}
void Response::set_allocated_resaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resaddinactiontargetuserbulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resaddinactiontargetuserbulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resaddinactiontargetuserbulk);
    if (message_arena != submessage_arena) {
      resaddinactiontargetuserbulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resaddinactiontargetuserbulk, submessage_arena);
    }
    set_has_resaddinactiontargetuserbulk();
    AResponse_.resaddinactiontargetuserbulk_ = resaddinactiontargetuserbulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
}
void Response::set_allocated_resfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resfindinactiontargetuserbycampaignid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resfindinactiontargetuserbycampaignid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resfindinactiontargetuserbycampaignid);
    if (message_arena != submessage_arena) {
      resfindinactiontargetuserbycampaignid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resfindinactiontargetuserbycampaignid, submessage_arena);
    }
    set_has_resfindinactiontargetuserbycampaignid();
    AResponse_.resfindinactiontargetuserbycampaignid_ = resfindinactiontargetuserbycampaignid;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
}
void Response::set_allocated_resgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* resgetdynamicdatabykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resgetdynamicdatabykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resgetdynamicdatabykey);
    if (message_arena != submessage_arena) {
      resgetdynamicdatabykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resgetdynamicdatabykey, submessage_arena);
    }
    set_has_resgetdynamicdatabykey();
    AResponse_.resgetdynamicdatabykey_ = resgetdynamicdatabykey;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
}
void Response::set_allocated_resadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* resadddynamicdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resadddynamicdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resadddynamicdata);
    if (message_arena != submessage_arena) {
      resadddynamicdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resadddynamicdata, submessage_arena);
    }
    set_has_resadddynamicdata();
    AResponse_.resadddynamicdata_ = resadddynamicdata;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
}
void Response::set_allocated_resadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* resadddynamicdatabulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AResponse();
  if (resadddynamicdatabulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resadddynamicdatabulk);
    if (message_arena != submessage_arena) {
      resadddynamicdatabulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resadddynamicdatabulk, submessage_arena);
    }
    set_has_resadddynamicdatabulk();
    AResponse_.resadddynamicdatabulk_ = resadddynamicdatabulk;
  }
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_AResponse();
  switch (from.AResponse_case()) {
    case kResAddCampaign: {
      _internal_mutable_resaddcampaign()->::farm::nurture::core::contracts::CampaignService::AddCampaignResponse::MergeFrom(from._internal_resaddcampaign());
      break;
    }
    case kResAddCampaignBulk: {
      _internal_mutable_resaddcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse::MergeFrom(from._internal_resaddcampaignbulk());
      break;
    }
    case kResUpdateCampaign: {
      _internal_mutable_resupdatecampaign()->::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse::MergeFrom(from._internal_resupdatecampaign());
      break;
    }
    case kResUpdateCampaignBulk: {
      _internal_mutable_resupdatecampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse::MergeFrom(from._internal_resupdatecampaignbulk());
      break;
    }
    case kResAddCampaignTemplate: {
      _internal_mutable_resaddcampaigntemplate()->::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse::MergeFrom(from._internal_resaddcampaigntemplate());
      break;
    }
    case kResAddCampaignTemplateBulk: {
      _internal_mutable_resaddcampaigntemplatebulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse::MergeFrom(from._internal_resaddcampaigntemplatebulk());
      break;
    }
    case kResAddNewCampaign: {
      _internal_mutable_resaddnewcampaign()->::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse::MergeFrom(from._internal_resaddnewcampaign());
      break;
    }
    case kResAddNewCampaignBulk: {
      _internal_mutable_resaddnewcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse::MergeFrom(from._internal_resaddnewcampaignbulk());
      break;
    }
    case kResGetUserList: {
      _internal_mutable_resgetuserlist()->::farm::nurture::core::contracts::CampaignService::CampaignResponse::MergeFrom(from._internal_resgetuserlist());
      break;
    }
    case kResFindCampaignById: {
      _internal_mutable_resfindcampaignbyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse::MergeFrom(from._internal_resfindcampaignbyid());
      break;
    }
    case kResFindCampaignTemplateById: {
      _internal_mutable_resfindcampaigntemplatebyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse::MergeFrom(from._internal_resfindcampaigntemplatebyid());
      break;
    }
    case kResAddTargetUser: {
      _internal_mutable_resaddtargetuser()->::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse::MergeFrom(from._internal_resaddtargetuser());
      break;
    }
    case kResAddTargetUserBulk: {
      _internal_mutable_resaddtargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse::MergeFrom(from._internal_resaddtargetuserbulk());
      break;
    }
    case kResAddInactionTargetUser: {
      _internal_mutable_resaddinactiontargetuser()->::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse::MergeFrom(from._internal_resaddinactiontargetuser());
      break;
    }
    case kResAddInactionTargetUserBulk: {
      _internal_mutable_resaddinactiontargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse::MergeFrom(from._internal_resaddinactiontargetuserbulk());
      break;
    }
    case kResFindInactionTargetUserByCampaignId: {
      _internal_mutable_resfindinactiontargetuserbycampaignid()->::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse::MergeFrom(from._internal_resfindinactiontargetuserbycampaignid());
      break;
    }
    case kResGetDynamicDataByKey: {
      _internal_mutable_resgetdynamicdatabykey()->::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse::MergeFrom(from._internal_resgetdynamicdatabykey());
      break;
    }
    case kResAddDynamicData: {
      _internal_mutable_resadddynamicdata()->::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse::MergeFrom(from._internal_resadddynamicdata());
      break;
    }
    case kResAddDynamicDataBulk: {
      _internal_mutable_resadddynamicdatabulk()->::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse::MergeFrom(from._internal_resadddynamicdatabulk());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
  clear_has_AResponse();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (has_AResponse()) {
    clear_AResponse();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_AResponse() {
// @@protoc_insertion_point(one_of_clear_start:farm.nurture.core.contracts.CampaignService.Response)
  switch (AResponse_case()) {
    case kResAddCampaign: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddcampaign_;
      }
      break;
    }
    case kResAddCampaignBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddcampaignbulk_;
      }
      break;
    }
    case kResUpdateCampaign: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatecampaign_;
      }
      break;
    }
    case kResUpdateCampaignBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resupdatecampaignbulk_;
      }
      break;
    }
    case kResAddCampaignTemplate: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddcampaigntemplate_;
      }
      break;
    }
    case kResAddCampaignTemplateBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddcampaigntemplatebulk_;
      }
      break;
    }
    case kResAddNewCampaign: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddnewcampaign_;
      }
      break;
    }
    case kResAddNewCampaignBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddnewcampaignbulk_;
      }
      break;
    }
    case kResGetUserList: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetuserlist_;
      }
      break;
    }
    case kResFindCampaignById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfindcampaignbyid_;
      }
      break;
    }
    case kResFindCampaignTemplateById: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfindcampaigntemplatebyid_;
      }
      break;
    }
    case kResAddTargetUser: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddtargetuser_;
      }
      break;
    }
    case kResAddTargetUserBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddtargetuserbulk_;
      }
      break;
    }
    case kResAddInactionTargetUser: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddinactiontargetuser_;
      }
      break;
    }
    case kResAddInactionTargetUserBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resaddinactiontargetuserbulk_;
      }
      break;
    }
    case kResFindInactionTargetUserByCampaignId: {
      if (GetArena() == nullptr) {
        delete AResponse_.resfindinactiontargetuserbycampaignid_;
      }
      break;
    }
    case kResGetDynamicDataByKey: {
      if (GetArena() == nullptr) {
        delete AResponse_.resgetdynamicdatabykey_;
      }
      break;
    }
    case kResAddDynamicData: {
      if (GetArena() == nullptr) {
        delete AResponse_.resadddynamicdata_;
      }
      break;
    }
    case kResAddDynamicDataBulk: {
      if (GetArena() == nullptr) {
        delete AResponse_.resadddynamicdatabulk_;
      }
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_AResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.Response.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddCampaignResponse resAddCampaign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddcampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse resAddCampaignBulk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddcampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse resUpdateCampaign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatecampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse resUpdateCampaignBulk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resupdatecampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse resAddCampaignTemplate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddcampaigntemplate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse resAddCampaignTemplateBulk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddcampaigntemplatebulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse resAddNewCampaign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddnewcampaign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse resAddNewCampaignBulk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddnewcampaignbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.CampaignResponse resGetUserList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetuserlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse resFindCampaignById = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfindcampaignbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse resFindCampaignTemplateById = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfindcampaigntemplatebyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse resAddTargetUser = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddtargetuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse resAddTargetUserBulk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddtargetuserbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse resAddInactionTargetUser = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddinactiontargetuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse resAddInactionTargetUserBulk = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_resaddinactiontargetuserbulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse resFindInactionTargetUserByCampaignId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_resfindinactiontargetuserbycampaignid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse resGetDynamicDataByKey = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_resgetdynamicdatabykey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse resAddDynamicData = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_resadddynamicdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse resAddDynamicDataBulk = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_resadddynamicdatabulk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.Response.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignResponse resAddCampaign = 3;
  if (_internal_has_resaddcampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resaddcampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse resAddCampaignBulk = 4;
  if (_internal_has_resaddcampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resaddcampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse resUpdateCampaign = 5;
  if (_internal_has_resupdatecampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::resupdatecampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse resUpdateCampaignBulk = 6;
  if (_internal_has_resupdatecampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resupdatecampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse resAddCampaignTemplate = 7;
  if (_internal_has_resaddcampaigntemplate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resaddcampaigntemplate(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse resAddCampaignTemplateBulk = 8;
  if (_internal_has_resaddcampaigntemplatebulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::resaddcampaigntemplatebulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse resAddNewCampaign = 9;
  if (_internal_has_resaddnewcampaign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::resaddnewcampaign(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse resAddNewCampaignBulk = 10;
  if (_internal_has_resaddnewcampaignbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::resaddnewcampaignbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.CampaignResponse resGetUserList = 11;
  if (_internal_has_resgetuserlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::resgetuserlist(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse resFindCampaignById = 12;
  if (_internal_has_resfindcampaignbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::resfindcampaignbyid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse resFindCampaignTemplateById = 13;
  if (_internal_has_resfindcampaigntemplatebyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::resfindcampaigntemplatebyid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse resAddTargetUser = 14;
  if (_internal_has_resaddtargetuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::resaddtargetuser(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse resAddTargetUserBulk = 15;
  if (_internal_has_resaddtargetuserbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::resaddtargetuserbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse resAddInactionTargetUser = 16;
  if (_internal_has_resaddinactiontargetuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::resaddinactiontargetuser(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse resAddInactionTargetUserBulk = 17;
  if (_internal_has_resaddinactiontargetuserbulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::resaddinactiontargetuserbulk(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse resFindInactionTargetUserByCampaignId = 18;
  if (_internal_has_resfindinactiontargetuserbycampaignid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::resfindinactiontargetuserbycampaignid(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse resGetDynamicDataByKey = 19;
  if (_internal_has_resgetdynamicdatabykey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::resgetdynamicdatabykey(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse resAddDynamicData = 20;
  if (_internal_has_resadddynamicdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::resadddynamicdata(this), target, stream);
  }

  // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse resAddDynamicDataBulk = 21;
  if (_internal_has_resadddynamicdatabulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::resadddynamicdatabulk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (AResponse_case()) {
    // .farm.nurture.core.contracts.CampaignService.AddCampaignResponse resAddCampaign = 3;
    case kResAddCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddcampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse resAddCampaignBulk = 4;
    case kResAddCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddcampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse resUpdateCampaign = 5;
    case kResUpdateCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatecampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse resUpdateCampaignBulk = 6;
    case kResUpdateCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resupdatecampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse resAddCampaignTemplate = 7;
    case kResAddCampaignTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddcampaigntemplate_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse resAddCampaignTemplateBulk = 8;
    case kResAddCampaignTemplateBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddcampaigntemplatebulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse resAddNewCampaign = 9;
    case kResAddNewCampaign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddnewcampaign_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse resAddNewCampaignBulk = 10;
    case kResAddNewCampaignBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddnewcampaignbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.CampaignResponse resGetUserList = 11;
    case kResGetUserList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetuserlist_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse resFindCampaignById = 12;
    case kResFindCampaignById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfindcampaignbyid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse resFindCampaignTemplateById = 13;
    case kResFindCampaignTemplateById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfindcampaigntemplatebyid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse resAddTargetUser = 14;
    case kResAddTargetUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddtargetuser_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse resAddTargetUserBulk = 15;
    case kResAddTargetUserBulk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddtargetuserbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse resAddInactionTargetUser = 16;
    case kResAddInactionTargetUser: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddinactiontargetuser_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse resAddInactionTargetUserBulk = 17;
    case kResAddInactionTargetUserBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resaddinactiontargetuserbulk_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse resFindInactionTargetUserByCampaignId = 18;
    case kResFindInactionTargetUserByCampaignId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resfindinactiontargetuserbycampaignid_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse resGetDynamicDataByKey = 19;
    case kResGetDynamicDataByKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resgetdynamicdatabykey_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse resAddDynamicData = 20;
    case kResAddDynamicData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resadddynamicdata_);
      break;
    }
    // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse resAddDynamicDataBulk = 21;
    case kResAddDynamicDataBulk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AResponse_.resadddynamicdatabulk_);
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  switch (from.AResponse_case()) {
    case kResAddCampaign: {
      _internal_mutable_resaddcampaign()->::farm::nurture::core::contracts::CampaignService::AddCampaignResponse::MergeFrom(from._internal_resaddcampaign());
      break;
    }
    case kResAddCampaignBulk: {
      _internal_mutable_resaddcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse::MergeFrom(from._internal_resaddcampaignbulk());
      break;
    }
    case kResUpdateCampaign: {
      _internal_mutable_resupdatecampaign()->::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse::MergeFrom(from._internal_resupdatecampaign());
      break;
    }
    case kResUpdateCampaignBulk: {
      _internal_mutable_resupdatecampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse::MergeFrom(from._internal_resupdatecampaignbulk());
      break;
    }
    case kResAddCampaignTemplate: {
      _internal_mutable_resaddcampaigntemplate()->::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse::MergeFrom(from._internal_resaddcampaigntemplate());
      break;
    }
    case kResAddCampaignTemplateBulk: {
      _internal_mutable_resaddcampaigntemplatebulk()->::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse::MergeFrom(from._internal_resaddcampaigntemplatebulk());
      break;
    }
    case kResAddNewCampaign: {
      _internal_mutable_resaddnewcampaign()->::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse::MergeFrom(from._internal_resaddnewcampaign());
      break;
    }
    case kResAddNewCampaignBulk: {
      _internal_mutable_resaddnewcampaignbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse::MergeFrom(from._internal_resaddnewcampaignbulk());
      break;
    }
    case kResGetUserList: {
      _internal_mutable_resgetuserlist()->::farm::nurture::core::contracts::CampaignService::CampaignResponse::MergeFrom(from._internal_resgetuserlist());
      break;
    }
    case kResFindCampaignById: {
      _internal_mutable_resfindcampaignbyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse::MergeFrom(from._internal_resfindcampaignbyid());
      break;
    }
    case kResFindCampaignTemplateById: {
      _internal_mutable_resfindcampaigntemplatebyid()->::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse::MergeFrom(from._internal_resfindcampaigntemplatebyid());
      break;
    }
    case kResAddTargetUser: {
      _internal_mutable_resaddtargetuser()->::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse::MergeFrom(from._internal_resaddtargetuser());
      break;
    }
    case kResAddTargetUserBulk: {
      _internal_mutable_resaddtargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse::MergeFrom(from._internal_resaddtargetuserbulk());
      break;
    }
    case kResAddInactionTargetUser: {
      _internal_mutable_resaddinactiontargetuser()->::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse::MergeFrom(from._internal_resaddinactiontargetuser());
      break;
    }
    case kResAddInactionTargetUserBulk: {
      _internal_mutable_resaddinactiontargetuserbulk()->::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse::MergeFrom(from._internal_resaddinactiontargetuserbulk());
      break;
    }
    case kResFindInactionTargetUserByCampaignId: {
      _internal_mutable_resfindinactiontargetuserbycampaignid()->::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse::MergeFrom(from._internal_resfindinactiontargetuserbycampaignid());
      break;
    }
    case kResGetDynamicDataByKey: {
      _internal_mutable_resgetdynamicdatabykey()->::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse::MergeFrom(from._internal_resgetdynamicdatabykey());
      break;
    }
    case kResAddDynamicData: {
      _internal_mutable_resadddynamicdata()->::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse::MergeFrom(from._internal_resadddynamicdata());
      break;
    }
    case kResAddDynamicDataBulk: {
      _internal_mutable_resadddynamicdatabulk()->::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse::MergeFrom(from._internal_resadddynamicdatabulk());
      break;
    }
    case ARESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(AResponse_, other->AResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterCampaignRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const FilterCampaignRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
FilterCampaignRequest::_Internal::requestheaders(const FilterCampaignRequest* msg) {
  return *msg->requestheaders_;
}
void FilterCampaignRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
FilterCampaignRequest::FilterCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
}
FilterCampaignRequest::FilterCampaignRequest(const FilterCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_templatename().empty()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&status_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
}

void FilterCampaignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(limit_));
}

FilterCampaignRequest::~FilterCampaignRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterCampaignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void FilterCampaignRequest::ArenaDtor(void* object) {
  FilterCampaignRequest* _this = reinterpret_cast< FilterCampaignRequest* >(object);
  (void)_this;
}
void FilterCampaignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterCampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterCampaignRequest& FilterCampaignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterCampaignRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FilterCampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  templatename_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&status_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterCampaignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CampaignStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::CampaignStatus>(val));
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string templateName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pagenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterCampaignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string templateName = 5;
  if (this->templatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_templatename(), target);
  }

  // int32 pageNumber = 6;
  if (this->pagenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pagenumber(), target);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  return target;
}

size_t FilterCampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string templateName = 5;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_templatename());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // .farm.nurture.core.contracts.common.CampaignStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 pageNumber = 6;
  if (this->pagenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagenumber());
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterCampaignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterCampaignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterCampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
    MergeFrom(*source);
  }
}

void FilterCampaignRequest::MergeFrom(const FilterCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.templatename().size() > 0) {
    _internal_set_templatename(from._internal_templatename());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.pagenumber() != 0) {
    _internal_set_pagenumber(from._internal_pagenumber());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void FilterCampaignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterCampaignRequest::CopyFrom(const FilterCampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterCampaignRequest::IsInitialized() const {
  return true;
}

void FilterCampaignRequest::InternalSwap(FilterCampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterCampaignRequest, limit_)
      + sizeof(FilterCampaignRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(FilterCampaignRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterCampaignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterCampaignResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const FilterCampaignResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
FilterCampaignResponse::_Internal::status(const FilterCampaignResponse* msg) {
  return *msg->status_;
}
void FilterCampaignResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
FilterCampaignResponse::FilterCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
}
FilterCampaignResponse::FilterCampaignResponse(const FilterCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
}

void FilterCampaignResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

FilterCampaignResponse::~FilterCampaignResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterCampaignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FilterCampaignResponse::ArenaDtor(void* object) {
  FilterCampaignResponse* _this = reinterpret_cast< FilterCampaignResponse* >(object);
  (void)_this;
}
void FilterCampaignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterCampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterCampaignResponse& FilterCampaignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterCampaignResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FilterCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterCampaignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterCampaignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  return target;
}

size_t FilterCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 3;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterCampaignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterCampaignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterCampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
    MergeFrom(*source);
  }
}

void FilterCampaignResponse::MergeFrom(const FilterCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FilterCampaignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterCampaignResponse::CopyFrom(const FilterCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterCampaignResponse::IsInitialized() const {
  return true;
}

void FilterCampaignResponse::InternalSwap(FilterCampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterCampaignResponse, count_)
      + sizeof(FilterCampaignResponse::count_)
      - PROTOBUF_FIELD_OFFSET(FilterCampaignResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterCampaignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestCampaignByIdRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders(const TestCampaignByIdRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
TestCampaignByIdRequest::_Internal::requestheaders(const TestCampaignByIdRequest* msg) {
  return *msg->requestheaders_;
}
void TestCampaignByIdRequest::clear_requestheaders() {
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
}
TestCampaignByIdRequest::TestCampaignByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
}
TestCampaignByIdRequest::TestCampaignByIdRequest(const TestCampaignByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  athenaquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_athenaquery().empty()) {
    athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_athenaquery(), 
      GetArena());
  }
  if (from._internal_has_requestheaders()) {
    requestheaders_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.requestheaders_);
  } else {
    requestheaders_ = nullptr;
  }
  campaignid_ = from.campaignid_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
}

void TestCampaignByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  athenaquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestheaders_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&campaignid_) -
      reinterpret_cast<char*>(&requestheaders_)) + sizeof(campaignid_));
}

TestCampaignByIdRequest::~TestCampaignByIdRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestCampaignByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  athenaquery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestheaders_;
}

void TestCampaignByIdRequest::ArenaDtor(void* object) {
  TestCampaignByIdRequest* _this = reinterpret_cast< TestCampaignByIdRequest* >(object);
  (void)_this;
}
void TestCampaignByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCampaignByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCampaignByIdRequest& TestCampaignByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCampaignByIdRequest_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestCampaignByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  athenaquery_.ClearToEmpty();
  if (GetArena() == nullptr && requestheaders_ != nullptr) {
    delete requestheaders_;
  }
  requestheaders_ = nullptr;
  campaignid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCampaignByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 campaignId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string athenaQuery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_athenaquery();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCampaignByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestheaders(this), target, stream);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_campaignid(), target);
  }

  // string athenaQuery = 3;
  if (this->athenaquery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_athenaquery().data(), static_cast<int>(this->_internal_athenaquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_athenaquery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  return target;
}

size_t TestCampaignByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string athenaQuery = 3;
  if (this->athenaquery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_athenaquery());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  if (this->has_requestheaders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestheaders_);
  }

  // int64 campaignId = 2;
  if (this->campaignid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_campaignid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCampaignByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCampaignByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCampaignByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
    MergeFrom(*source);
  }
}

void TestCampaignByIdRequest::MergeFrom(const TestCampaignByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.athenaquery().size() > 0) {
    _internal_set_athenaquery(from._internal_athenaquery());
  }
  if (from.has_requestheaders()) {
    _internal_mutable_requestheaders()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_requestheaders());
  }
  if (from.campaignid() != 0) {
    _internal_set_campaignid(from._internal_campaignid());
  }
}

void TestCampaignByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCampaignByIdRequest::CopyFrom(const TestCampaignByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCampaignByIdRequest::IsInitialized() const {
  return true;
}

void TestCampaignByIdRequest::InternalSwap(TestCampaignByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  athenaquery_.Swap(&other->athenaquery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCampaignByIdRequest, campaignid_)
      + sizeof(TestCampaignByIdRequest::campaignid_)
      - PROTOBUF_FIELD_OFFSET(TestCampaignByIdRequest, requestheaders_)>(
          reinterpret_cast<char*>(&requestheaders_),
          reinterpret_cast<char*>(&other->requestheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCampaignByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestCampaignByIdResponse::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestStatusResult& status(const TestCampaignByIdResponse* msg);
};

const ::farm::nurture::core::contracts::common::RequestStatusResult&
TestCampaignByIdResponse::_Internal::status(const TestCampaignByIdResponse* msg) {
  return *msg->status_;
}
void TestCampaignByIdResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
TestCampaignByIdResponse::TestCampaignByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
}
TestCampaignByIdResponse::TestCampaignByIdResponse(const TestCampaignByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::farm::nurture::core::contracts::common::RequestStatusResult(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
}

void TestCampaignByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  status_ = nullptr;
}

TestCampaignByIdResponse::~TestCampaignByIdResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestCampaignByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void TestCampaignByIdResponse::ArenaDtor(void* object) {
  TestCampaignByIdResponse* _this = reinterpret_cast< TestCampaignByIdResponse* >(object);
  (void)_this;
}
void TestCampaignByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCampaignByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCampaignByIdResponse& TestCampaignByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCampaignByIdResponse_CampaignService_2fcampaign_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestCampaignByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCampaignByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCampaignByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  return target;
}

size_t TestCampaignByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCampaignByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCampaignByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCampaignByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
    MergeFrom(*source);
  }
}

void TestCampaignByIdResponse::MergeFrom(const TestCampaignByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::farm::nurture::core::contracts::common::RequestStatusResult::MergeFrom(from._internal_status());
  }
}

void TestCampaignByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCampaignByIdResponse::CopyFrom(const TestCampaignByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCampaignByIdResponse::IsInitialized() const {
  return true;
}

void TestCampaignByIdResponse::InternalSwap(TestCampaignByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCampaignByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CampaignService
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::CampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::CampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::CampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::CampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::MultiRequests* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::MultiRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::MultiRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::Request* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::MultiResponses* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::MultiResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::MultiResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::Response* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
