// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CampaignService/campaign_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CampaignService_2fcampaign_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CampaignService_2fcampaign_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/utils.pb.h"
#include "Common/headers.pb.h"
#include "Common/entities.pb.h"
#include "Common/event_reference.pb.h"
#include "Common/time_slot.pb.h"
#include "Common/tags.pb.h"
#include "CommunicationEngine/communication_engine.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CampaignService_2fcampaign_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CampaignService_2fcampaign_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CampaignService_2fcampaign_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {
class AddCampaignRequest;
class AddCampaignRequestDefaultTypeInternal;
extern AddCampaignRequestDefaultTypeInternal _AddCampaignRequest_default_instance_;
class AddCampaignResponse;
class AddCampaignResponseDefaultTypeInternal;
extern AddCampaignResponseDefaultTypeInternal _AddCampaignResponse_default_instance_;
class AddCampaignTemplateRequest;
class AddCampaignTemplateRequestDefaultTypeInternal;
extern AddCampaignTemplateRequestDefaultTypeInternal _AddCampaignTemplateRequest_default_instance_;
class AddCampaignTemplateResponse;
class AddCampaignTemplateResponseDefaultTypeInternal;
extern AddCampaignTemplateResponseDefaultTypeInternal _AddCampaignTemplateResponse_default_instance_;
class AddDynamicDataRequest;
class AddDynamicDataRequestDefaultTypeInternal;
extern AddDynamicDataRequestDefaultTypeInternal _AddDynamicDataRequest_default_instance_;
class AddDynamicDataResponse;
class AddDynamicDataResponseDefaultTypeInternal;
extern AddDynamicDataResponseDefaultTypeInternal _AddDynamicDataResponse_default_instance_;
class AddInactionTargetUserRequest;
class AddInactionTargetUserRequestDefaultTypeInternal;
extern AddInactionTargetUserRequestDefaultTypeInternal _AddInactionTargetUserRequest_default_instance_;
class AddInactionTargetUserResponse;
class AddInactionTargetUserResponseDefaultTypeInternal;
extern AddInactionTargetUserResponseDefaultTypeInternal _AddInactionTargetUserResponse_default_instance_;
class AddNewCampaignRequest;
class AddNewCampaignRequestDefaultTypeInternal;
extern AddNewCampaignRequestDefaultTypeInternal _AddNewCampaignRequest_default_instance_;
class AddNewCampaignResponse;
class AddNewCampaignResponseDefaultTypeInternal;
extern AddNewCampaignResponseDefaultTypeInternal _AddNewCampaignResponse_default_instance_;
class AddTargetUserRequest;
class AddTargetUserRequestDefaultTypeInternal;
extern AddTargetUserRequestDefaultTypeInternal _AddTargetUserRequest_default_instance_;
class AddTargetUserResponse;
class AddTargetUserResponseDefaultTypeInternal;
extern AddTargetUserResponseDefaultTypeInternal _AddTargetUserResponse_default_instance_;
class AthenaQueryRequest;
class AthenaQueryRequestDefaultTypeInternal;
extern AthenaQueryRequestDefaultTypeInternal _AthenaQueryRequest_default_instance_;
class AthenaQueryResponse;
class AthenaQueryResponseDefaultTypeInternal;
extern AthenaQueryResponseDefaultTypeInternal _AthenaQueryResponse_default_instance_;
class BulkAddCampaignRequest;
class BulkAddCampaignRequestDefaultTypeInternal;
extern BulkAddCampaignRequestDefaultTypeInternal _BulkAddCampaignRequest_default_instance_;
class BulkAddCampaignResponse;
class BulkAddCampaignResponseDefaultTypeInternal;
extern BulkAddCampaignResponseDefaultTypeInternal _BulkAddCampaignResponse_default_instance_;
class BulkAddCampaignTemplateRequest;
class BulkAddCampaignTemplateRequestDefaultTypeInternal;
extern BulkAddCampaignTemplateRequestDefaultTypeInternal _BulkAddCampaignTemplateRequest_default_instance_;
class BulkAddCampaignTemplateResponse;
class BulkAddCampaignTemplateResponseDefaultTypeInternal;
extern BulkAddCampaignTemplateResponseDefaultTypeInternal _BulkAddCampaignTemplateResponse_default_instance_;
class BulkAddDynamicDataRequest;
class BulkAddDynamicDataRequestDefaultTypeInternal;
extern BulkAddDynamicDataRequestDefaultTypeInternal _BulkAddDynamicDataRequest_default_instance_;
class BulkAddDynamicDataResponse;
class BulkAddDynamicDataResponseDefaultTypeInternal;
extern BulkAddDynamicDataResponseDefaultTypeInternal _BulkAddDynamicDataResponse_default_instance_;
class BulkAddInactionTargetUserRequest;
class BulkAddInactionTargetUserRequestDefaultTypeInternal;
extern BulkAddInactionTargetUserRequestDefaultTypeInternal _BulkAddInactionTargetUserRequest_default_instance_;
class BulkAddInactionTargetUserResponse;
class BulkAddInactionTargetUserResponseDefaultTypeInternal;
extern BulkAddInactionTargetUserResponseDefaultTypeInternal _BulkAddInactionTargetUserResponse_default_instance_;
class BulkAddNewCampaignRequest;
class BulkAddNewCampaignRequestDefaultTypeInternal;
extern BulkAddNewCampaignRequestDefaultTypeInternal _BulkAddNewCampaignRequest_default_instance_;
class BulkAddNewCampaignResponse;
class BulkAddNewCampaignResponseDefaultTypeInternal;
extern BulkAddNewCampaignResponseDefaultTypeInternal _BulkAddNewCampaignResponse_default_instance_;
class BulkAddTargetUserRequest;
class BulkAddTargetUserRequestDefaultTypeInternal;
extern BulkAddTargetUserRequestDefaultTypeInternal _BulkAddTargetUserRequest_default_instance_;
class BulkAddTargetUserResponse;
class BulkAddTargetUserResponseDefaultTypeInternal;
extern BulkAddTargetUserResponseDefaultTypeInternal _BulkAddTargetUserResponse_default_instance_;
class BulkUpdateCampaignRequest;
class BulkUpdateCampaignRequestDefaultTypeInternal;
extern BulkUpdateCampaignRequestDefaultTypeInternal _BulkUpdateCampaignRequest_default_instance_;
class BulkUpdateCampaignResponse;
class BulkUpdateCampaignResponseDefaultTypeInternal;
extern BulkUpdateCampaignResponseDefaultTypeInternal _BulkUpdateCampaignResponse_default_instance_;
class CampaignRequest;
class CampaignRequestDefaultTypeInternal;
extern CampaignRequestDefaultTypeInternal _CampaignRequest_default_instance_;
class CampaignResponse;
class CampaignResponseDefaultTypeInternal;
extern CampaignResponseDefaultTypeInternal _CampaignResponse_default_instance_;
class FilterCampaignRequest;
class FilterCampaignRequestDefaultTypeInternal;
extern FilterCampaignRequestDefaultTypeInternal _FilterCampaignRequest_default_instance_;
class FilterCampaignResponse;
class FilterCampaignResponseDefaultTypeInternal;
extern FilterCampaignResponseDefaultTypeInternal _FilterCampaignResponse_default_instance_;
class FindCampaignByIdRequest;
class FindCampaignByIdRequestDefaultTypeInternal;
extern FindCampaignByIdRequestDefaultTypeInternal _FindCampaignByIdRequest_default_instance_;
class FindCampaignByIdResponse;
class FindCampaignByIdResponseDefaultTypeInternal;
extern FindCampaignByIdResponseDefaultTypeInternal _FindCampaignByIdResponse_default_instance_;
class FindCampaignByIdResponseRecord;
class FindCampaignByIdResponseRecordDefaultTypeInternal;
extern FindCampaignByIdResponseRecordDefaultTypeInternal _FindCampaignByIdResponseRecord_default_instance_;
class FindCampaignTemplateByIdRequest;
class FindCampaignTemplateByIdRequestDefaultTypeInternal;
extern FindCampaignTemplateByIdRequestDefaultTypeInternal _FindCampaignTemplateByIdRequest_default_instance_;
class FindCampaignTemplateByIdResponse;
class FindCampaignTemplateByIdResponseDefaultTypeInternal;
extern FindCampaignTemplateByIdResponseDefaultTypeInternal _FindCampaignTemplateByIdResponse_default_instance_;
class FindCampaignTemplateByIdResponseRecord;
class FindCampaignTemplateByIdResponseRecordDefaultTypeInternal;
extern FindCampaignTemplateByIdResponseRecordDefaultTypeInternal _FindCampaignTemplateByIdResponseRecord_default_instance_;
class FindInactionTargetUserByCampaignIdRequest;
class FindInactionTargetUserByCampaignIdRequestDefaultTypeInternal;
extern FindInactionTargetUserByCampaignIdRequestDefaultTypeInternal _FindInactionTargetUserByCampaignIdRequest_default_instance_;
class FindInactionTargetUserByCampaignIdResponse;
class FindInactionTargetUserByCampaignIdResponseDefaultTypeInternal;
extern FindInactionTargetUserByCampaignIdResponseDefaultTypeInternal _FindInactionTargetUserByCampaignIdResponse_default_instance_;
class FindInactionTargetUserByCampaignIdResponseRecord;
class FindInactionTargetUserByCampaignIdResponseRecordDefaultTypeInternal;
extern FindInactionTargetUserByCampaignIdResponseRecordDefaultTypeInternal _FindInactionTargetUserByCampaignIdResponseRecord_default_instance_;
class FindTargetUserByIdRequest;
class FindTargetUserByIdRequestDefaultTypeInternal;
extern FindTargetUserByIdRequestDefaultTypeInternal _FindTargetUserByIdRequest_default_instance_;
class FindTargetUserByIdResponse;
class FindTargetUserByIdResponseDefaultTypeInternal;
extern FindTargetUserByIdResponseDefaultTypeInternal _FindTargetUserByIdResponse_default_instance_;
class FindTargetUserByIdResponseRecord;
class FindTargetUserByIdResponseRecordDefaultTypeInternal;
extern FindTargetUserByIdResponseRecordDefaultTypeInternal _FindTargetUserByIdResponseRecord_default_instance_;
class GetDynamicDataByKeyRequest;
class GetDynamicDataByKeyRequestDefaultTypeInternal;
extern GetDynamicDataByKeyRequestDefaultTypeInternal _GetDynamicDataByKeyRequest_default_instance_;
class GetDynamicDataByKeyResponse;
class GetDynamicDataByKeyResponseDefaultTypeInternal;
extern GetDynamicDataByKeyResponseDefaultTypeInternal _GetDynamicDataByKeyResponse_default_instance_;
class GetDynamicDataByKeyResponseRecord;
class GetDynamicDataByKeyResponseRecordDefaultTypeInternal;
extern GetDynamicDataByKeyResponseRecordDefaultTypeInternal _GetDynamicDataByKeyResponseRecord_default_instance_;
class MultiRequests;
class MultiRequestsDefaultTypeInternal;
extern MultiRequestsDefaultTypeInternal _MultiRequests_default_instance_;
class MultiResponses;
class MultiResponsesDefaultTypeInternal;
extern MultiResponsesDefaultTypeInternal _MultiResponses_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class TestCampaignByIdRequest;
class TestCampaignByIdRequestDefaultTypeInternal;
extern TestCampaignByIdRequestDefaultTypeInternal _TestCampaignByIdRequest_default_instance_;
class TestCampaignByIdResponse;
class TestCampaignByIdResponseDefaultTypeInternal;
extern TestCampaignByIdResponseDefaultTypeInternal _TestCampaignByIdResponse_default_instance_;
class TestCampaignRequest;
class TestCampaignRequestDefaultTypeInternal;
extern TestCampaignRequestDefaultTypeInternal _TestCampaignRequest_default_instance_;
class TestCampaignTemplateRequest;
class TestCampaignTemplateRequestDefaultTypeInternal;
extern TestCampaignTemplateRequestDefaultTypeInternal _TestCampaignTemplateRequest_default_instance_;
class TestNewCampaignRequest;
class TestNewCampaignRequestDefaultTypeInternal;
extern TestNewCampaignRequestDefaultTypeInternal _TestNewCampaignRequest_default_instance_;
class TestNewCampaignResponse;
class TestNewCampaignResponseDefaultTypeInternal;
extern TestNewCampaignResponseDefaultTypeInternal _TestNewCampaignResponse_default_instance_;
class TestTargetUserRequest;
class TestTargetUserRequestDefaultTypeInternal;
extern TestTargetUserRequestDefaultTypeInternal _TestTargetUserRequest_default_instance_;
class UpdateCampaignRequest;
class UpdateCampaignRequestDefaultTypeInternal;
extern UpdateCampaignRequestDefaultTypeInternal _UpdateCampaignRequest_default_instance_;
class UpdateCampaignResponse;
class UpdateCampaignResponseDefaultTypeInternal;
extern UpdateCampaignResponseDefaultTypeInternal _UpdateCampaignResponse_default_instance_;
}  // namespace CampaignService
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::CampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::CampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::MultiRequests* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::MultiRequests>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::MultiResponses* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::MultiResponses>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::Request* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::Request>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::Response* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::Response>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestCampaignByIdRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestCampaignByIdResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest>(Arena*);
template<> ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {

// ===================================================================

class AddCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddCampaignRequest) */ {
 public:
  inline AddCampaignRequest() : AddCampaignRequest(nullptr) {}
  virtual ~AddCampaignRequest();

  AddCampaignRequest(const AddCampaignRequest& from);
  AddCampaignRequest(AddCampaignRequest&& from) noexcept
    : AddCampaignRequest() {
    *this = ::std::move(from);
  }

  inline AddCampaignRequest& operator=(const AddCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCampaignRequest& operator=(AddCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCampaignRequest& default_instance();

  static inline const AddCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const AddCampaignRequest*>(
               &_AddCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddCampaignRequest& a, AddCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCampaignRequest* New() const final {
    return CreateMaybeMessage<AddCampaignRequest>(nullptr);
  }

  AddCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCampaignRequest& from);
  void MergeFrom(const AddCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddCampaignRequest";
  }
  protected:
  explicit AddCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentMetadataFieldNumber = 7,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCronExpressionFieldNumber = 5,
    kQueryFieldNumber = 13,
    kInactionQueryFieldNumber = 14,
    kRequestHeadersFieldNumber = 1,
    kInactionDurationFieldNumber = 12,
    kCreatedByActorFieldNumber = 15,
    kMediaFieldNumber = 16,
    kChannelAttributesFieldNumber = 17,
    kNamespaceFieldNumber = 2,
    kOccurrencesFieldNumber = 6,
    kCommunicationChannelFieldNumber = 8,
    kStatusFieldNumber = 9,
    kTypeFieldNumber = 10,
    kCampaignScheduleTypeFieldNumber = 11,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 7;
  int content_metadata_size() const;
  private:
  int _internal_content_metadata_size() const;
  public:
  void clear_content_metadata();
  ::farm::nurture::core::contracts::common::Attribs* mutable_content_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_content_metadata();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_content_metadata(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_content_metadata();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& content_metadata(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_content_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      content_metadata() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string cronExpression = 5;
  void clear_cronexpression();
  const std::string& cronexpression() const;
  void set_cronexpression(const std::string& value);
  void set_cronexpression(std::string&& value);
  void set_cronexpression(const char* value);
  void set_cronexpression(const char* value, size_t size);
  std::string* mutable_cronexpression();
  std::string* release_cronexpression();
  void set_allocated_cronexpression(std::string* cronexpression);
  private:
  const std::string& _internal_cronexpression() const;
  void _internal_set_cronexpression(const std::string& value);
  std::string* _internal_mutable_cronexpression();
  public:

  // string query = 13;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string inaction_query = 14;
  void clear_inaction_query();
  const std::string& inaction_query() const;
  void set_inaction_query(const std::string& value);
  void set_inaction_query(std::string&& value);
  void set_inaction_query(const char* value);
  void set_inaction_query(const char* value, size_t size);
  std::string* mutable_inaction_query();
  std::string* release_inaction_query();
  void set_allocated_inaction_query(std::string* inaction_query);
  private:
  const std::string& _internal_inaction_query() const;
  void _internal_set_inaction_query(const std::string& value);
  std::string* _internal_mutable_inaction_query();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .google.protobuf.Duration inactionDuration = 12;
  bool has_inactionduration() const;
  private:
  bool _internal_has_inactionduration() const;
  public:
  void clear_inactionduration();
  const PROTOBUF_NAMESPACE_ID::Duration& inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_inactionduration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_inactionduration();
  void set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_inactionduration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_inactionduration();
  public:
  void unsafe_arena_set_allocated_inactionduration(
      PROTOBUF_NAMESPACE_ID::Duration* inactionduration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_inactionduration();

  // .farm.nurture.core.contracts.common.ActorID createdByActor = 15;
  bool has_createdbyactor() const;
  private:
  bool _internal_has_createdbyactor() const;
  public:
  void clear_createdbyactor();
  const ::farm::nurture::core::contracts::common::ActorID& createdbyactor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_createdbyactor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_createdbyactor();
  void set_allocated_createdbyactor(::farm::nurture::core::contracts::common::ActorID* createdbyactor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_createdbyactor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_createdbyactor();
  public:
  void unsafe_arena_set_allocated_createdbyactor(
      ::farm::nurture::core::contracts::common::ActorID* createdbyactor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_createdbyactor();

  // .farm.nurture.core.contracts.ce.Media media = 16;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::farm::nurture::core::contracts::ce::Media& media() const;
  ::farm::nurture::core::contracts::ce::Media* release_media();
  ::farm::nurture::core::contracts::ce::Media* mutable_media();
  void set_allocated_media(::farm::nurture::core::contracts::ce::Media* media);
  private:
  const ::farm::nurture::core::contracts::ce::Media& _internal_media() const;
  ::farm::nurture::core::contracts::ce::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::farm::nurture::core::contracts::ce::Media* media);
  ::farm::nurture::core::contracts::ce::Media* unsafe_arena_release_media();

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 17;
  bool has_channel_attributes() const;
  private:
  bool _internal_has_channel_attributes() const;
  public:
  void clear_channel_attributes();
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* release_channel_attributes();
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* mutable_channel_attributes();
  void set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  private:
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& _internal_channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* _internal_mutable_channel_attributes();
  public:
  void unsafe_arena_set_allocated_channel_attributes(
      ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* unsafe_arena_release_channel_attributes();

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // int32 occurrences = 6;
  void clear_occurrences();
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences() const;
  void set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occurrences() const;
  void _internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 8;
  void clear_communicationchannel();
  ::farm::nurture::core::contracts::common::CommunicationChannel communicationchannel() const;
  void set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_communicationchannel() const;
  void _internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // .farm.nurture.core.contracts.common.CampaignStatus status = 9;
  void clear_status();
  ::farm::nurture::core::contracts::common::CampaignStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  private:
  ::farm::nurture::core::contracts::common::CampaignStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  public:

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 10;
  void clear_type();
  ::farm::nurture::core::contracts::common::CampaignQueryType type() const;
  void set_type(::farm::nurture::core::contracts::common::CampaignQueryType value);
  private:
  ::farm::nurture::core::contracts::common::CampaignQueryType _internal_type() const;
  void _internal_set_type(::farm::nurture::core::contracts::common::CampaignQueryType value);
  public:

  // .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 11;
  void clear_campaignscheduletype();
  ::farm::nurture::core::contracts::common::CampaignScheduleType campaignscheduletype() const;
  void set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  private:
  ::farm::nurture::core::contracts::common::CampaignScheduleType _internal_campaignscheduletype() const;
  void _internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > content_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cronexpression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inaction_query_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  PROTOBUF_NAMESPACE_ID::Duration* inactionduration_;
  ::farm::nurture::core::contracts::common::ActorID* createdbyactor_;
  ::farm::nurture::core::contracts::ce::Media* media_;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes_;
  int namespace__;
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences_;
  int communicationchannel_;
  int status_;
  int type_;
  int campaignscheduletype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestCampaignRequest) */ {
 public:
  inline TestCampaignRequest() : TestCampaignRequest(nullptr) {}
  virtual ~TestCampaignRequest();

  TestCampaignRequest(const TestCampaignRequest& from);
  TestCampaignRequest(TestCampaignRequest&& from) noexcept
    : TestCampaignRequest() {
    *this = ::std::move(from);
  }

  inline TestCampaignRequest& operator=(const TestCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCampaignRequest& operator=(TestCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCampaignRequest& default_instance();

  static inline const TestCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const TestCampaignRequest*>(
               &_TestCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestCampaignRequest& a, TestCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCampaignRequest* New() const final {
    return CreateMaybeMessage<TestCampaignRequest>(nullptr);
  }

  TestCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCampaignRequest& from);
  void MergeFrom(const TestCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestCampaignRequest";
  }
  protected:
  explicit TestCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentMetadataFieldNumber = 3,
    kQueryFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kMediaFieldNumber = 7,
    kChannelAttributesFieldNumber = 8,
    kNamespaceFieldNumber = 2,
    kCommunicationChannelFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 3;
  int content_metadata_size() const;
  private:
  int _internal_content_metadata_size() const;
  public:
  void clear_content_metadata();
  ::farm::nurture::core::contracts::common::Attribs* mutable_content_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_content_metadata();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_content_metadata(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_content_metadata();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& content_metadata(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_content_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      content_metadata() const;

  // string query = 6;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.ce.Media media = 7;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::farm::nurture::core::contracts::ce::Media& media() const;
  ::farm::nurture::core::contracts::ce::Media* release_media();
  ::farm::nurture::core::contracts::ce::Media* mutable_media();
  void set_allocated_media(::farm::nurture::core::contracts::ce::Media* media);
  private:
  const ::farm::nurture::core::contracts::ce::Media& _internal_media() const;
  ::farm::nurture::core::contracts::ce::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::farm::nurture::core::contracts::ce::Media* media);
  ::farm::nurture::core::contracts::ce::Media* unsafe_arena_release_media();

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 8;
  bool has_channel_attributes() const;
  private:
  bool _internal_has_channel_attributes() const;
  public:
  void clear_channel_attributes();
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* release_channel_attributes();
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* mutable_channel_attributes();
  void set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  private:
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& _internal_channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* _internal_mutable_channel_attributes();
  public:
  void unsafe_arena_set_allocated_channel_attributes(
      ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* unsafe_arena_release_channel_attributes();

  // .farm.nurture.core.contracts.common.NameSpace namespace = 2;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 4;
  void clear_communicationchannel();
  ::farm::nurture::core::contracts::common::CommunicationChannel communicationchannel() const;
  void set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_communicationchannel() const;
  void _internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // .farm.nurture.core.contracts.common.CampaignQueryType type = 5;
  void clear_type();
  ::farm::nurture::core::contracts::common::CampaignQueryType type() const;
  void set_type(::farm::nurture::core::contracts::common::CampaignQueryType value);
  private:
  ::farm::nurture::core::contracts::common::CampaignQueryType _internal_type() const;
  void _internal_set_type(::farm::nurture::core::contracts::common::CampaignQueryType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > content_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::ce::Media* media_;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes_;
  int namespace__;
  int communicationchannel_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest) */ {
 public:
  inline BulkAddCampaignRequest() : BulkAddCampaignRequest(nullptr) {}
  virtual ~BulkAddCampaignRequest();

  BulkAddCampaignRequest(const BulkAddCampaignRequest& from);
  BulkAddCampaignRequest(BulkAddCampaignRequest&& from) noexcept
    : BulkAddCampaignRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddCampaignRequest& operator=(const BulkAddCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddCampaignRequest& operator=(BulkAddCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddCampaignRequest& default_instance();

  static inline const BulkAddCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddCampaignRequest*>(
               &_BulkAddCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BulkAddCampaignRequest& a, BulkAddCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddCampaignRequest* New() const final {
    return CreateMaybeMessage<BulkAddCampaignRequest>(nullptr);
  }

  BulkAddCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddCampaignRequest& from);
  void MergeFrom(const BulkAddCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest";
  }
  protected:
  explicit BulkAddCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddCampaignResponse) */ {
 public:
  inline AddCampaignResponse() : AddCampaignResponse(nullptr) {}
  virtual ~AddCampaignResponse();

  AddCampaignResponse(const AddCampaignResponse& from);
  AddCampaignResponse(AddCampaignResponse&& from) noexcept
    : AddCampaignResponse() {
    *this = ::std::move(from);
  }

  inline AddCampaignResponse& operator=(const AddCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCampaignResponse& operator=(AddCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCampaignResponse& default_instance();

  static inline const AddCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const AddCampaignResponse*>(
               &_AddCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddCampaignResponse& a, AddCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCampaignResponse* New() const final {
    return CreateMaybeMessage<AddCampaignResponse>(nullptr);
  }

  AddCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCampaignResponse& from);
  void MergeFrom(const AddCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddCampaignResponse";
  }
  protected:
  explicit AddCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse) */ {
 public:
  inline BulkAddCampaignResponse() : BulkAddCampaignResponse(nullptr) {}
  virtual ~BulkAddCampaignResponse();

  BulkAddCampaignResponse(const BulkAddCampaignResponse& from);
  BulkAddCampaignResponse(BulkAddCampaignResponse&& from) noexcept
    : BulkAddCampaignResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddCampaignResponse& operator=(const BulkAddCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddCampaignResponse& operator=(BulkAddCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddCampaignResponse& default_instance();

  static inline const BulkAddCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddCampaignResponse*>(
               &_BulkAddCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BulkAddCampaignResponse& a, BulkAddCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddCampaignResponse* New() const final {
    return CreateMaybeMessage<BulkAddCampaignResponse>(nullptr);
  }

  BulkAddCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddCampaignResponse& from);
  void MergeFrom(const BulkAddCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse";
  }
  protected:
  explicit BulkAddCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest) */ {
 public:
  inline UpdateCampaignRequest() : UpdateCampaignRequest(nullptr) {}
  virtual ~UpdateCampaignRequest();

  UpdateCampaignRequest(const UpdateCampaignRequest& from);
  UpdateCampaignRequest(UpdateCampaignRequest&& from) noexcept
    : UpdateCampaignRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCampaignRequest& operator=(const UpdateCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCampaignRequest& operator=(UpdateCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCampaignRequest& default_instance();

  static inline const UpdateCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCampaignRequest*>(
               &_UpdateCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateCampaignRequest& a, UpdateCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCampaignRequest* New() const final {
    return CreateMaybeMessage<UpdateCampaignRequest>(nullptr);
  }

  UpdateCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCampaignRequest& from);
  void MergeFrom(const UpdateCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest";
  }
  protected:
  explicit UpdateCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCronExpressionFieldNumber = 3,
    kQueryFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kUpdatedByActorFieldNumber = 6,
    kStatusFieldNumber = 4,
    kOccurrencesFieldNumber = 7,
    kIdFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cronExpression = 3;
  void clear_cronexpression();
  const std::string& cronexpression() const;
  void set_cronexpression(const std::string& value);
  void set_cronexpression(std::string&& value);
  void set_cronexpression(const char* value);
  void set_cronexpression(const char* value, size_t size);
  std::string* mutable_cronexpression();
  std::string* release_cronexpression();
  void set_allocated_cronexpression(std::string* cronexpression);
  private:
  const std::string& _internal_cronexpression() const;
  void _internal_set_cronexpression(const std::string& value);
  std::string* _internal_mutable_cronexpression();
  public:

  // string query = 5;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID updatedByActor = 6;
  bool has_updatedbyactor() const;
  private:
  bool _internal_has_updatedbyactor() const;
  public:
  void clear_updatedbyactor();
  const ::farm::nurture::core::contracts::common::ActorID& updatedbyactor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_updatedbyactor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_updatedbyactor();
  void set_allocated_updatedbyactor(::farm::nurture::core::contracts::common::ActorID* updatedbyactor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_updatedbyactor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_updatedbyactor();
  public:
  void unsafe_arena_set_allocated_updatedbyactor(
      ::farm::nurture::core::contracts::common::ActorID* updatedbyactor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_updatedbyactor();

  // .farm.nurture.core.contracts.common.CampaignStatus status = 4;
  void clear_status();
  ::farm::nurture::core::contracts::common::CampaignStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  private:
  ::farm::nurture::core::contracts::common::CampaignStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  public:

  // int32 occurrences = 7;
  void clear_occurrences();
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences() const;
  void set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occurrences() const;
  void _internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 id = 8;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cronexpression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* updatedbyactor_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest) */ {
 public:
  inline BulkUpdateCampaignRequest() : BulkUpdateCampaignRequest(nullptr) {}
  virtual ~BulkUpdateCampaignRequest();

  BulkUpdateCampaignRequest(const BulkUpdateCampaignRequest& from);
  BulkUpdateCampaignRequest(BulkUpdateCampaignRequest&& from) noexcept
    : BulkUpdateCampaignRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateCampaignRequest& operator=(const BulkUpdateCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateCampaignRequest& operator=(BulkUpdateCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateCampaignRequest& default_instance();

  static inline const BulkUpdateCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateCampaignRequest*>(
               &_BulkUpdateCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BulkUpdateCampaignRequest& a, BulkUpdateCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateCampaignRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateCampaignRequest>(nullptr);
  }

  BulkUpdateCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateCampaignRequest& from);
  void MergeFrom(const BulkUpdateCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest";
  }
  protected:
  explicit BulkUpdateCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse) */ {
 public:
  inline UpdateCampaignResponse() : UpdateCampaignResponse(nullptr) {}
  virtual ~UpdateCampaignResponse();

  UpdateCampaignResponse(const UpdateCampaignResponse& from);
  UpdateCampaignResponse(UpdateCampaignResponse&& from) noexcept
    : UpdateCampaignResponse() {
    *this = ::std::move(from);
  }

  inline UpdateCampaignResponse& operator=(const UpdateCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCampaignResponse& operator=(UpdateCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCampaignResponse& default_instance();

  static inline const UpdateCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateCampaignResponse*>(
               &_UpdateCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateCampaignResponse& a, UpdateCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCampaignResponse* New() const final {
    return CreateMaybeMessage<UpdateCampaignResponse>(nullptr);
  }

  UpdateCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCampaignResponse& from);
  void MergeFrom(const UpdateCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse";
  }
  protected:
  explicit UpdateCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse) */ {
 public:
  inline BulkUpdateCampaignResponse() : BulkUpdateCampaignResponse(nullptr) {}
  virtual ~BulkUpdateCampaignResponse();

  BulkUpdateCampaignResponse(const BulkUpdateCampaignResponse& from);
  BulkUpdateCampaignResponse(BulkUpdateCampaignResponse&& from) noexcept
    : BulkUpdateCampaignResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateCampaignResponse& operator=(const BulkUpdateCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateCampaignResponse& operator=(BulkUpdateCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateCampaignResponse& default_instance();

  static inline const BulkUpdateCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateCampaignResponse*>(
               &_BulkUpdateCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BulkUpdateCampaignResponse& a, BulkUpdateCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateCampaignResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateCampaignResponse>(nullptr);
  }

  BulkUpdateCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateCampaignResponse& from);
  void MergeFrom(const BulkUpdateCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse";
  }
  protected:
  explicit BulkUpdateCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCampaignTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest) */ {
 public:
  inline AddCampaignTemplateRequest() : AddCampaignTemplateRequest(nullptr) {}
  virtual ~AddCampaignTemplateRequest();

  AddCampaignTemplateRequest(const AddCampaignTemplateRequest& from);
  AddCampaignTemplateRequest(AddCampaignTemplateRequest&& from) noexcept
    : AddCampaignTemplateRequest() {
    *this = ::std::move(from);
  }

  inline AddCampaignTemplateRequest& operator=(const AddCampaignTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCampaignTemplateRequest& operator=(AddCampaignTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCampaignTemplateRequest& default_instance();

  static inline const AddCampaignTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const AddCampaignTemplateRequest*>(
               &_AddCampaignTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddCampaignTemplateRequest& a, AddCampaignTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCampaignTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCampaignTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCampaignTemplateRequest* New() const final {
    return CreateMaybeMessage<AddCampaignTemplateRequest>(nullptr);
  }

  AddCampaignTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCampaignTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCampaignTemplateRequest& from);
  void MergeFrom(const AddCampaignTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCampaignTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest";
  }
  protected:
  explicit AddCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNameFieldNumber = 3,
    kCampaignNameFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
    kDistributionPercentFieldNumber = 5,
  };
  // string templateName = 3;
  void clear_templatename();
  const std::string& templatename() const;
  void set_templatename(const std::string& value);
  void set_templatename(std::string&& value);
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  std::string* mutable_templatename();
  std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // string campaignName = 4;
  void clear_campaignname();
  const std::string& campaignname() const;
  void set_campaignname(const std::string& value);
  void set_campaignname(std::string&& value);
  void set_campaignname(const char* value);
  void set_campaignname(const char* value, size_t size);
  std::string* mutable_campaignname();
  std::string* release_campaignname();
  void set_allocated_campaignname(std::string* campaignname);
  private:
  const std::string& _internal_campaignname() const;
  void _internal_set_campaignname(const std::string& value);
  std::string* _internal_mutable_campaignname();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 distributionPercent = 5;
  void clear_distributionpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent() const;
  void set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distributionpercent() const;
  void _internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaignname_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestCampaignTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest) */ {
 public:
  inline TestCampaignTemplateRequest() : TestCampaignTemplateRequest(nullptr) {}
  virtual ~TestCampaignTemplateRequest();

  TestCampaignTemplateRequest(const TestCampaignTemplateRequest& from);
  TestCampaignTemplateRequest(TestCampaignTemplateRequest&& from) noexcept
    : TestCampaignTemplateRequest() {
    *this = ::std::move(from);
  }

  inline TestCampaignTemplateRequest& operator=(const TestCampaignTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCampaignTemplateRequest& operator=(TestCampaignTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCampaignTemplateRequest& default_instance();

  static inline const TestCampaignTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const TestCampaignTemplateRequest*>(
               &_TestCampaignTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TestCampaignTemplateRequest& a, TestCampaignTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCampaignTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCampaignTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCampaignTemplateRequest* New() const final {
    return CreateMaybeMessage<TestCampaignTemplateRequest>(nullptr);
  }

  TestCampaignTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCampaignTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCampaignTemplateRequest& from);
  void MergeFrom(const TestCampaignTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCampaignTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest";
  }
  protected:
  explicit TestCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNameFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
    kDistributionPercentFieldNumber = 3,
  };
  // string templateName = 2;
  void clear_templatename();
  const std::string& templatename() const;
  void set_templatename(const std::string& value);
  void set_templatename(std::string&& value);
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  std::string* mutable_templatename();
  std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int32 distributionPercent = 3;
  void clear_distributionpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent() const;
  void set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distributionpercent() const;
  void _internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddCampaignTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest) */ {
 public:
  inline BulkAddCampaignTemplateRequest() : BulkAddCampaignTemplateRequest(nullptr) {}
  virtual ~BulkAddCampaignTemplateRequest();

  BulkAddCampaignTemplateRequest(const BulkAddCampaignTemplateRequest& from);
  BulkAddCampaignTemplateRequest(BulkAddCampaignTemplateRequest&& from) noexcept
    : BulkAddCampaignTemplateRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddCampaignTemplateRequest& operator=(const BulkAddCampaignTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddCampaignTemplateRequest& operator=(BulkAddCampaignTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddCampaignTemplateRequest& default_instance();

  static inline const BulkAddCampaignTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddCampaignTemplateRequest*>(
               &_BulkAddCampaignTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BulkAddCampaignTemplateRequest& a, BulkAddCampaignTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddCampaignTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddCampaignTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddCampaignTemplateRequest* New() const final {
    return CreateMaybeMessage<BulkAddCampaignTemplateRequest>(nullptr);
  }

  BulkAddCampaignTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddCampaignTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddCampaignTemplateRequest& from);
  void MergeFrom(const BulkAddCampaignTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddCampaignTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest";
  }
  protected:
  explicit BulkAddCampaignTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCampaignTemplateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse) */ {
 public:
  inline AddCampaignTemplateResponse() : AddCampaignTemplateResponse(nullptr) {}
  virtual ~AddCampaignTemplateResponse();

  AddCampaignTemplateResponse(const AddCampaignTemplateResponse& from);
  AddCampaignTemplateResponse(AddCampaignTemplateResponse&& from) noexcept
    : AddCampaignTemplateResponse() {
    *this = ::std::move(from);
  }

  inline AddCampaignTemplateResponse& operator=(const AddCampaignTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCampaignTemplateResponse& operator=(AddCampaignTemplateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCampaignTemplateResponse& default_instance();

  static inline const AddCampaignTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const AddCampaignTemplateResponse*>(
               &_AddCampaignTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddCampaignTemplateResponse& a, AddCampaignTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCampaignTemplateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCampaignTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCampaignTemplateResponse* New() const final {
    return CreateMaybeMessage<AddCampaignTemplateResponse>(nullptr);
  }

  AddCampaignTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCampaignTemplateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCampaignTemplateResponse& from);
  void MergeFrom(const AddCampaignTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCampaignTemplateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse";
  }
  protected:
  explicit AddCampaignTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddCampaignTemplateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse) */ {
 public:
  inline BulkAddCampaignTemplateResponse() : BulkAddCampaignTemplateResponse(nullptr) {}
  virtual ~BulkAddCampaignTemplateResponse();

  BulkAddCampaignTemplateResponse(const BulkAddCampaignTemplateResponse& from);
  BulkAddCampaignTemplateResponse(BulkAddCampaignTemplateResponse&& from) noexcept
    : BulkAddCampaignTemplateResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddCampaignTemplateResponse& operator=(const BulkAddCampaignTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddCampaignTemplateResponse& operator=(BulkAddCampaignTemplateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddCampaignTemplateResponse& default_instance();

  static inline const BulkAddCampaignTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddCampaignTemplateResponse*>(
               &_BulkAddCampaignTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BulkAddCampaignTemplateResponse& a, BulkAddCampaignTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddCampaignTemplateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddCampaignTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddCampaignTemplateResponse* New() const final {
    return CreateMaybeMessage<BulkAddCampaignTemplateResponse>(nullptr);
  }

  BulkAddCampaignTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddCampaignTemplateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddCampaignTemplateResponse& from);
  void MergeFrom(const BulkAddCampaignTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddCampaignTemplateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse";
  }
  protected:
  explicit BulkAddCampaignTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddNewCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest) */ {
 public:
  inline AddNewCampaignRequest() : AddNewCampaignRequest(nullptr) {}
  virtual ~AddNewCampaignRequest();

  AddNewCampaignRequest(const AddNewCampaignRequest& from);
  AddNewCampaignRequest(AddNewCampaignRequest&& from) noexcept
    : AddNewCampaignRequest() {
    *this = ::std::move(from);
  }

  inline AddNewCampaignRequest& operator=(const AddNewCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewCampaignRequest& operator=(AddNewCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewCampaignRequest& default_instance();

  static inline const AddNewCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const AddNewCampaignRequest*>(
               &_AddNewCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddNewCampaignRequest& a, AddNewCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNewCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewCampaignRequest* New() const final {
    return CreateMaybeMessage<AddNewCampaignRequest>(nullptr);
  }

  AddNewCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewCampaignRequest& from);
  void MergeFrom(const AddNewCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest";
  }
  protected:
  explicit AddNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddCampaignTemplateRequestsFieldNumber = 4,
    kAddTargetUserRequestsFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kAddCampaignRequestFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest addCampaignTemplateRequests = 4;
  int addcampaigntemplaterequests_size() const;
  private:
  int _internal_addcampaigntemplaterequests_size() const;
  public:
  void clear_addcampaigntemplaterequests();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* mutable_addcampaigntemplaterequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >*
      mutable_addcampaigntemplaterequests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& _internal_addcampaigntemplaterequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* _internal_add_addcampaigntemplaterequests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& addcampaigntemplaterequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* add_addcampaigntemplaterequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >&
      addcampaigntemplaterequests() const;

  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest addTargetUserRequests = 5;
  int addtargetuserrequests_size() const;
  private:
  int _internal_addtargetuserrequests_size() const;
  public:
  void clear_addtargetuserrequests();
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* mutable_addtargetuserrequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >*
      mutable_addtargetuserrequests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& _internal_addtargetuserrequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* _internal_add_addtargetuserrequests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& addtargetuserrequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* add_addtargetuserrequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >&
      addtargetuserrequests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest addCampaignRequest = 3;
  bool has_addcampaignrequest() const;
  private:
  bool _internal_has_addcampaignrequest() const;
  public:
  void clear_addcampaignrequest();
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& addcampaignrequest() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* release_addcampaignrequest();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* mutable_addcampaignrequest();
  void set_allocated_addcampaignrequest(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* addcampaignrequest);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& _internal_addcampaignrequest() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* _internal_mutable_addcampaignrequest();
  public:
  void unsafe_arena_set_allocated_addcampaignrequest(
      ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* addcampaignrequest);
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* unsafe_arena_release_addcampaignrequest();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest > addcampaigntemplaterequests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest > addtargetuserrequests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* addcampaignrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddNewCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest) */ {
 public:
  inline BulkAddNewCampaignRequest() : BulkAddNewCampaignRequest(nullptr) {}
  virtual ~BulkAddNewCampaignRequest();

  BulkAddNewCampaignRequest(const BulkAddNewCampaignRequest& from);
  BulkAddNewCampaignRequest(BulkAddNewCampaignRequest&& from) noexcept
    : BulkAddNewCampaignRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddNewCampaignRequest& operator=(const BulkAddNewCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddNewCampaignRequest& operator=(BulkAddNewCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddNewCampaignRequest& default_instance();

  static inline const BulkAddNewCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddNewCampaignRequest*>(
               &_BulkAddNewCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BulkAddNewCampaignRequest& a, BulkAddNewCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddNewCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddNewCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddNewCampaignRequest* New() const final {
    return CreateMaybeMessage<BulkAddNewCampaignRequest>(nullptr);
  }

  BulkAddNewCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddNewCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddNewCampaignRequest& from);
  void MergeFrom(const BulkAddNewCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddNewCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest";
  }
  protected:
  explicit BulkAddNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddNewCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse) */ {
 public:
  inline AddNewCampaignResponse() : AddNewCampaignResponse(nullptr) {}
  virtual ~AddNewCampaignResponse();

  AddNewCampaignResponse(const AddNewCampaignResponse& from);
  AddNewCampaignResponse(AddNewCampaignResponse&& from) noexcept
    : AddNewCampaignResponse() {
    *this = ::std::move(from);
  }

  inline AddNewCampaignResponse& operator=(const AddNewCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewCampaignResponse& operator=(AddNewCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewCampaignResponse& default_instance();

  static inline const AddNewCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const AddNewCampaignResponse*>(
               &_AddNewCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddNewCampaignResponse& a, AddNewCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNewCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewCampaignResponse* New() const final {
    return CreateMaybeMessage<AddNewCampaignResponse>(nullptr);
  }

  AddNewCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewCampaignResponse& from);
  void MergeFrom(const AddNewCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse";
  }
  protected:
  explicit AddNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddNewCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse) */ {
 public:
  inline BulkAddNewCampaignResponse() : BulkAddNewCampaignResponse(nullptr) {}
  virtual ~BulkAddNewCampaignResponse();

  BulkAddNewCampaignResponse(const BulkAddNewCampaignResponse& from);
  BulkAddNewCampaignResponse(BulkAddNewCampaignResponse&& from) noexcept
    : BulkAddNewCampaignResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddNewCampaignResponse& operator=(const BulkAddNewCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddNewCampaignResponse& operator=(BulkAddNewCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddNewCampaignResponse& default_instance();

  static inline const BulkAddNewCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddNewCampaignResponse*>(
               &_BulkAddNewCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BulkAddNewCampaignResponse& a, BulkAddNewCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddNewCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddNewCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddNewCampaignResponse* New() const final {
    return CreateMaybeMessage<BulkAddNewCampaignResponse>(nullptr);
  }

  BulkAddNewCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddNewCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddNewCampaignResponse& from);
  void MergeFrom(const BulkAddNewCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddNewCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse";
  }
  protected:
  explicit BulkAddNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.CampaignRequest) */ {
 public:
  inline CampaignRequest() : CampaignRequest(nullptr) {}
  virtual ~CampaignRequest();

  CampaignRequest(const CampaignRequest& from);
  CampaignRequest(CampaignRequest&& from) noexcept
    : CampaignRequest() {
    *this = ::std::move(from);
  }

  inline CampaignRequest& operator=(const CampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CampaignRequest& operator=(CampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CampaignRequest& default_instance();

  static inline const CampaignRequest* internal_default_instance() {
    return reinterpret_cast<const CampaignRequest*>(
               &_CampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CampaignRequest& a, CampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CampaignRequest* New() const final {
    return CreateMaybeMessage<CampaignRequest>(nullptr);
  }

  CampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CampaignRequest& from);
  void MergeFrom(const CampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.CampaignRequest";
  }
  protected:
  explicit CampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 3;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.CampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.CampaignResponse) */ {
 public:
  inline CampaignResponse() : CampaignResponse(nullptr) {}
  virtual ~CampaignResponse();

  CampaignResponse(const CampaignResponse& from);
  CampaignResponse(CampaignResponse&& from) noexcept
    : CampaignResponse() {
    *this = ::std::move(from);
  }

  inline CampaignResponse& operator=(const CampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CampaignResponse& operator=(CampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CampaignResponse& default_instance();

  static inline const CampaignResponse* internal_default_instance() {
    return reinterpret_cast<const CampaignResponse*>(
               &_CampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CampaignResponse& a, CampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CampaignResponse* New() const final {
    return CreateMaybeMessage<CampaignResponse>(nullptr);
  }

  CampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CampaignResponse& from);
  void MergeFrom(const CampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.CampaignResponse";
  }
  protected:
  explicit CampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.CampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest) */ {
 public:
  inline FindCampaignByIdRequest() : FindCampaignByIdRequest(nullptr) {}
  virtual ~FindCampaignByIdRequest();

  FindCampaignByIdRequest(const FindCampaignByIdRequest& from);
  FindCampaignByIdRequest(FindCampaignByIdRequest&& from) noexcept
    : FindCampaignByIdRequest() {
    *this = ::std::move(from);
  }

  inline FindCampaignByIdRequest& operator=(const FindCampaignByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignByIdRequest& operator=(FindCampaignByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignByIdRequest& default_instance();

  static inline const FindCampaignByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindCampaignByIdRequest*>(
               &_FindCampaignByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FindCampaignByIdRequest& a, FindCampaignByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignByIdRequest* New() const final {
    return CreateMaybeMessage<FindCampaignByIdRequest>(nullptr);
  }

  FindCampaignByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignByIdRequest& from);
  void MergeFrom(const FindCampaignByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest";
  }
  protected:
  explicit FindCampaignByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignByIdResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord) */ {
 public:
  inline FindCampaignByIdResponseRecord() : FindCampaignByIdResponseRecord(nullptr) {}
  virtual ~FindCampaignByIdResponseRecord();

  FindCampaignByIdResponseRecord(const FindCampaignByIdResponseRecord& from);
  FindCampaignByIdResponseRecord(FindCampaignByIdResponseRecord&& from) noexcept
    : FindCampaignByIdResponseRecord() {
    *this = ::std::move(from);
  }

  inline FindCampaignByIdResponseRecord& operator=(const FindCampaignByIdResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignByIdResponseRecord& operator=(FindCampaignByIdResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignByIdResponseRecord& default_instance();

  static inline const FindCampaignByIdResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FindCampaignByIdResponseRecord*>(
               &_FindCampaignByIdResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FindCampaignByIdResponseRecord& a, FindCampaignByIdResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignByIdResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignByIdResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignByIdResponseRecord* New() const final {
    return CreateMaybeMessage<FindCampaignByIdResponseRecord>(nullptr);
  }

  FindCampaignByIdResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignByIdResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignByIdResponseRecord& from);
  void MergeFrom(const FindCampaignByIdResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignByIdResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord";
  }
  protected:
  explicit FindCampaignByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCronExpressionFieldNumber = 5,
    kCommunicationChannelFieldNumber = 7,
    kStatusFieldNumber = 8,
    kTypeFieldNumber = 9,
    kScheduleTypeFieldNumber = 10,
    kQueryFieldNumber = 11,
    kInactionQueryFieldNumber = 12,
    kAttributesFieldNumber = 14,
    kCreatedByActortypeFieldNumber = 16,
    kUpdatedByActortypeFieldNumber = 18,
    kIdFieldNumber = 1,
    kInactionDurationFieldNumber = 13,
    kCreatedByActoridFieldNumber = 15,
    kUpdatedByActoridFieldNumber = 17,
    kVersionFieldNumber = 19,
    kCreatedAtFieldNumber = 20,
    kUpdatedAtFieldNumber = 21,
    kDeletedAtFieldNumber = 22,
    kOccurrencesFieldNumber = 6,
  };
  // string namespace = 2;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string cronExpression = 5;
  void clear_cronexpression();
  const std::string& cronexpression() const;
  void set_cronexpression(const std::string& value);
  void set_cronexpression(std::string&& value);
  void set_cronexpression(const char* value);
  void set_cronexpression(const char* value, size_t size);
  std::string* mutable_cronexpression();
  std::string* release_cronexpression();
  void set_allocated_cronexpression(std::string* cronexpression);
  private:
  const std::string& _internal_cronexpression() const;
  void _internal_set_cronexpression(const std::string& value);
  std::string* _internal_mutable_cronexpression();
  public:

  // string communicationChannel = 7;
  void clear_communicationchannel();
  const std::string& communicationchannel() const;
  void set_communicationchannel(const std::string& value);
  void set_communicationchannel(std::string&& value);
  void set_communicationchannel(const char* value);
  void set_communicationchannel(const char* value, size_t size);
  std::string* mutable_communicationchannel();
  std::string* release_communicationchannel();
  void set_allocated_communicationchannel(std::string* communicationchannel);
  private:
  const std::string& _internal_communicationchannel() const;
  void _internal_set_communicationchannel(const std::string& value);
  std::string* _internal_mutable_communicationchannel();
  public:

  // string status = 8;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string type = 9;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string scheduleType = 10;
  void clear_scheduletype();
  const std::string& scheduletype() const;
  void set_scheduletype(const std::string& value);
  void set_scheduletype(std::string&& value);
  void set_scheduletype(const char* value);
  void set_scheduletype(const char* value, size_t size);
  std::string* mutable_scheduletype();
  std::string* release_scheduletype();
  void set_allocated_scheduletype(std::string* scheduletype);
  private:
  const std::string& _internal_scheduletype() const;
  void _internal_set_scheduletype(const std::string& value);
  std::string* _internal_mutable_scheduletype();
  public:

  // string query = 11;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string inactionQuery = 12;
  void clear_inactionquery();
  const std::string& inactionquery() const;
  void set_inactionquery(const std::string& value);
  void set_inactionquery(std::string&& value);
  void set_inactionquery(const char* value);
  void set_inactionquery(const char* value, size_t size);
  std::string* mutable_inactionquery();
  std::string* release_inactionquery();
  void set_allocated_inactionquery(std::string* inactionquery);
  private:
  const std::string& _internal_inactionquery() const;
  void _internal_set_inactionquery(const std::string& value);
  std::string* _internal_mutable_inactionquery();
  public:

  // string attributes = 14;
  void clear_attributes();
  const std::string& attributes() const;
  void set_attributes(const std::string& value);
  void set_attributes(std::string&& value);
  void set_attributes(const char* value);
  void set_attributes(const char* value, size_t size);
  std::string* mutable_attributes();
  std::string* release_attributes();
  void set_allocated_attributes(std::string* attributes);
  private:
  const std::string& _internal_attributes() const;
  void _internal_set_attributes(const std::string& value);
  std::string* _internal_mutable_attributes();
  public:

  // string createdByActortype = 16;
  void clear_createdbyactortype();
  const std::string& createdbyactortype() const;
  void set_createdbyactortype(const std::string& value);
  void set_createdbyactortype(std::string&& value);
  void set_createdbyactortype(const char* value);
  void set_createdbyactortype(const char* value, size_t size);
  std::string* mutable_createdbyactortype();
  std::string* release_createdbyactortype();
  void set_allocated_createdbyactortype(std::string* createdbyactortype);
  private:
  const std::string& _internal_createdbyactortype() const;
  void _internal_set_createdbyactortype(const std::string& value);
  std::string* _internal_mutable_createdbyactortype();
  public:

  // string updatedByActortype = 18;
  void clear_updatedbyactortype();
  const std::string& updatedbyactortype() const;
  void set_updatedbyactortype(const std::string& value);
  void set_updatedbyactortype(std::string&& value);
  void set_updatedbyactortype(const char* value);
  void set_updatedbyactortype(const char* value, size_t size);
  std::string* mutable_updatedbyactortype();
  std::string* release_updatedbyactortype();
  void set_allocated_updatedbyactortype(std::string* updatedbyactortype);
  private:
  const std::string& _internal_updatedbyactortype() const;
  void _internal_set_updatedbyactortype(const std::string& value);
  std::string* _internal_mutable_updatedbyactortype();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inactionDuration = 13;
  void clear_inactionduration();
  ::PROTOBUF_NAMESPACE_ID::int64 inactionduration() const;
  void set_inactionduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inactionduration() const;
  void _internal_set_inactionduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdByActorid = 15;
  void clear_createdbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid() const;
  void set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdbyactorid() const;
  void _internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedByActorid = 17;
  void clear_updatedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedbyactorid() const;
  void set_updatedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedbyactorid() const;
  void _internal_set_updatedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 version = 19;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 20;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 21;
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletedAt = 22;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 occurrences = 6;
  void clear_occurrences();
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences() const;
  void set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occurrences() const;
  void _internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cronexpression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr communicationchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheduletype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inactionquery_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 inactionduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int32 occurrences_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse) */ {
 public:
  inline FindCampaignByIdResponse() : FindCampaignByIdResponse(nullptr) {}
  virtual ~FindCampaignByIdResponse();

  FindCampaignByIdResponse(const FindCampaignByIdResponse& from);
  FindCampaignByIdResponse(FindCampaignByIdResponse&& from) noexcept
    : FindCampaignByIdResponse() {
    *this = ::std::move(from);
  }

  inline FindCampaignByIdResponse& operator=(const FindCampaignByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignByIdResponse& operator=(FindCampaignByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignByIdResponse& default_instance();

  static inline const FindCampaignByIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindCampaignByIdResponse*>(
               &_FindCampaignByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FindCampaignByIdResponse& a, FindCampaignByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignByIdResponse* New() const final {
    return CreateMaybeMessage<FindCampaignByIdResponse>(nullptr);
  }

  FindCampaignByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignByIdResponse& from);
  void MergeFrom(const FindCampaignByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse";
  }
  protected:
  explicit FindCampaignByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kRecordsFieldNumber = 4,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 4;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& records() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* release_records();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* mutable_records();
  void set_allocated_records(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* records);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& _internal_records() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* records);
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* unsafe_arena_release_records();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* records_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignTemplateByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest) */ {
 public:
  inline FindCampaignTemplateByIdRequest() : FindCampaignTemplateByIdRequest(nullptr) {}
  virtual ~FindCampaignTemplateByIdRequest();

  FindCampaignTemplateByIdRequest(const FindCampaignTemplateByIdRequest& from);
  FindCampaignTemplateByIdRequest(FindCampaignTemplateByIdRequest&& from) noexcept
    : FindCampaignTemplateByIdRequest() {
    *this = ::std::move(from);
  }

  inline FindCampaignTemplateByIdRequest& operator=(const FindCampaignTemplateByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignTemplateByIdRequest& operator=(FindCampaignTemplateByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignTemplateByIdRequest& default_instance();

  static inline const FindCampaignTemplateByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindCampaignTemplateByIdRequest*>(
               &_FindCampaignTemplateByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FindCampaignTemplateByIdRequest& a, FindCampaignTemplateByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignTemplateByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignTemplateByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignTemplateByIdRequest* New() const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdRequest>(nullptr);
  }

  FindCampaignTemplateByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignTemplateByIdRequest& from);
  void MergeFrom(const FindCampaignTemplateByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignTemplateByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest";
  }
  protected:
  explicit FindCampaignTemplateByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 3;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignTemplateByIdResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord) */ {
 public:
  inline FindCampaignTemplateByIdResponseRecord() : FindCampaignTemplateByIdResponseRecord(nullptr) {}
  virtual ~FindCampaignTemplateByIdResponseRecord();

  FindCampaignTemplateByIdResponseRecord(const FindCampaignTemplateByIdResponseRecord& from);
  FindCampaignTemplateByIdResponseRecord(FindCampaignTemplateByIdResponseRecord&& from) noexcept
    : FindCampaignTemplateByIdResponseRecord() {
    *this = ::std::move(from);
  }

  inline FindCampaignTemplateByIdResponseRecord& operator=(const FindCampaignTemplateByIdResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignTemplateByIdResponseRecord& operator=(FindCampaignTemplateByIdResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignTemplateByIdResponseRecord& default_instance();

  static inline const FindCampaignTemplateByIdResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FindCampaignTemplateByIdResponseRecord*>(
               &_FindCampaignTemplateByIdResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FindCampaignTemplateByIdResponseRecord& a, FindCampaignTemplateByIdResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignTemplateByIdResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignTemplateByIdResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignTemplateByIdResponseRecord* New() const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdResponseRecord>(nullptr);
  }

  FindCampaignTemplateByIdResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignTemplateByIdResponseRecord& from);
  void MergeFrom(const FindCampaignTemplateByIdResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignTemplateByIdResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord";
  }
  protected:
  explicit FindCampaignTemplateByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNameFieldNumber = 3,
    kCampaignNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
    kDistributionPercentFieldNumber = 5,
  };
  // string templateName = 3;
  void clear_templatename();
  const std::string& templatename() const;
  void set_templatename(const std::string& value);
  void set_templatename(std::string&& value);
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  std::string* mutable_templatename();
  std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // string campaignName = 4;
  void clear_campaignname();
  const std::string& campaignname() const;
  void set_campaignname(const std::string& value);
  void set_campaignname(std::string&& value);
  void set_campaignname(const char* value);
  void set_campaignname(const char* value, size_t size);
  std::string* mutable_campaignname();
  std::string* release_campaignname();
  void set_allocated_campaignname(std::string* campaignname);
  private:
  const std::string& _internal_campaignname() const;
  void _internal_set_campaignname(const std::string& value);
  std::string* _internal_mutable_campaignname();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 distributionPercent = 5;
  void clear_distributionpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent() const;
  void set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distributionpercent() const;
  void _internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaignname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int32 distributionpercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindCampaignTemplateByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse) */ {
 public:
  inline FindCampaignTemplateByIdResponse() : FindCampaignTemplateByIdResponse(nullptr) {}
  virtual ~FindCampaignTemplateByIdResponse();

  FindCampaignTemplateByIdResponse(const FindCampaignTemplateByIdResponse& from);
  FindCampaignTemplateByIdResponse(FindCampaignTemplateByIdResponse&& from) noexcept
    : FindCampaignTemplateByIdResponse() {
    *this = ::std::move(from);
  }

  inline FindCampaignTemplateByIdResponse& operator=(const FindCampaignTemplateByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindCampaignTemplateByIdResponse& operator=(FindCampaignTemplateByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindCampaignTemplateByIdResponse& default_instance();

  static inline const FindCampaignTemplateByIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindCampaignTemplateByIdResponse*>(
               &_FindCampaignTemplateByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FindCampaignTemplateByIdResponse& a, FindCampaignTemplateByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindCampaignTemplateByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindCampaignTemplateByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindCampaignTemplateByIdResponse* New() const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdResponse>(nullptr);
  }

  FindCampaignTemplateByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindCampaignTemplateByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindCampaignTemplateByIdResponse& from);
  void MergeFrom(const FindCampaignTemplateByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindCampaignTemplateByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse";
  }
  protected:
  explicit FindCampaignTemplateByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord& _internal_records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord& records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindTargetUserByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest) */ {
 public:
  inline FindTargetUserByIdRequest() : FindTargetUserByIdRequest(nullptr) {}
  virtual ~FindTargetUserByIdRequest();

  FindTargetUserByIdRequest(const FindTargetUserByIdRequest& from);
  FindTargetUserByIdRequest(FindTargetUserByIdRequest&& from) noexcept
    : FindTargetUserByIdRequest() {
    *this = ::std::move(from);
  }

  inline FindTargetUserByIdRequest& operator=(const FindTargetUserByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindTargetUserByIdRequest& operator=(FindTargetUserByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindTargetUserByIdRequest& default_instance();

  static inline const FindTargetUserByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindTargetUserByIdRequest*>(
               &_FindTargetUserByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FindTargetUserByIdRequest& a, FindTargetUserByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindTargetUserByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindTargetUserByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindTargetUserByIdRequest* New() const final {
    return CreateMaybeMessage<FindTargetUserByIdRequest>(nullptr);
  }

  FindTargetUserByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindTargetUserByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindTargetUserByIdRequest& from);
  void MergeFrom(const FindTargetUserByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindTargetUserByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest";
  }
  protected:
  explicit FindTargetUserByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 3;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindTargetUserByIdResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord) */ {
 public:
  inline FindTargetUserByIdResponseRecord() : FindTargetUserByIdResponseRecord(nullptr) {}
  virtual ~FindTargetUserByIdResponseRecord();

  FindTargetUserByIdResponseRecord(const FindTargetUserByIdResponseRecord& from);
  FindTargetUserByIdResponseRecord(FindTargetUserByIdResponseRecord&& from) noexcept
    : FindTargetUserByIdResponseRecord() {
    *this = ::std::move(from);
  }

  inline FindTargetUserByIdResponseRecord& operator=(const FindTargetUserByIdResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindTargetUserByIdResponseRecord& operator=(FindTargetUserByIdResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindTargetUserByIdResponseRecord& default_instance();

  static inline const FindTargetUserByIdResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FindTargetUserByIdResponseRecord*>(
               &_FindTargetUserByIdResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FindTargetUserByIdResponseRecord& a, FindTargetUserByIdResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FindTargetUserByIdResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindTargetUserByIdResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindTargetUserByIdResponseRecord* New() const final {
    return CreateMaybeMessage<FindTargetUserByIdResponseRecord>(nullptr);
  }

  FindTargetUserByIdResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindTargetUserByIdResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindTargetUserByIdResponseRecord& from);
  void MergeFrom(const FindTargetUserByIdResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindTargetUserByIdResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord";
  }
  protected:
  explicit FindTargetUserByIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTypeFieldNumber = 4,
    kIdFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string userType = 4;
  void clear_usertype();
  const std::string& usertype() const;
  void set_usertype(const std::string& value);
  void set_usertype(std::string&& value);
  void set_usertype(const char* value);
  void set_usertype(const char* value, size_t size);
  std::string* mutable_usertype();
  std::string* release_usertype();
  void set_allocated_usertype(std::string* usertype);
  private:
  const std::string& _internal_usertype() const;
  void _internal_set_usertype(const std::string& value);
  std::string* _internal_mutable_usertype();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userId = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usertype_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindTargetUserByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse) */ {
 public:
  inline FindTargetUserByIdResponse() : FindTargetUserByIdResponse(nullptr) {}
  virtual ~FindTargetUserByIdResponse();

  FindTargetUserByIdResponse(const FindTargetUserByIdResponse& from);
  FindTargetUserByIdResponse(FindTargetUserByIdResponse&& from) noexcept
    : FindTargetUserByIdResponse() {
    *this = ::std::move(from);
  }

  inline FindTargetUserByIdResponse& operator=(const FindTargetUserByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindTargetUserByIdResponse& operator=(FindTargetUserByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindTargetUserByIdResponse& default_instance();

  static inline const FindTargetUserByIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindTargetUserByIdResponse*>(
               &_FindTargetUserByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FindTargetUserByIdResponse& a, FindTargetUserByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindTargetUserByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindTargetUserByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindTargetUserByIdResponse* New() const final {
    return CreateMaybeMessage<FindTargetUserByIdResponse>(nullptr);
  }

  FindTargetUserByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindTargetUserByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindTargetUserByIdResponse& from);
  void MergeFrom(const FindTargetUserByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindTargetUserByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse";
  }
  protected:
  explicit FindTargetUserByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord& _internal_records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord& records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDynamicDataByKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest) */ {
 public:
  inline GetDynamicDataByKeyRequest() : GetDynamicDataByKeyRequest(nullptr) {}
  virtual ~GetDynamicDataByKeyRequest();

  GetDynamicDataByKeyRequest(const GetDynamicDataByKeyRequest& from);
  GetDynamicDataByKeyRequest(GetDynamicDataByKeyRequest&& from) noexcept
    : GetDynamicDataByKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetDynamicDataByKeyRequest& operator=(const GetDynamicDataByKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDynamicDataByKeyRequest& operator=(GetDynamicDataByKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDynamicDataByKeyRequest& default_instance();

  static inline const GetDynamicDataByKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetDynamicDataByKeyRequest*>(
               &_GetDynamicDataByKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetDynamicDataByKeyRequest& a, GetDynamicDataByKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDynamicDataByKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDynamicDataByKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDynamicDataByKeyRequest* New() const final {
    return CreateMaybeMessage<GetDynamicDataByKeyRequest>(nullptr);
  }

  GetDynamicDataByKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDynamicDataByKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDynamicDataByKeyRequest& from);
  void MergeFrom(const GetDynamicDataByKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDynamicDataByKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest";
  }
  protected:
  explicit GetDynamicDataByKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicKeyFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string dynamicKey = 4;
  void clear_dynamickey();
  const std::string& dynamickey() const;
  void set_dynamickey(const std::string& value);
  void set_dynamickey(std::string&& value);
  void set_dynamickey(const char* value);
  void set_dynamickey(const char* value, size_t size);
  std::string* mutable_dynamickey();
  std::string* release_dynamickey();
  void set_allocated_dynamickey(std::string* dynamickey);
  private:
  const std::string& _internal_dynamickey() const;
  void _internal_set_dynamickey(const std::string& value);
  std::string* _internal_mutable_dynamickey();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 3;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dynamickey_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDynamicDataByKeyResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord) */ {
 public:
  inline GetDynamicDataByKeyResponseRecord() : GetDynamicDataByKeyResponseRecord(nullptr) {}
  virtual ~GetDynamicDataByKeyResponseRecord();

  GetDynamicDataByKeyResponseRecord(const GetDynamicDataByKeyResponseRecord& from);
  GetDynamicDataByKeyResponseRecord(GetDynamicDataByKeyResponseRecord&& from) noexcept
    : GetDynamicDataByKeyResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetDynamicDataByKeyResponseRecord& operator=(const GetDynamicDataByKeyResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDynamicDataByKeyResponseRecord& operator=(GetDynamicDataByKeyResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDynamicDataByKeyResponseRecord& default_instance();

  static inline const GetDynamicDataByKeyResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetDynamicDataByKeyResponseRecord*>(
               &_GetDynamicDataByKeyResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetDynamicDataByKeyResponseRecord& a, GetDynamicDataByKeyResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDynamicDataByKeyResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDynamicDataByKeyResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDynamicDataByKeyResponseRecord* New() const final {
    return CreateMaybeMessage<GetDynamicDataByKeyResponseRecord>(nullptr);
  }

  GetDynamicDataByKeyResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDynamicDataByKeyResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDynamicDataByKeyResponseRecord& from);
  void MergeFrom(const GetDynamicDataByKeyResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDynamicDataByKeyResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord";
  }
  protected:
  explicit GetDynamicDataByKeyResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicKeyFieldNumber = 2,
    kCtaLinkFieldNumber = 3,
    kMediaFieldNumber = 4,
    kCampaignIdFieldNumber = 1,
  };
  // string dynamicKey = 2;
  void clear_dynamickey();
  const std::string& dynamickey() const;
  void set_dynamickey(const std::string& value);
  void set_dynamickey(std::string&& value);
  void set_dynamickey(const char* value);
  void set_dynamickey(const char* value, size_t size);
  std::string* mutable_dynamickey();
  std::string* release_dynamickey();
  void set_allocated_dynamickey(std::string* dynamickey);
  private:
  const std::string& _internal_dynamickey() const;
  void _internal_set_dynamickey(const std::string& value);
  std::string* _internal_mutable_dynamickey();
  public:

  // string ctaLink = 3;
  void clear_ctalink();
  const std::string& ctalink() const;
  void set_ctalink(const std::string& value);
  void set_ctalink(std::string&& value);
  void set_ctalink(const char* value);
  void set_ctalink(const char* value, size_t size);
  std::string* mutable_ctalink();
  std::string* release_ctalink();
  void set_allocated_ctalink(std::string* ctalink);
  private:
  const std::string& _internal_ctalink() const;
  void _internal_set_ctalink(const std::string& value);
  std::string* _internal_mutable_ctalink();
  public:

  // string media = 4;
  void clear_media();
  const std::string& media() const;
  void set_media(const std::string& value);
  void set_media(std::string&& value);
  void set_media(const char* value);
  void set_media(const char* value, size_t size);
  std::string* mutable_media();
  std::string* release_media();
  void set_allocated_media(std::string* media);
  private:
  const std::string& _internal_media() const;
  void _internal_set_media(const std::string& value);
  std::string* _internal_mutable_media();
  public:

  // int64 campaignId = 1;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dynamickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ctalink_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDynamicDataByKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse) */ {
 public:
  inline GetDynamicDataByKeyResponse() : GetDynamicDataByKeyResponse(nullptr) {}
  virtual ~GetDynamicDataByKeyResponse();

  GetDynamicDataByKeyResponse(const GetDynamicDataByKeyResponse& from);
  GetDynamicDataByKeyResponse(GetDynamicDataByKeyResponse&& from) noexcept
    : GetDynamicDataByKeyResponse() {
    *this = ::std::move(from);
  }

  inline GetDynamicDataByKeyResponse& operator=(const GetDynamicDataByKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDynamicDataByKeyResponse& operator=(GetDynamicDataByKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDynamicDataByKeyResponse& default_instance();

  static inline const GetDynamicDataByKeyResponse* internal_default_instance() {
    return reinterpret_cast<const GetDynamicDataByKeyResponse*>(
               &_GetDynamicDataByKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetDynamicDataByKeyResponse& a, GetDynamicDataByKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDynamicDataByKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDynamicDataByKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDynamicDataByKeyResponse* New() const final {
    return CreateMaybeMessage<GetDynamicDataByKeyResponse>(nullptr);
  }

  GetDynamicDataByKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDynamicDataByKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDynamicDataByKeyResponse& from);
  void MergeFrom(const GetDynamicDataByKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDynamicDataByKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse";
  }
  protected:
  explicit GetDynamicDataByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord& _internal_records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord& records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddDynamicDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest) */ {
 public:
  inline AddDynamicDataRequest() : AddDynamicDataRequest(nullptr) {}
  virtual ~AddDynamicDataRequest();

  AddDynamicDataRequest(const AddDynamicDataRequest& from);
  AddDynamicDataRequest(AddDynamicDataRequest&& from) noexcept
    : AddDynamicDataRequest() {
    *this = ::std::move(from);
  }

  inline AddDynamicDataRequest& operator=(const AddDynamicDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDynamicDataRequest& operator=(AddDynamicDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDynamicDataRequest& default_instance();

  static inline const AddDynamicDataRequest* internal_default_instance() {
    return reinterpret_cast<const AddDynamicDataRequest*>(
               &_AddDynamicDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AddDynamicDataRequest& a, AddDynamicDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDynamicDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDynamicDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDynamicDataRequest* New() const final {
    return CreateMaybeMessage<AddDynamicDataRequest>(nullptr);
  }

  AddDynamicDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDynamicDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDynamicDataRequest& from);
  void MergeFrom(const AddDynamicDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDynamicDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest";
  }
  protected:
  explicit AddDynamicDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicKeyFieldNumber = 3,
    kCtaLinkFieldNumber = 4,
    kMediaFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
  };
  // string dynamicKey = 3;
  void clear_dynamickey();
  const std::string& dynamickey() const;
  void set_dynamickey(const std::string& value);
  void set_dynamickey(std::string&& value);
  void set_dynamickey(const char* value);
  void set_dynamickey(const char* value, size_t size);
  std::string* mutable_dynamickey();
  std::string* release_dynamickey();
  void set_allocated_dynamickey(std::string* dynamickey);
  private:
  const std::string& _internal_dynamickey() const;
  void _internal_set_dynamickey(const std::string& value);
  std::string* _internal_mutable_dynamickey();
  public:

  // string ctaLink = 4;
  void clear_ctalink();
  const std::string& ctalink() const;
  void set_ctalink(const std::string& value);
  void set_ctalink(std::string&& value);
  void set_ctalink(const char* value);
  void set_ctalink(const char* value, size_t size);
  std::string* mutable_ctalink();
  std::string* release_ctalink();
  void set_allocated_ctalink(std::string* ctalink);
  private:
  const std::string& _internal_ctalink() const;
  void _internal_set_ctalink(const std::string& value);
  std::string* _internal_mutable_ctalink();
  public:

  // string media = 5;
  void clear_media();
  const std::string& media() const;
  void set_media(const std::string& value);
  void set_media(std::string&& value);
  void set_media(const char* value);
  void set_media(const char* value, size_t size);
  std::string* mutable_media();
  std::string* release_media();
  void set_allocated_media(std::string* media);
  private:
  const std::string& _internal_media() const;
  void _internal_set_media(const std::string& value);
  std::string* _internal_mutable_media();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dynamickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ctalink_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddDynamicDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest) */ {
 public:
  inline BulkAddDynamicDataRequest() : BulkAddDynamicDataRequest(nullptr) {}
  virtual ~BulkAddDynamicDataRequest();

  BulkAddDynamicDataRequest(const BulkAddDynamicDataRequest& from);
  BulkAddDynamicDataRequest(BulkAddDynamicDataRequest&& from) noexcept
    : BulkAddDynamicDataRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddDynamicDataRequest& operator=(const BulkAddDynamicDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddDynamicDataRequest& operator=(BulkAddDynamicDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddDynamicDataRequest& default_instance();

  static inline const BulkAddDynamicDataRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddDynamicDataRequest*>(
               &_BulkAddDynamicDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BulkAddDynamicDataRequest& a, BulkAddDynamicDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddDynamicDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddDynamicDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddDynamicDataRequest* New() const final {
    return CreateMaybeMessage<BulkAddDynamicDataRequest>(nullptr);
  }

  BulkAddDynamicDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddDynamicDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddDynamicDataRequest& from);
  void MergeFrom(const BulkAddDynamicDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddDynamicDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest";
  }
  protected:
  explicit BulkAddDynamicDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddDynamicDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse) */ {
 public:
  inline AddDynamicDataResponse() : AddDynamicDataResponse(nullptr) {}
  virtual ~AddDynamicDataResponse();

  AddDynamicDataResponse(const AddDynamicDataResponse& from);
  AddDynamicDataResponse(AddDynamicDataResponse&& from) noexcept
    : AddDynamicDataResponse() {
    *this = ::std::move(from);
  }

  inline AddDynamicDataResponse& operator=(const AddDynamicDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDynamicDataResponse& operator=(AddDynamicDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDynamicDataResponse& default_instance();

  static inline const AddDynamicDataResponse* internal_default_instance() {
    return reinterpret_cast<const AddDynamicDataResponse*>(
               &_AddDynamicDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AddDynamicDataResponse& a, AddDynamicDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDynamicDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDynamicDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDynamicDataResponse* New() const final {
    return CreateMaybeMessage<AddDynamicDataResponse>(nullptr);
  }

  AddDynamicDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDynamicDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDynamicDataResponse& from);
  void MergeFrom(const AddDynamicDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDynamicDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse";
  }
  protected:
  explicit AddDynamicDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddDynamicDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse) */ {
 public:
  inline BulkAddDynamicDataResponse() : BulkAddDynamicDataResponse(nullptr) {}
  virtual ~BulkAddDynamicDataResponse();

  BulkAddDynamicDataResponse(const BulkAddDynamicDataResponse& from);
  BulkAddDynamicDataResponse(BulkAddDynamicDataResponse&& from) noexcept
    : BulkAddDynamicDataResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddDynamicDataResponse& operator=(const BulkAddDynamicDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddDynamicDataResponse& operator=(BulkAddDynamicDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddDynamicDataResponse& default_instance();

  static inline const BulkAddDynamicDataResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddDynamicDataResponse*>(
               &_BulkAddDynamicDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(BulkAddDynamicDataResponse& a, BulkAddDynamicDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddDynamicDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddDynamicDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddDynamicDataResponse* New() const final {
    return CreateMaybeMessage<BulkAddDynamicDataResponse>(nullptr);
  }

  BulkAddDynamicDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddDynamicDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddDynamicDataResponse& from);
  void MergeFrom(const BulkAddDynamicDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddDynamicDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse";
  }
  protected:
  explicit BulkAddDynamicDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddTargetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest) */ {
 public:
  inline AddTargetUserRequest() : AddTargetUserRequest(nullptr) {}
  virtual ~AddTargetUserRequest();

  AddTargetUserRequest(const AddTargetUserRequest& from);
  AddTargetUserRequest(AddTargetUserRequest&& from) noexcept
    : AddTargetUserRequest() {
    *this = ::std::move(from);
  }

  inline AddTargetUserRequest& operator=(const AddTargetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTargetUserRequest& operator=(AddTargetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTargetUserRequest& default_instance();

  static inline const AddTargetUserRequest* internal_default_instance() {
    return reinterpret_cast<const AddTargetUserRequest*>(
               &_AddTargetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AddTargetUserRequest& a, AddTargetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTargetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTargetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTargetUserRequest* New() const final {
    return CreateMaybeMessage<AddTargetUserRequest>(nullptr);
  }

  AddTargetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTargetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTargetUserRequest& from);
  void MergeFrom(const AddTargetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTargetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddTargetUserRequest";
  }
  protected:
  explicit AddTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kUserFieldNumber = 3,
    kCampaignIdFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::farm::nurture::core::contracts::common::ActorID& user() const;
  ::farm::nurture::core::contracts::common::ActorID* release_user();
  ::farm::nurture::core::contracts::common::ActorID* mutable_user();
  void set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_user() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::farm::nurture::core::contracts::common::ActorID* user);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_user();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestTargetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest) */ {
 public:
  inline TestTargetUserRequest() : TestTargetUserRequest(nullptr) {}
  virtual ~TestTargetUserRequest();

  TestTargetUserRequest(const TestTargetUserRequest& from);
  TestTargetUserRequest(TestTargetUserRequest&& from) noexcept
    : TestTargetUserRequest() {
    *this = ::std::move(from);
  }

  inline TestTargetUserRequest& operator=(const TestTargetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTargetUserRequest& operator=(TestTargetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestTargetUserRequest& default_instance();

  static inline const TestTargetUserRequest* internal_default_instance() {
    return reinterpret_cast<const TestTargetUserRequest*>(
               &_TestTargetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TestTargetUserRequest& a, TestTargetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestTargetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestTargetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestTargetUserRequest* New() const final {
    return CreateMaybeMessage<TestTargetUserRequest>(nullptr);
  }

  TestTargetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestTargetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestTargetUserRequest& from);
  void MergeFrom(const TestTargetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestTargetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestTargetUserRequest";
  }
  protected:
  explicit TestTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::farm::nurture::core::contracts::common::ActorID& user() const;
  ::farm::nurture::core::contracts::common::ActorID* release_user();
  ::farm::nurture::core::contracts::common::ActorID* mutable_user();
  void set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_user() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::farm::nurture::core::contracts::common::ActorID* user);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddTargetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest) */ {
 public:
  inline BulkAddTargetUserRequest() : BulkAddTargetUserRequest(nullptr) {}
  virtual ~BulkAddTargetUserRequest();

  BulkAddTargetUserRequest(const BulkAddTargetUserRequest& from);
  BulkAddTargetUserRequest(BulkAddTargetUserRequest&& from) noexcept
    : BulkAddTargetUserRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddTargetUserRequest& operator=(const BulkAddTargetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddTargetUserRequest& operator=(BulkAddTargetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddTargetUserRequest& default_instance();

  static inline const BulkAddTargetUserRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddTargetUserRequest*>(
               &_BulkAddTargetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(BulkAddTargetUserRequest& a, BulkAddTargetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddTargetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddTargetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddTargetUserRequest* New() const final {
    return CreateMaybeMessage<BulkAddTargetUserRequest>(nullptr);
  }

  BulkAddTargetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddTargetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddTargetUserRequest& from);
  void MergeFrom(const BulkAddTargetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddTargetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest";
  }
  protected:
  explicit BulkAddTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddTargetUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse) */ {
 public:
  inline AddTargetUserResponse() : AddTargetUserResponse(nullptr) {}
  virtual ~AddTargetUserResponse();

  AddTargetUserResponse(const AddTargetUserResponse& from);
  AddTargetUserResponse(AddTargetUserResponse&& from) noexcept
    : AddTargetUserResponse() {
    *this = ::std::move(from);
  }

  inline AddTargetUserResponse& operator=(const AddTargetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTargetUserResponse& operator=(AddTargetUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTargetUserResponse& default_instance();

  static inline const AddTargetUserResponse* internal_default_instance() {
    return reinterpret_cast<const AddTargetUserResponse*>(
               &_AddTargetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AddTargetUserResponse& a, AddTargetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTargetUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTargetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTargetUserResponse* New() const final {
    return CreateMaybeMessage<AddTargetUserResponse>(nullptr);
  }

  AddTargetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTargetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTargetUserResponse& from);
  void MergeFrom(const AddTargetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTargetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddTargetUserResponse";
  }
  protected:
  explicit AddTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddTargetUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse) */ {
 public:
  inline BulkAddTargetUserResponse() : BulkAddTargetUserResponse(nullptr) {}
  virtual ~BulkAddTargetUserResponse();

  BulkAddTargetUserResponse(const BulkAddTargetUserResponse& from);
  BulkAddTargetUserResponse(BulkAddTargetUserResponse&& from) noexcept
    : BulkAddTargetUserResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddTargetUserResponse& operator=(const BulkAddTargetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddTargetUserResponse& operator=(BulkAddTargetUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddTargetUserResponse& default_instance();

  static inline const BulkAddTargetUserResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddTargetUserResponse*>(
               &_BulkAddTargetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(BulkAddTargetUserResponse& a, BulkAddTargetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddTargetUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddTargetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddTargetUserResponse* New() const final {
    return CreateMaybeMessage<BulkAddTargetUserResponse>(nullptr);
  }

  BulkAddTargetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddTargetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddTargetUserResponse& from);
  void MergeFrom(const BulkAddTargetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddTargetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse";
  }
  protected:
  explicit BulkAddTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInactionTargetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest) */ {
 public:
  inline AddInactionTargetUserRequest() : AddInactionTargetUserRequest(nullptr) {}
  virtual ~AddInactionTargetUserRequest();

  AddInactionTargetUserRequest(const AddInactionTargetUserRequest& from);
  AddInactionTargetUserRequest(AddInactionTargetUserRequest&& from) noexcept
    : AddInactionTargetUserRequest() {
    *this = ::std::move(from);
  }

  inline AddInactionTargetUserRequest& operator=(const AddInactionTargetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInactionTargetUserRequest& operator=(AddInactionTargetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddInactionTargetUserRequest& default_instance();

  static inline const AddInactionTargetUserRequest* internal_default_instance() {
    return reinterpret_cast<const AddInactionTargetUserRequest*>(
               &_AddInactionTargetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddInactionTargetUserRequest& a, AddInactionTargetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInactionTargetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInactionTargetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddInactionTargetUserRequest* New() const final {
    return CreateMaybeMessage<AddInactionTargetUserRequest>(nullptr);
  }

  AddInactionTargetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddInactionTargetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddInactionTargetUserRequest& from);
  void MergeFrom(const AddInactionTargetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInactionTargetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest";
  }
  protected:
  explicit AddInactionTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kUserFieldNumber = 3,
    kCampaignIdFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.ActorID user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::farm::nurture::core::contracts::common::ActorID& user() const;
  ::farm::nurture::core::contracts::common::ActorID* release_user();
  ::farm::nurture::core::contracts::common::ActorID* mutable_user();
  void set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_user() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::farm::nurture::core::contracts::common::ActorID* user);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_user();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::common::ActorID* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddInactionTargetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest) */ {
 public:
  inline BulkAddInactionTargetUserRequest() : BulkAddInactionTargetUserRequest(nullptr) {}
  virtual ~BulkAddInactionTargetUserRequest();

  BulkAddInactionTargetUserRequest(const BulkAddInactionTargetUserRequest& from);
  BulkAddInactionTargetUserRequest(BulkAddInactionTargetUserRequest&& from) noexcept
    : BulkAddInactionTargetUserRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddInactionTargetUserRequest& operator=(const BulkAddInactionTargetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddInactionTargetUserRequest& operator=(BulkAddInactionTargetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddInactionTargetUserRequest& default_instance();

  static inline const BulkAddInactionTargetUserRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddInactionTargetUserRequest*>(
               &_BulkAddInactionTargetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(BulkAddInactionTargetUserRequest& a, BulkAddInactionTargetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddInactionTargetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddInactionTargetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddInactionTargetUserRequest* New() const final {
    return CreateMaybeMessage<BulkAddInactionTargetUserRequest>(nullptr);
  }

  BulkAddInactionTargetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddInactionTargetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddInactionTargetUserRequest& from);
  void MergeFrom(const BulkAddInactionTargetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddInactionTargetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest";
  }
  protected:
  explicit BulkAddInactionTargetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& _internal_requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* _internal_add_requests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& requests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInactionTargetUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse) */ {
 public:
  inline AddInactionTargetUserResponse() : AddInactionTargetUserResponse(nullptr) {}
  virtual ~AddInactionTargetUserResponse();

  AddInactionTargetUserResponse(const AddInactionTargetUserResponse& from);
  AddInactionTargetUserResponse(AddInactionTargetUserResponse&& from) noexcept
    : AddInactionTargetUserResponse() {
    *this = ::std::move(from);
  }

  inline AddInactionTargetUserResponse& operator=(const AddInactionTargetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInactionTargetUserResponse& operator=(AddInactionTargetUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddInactionTargetUserResponse& default_instance();

  static inline const AddInactionTargetUserResponse* internal_default_instance() {
    return reinterpret_cast<const AddInactionTargetUserResponse*>(
               &_AddInactionTargetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(AddInactionTargetUserResponse& a, AddInactionTargetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInactionTargetUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInactionTargetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddInactionTargetUserResponse* New() const final {
    return CreateMaybeMessage<AddInactionTargetUserResponse>(nullptr);
  }

  AddInactionTargetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddInactionTargetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddInactionTargetUserResponse& from);
  void MergeFrom(const AddInactionTargetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInactionTargetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse";
  }
  protected:
  explicit AddInactionTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddInactionTargetUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse) */ {
 public:
  inline BulkAddInactionTargetUserResponse() : BulkAddInactionTargetUserResponse(nullptr) {}
  virtual ~BulkAddInactionTargetUserResponse();

  BulkAddInactionTargetUserResponse(const BulkAddInactionTargetUserResponse& from);
  BulkAddInactionTargetUserResponse(BulkAddInactionTargetUserResponse&& from) noexcept
    : BulkAddInactionTargetUserResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddInactionTargetUserResponse& operator=(const BulkAddInactionTargetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddInactionTargetUserResponse& operator=(BulkAddInactionTargetUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddInactionTargetUserResponse& default_instance();

  static inline const BulkAddInactionTargetUserResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddInactionTargetUserResponse*>(
               &_BulkAddInactionTargetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(BulkAddInactionTargetUserResponse& a, BulkAddInactionTargetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddInactionTargetUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddInactionTargetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddInactionTargetUserResponse* New() const final {
    return CreateMaybeMessage<BulkAddInactionTargetUserResponse>(nullptr);
  }

  BulkAddInactionTargetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddInactionTargetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddInactionTargetUserResponse& from);
  void MergeFrom(const BulkAddInactionTargetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddInactionTargetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse";
  }
  protected:
  explicit BulkAddInactionTargetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& _internal_responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* _internal_add_responses();
  public:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& responses(int index) const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindInactionTargetUserByCampaignIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest) */ {
 public:
  inline FindInactionTargetUserByCampaignIdRequest() : FindInactionTargetUserByCampaignIdRequest(nullptr) {}
  virtual ~FindInactionTargetUserByCampaignIdRequest();

  FindInactionTargetUserByCampaignIdRequest(const FindInactionTargetUserByCampaignIdRequest& from);
  FindInactionTargetUserByCampaignIdRequest(FindInactionTargetUserByCampaignIdRequest&& from) noexcept
    : FindInactionTargetUserByCampaignIdRequest() {
    *this = ::std::move(from);
  }

  inline FindInactionTargetUserByCampaignIdRequest& operator=(const FindInactionTargetUserByCampaignIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInactionTargetUserByCampaignIdRequest& operator=(FindInactionTargetUserByCampaignIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInactionTargetUserByCampaignIdRequest& default_instance();

  static inline const FindInactionTargetUserByCampaignIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindInactionTargetUserByCampaignIdRequest*>(
               &_FindInactionTargetUserByCampaignIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FindInactionTargetUserByCampaignIdRequest& a, FindInactionTargetUserByCampaignIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInactionTargetUserByCampaignIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInactionTargetUserByCampaignIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInactionTargetUserByCampaignIdRequest* New() const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdRequest>(nullptr);
  }

  FindInactionTargetUserByCampaignIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInactionTargetUserByCampaignIdRequest& from);
  void MergeFrom(const FindInactionTargetUserByCampaignIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInactionTargetUserByCampaignIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest";
  }
  protected:
  explicit FindInactionTargetUserByCampaignIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 3;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindInactionTargetUserByCampaignIdResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord) */ {
 public:
  inline FindInactionTargetUserByCampaignIdResponseRecord() : FindInactionTargetUserByCampaignIdResponseRecord(nullptr) {}
  virtual ~FindInactionTargetUserByCampaignIdResponseRecord();

  FindInactionTargetUserByCampaignIdResponseRecord(const FindInactionTargetUserByCampaignIdResponseRecord& from);
  FindInactionTargetUserByCampaignIdResponseRecord(FindInactionTargetUserByCampaignIdResponseRecord&& from) noexcept
    : FindInactionTargetUserByCampaignIdResponseRecord() {
    *this = ::std::move(from);
  }

  inline FindInactionTargetUserByCampaignIdResponseRecord& operator=(const FindInactionTargetUserByCampaignIdResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInactionTargetUserByCampaignIdResponseRecord& operator=(FindInactionTargetUserByCampaignIdResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInactionTargetUserByCampaignIdResponseRecord& default_instance();

  static inline const FindInactionTargetUserByCampaignIdResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FindInactionTargetUserByCampaignIdResponseRecord*>(
               &_FindInactionTargetUserByCampaignIdResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(FindInactionTargetUserByCampaignIdResponseRecord& a, FindInactionTargetUserByCampaignIdResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInactionTargetUserByCampaignIdResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInactionTargetUserByCampaignIdResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInactionTargetUserByCampaignIdResponseRecord* New() const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdResponseRecord>(nullptr);
  }

  FindInactionTargetUserByCampaignIdResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInactionTargetUserByCampaignIdResponseRecord& from);
  void MergeFrom(const FindInactionTargetUserByCampaignIdResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInactionTargetUserByCampaignIdResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord";
  }
  protected:
  explicit FindInactionTargetUserByCampaignIdResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTypeFieldNumber = 4,
    kIdFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string userType = 4;
  void clear_usertype();
  const std::string& usertype() const;
  void set_usertype(const std::string& value);
  void set_usertype(std::string&& value);
  void set_usertype(const char* value);
  void set_usertype(const char* value, size_t size);
  std::string* mutable_usertype();
  std::string* release_usertype();
  void set_allocated_usertype(std::string* usertype);
  private:
  const std::string& _internal_usertype() const;
  void _internal_set_usertype(const std::string& value);
  std::string* _internal_mutable_usertype();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userId = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usertype_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FindInactionTargetUserByCampaignIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse) */ {
 public:
  inline FindInactionTargetUserByCampaignIdResponse() : FindInactionTargetUserByCampaignIdResponse(nullptr) {}
  virtual ~FindInactionTargetUserByCampaignIdResponse();

  FindInactionTargetUserByCampaignIdResponse(const FindInactionTargetUserByCampaignIdResponse& from);
  FindInactionTargetUserByCampaignIdResponse(FindInactionTargetUserByCampaignIdResponse&& from) noexcept
    : FindInactionTargetUserByCampaignIdResponse() {
    *this = ::std::move(from);
  }

  inline FindInactionTargetUserByCampaignIdResponse& operator=(const FindInactionTargetUserByCampaignIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInactionTargetUserByCampaignIdResponse& operator=(FindInactionTargetUserByCampaignIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInactionTargetUserByCampaignIdResponse& default_instance();

  static inline const FindInactionTargetUserByCampaignIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindInactionTargetUserByCampaignIdResponse*>(
               &_FindInactionTargetUserByCampaignIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(FindInactionTargetUserByCampaignIdResponse& a, FindInactionTargetUserByCampaignIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInactionTargetUserByCampaignIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInactionTargetUserByCampaignIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInactionTargetUserByCampaignIdResponse* New() const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdResponse>(nullptr);
  }

  FindInactionTargetUserByCampaignIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInactionTargetUserByCampaignIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInactionTargetUserByCampaignIdResponse& from);
  void MergeFrom(const FindInactionTargetUserByCampaignIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInactionTargetUserByCampaignIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse";
  }
  protected:
  explicit FindInactionTargetUserByCampaignIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord& _internal_records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord& records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AthenaQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest) */ {
 public:
  inline AthenaQueryRequest() : AthenaQueryRequest(nullptr) {}
  virtual ~AthenaQueryRequest();

  AthenaQueryRequest(const AthenaQueryRequest& from);
  AthenaQueryRequest(AthenaQueryRequest&& from) noexcept
    : AthenaQueryRequest() {
    *this = ::std::move(from);
  }

  inline AthenaQueryRequest& operator=(const AthenaQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AthenaQueryRequest& operator=(AthenaQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AthenaQueryRequest& default_instance();

  static inline const AthenaQueryRequest* internal_default_instance() {
    return reinterpret_cast<const AthenaQueryRequest*>(
               &_AthenaQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(AthenaQueryRequest& a, AthenaQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AthenaQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AthenaQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AthenaQueryRequest* New() const final {
    return CreateMaybeMessage<AthenaQueryRequest>(nullptr);
  }

  AthenaQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AthenaQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AthenaQueryRequest& from);
  void MergeFrom(const AthenaQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AthenaQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AthenaQueryRequest";
  }
  protected:
  explicit AthenaQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAthenaQueryFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // string athenaQuery = 2;
  void clear_athenaquery();
  const std::string& athenaquery() const;
  void set_athenaquery(const std::string& value);
  void set_athenaquery(std::string&& value);
  void set_athenaquery(const char* value);
  void set_athenaquery(const char* value, size_t size);
  std::string* mutable_athenaquery();
  std::string* release_athenaquery();
  void set_allocated_athenaquery(std::string* athenaquery);
  private:
  const std::string& _internal_athenaquery() const;
  void _internal_set_athenaquery(const std::string& value);
  std::string* _internal_mutable_athenaquery();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr athenaquery_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AthenaQueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse) */ {
 public:
  inline AthenaQueryResponse() : AthenaQueryResponse(nullptr) {}
  virtual ~AthenaQueryResponse();

  AthenaQueryResponse(const AthenaQueryResponse& from);
  AthenaQueryResponse(AthenaQueryResponse&& from) noexcept
    : AthenaQueryResponse() {
    *this = ::std::move(from);
  }

  inline AthenaQueryResponse& operator=(const AthenaQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AthenaQueryResponse& operator=(AthenaQueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AthenaQueryResponse& default_instance();

  static inline const AthenaQueryResponse* internal_default_instance() {
    return reinterpret_cast<const AthenaQueryResponse*>(
               &_AthenaQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(AthenaQueryResponse& a, AthenaQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AthenaQueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AthenaQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AthenaQueryResponse* New() const final {
    return CreateMaybeMessage<AthenaQueryResponse>(nullptr);
  }

  AthenaQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AthenaQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AthenaQueryResponse& from);
  void MergeFrom(const AthenaQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AthenaQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.AthenaQueryResponse";
  }
  protected:
  explicit AthenaQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestNewCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest) */ {
 public:
  inline TestNewCampaignRequest() : TestNewCampaignRequest(nullptr) {}
  virtual ~TestNewCampaignRequest();

  TestNewCampaignRequest(const TestNewCampaignRequest& from);
  TestNewCampaignRequest(TestNewCampaignRequest&& from) noexcept
    : TestNewCampaignRequest() {
    *this = ::std::move(from);
  }

  inline TestNewCampaignRequest& operator=(const TestNewCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNewCampaignRequest& operator=(TestNewCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestNewCampaignRequest& default_instance();

  static inline const TestNewCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const TestNewCampaignRequest*>(
               &_TestNewCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TestNewCampaignRequest& a, TestNewCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNewCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNewCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestNewCampaignRequest* New() const final {
    return CreateMaybeMessage<TestNewCampaignRequest>(nullptr);
  }

  TestNewCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestNewCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestNewCampaignRequest& from);
  void MergeFrom(const TestNewCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNewCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest";
  }
  protected:
  explicit TestNewCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestCampaignTemplateRequestsFieldNumber = 4,
    kTestTargetUserRequestsFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kTestCampaignRequestFieldNumber = 3,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest testCampaignTemplateRequests = 4;
  int testcampaigntemplaterequests_size() const;
  private:
  int _internal_testcampaigntemplaterequests_size() const;
  public:
  void clear_testcampaigntemplaterequests();
  ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* mutable_testcampaigntemplaterequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >*
      mutable_testcampaigntemplaterequests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest& _internal_testcampaigntemplaterequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* _internal_add_testcampaigntemplaterequests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest& testcampaigntemplaterequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* add_testcampaigntemplaterequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >&
      testcampaigntemplaterequests() const;

  // repeated .farm.nurture.core.contracts.CampaignService.TestTargetUserRequest testTargetUserRequests = 5;
  int testtargetuserrequests_size() const;
  private:
  int _internal_testtargetuserrequests_size() const;
  public:
  void clear_testtargetuserrequests();
  ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* mutable_testtargetuserrequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >*
      mutable_testtargetuserrequests();
  private:
  const ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest& _internal_testtargetuserrequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* _internal_add_testtargetuserrequests();
  public:
  const ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest& testtargetuserrequests(int index) const;
  ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* add_testtargetuserrequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >&
      testtargetuserrequests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.CampaignService.TestCampaignRequest testCampaignRequest = 3;
  bool has_testcampaignrequest() const;
  private:
  bool _internal_has_testcampaignrequest() const;
  public:
  void clear_testcampaignrequest();
  const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest& testcampaignrequest() const;
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* release_testcampaignrequest();
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* mutable_testcampaignrequest();
  void set_allocated_testcampaignrequest(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* testcampaignrequest);
  private:
  const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest& _internal_testcampaignrequest() const;
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* _internal_mutable_testcampaignrequest();
  public:
  void unsafe_arena_set_allocated_testcampaignrequest(
      ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* testcampaignrequest);
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* unsafe_arena_release_testcampaignrequest();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest > testcampaigntemplaterequests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest > testtargetuserrequests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* testcampaignrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestNewCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse) */ {
 public:
  inline TestNewCampaignResponse() : TestNewCampaignResponse(nullptr) {}
  virtual ~TestNewCampaignResponse();

  TestNewCampaignResponse(const TestNewCampaignResponse& from);
  TestNewCampaignResponse(TestNewCampaignResponse&& from) noexcept
    : TestNewCampaignResponse() {
    *this = ::std::move(from);
  }

  inline TestNewCampaignResponse& operator=(const TestNewCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNewCampaignResponse& operator=(TestNewCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestNewCampaignResponse& default_instance();

  static inline const TestNewCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const TestNewCampaignResponse*>(
               &_TestNewCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TestNewCampaignResponse& a, TestNewCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNewCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNewCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestNewCampaignResponse* New() const final {
    return CreateMaybeMessage<TestNewCampaignResponse>(nullptr);
  }

  TestNewCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestNewCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestNewCampaignResponse& from);
  void MergeFrom(const TestNewCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNewCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse";
  }
  protected:
  explicit TestNewCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiRequests PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.MultiRequests) */ {
 public:
  inline MultiRequests() : MultiRequests(nullptr) {}
  virtual ~MultiRequests();

  MultiRequests(const MultiRequests& from);
  MultiRequests(MultiRequests&& from) noexcept
    : MultiRequests() {
    *this = ::std::move(from);
  }

  inline MultiRequests& operator=(const MultiRequests& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRequests& operator=(MultiRequests&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRequests& default_instance();

  static inline const MultiRequests* internal_default_instance() {
    return reinterpret_cast<const MultiRequests*>(
               &_MultiRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(MultiRequests& a, MultiRequests& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRequests* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRequests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRequests* New() const final {
    return CreateMaybeMessage<MultiRequests>(nullptr);
  }

  MultiRequests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRequests>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRequests& from);
  void MergeFrom(const MultiRequests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRequests* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.MultiRequests";
  }
  protected:
  explicit MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kOnTxnFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.Request request = 2;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::farm::nurture::core::contracts::CampaignService::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Request >*
      mutable_request();
  private:
  const ::farm::nurture::core::contracts::CampaignService::Request& _internal_request(int index) const;
  ::farm::nurture::core::contracts::CampaignService::Request* _internal_add_request();
  public:
  const ::farm::nurture::core::contracts::CampaignService::Request& request(int index) const;
  ::farm::nurture::core::contracts::CampaignService::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Request >&
      request() const;

  // bool onTxn = 1;
  void clear_ontxn();
  bool ontxn() const;
  void set_ontxn(bool value);
  private:
  bool _internal_ontxn() const;
  void _internal_set_ontxn(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.MultiRequests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Request > request_;
  bool ontxn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum ARequestCase {
    kReqAddCampaign = 2,
    kReqAddCampaignBulk = 3,
    kReqUpdateCampaign = 4,
    kReqUpdateCampaignBulk = 5,
    kReqAddCampaignTemplate = 6,
    kReqAddCampaignTemplateBulk = 7,
    kReqAddNewCampaign = 8,
    kReqAddNewCampaignBulk = 9,
    kReqGetUserList = 10,
    kReqFindCampaignById = 11,
    kReqFindCampaignTemplateById = 12,
    kReqAddTargetUser = 13,
    kReqAddTargetUserBulk = 14,
    kReqAddInactionTargetUser = 15,
    kReqAddInactionTargetUserBulk = 16,
    kReqFindInactionTargetUserByCampaignId = 17,
    kReqGetDynamicDataByKey = 18,
    kReqAddDynamicData = 19,
    kReqAddDynamicDataBulk = 20,
    AREQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kReqAddCampaignFieldNumber = 2,
    kReqAddCampaignBulkFieldNumber = 3,
    kReqUpdateCampaignFieldNumber = 4,
    kReqUpdateCampaignBulkFieldNumber = 5,
    kReqAddCampaignTemplateFieldNumber = 6,
    kReqAddCampaignTemplateBulkFieldNumber = 7,
    kReqAddNewCampaignFieldNumber = 8,
    kReqAddNewCampaignBulkFieldNumber = 9,
    kReqGetUserListFieldNumber = 10,
    kReqFindCampaignByIdFieldNumber = 11,
    kReqFindCampaignTemplateByIdFieldNumber = 12,
    kReqAddTargetUserFieldNumber = 13,
    kReqAddTargetUserBulkFieldNumber = 14,
    kReqAddInactionTargetUserFieldNumber = 15,
    kReqAddInactionTargetUserBulkFieldNumber = 16,
    kReqFindInactionTargetUserByCampaignIdFieldNumber = 17,
    kReqGetDynamicDataByKeyFieldNumber = 18,
    kReqAddDynamicDataFieldNumber = 19,
    kReqAddDynamicDataBulkFieldNumber = 20,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.core.contracts.CampaignService.AddCampaignRequest reqAddCampaign = 2;
  bool has_reqaddcampaign() const;
  private:
  bool _internal_has_reqaddcampaign() const;
  public:
  void clear_reqaddcampaign();
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& reqaddcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* release_reqaddcampaign();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* mutable_reqaddcampaign();
  void set_allocated_reqaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* reqaddcampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& _internal_reqaddcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* _internal_mutable_reqaddcampaign();
  public:
  void unsafe_arena_set_allocated_reqaddcampaign(
      ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* reqaddcampaign);
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* unsafe_arena_release_reqaddcampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest reqAddCampaignBulk = 3;
  bool has_reqaddcampaignbulk() const;
  private:
  bool _internal_has_reqaddcampaignbulk() const;
  public:
  void clear_reqaddcampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& reqaddcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* release_reqaddcampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* mutable_reqaddcampaignbulk();
  void set_allocated_reqaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* reqaddcampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& _internal_reqaddcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* _internal_mutable_reqaddcampaignbulk();
  public:
  void unsafe_arena_set_allocated_reqaddcampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* reqaddcampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* unsafe_arena_release_reqaddcampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest reqUpdateCampaign = 4;
  bool has_requpdatecampaign() const;
  private:
  bool _internal_has_requpdatecampaign() const;
  public:
  void clear_requpdatecampaign();
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& requpdatecampaign() const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* release_requpdatecampaign();
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* mutable_requpdatecampaign();
  void set_allocated_requpdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* requpdatecampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& _internal_requpdatecampaign() const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* _internal_mutable_requpdatecampaign();
  public:
  void unsafe_arena_set_allocated_requpdatecampaign(
      ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* requpdatecampaign);
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* unsafe_arena_release_requpdatecampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest reqUpdateCampaignBulk = 5;
  bool has_requpdatecampaignbulk() const;
  private:
  bool _internal_has_requpdatecampaignbulk() const;
  public:
  void clear_requpdatecampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& requpdatecampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* release_requpdatecampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* mutable_requpdatecampaignbulk();
  void set_allocated_requpdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* requpdatecampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& _internal_requpdatecampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* _internal_mutable_requpdatecampaignbulk();
  public:
  void unsafe_arena_set_allocated_requpdatecampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* requpdatecampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* unsafe_arena_release_requpdatecampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest reqAddCampaignTemplate = 6;
  bool has_reqaddcampaigntemplate() const;
  private:
  bool _internal_has_reqaddcampaigntemplate() const;
  public:
  void clear_reqaddcampaigntemplate();
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& reqaddcampaigntemplate() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* release_reqaddcampaigntemplate();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* mutable_reqaddcampaigntemplate();
  void set_allocated_reqaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* reqaddcampaigntemplate);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& _internal_reqaddcampaigntemplate() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* _internal_mutable_reqaddcampaigntemplate();
  public:
  void unsafe_arena_set_allocated_reqaddcampaigntemplate(
      ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* reqaddcampaigntemplate);
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* unsafe_arena_release_reqaddcampaigntemplate();

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest reqAddCampaignTemplateBulk = 7;
  bool has_reqaddcampaigntemplatebulk() const;
  private:
  bool _internal_has_reqaddcampaigntemplatebulk() const;
  public:
  void clear_reqaddcampaigntemplatebulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& reqaddcampaigntemplatebulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* release_reqaddcampaigntemplatebulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* mutable_reqaddcampaigntemplatebulk();
  void set_allocated_reqaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* reqaddcampaigntemplatebulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& _internal_reqaddcampaigntemplatebulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* _internal_mutable_reqaddcampaigntemplatebulk();
  public:
  void unsafe_arena_set_allocated_reqaddcampaigntemplatebulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* reqaddcampaigntemplatebulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* unsafe_arena_release_reqaddcampaigntemplatebulk();

  // .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest reqAddNewCampaign = 8;
  bool has_reqaddnewcampaign() const;
  private:
  bool _internal_has_reqaddnewcampaign() const;
  public:
  void clear_reqaddnewcampaign();
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& reqaddnewcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* release_reqaddnewcampaign();
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* mutable_reqaddnewcampaign();
  void set_allocated_reqaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* reqaddnewcampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& _internal_reqaddnewcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* _internal_mutable_reqaddnewcampaign();
  public:
  void unsafe_arena_set_allocated_reqaddnewcampaign(
      ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* reqaddnewcampaign);
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* unsafe_arena_release_reqaddnewcampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest reqAddNewCampaignBulk = 9;
  bool has_reqaddnewcampaignbulk() const;
  private:
  bool _internal_has_reqaddnewcampaignbulk() const;
  public:
  void clear_reqaddnewcampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& reqaddnewcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* release_reqaddnewcampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* mutable_reqaddnewcampaignbulk();
  void set_allocated_reqaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* reqaddnewcampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& _internal_reqaddnewcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* _internal_mutable_reqaddnewcampaignbulk();
  public:
  void unsafe_arena_set_allocated_reqaddnewcampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* reqaddnewcampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* unsafe_arena_release_reqaddnewcampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.CampaignRequest reqGetUserList = 10;
  bool has_reqgetuserlist() const;
  private:
  bool _internal_has_reqgetuserlist() const;
  public:
  void clear_reqgetuserlist();
  const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& reqgetuserlist() const;
  ::farm::nurture::core::contracts::CampaignService::CampaignRequest* release_reqgetuserlist();
  ::farm::nurture::core::contracts::CampaignService::CampaignRequest* mutable_reqgetuserlist();
  void set_allocated_reqgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignRequest* reqgetuserlist);
  private:
  const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& _internal_reqgetuserlist() const;
  ::farm::nurture::core::contracts::CampaignService::CampaignRequest* _internal_mutable_reqgetuserlist();
  public:
  void unsafe_arena_set_allocated_reqgetuserlist(
      ::farm::nurture::core::contracts::CampaignService::CampaignRequest* reqgetuserlist);
  ::farm::nurture::core::contracts::CampaignService::CampaignRequest* unsafe_arena_release_reqgetuserlist();

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest reqFindCampaignById = 11;
  bool has_reqfindcampaignbyid() const;
  private:
  bool _internal_has_reqfindcampaignbyid() const;
  public:
  void clear_reqfindcampaignbyid();
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& reqfindcampaignbyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* release_reqfindcampaignbyid();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* mutable_reqfindcampaignbyid();
  void set_allocated_reqfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* reqfindcampaignbyid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& _internal_reqfindcampaignbyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* _internal_mutable_reqfindcampaignbyid();
  public:
  void unsafe_arena_set_allocated_reqfindcampaignbyid(
      ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* reqfindcampaignbyid);
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* unsafe_arena_release_reqfindcampaignbyid();

  // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest reqFindCampaignTemplateById = 12;
  bool has_reqfindcampaigntemplatebyid() const;
  private:
  bool _internal_has_reqfindcampaigntemplatebyid() const;
  public:
  void clear_reqfindcampaigntemplatebyid();
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& reqfindcampaigntemplatebyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* release_reqfindcampaigntemplatebyid();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* mutable_reqfindcampaigntemplatebyid();
  void set_allocated_reqfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* reqfindcampaigntemplatebyid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& _internal_reqfindcampaigntemplatebyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* _internal_mutable_reqfindcampaigntemplatebyid();
  public:
  void unsafe_arena_set_allocated_reqfindcampaigntemplatebyid(
      ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* reqfindcampaigntemplatebyid);
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* unsafe_arena_release_reqfindcampaigntemplatebyid();

  // .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest reqAddTargetUser = 13;
  bool has_reqaddtargetuser() const;
  private:
  bool _internal_has_reqaddtargetuser() const;
  public:
  void clear_reqaddtargetuser();
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& reqaddtargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* release_reqaddtargetuser();
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* mutable_reqaddtargetuser();
  void set_allocated_reqaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* reqaddtargetuser);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& _internal_reqaddtargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* _internal_mutable_reqaddtargetuser();
  public:
  void unsafe_arena_set_allocated_reqaddtargetuser(
      ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* reqaddtargetuser);
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* unsafe_arena_release_reqaddtargetuser();

  // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest reqAddTargetUserBulk = 14;
  bool has_reqaddtargetuserbulk() const;
  private:
  bool _internal_has_reqaddtargetuserbulk() const;
  public:
  void clear_reqaddtargetuserbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& reqaddtargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* release_reqaddtargetuserbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* mutable_reqaddtargetuserbulk();
  void set_allocated_reqaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* reqaddtargetuserbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& _internal_reqaddtargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* _internal_mutable_reqaddtargetuserbulk();
  public:
  void unsafe_arena_set_allocated_reqaddtargetuserbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* reqaddtargetuserbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* unsafe_arena_release_reqaddtargetuserbulk();

  // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest reqAddInactionTargetUser = 15;
  bool has_reqaddinactiontargetuser() const;
  private:
  bool _internal_has_reqaddinactiontargetuser() const;
  public:
  void clear_reqaddinactiontargetuser();
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& reqaddinactiontargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* release_reqaddinactiontargetuser();
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* mutable_reqaddinactiontargetuser();
  void set_allocated_reqaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* reqaddinactiontargetuser);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& _internal_reqaddinactiontargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* _internal_mutable_reqaddinactiontargetuser();
  public:
  void unsafe_arena_set_allocated_reqaddinactiontargetuser(
      ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* reqaddinactiontargetuser);
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* unsafe_arena_release_reqaddinactiontargetuser();

  // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest reqAddInactionTargetUserBulk = 16;
  bool has_reqaddinactiontargetuserbulk() const;
  private:
  bool _internal_has_reqaddinactiontargetuserbulk() const;
  public:
  void clear_reqaddinactiontargetuserbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& reqaddinactiontargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* release_reqaddinactiontargetuserbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* mutable_reqaddinactiontargetuserbulk();
  void set_allocated_reqaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* reqaddinactiontargetuserbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& _internal_reqaddinactiontargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* _internal_mutable_reqaddinactiontargetuserbulk();
  public:
  void unsafe_arena_set_allocated_reqaddinactiontargetuserbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* reqaddinactiontargetuserbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* unsafe_arena_release_reqaddinactiontargetuserbulk();

  // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest reqFindInactionTargetUserByCampaignId = 17;
  bool has_reqfindinactiontargetuserbycampaignid() const;
  private:
  bool _internal_has_reqfindinactiontargetuserbycampaignid() const;
  public:
  void clear_reqfindinactiontargetuserbycampaignid();
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& reqfindinactiontargetuserbycampaignid() const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* release_reqfindinactiontargetuserbycampaignid();
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* mutable_reqfindinactiontargetuserbycampaignid();
  void set_allocated_reqfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* reqfindinactiontargetuserbycampaignid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& _internal_reqfindinactiontargetuserbycampaignid() const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* _internal_mutable_reqfindinactiontargetuserbycampaignid();
  public:
  void unsafe_arena_set_allocated_reqfindinactiontargetuserbycampaignid(
      ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* reqfindinactiontargetuserbycampaignid);
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* unsafe_arena_release_reqfindinactiontargetuserbycampaignid();

  // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest reqGetDynamicDataByKey = 18;
  bool has_reqgetdynamicdatabykey() const;
  private:
  bool _internal_has_reqgetdynamicdatabykey() const;
  public:
  void clear_reqgetdynamicdatabykey();
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest& reqgetdynamicdatabykey() const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* release_reqgetdynamicdatabykey();
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* mutable_reqgetdynamicdatabykey();
  void set_allocated_reqgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* reqgetdynamicdatabykey);
  private:
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest& _internal_reqgetdynamicdatabykey() const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* _internal_mutable_reqgetdynamicdatabykey();
  public:
  void unsafe_arena_set_allocated_reqgetdynamicdatabykey(
      ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* reqgetdynamicdatabykey);
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* unsafe_arena_release_reqgetdynamicdatabykey();

  // .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest reqAddDynamicData = 19;
  bool has_reqadddynamicdata() const;
  private:
  bool _internal_has_reqadddynamicdata() const;
  public:
  void clear_reqadddynamicdata();
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& reqadddynamicdata() const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* release_reqadddynamicdata();
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* mutable_reqadddynamicdata();
  void set_allocated_reqadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* reqadddynamicdata);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& _internal_reqadddynamicdata() const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* _internal_mutable_reqadddynamicdata();
  public:
  void unsafe_arena_set_allocated_reqadddynamicdata(
      ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* reqadddynamicdata);
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* unsafe_arena_release_reqadddynamicdata();

  // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest reqAddDynamicDataBulk = 20;
  bool has_reqadddynamicdatabulk() const;
  private:
  bool _internal_has_reqadddynamicdatabulk() const;
  public:
  void clear_reqadddynamicdatabulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest& reqadddynamicdatabulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* release_reqadddynamicdatabulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* mutable_reqadddynamicdatabulk();
  void set_allocated_reqadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* reqadddynamicdatabulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest& _internal_reqadddynamicdatabulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* _internal_mutable_reqadddynamicdatabulk();
  public:
  void unsafe_arena_set_allocated_reqadddynamicdatabulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* reqadddynamicdatabulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* unsafe_arena_release_reqadddynamicdatabulk();

  void clear_ARequest();
  ARequestCase ARequest_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.Request)
 private:
  class _Internal;
  void set_has_reqaddcampaign();
  void set_has_reqaddcampaignbulk();
  void set_has_requpdatecampaign();
  void set_has_requpdatecampaignbulk();
  void set_has_reqaddcampaigntemplate();
  void set_has_reqaddcampaigntemplatebulk();
  void set_has_reqaddnewcampaign();
  void set_has_reqaddnewcampaignbulk();
  void set_has_reqgetuserlist();
  void set_has_reqfindcampaignbyid();
  void set_has_reqfindcampaigntemplatebyid();
  void set_has_reqaddtargetuser();
  void set_has_reqaddtargetuserbulk();
  void set_has_reqaddinactiontargetuser();
  void set_has_reqaddinactiontargetuserbulk();
  void set_has_reqfindinactiontargetuserbycampaignid();
  void set_has_reqgetdynamicdatabykey();
  void set_has_reqadddynamicdata();
  void set_has_reqadddynamicdatabulk();

  inline bool has_ARequest() const;
  inline void clear_has_ARequest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  union ARequestUnion {
    ARequestUnion() {}
    ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* reqaddcampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* reqaddcampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* requpdatecampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* requpdatecampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* reqaddcampaigntemplate_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* reqaddcampaigntemplatebulk_;
    ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* reqaddnewcampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* reqaddnewcampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::CampaignRequest* reqgetuserlist_;
    ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* reqfindcampaignbyid_;
    ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* reqfindcampaigntemplatebyid_;
    ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* reqaddtargetuser_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* reqaddtargetuserbulk_;
    ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* reqaddinactiontargetuser_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* reqaddinactiontargetuserbulk_;
    ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* reqfindinactiontargetuserbycampaignid_;
    ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* reqgetdynamicdatabykey_;
    ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* reqadddynamicdata_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* reqadddynamicdatabulk_;
  } ARequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiResponses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.MultiResponses) */ {
 public:
  inline MultiResponses() : MultiResponses(nullptr) {}
  virtual ~MultiResponses();

  MultiResponses(const MultiResponses& from);
  MultiResponses(MultiResponses&& from) noexcept
    : MultiResponses() {
    *this = ::std::move(from);
  }

  inline MultiResponses& operator=(const MultiResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiResponses& operator=(MultiResponses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiResponses& default_instance();

  static inline const MultiResponses* internal_default_instance() {
    return reinterpret_cast<const MultiResponses*>(
               &_MultiResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(MultiResponses& a, MultiResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiResponses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiResponses* New() const final {
    return CreateMaybeMessage<MultiResponses>(nullptr);
  }

  MultiResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiResponses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiResponses& from);
  void MergeFrom(const MultiResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiResponses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.MultiResponses";
  }
  protected:
  explicit MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.Response response = 2;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::farm::nurture::core::contracts::CampaignService::Response* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Response >*
      mutable_response();
  private:
  const ::farm::nurture::core::contracts::CampaignService::Response& _internal_response(int index) const;
  ::farm::nurture::core::contracts::CampaignService::Response* _internal_add_response();
  public:
  const ::farm::nurture::core::contracts::CampaignService::Response& response(int index) const;
  ::farm::nurture::core::contracts::CampaignService::Response* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Response >&
      response() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.MultiResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Response > response_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum AResponseCase {
    kResAddCampaign = 3,
    kResAddCampaignBulk = 4,
    kResUpdateCampaign = 5,
    kResUpdateCampaignBulk = 6,
    kResAddCampaignTemplate = 7,
    kResAddCampaignTemplateBulk = 8,
    kResAddNewCampaign = 9,
    kResAddNewCampaignBulk = 10,
    kResGetUserList = 11,
    kResFindCampaignById = 12,
    kResFindCampaignTemplateById = 13,
    kResAddTargetUser = 14,
    kResAddTargetUserBulk = 15,
    kResAddInactionTargetUser = 16,
    kResAddInactionTargetUserBulk = 17,
    kResFindInactionTargetUserByCampaignId = 18,
    kResGetDynamicDataByKey = 19,
    kResAddDynamicData = 20,
    kResAddDynamicDataBulk = 21,
    ARESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kStatusFieldNumber = 2,
    kResAddCampaignFieldNumber = 3,
    kResAddCampaignBulkFieldNumber = 4,
    kResUpdateCampaignFieldNumber = 5,
    kResUpdateCampaignBulkFieldNumber = 6,
    kResAddCampaignTemplateFieldNumber = 7,
    kResAddCampaignTemplateBulkFieldNumber = 8,
    kResAddNewCampaignFieldNumber = 9,
    kResAddNewCampaignBulkFieldNumber = 10,
    kResGetUserListFieldNumber = 11,
    kResFindCampaignByIdFieldNumber = 12,
    kResFindCampaignTemplateByIdFieldNumber = 13,
    kResAddTargetUserFieldNumber = 14,
    kResAddTargetUserBulkFieldNumber = 15,
    kResAddInactionTargetUserFieldNumber = 16,
    kResAddInactionTargetUserBulkFieldNumber = 17,
    kResFindInactionTargetUserByCampaignIdFieldNumber = 18,
    kResGetDynamicDataByKeyFieldNumber = 19,
    kResAddDynamicDataFieldNumber = 20,
    kResAddDynamicDataBulkFieldNumber = 21,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.core.contracts.CampaignService.AddCampaignResponse resAddCampaign = 3;
  bool has_resaddcampaign() const;
  private:
  bool _internal_has_resaddcampaign() const;
  public:
  void clear_resaddcampaign();
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& resaddcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* release_resaddcampaign();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* mutable_resaddcampaign();
  void set_allocated_resaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resaddcampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& _internal_resaddcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* _internal_mutable_resaddcampaign();
  public:
  void unsafe_arena_set_allocated_resaddcampaign(
      ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resaddcampaign);
  ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* unsafe_arena_release_resaddcampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse resAddCampaignBulk = 4;
  bool has_resaddcampaignbulk() const;
  private:
  bool _internal_has_resaddcampaignbulk() const;
  public:
  void clear_resaddcampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse& resaddcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* release_resaddcampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* mutable_resaddcampaignbulk();
  void set_allocated_resaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resaddcampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse& _internal_resaddcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* _internal_mutable_resaddcampaignbulk();
  public:
  void unsafe_arena_set_allocated_resaddcampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resaddcampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* unsafe_arena_release_resaddcampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse resUpdateCampaign = 5;
  bool has_resupdatecampaign() const;
  private:
  bool _internal_has_resupdatecampaign() const;
  public:
  void clear_resupdatecampaign();
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& resupdatecampaign() const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* release_resupdatecampaign();
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* mutable_resupdatecampaign();
  void set_allocated_resupdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resupdatecampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& _internal_resupdatecampaign() const;
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* _internal_mutable_resupdatecampaign();
  public:
  void unsafe_arena_set_allocated_resupdatecampaign(
      ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resupdatecampaign);
  ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* unsafe_arena_release_resupdatecampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse resUpdateCampaignBulk = 6;
  bool has_resupdatecampaignbulk() const;
  private:
  bool _internal_has_resupdatecampaignbulk() const;
  public:
  void clear_resupdatecampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse& resupdatecampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* release_resupdatecampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* mutable_resupdatecampaignbulk();
  void set_allocated_resupdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resupdatecampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse& _internal_resupdatecampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* _internal_mutable_resupdatecampaignbulk();
  public:
  void unsafe_arena_set_allocated_resupdatecampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resupdatecampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* unsafe_arena_release_resupdatecampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse resAddCampaignTemplate = 7;
  bool has_resaddcampaigntemplate() const;
  private:
  bool _internal_has_resaddcampaigntemplate() const;
  public:
  void clear_resaddcampaigntemplate();
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& resaddcampaigntemplate() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* release_resaddcampaigntemplate();
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* mutable_resaddcampaigntemplate();
  void set_allocated_resaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resaddcampaigntemplate);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& _internal_resaddcampaigntemplate() const;
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* _internal_mutable_resaddcampaigntemplate();
  public:
  void unsafe_arena_set_allocated_resaddcampaigntemplate(
      ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resaddcampaigntemplate);
  ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* unsafe_arena_release_resaddcampaigntemplate();

  // .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse resAddCampaignTemplateBulk = 8;
  bool has_resaddcampaigntemplatebulk() const;
  private:
  bool _internal_has_resaddcampaigntemplatebulk() const;
  public:
  void clear_resaddcampaigntemplatebulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse& resaddcampaigntemplatebulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* release_resaddcampaigntemplatebulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* mutable_resaddcampaigntemplatebulk();
  void set_allocated_resaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resaddcampaigntemplatebulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse& _internal_resaddcampaigntemplatebulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* _internal_mutable_resaddcampaigntemplatebulk();
  public:
  void unsafe_arena_set_allocated_resaddcampaigntemplatebulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resaddcampaigntemplatebulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* unsafe_arena_release_resaddcampaigntemplatebulk();

  // .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse resAddNewCampaign = 9;
  bool has_resaddnewcampaign() const;
  private:
  bool _internal_has_resaddnewcampaign() const;
  public:
  void clear_resaddnewcampaign();
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& resaddnewcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* release_resaddnewcampaign();
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* mutable_resaddnewcampaign();
  void set_allocated_resaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resaddnewcampaign);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& _internal_resaddnewcampaign() const;
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* _internal_mutable_resaddnewcampaign();
  public:
  void unsafe_arena_set_allocated_resaddnewcampaign(
      ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resaddnewcampaign);
  ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* unsafe_arena_release_resaddnewcampaign();

  // .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse resAddNewCampaignBulk = 10;
  bool has_resaddnewcampaignbulk() const;
  private:
  bool _internal_has_resaddnewcampaignbulk() const;
  public:
  void clear_resaddnewcampaignbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse& resaddnewcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* release_resaddnewcampaignbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* mutable_resaddnewcampaignbulk();
  void set_allocated_resaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resaddnewcampaignbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse& _internal_resaddnewcampaignbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* _internal_mutable_resaddnewcampaignbulk();
  public:
  void unsafe_arena_set_allocated_resaddnewcampaignbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resaddnewcampaignbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* unsafe_arena_release_resaddnewcampaignbulk();

  // .farm.nurture.core.contracts.CampaignService.CampaignResponse resGetUserList = 11;
  bool has_resgetuserlist() const;
  private:
  bool _internal_has_resgetuserlist() const;
  public:
  void clear_resgetuserlist();
  const ::farm::nurture::core::contracts::CampaignService::CampaignResponse& resgetuserlist() const;
  ::farm::nurture::core::contracts::CampaignService::CampaignResponse* release_resgetuserlist();
  ::farm::nurture::core::contracts::CampaignService::CampaignResponse* mutable_resgetuserlist();
  void set_allocated_resgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignResponse* resgetuserlist);
  private:
  const ::farm::nurture::core::contracts::CampaignService::CampaignResponse& _internal_resgetuserlist() const;
  ::farm::nurture::core::contracts::CampaignService::CampaignResponse* _internal_mutable_resgetuserlist();
  public:
  void unsafe_arena_set_allocated_resgetuserlist(
      ::farm::nurture::core::contracts::CampaignService::CampaignResponse* resgetuserlist);
  ::farm::nurture::core::contracts::CampaignService::CampaignResponse* unsafe_arena_release_resgetuserlist();

  // .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse resFindCampaignById = 12;
  bool has_resfindcampaignbyid() const;
  private:
  bool _internal_has_resfindcampaignbyid() const;
  public:
  void clear_resfindcampaignbyid();
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse& resfindcampaignbyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* release_resfindcampaignbyid();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* mutable_resfindcampaignbyid();
  void set_allocated_resfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resfindcampaignbyid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse& _internal_resfindcampaignbyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* _internal_mutable_resfindcampaignbyid();
  public:
  void unsafe_arena_set_allocated_resfindcampaignbyid(
      ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resfindcampaignbyid);
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* unsafe_arena_release_resfindcampaignbyid();

  // .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse resFindCampaignTemplateById = 13;
  bool has_resfindcampaigntemplatebyid() const;
  private:
  bool _internal_has_resfindcampaigntemplatebyid() const;
  public:
  void clear_resfindcampaigntemplatebyid();
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse& resfindcampaigntemplatebyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* release_resfindcampaigntemplatebyid();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* mutable_resfindcampaigntemplatebyid();
  void set_allocated_resfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resfindcampaigntemplatebyid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse& _internal_resfindcampaigntemplatebyid() const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* _internal_mutable_resfindcampaigntemplatebyid();
  public:
  void unsafe_arena_set_allocated_resfindcampaigntemplatebyid(
      ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resfindcampaigntemplatebyid);
  ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* unsafe_arena_release_resfindcampaigntemplatebyid();

  // .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse resAddTargetUser = 14;
  bool has_resaddtargetuser() const;
  private:
  bool _internal_has_resaddtargetuser() const;
  public:
  void clear_resaddtargetuser();
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& resaddtargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* release_resaddtargetuser();
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* mutable_resaddtargetuser();
  void set_allocated_resaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resaddtargetuser);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& _internal_resaddtargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* _internal_mutable_resaddtargetuser();
  public:
  void unsafe_arena_set_allocated_resaddtargetuser(
      ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resaddtargetuser);
  ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* unsafe_arena_release_resaddtargetuser();

  // .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse resAddTargetUserBulk = 15;
  bool has_resaddtargetuserbulk() const;
  private:
  bool _internal_has_resaddtargetuserbulk() const;
  public:
  void clear_resaddtargetuserbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse& resaddtargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* release_resaddtargetuserbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* mutable_resaddtargetuserbulk();
  void set_allocated_resaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resaddtargetuserbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse& _internal_resaddtargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* _internal_mutable_resaddtargetuserbulk();
  public:
  void unsafe_arena_set_allocated_resaddtargetuserbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resaddtargetuserbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* unsafe_arena_release_resaddtargetuserbulk();

  // .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse resAddInactionTargetUser = 16;
  bool has_resaddinactiontargetuser() const;
  private:
  bool _internal_has_resaddinactiontargetuser() const;
  public:
  void clear_resaddinactiontargetuser();
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& resaddinactiontargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* release_resaddinactiontargetuser();
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* mutable_resaddinactiontargetuser();
  void set_allocated_resaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resaddinactiontargetuser);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& _internal_resaddinactiontargetuser() const;
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* _internal_mutable_resaddinactiontargetuser();
  public:
  void unsafe_arena_set_allocated_resaddinactiontargetuser(
      ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resaddinactiontargetuser);
  ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* unsafe_arena_release_resaddinactiontargetuser();

  // .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse resAddInactionTargetUserBulk = 17;
  bool has_resaddinactiontargetuserbulk() const;
  private:
  bool _internal_has_resaddinactiontargetuserbulk() const;
  public:
  void clear_resaddinactiontargetuserbulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse& resaddinactiontargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* release_resaddinactiontargetuserbulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* mutable_resaddinactiontargetuserbulk();
  void set_allocated_resaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resaddinactiontargetuserbulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse& _internal_resaddinactiontargetuserbulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* _internal_mutable_resaddinactiontargetuserbulk();
  public:
  void unsafe_arena_set_allocated_resaddinactiontargetuserbulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resaddinactiontargetuserbulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* unsafe_arena_release_resaddinactiontargetuserbulk();

  // .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse resFindInactionTargetUserByCampaignId = 18;
  bool has_resfindinactiontargetuserbycampaignid() const;
  private:
  bool _internal_has_resfindinactiontargetuserbycampaignid() const;
  public:
  void clear_resfindinactiontargetuserbycampaignid();
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse& resfindinactiontargetuserbycampaignid() const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* release_resfindinactiontargetuserbycampaignid();
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* mutable_resfindinactiontargetuserbycampaignid();
  void set_allocated_resfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resfindinactiontargetuserbycampaignid);
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse& _internal_resfindinactiontargetuserbycampaignid() const;
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* _internal_mutable_resfindinactiontargetuserbycampaignid();
  public:
  void unsafe_arena_set_allocated_resfindinactiontargetuserbycampaignid(
      ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resfindinactiontargetuserbycampaignid);
  ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* unsafe_arena_release_resfindinactiontargetuserbycampaignid();

  // .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse resGetDynamicDataByKey = 19;
  bool has_resgetdynamicdatabykey() const;
  private:
  bool _internal_has_resgetdynamicdatabykey() const;
  public:
  void clear_resgetdynamicdatabykey();
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse& resgetdynamicdatabykey() const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* release_resgetdynamicdatabykey();
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* mutable_resgetdynamicdatabykey();
  void set_allocated_resgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* resgetdynamicdatabykey);
  private:
  const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse& _internal_resgetdynamicdatabykey() const;
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* _internal_mutable_resgetdynamicdatabykey();
  public:
  void unsafe_arena_set_allocated_resgetdynamicdatabykey(
      ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* resgetdynamicdatabykey);
  ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* unsafe_arena_release_resgetdynamicdatabykey();

  // .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse resAddDynamicData = 20;
  bool has_resadddynamicdata() const;
  private:
  bool _internal_has_resadddynamicdata() const;
  public:
  void clear_resadddynamicdata();
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& resadddynamicdata() const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* release_resadddynamicdata();
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* mutable_resadddynamicdata();
  void set_allocated_resadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* resadddynamicdata);
  private:
  const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& _internal_resadddynamicdata() const;
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* _internal_mutable_resadddynamicdata();
  public:
  void unsafe_arena_set_allocated_resadddynamicdata(
      ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* resadddynamicdata);
  ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* unsafe_arena_release_resadddynamicdata();

  // .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse resAddDynamicDataBulk = 21;
  bool has_resadddynamicdatabulk() const;
  private:
  bool _internal_has_resadddynamicdatabulk() const;
  public:
  void clear_resadddynamicdatabulk();
  const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse& resadddynamicdatabulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* release_resadddynamicdatabulk();
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* mutable_resadddynamicdatabulk();
  void set_allocated_resadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* resadddynamicdatabulk);
  private:
  const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse& _internal_resadddynamicdatabulk() const;
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* _internal_mutable_resadddynamicdatabulk();
  public:
  void unsafe_arena_set_allocated_resadddynamicdatabulk(
      ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* resadddynamicdatabulk);
  ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* unsafe_arena_release_resadddynamicdatabulk();

  void clear_AResponse();
  AResponseCase AResponse_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.Response)
 private:
  class _Internal;
  void set_has_resaddcampaign();
  void set_has_resaddcampaignbulk();
  void set_has_resupdatecampaign();
  void set_has_resupdatecampaignbulk();
  void set_has_resaddcampaigntemplate();
  void set_has_resaddcampaigntemplatebulk();
  void set_has_resaddnewcampaign();
  void set_has_resaddnewcampaignbulk();
  void set_has_resgetuserlist();
  void set_has_resfindcampaignbyid();
  void set_has_resfindcampaigntemplatebyid();
  void set_has_resaddtargetuser();
  void set_has_resaddtargetuserbulk();
  void set_has_resaddinactiontargetuser();
  void set_has_resaddinactiontargetuserbulk();
  void set_has_resfindinactiontargetuserbycampaignid();
  void set_has_resgetdynamicdatabykey();
  void set_has_resadddynamicdata();
  void set_has_resadddynamicdatabulk();

  inline bool has_AResponse() const;
  inline void clear_has_AResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  union AResponseUnion {
    AResponseUnion() {}
    ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resaddcampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resaddcampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resupdatecampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resupdatecampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resaddcampaigntemplate_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resaddcampaigntemplatebulk_;
    ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resaddnewcampaign_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resaddnewcampaignbulk_;
    ::farm::nurture::core::contracts::CampaignService::CampaignResponse* resgetuserlist_;
    ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resfindcampaignbyid_;
    ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resfindcampaigntemplatebyid_;
    ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resaddtargetuser_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resaddtargetuserbulk_;
    ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resaddinactiontargetuser_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resaddinactiontargetuserbulk_;
    ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resfindinactiontargetuserbycampaignid_;
    ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* resgetdynamicdatabykey_;
    ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* resadddynamicdata_;
    ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* resadddynamicdatabulk_;
  } AResponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FilterCampaignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest) */ {
 public:
  inline FilterCampaignRequest() : FilterCampaignRequest(nullptr) {}
  virtual ~FilterCampaignRequest();

  FilterCampaignRequest(const FilterCampaignRequest& from);
  FilterCampaignRequest(FilterCampaignRequest&& from) noexcept
    : FilterCampaignRequest() {
    *this = ::std::move(from);
  }

  inline FilterCampaignRequest& operator=(const FilterCampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterCampaignRequest& operator=(FilterCampaignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterCampaignRequest& default_instance();

  static inline const FilterCampaignRequest* internal_default_instance() {
    return reinterpret_cast<const FilterCampaignRequest*>(
               &_FilterCampaignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FilterCampaignRequest& a, FilterCampaignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterCampaignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterCampaignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterCampaignRequest* New() const final {
    return CreateMaybeMessage<FilterCampaignRequest>(nullptr);
  }

  FilterCampaignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterCampaignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterCampaignRequest& from);
  void MergeFrom(const FilterCampaignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterCampaignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FilterCampaignRequest";
  }
  protected:
  explicit FilterCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kTemplateNameFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kStatusFieldNumber = 3,
    kPageNumberFieldNumber = 6,
    kLimitFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string templateName = 5;
  void clear_templatename();
  const std::string& templatename() const;
  void set_templatename(const std::string& value);
  void set_templatename(std::string&& value);
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  std::string* mutable_templatename();
  std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.core.contracts.common.CampaignStatus status = 3;
  void clear_status();
  ::farm::nurture::core::contracts::common::CampaignStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  private:
  ::farm::nurture::core::contracts::common::CampaignStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value);
  public:

  // int32 pageNumber = 6;
  void clear_pagenumber();
  ::PROTOBUF_NAMESPACE_ID::int32 pagenumber() const;
  void set_pagenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagenumber() const;
  void _internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 7;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagenumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FilterCampaignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse) */ {
 public:
  inline FilterCampaignResponse() : FilterCampaignResponse(nullptr) {}
  virtual ~FilterCampaignResponse();

  FilterCampaignResponse(const FilterCampaignResponse& from);
  FilterCampaignResponse(FilterCampaignResponse&& from) noexcept
    : FilterCampaignResponse() {
    *this = ::std::move(from);
  }

  inline FilterCampaignResponse& operator=(const FilterCampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterCampaignResponse& operator=(FilterCampaignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterCampaignResponse& default_instance();

  static inline const FilterCampaignResponse* internal_default_instance() {
    return reinterpret_cast<const FilterCampaignResponse*>(
               &_FilterCampaignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FilterCampaignResponse& a, FilterCampaignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterCampaignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterCampaignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterCampaignResponse* New() const final {
    return CreateMaybeMessage<FilterCampaignResponse>(nullptr);
  }

  FilterCampaignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterCampaignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterCampaignResponse& from);
  void MergeFrom(const FilterCampaignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterCampaignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.FilterCampaignResponse";
  }
  protected:
  explicit FilterCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& _internal_records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& records(int index) const;
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestCampaignByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest) */ {
 public:
  inline TestCampaignByIdRequest() : TestCampaignByIdRequest(nullptr) {}
  virtual ~TestCampaignByIdRequest();

  TestCampaignByIdRequest(const TestCampaignByIdRequest& from);
  TestCampaignByIdRequest(TestCampaignByIdRequest&& from) noexcept
    : TestCampaignByIdRequest() {
    *this = ::std::move(from);
  }

  inline TestCampaignByIdRequest& operator=(const TestCampaignByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCampaignByIdRequest& operator=(TestCampaignByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCampaignByIdRequest& default_instance();

  static inline const TestCampaignByIdRequest* internal_default_instance() {
    return reinterpret_cast<const TestCampaignByIdRequest*>(
               &_TestCampaignByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TestCampaignByIdRequest& a, TestCampaignByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCampaignByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCampaignByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCampaignByIdRequest* New() const final {
    return CreateMaybeMessage<TestCampaignByIdRequest>(nullptr);
  }

  TestCampaignByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCampaignByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCampaignByIdRequest& from);
  void MergeFrom(const TestCampaignByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCampaignByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest";
  }
  protected:
  explicit TestCampaignByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAthenaQueryFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kCampaignIdFieldNumber = 2,
  };
  // string athenaQuery = 3;
  void clear_athenaquery();
  const std::string& athenaquery() const;
  void set_athenaquery(const std::string& value);
  void set_athenaquery(std::string&& value);
  void set_athenaquery(const char* value);
  void set_athenaquery(const char* value, size_t size);
  std::string* mutable_athenaquery();
  std::string* release_athenaquery();
  void set_allocated_athenaquery(std::string* athenaquery);
  private:
  const std::string& _internal_athenaquery() const;
  void _internal_set_athenaquery(const std::string& value);
  std::string* _internal_mutable_athenaquery();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 campaignId = 2;
  void clear_campaignid();
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid() const;
  void set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_campaignid() const;
  void _internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr athenaquery_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 campaignid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TestCampaignByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse) */ {
 public:
  inline TestCampaignByIdResponse() : TestCampaignByIdResponse(nullptr) {}
  virtual ~TestCampaignByIdResponse();

  TestCampaignByIdResponse(const TestCampaignByIdResponse& from);
  TestCampaignByIdResponse(TestCampaignByIdResponse&& from) noexcept
    : TestCampaignByIdResponse() {
    *this = ::std::move(from);
  }

  inline TestCampaignByIdResponse& operator=(const TestCampaignByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCampaignByIdResponse& operator=(TestCampaignByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCampaignByIdResponse& default_instance();

  static inline const TestCampaignByIdResponse* internal_default_instance() {
    return reinterpret_cast<const TestCampaignByIdResponse*>(
               &_TestCampaignByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TestCampaignByIdResponse& a, TestCampaignByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCampaignByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCampaignByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCampaignByIdResponse* New() const final {
    return CreateMaybeMessage<TestCampaignByIdResponse>(nullptr);
  }

  TestCampaignByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCampaignByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCampaignByIdResponse& from);
  void MergeFrom(const TestCampaignByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCampaignByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse";
  }
  protected:
  explicit TestCampaignByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto);
    return ::descriptor_table_CampaignService_2fcampaign_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CampaignService_2fcampaign_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.NameSpace namespace = 2;
inline void AddCampaignRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace AddCampaignRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace AddCampaignRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.namespace)
  return _internal_namespace_();
}
inline void AddCampaignRequest::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void AddCampaignRequest::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.namespace)
}

// string name = 3;
inline void AddCampaignRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AddCampaignRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
  return _internal_name();
}
inline void AddCampaignRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
}
inline std::string* AddCampaignRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddCampaignRequest::_internal_name() const {
  return name_.Get();
}
inline void AddCampaignRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
}
inline void AddCampaignRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
}
inline void AddCampaignRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
}
inline std::string* AddCampaignRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.name)
}

// string description = 4;
inline void AddCampaignRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& AddCampaignRequest::description() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
  return _internal_description();
}
inline void AddCampaignRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
}
inline std::string* AddCampaignRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
  return _internal_mutable_description();
}
inline const std::string& AddCampaignRequest::_internal_description() const {
  return description_.Get();
}
inline void AddCampaignRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
}
inline void AddCampaignRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
}
inline void AddCampaignRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
}
inline std::string* AddCampaignRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignRequest::release_description() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.description)
}

// string cronExpression = 5;
inline void AddCampaignRequest::clear_cronexpression() {
  cronexpression_.ClearToEmpty();
}
inline const std::string& AddCampaignRequest::cronexpression() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
  return _internal_cronexpression();
}
inline void AddCampaignRequest::set_cronexpression(const std::string& value) {
  _internal_set_cronexpression(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
}
inline std::string* AddCampaignRequest::mutable_cronexpression() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
  return _internal_mutable_cronexpression();
}
inline const std::string& AddCampaignRequest::_internal_cronexpression() const {
  return cronexpression_.Get();
}
inline void AddCampaignRequest::_internal_set_cronexpression(const std::string& value) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignRequest::set_cronexpression(std::string&& value) {
  
  cronexpression_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
}
inline void AddCampaignRequest::set_cronexpression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
}
inline void AddCampaignRequest::set_cronexpression(const char* value,
    size_t size) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
}
inline std::string* AddCampaignRequest::_internal_mutable_cronexpression() {
  
  return cronexpression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignRequest::release_cronexpression() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
  return cronexpression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignRequest::set_allocated_cronexpression(std::string* cronexpression) {
  if (cronexpression != nullptr) {
    
  } else {
    
  }
  cronexpression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cronexpression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.cronExpression)
}

// int32 occurrences = 6;
inline void AddCampaignRequest::clear_occurrences() {
  occurrences_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignRequest::_internal_occurrences() const {
  return occurrences_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignRequest::occurrences() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.occurrences)
  return _internal_occurrences();
}
inline void AddCampaignRequest::_internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  occurrences_ = value;
}
inline void AddCampaignRequest::set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.occurrences)
}

// repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 7;
inline int AddCampaignRequest::_internal_content_metadata_size() const {
  return content_metadata_.size();
}
inline int AddCampaignRequest::content_metadata_size() const {
  return _internal_content_metadata_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignRequest::mutable_content_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata)
  return content_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddCampaignRequest::mutable_content_metadata() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata)
  return &content_metadata_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignRequest::_internal_content_metadata(int index) const {
  return content_metadata_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignRequest::content_metadata(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata)
  return _internal_content_metadata(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignRequest::_internal_add_content_metadata() {
  return content_metadata_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignRequest::add_content_metadata() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata)
  return _internal_add_content_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddCampaignRequest::content_metadata() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata)
  return content_metadata_;
}

// .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 8;
inline void AddCampaignRequest::clear_communicationchannel() {
  communicationchannel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel AddCampaignRequest::_internal_communicationchannel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(communicationchannel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel AddCampaignRequest::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.communicationChannel)
  return _internal_communicationchannel();
}
inline void AddCampaignRequest::_internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  communicationchannel_ = value;
}
inline void AddCampaignRequest::set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.communicationChannel)
}

// .farm.nurture.core.contracts.common.CampaignStatus status = 9;
inline void AddCampaignRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignStatus AddCampaignRequest::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::CampaignStatus AddCampaignRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.status)
  return _internal_status();
}
inline void AddCampaignRequest::_internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  
  status_ = value;
}
inline void AddCampaignRequest::set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.status)
}

// .farm.nurture.core.contracts.common.CampaignQueryType type = 10;
inline void AddCampaignRequest::clear_type() {
  type_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignQueryType AddCampaignRequest::_internal_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignQueryType >(type_);
}
inline ::farm::nurture::core::contracts::common::CampaignQueryType AddCampaignRequest::type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.type)
  return _internal_type();
}
inline void AddCampaignRequest::_internal_set_type(::farm::nurture::core::contracts::common::CampaignQueryType value) {
  
  type_ = value;
}
inline void AddCampaignRequest::set_type(::farm::nurture::core::contracts::common::CampaignQueryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.type)
}

// .farm.nurture.core.contracts.common.CampaignScheduleType campaignScheduleType = 11;
inline void AddCampaignRequest::clear_campaignscheduletype() {
  campaignscheduletype_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType AddCampaignRequest::_internal_campaignscheduletype() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignScheduleType >(campaignscheduletype_);
}
inline ::farm::nurture::core::contracts::common::CampaignScheduleType AddCampaignRequest::campaignscheduletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.campaignScheduleType)
  return _internal_campaignscheduletype();
}
inline void AddCampaignRequest::_internal_set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  
  campaignscheduletype_ = value;
}
inline void AddCampaignRequest::set_campaignscheduletype(::farm::nurture::core::contracts::common::CampaignScheduleType value) {
  _internal_set_campaignscheduletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.campaignScheduleType)
}

// .google.protobuf.Duration inactionDuration = 12;
inline bool AddCampaignRequest::_internal_has_inactionduration() const {
  return this != internal_default_instance() && inactionduration_ != nullptr;
}
inline bool AddCampaignRequest::has_inactionduration() const {
  return _internal_has_inactionduration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AddCampaignRequest::_internal_inactionduration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = inactionduration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AddCampaignRequest::inactionduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration)
  return _internal_inactionduration();
}
inline void AddCampaignRequest::unsafe_arena_set_allocated_inactionduration(
    PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  inactionduration_ = inactionduration;
  if (inactionduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* AddCampaignRequest::release_inactionduration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AddCampaignRequest::unsafe_arena_release_inactionduration() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactionduration_;
  inactionduration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AddCampaignRequest::_internal_mutable_inactionduration() {
  
  if (inactionduration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    inactionduration_ = p;
  }
  return inactionduration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AddCampaignRequest::mutable_inactionduration() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration)
  return _internal_mutable_inactionduration();
}
inline void AddCampaignRequest::set_allocated_inactionduration(PROTOBUF_NAMESPACE_ID::Duration* inactionduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration_);
  }
  if (inactionduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactionduration)->GetArena();
    if (message_arena != submessage_arena) {
      inactionduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactionduration, submessage_arena);
    }
    
  } else {
    
  }
  inactionduration_ = inactionduration;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration)
}

// string query = 13;
inline void AddCampaignRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& AddCampaignRequest::query() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
  return _internal_query();
}
inline void AddCampaignRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
}
inline std::string* AddCampaignRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
  return _internal_mutable_query();
}
inline const std::string& AddCampaignRequest::_internal_query() const {
  return query_.Get();
}
inline void AddCampaignRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignRequest::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
}
inline void AddCampaignRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
}
inline void AddCampaignRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
}
inline std::string* AddCampaignRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignRequest::release_query() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.query)
}

// string inaction_query = 14;
inline void AddCampaignRequest::clear_inaction_query() {
  inaction_query_.ClearToEmpty();
}
inline const std::string& AddCampaignRequest::inaction_query() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
  return _internal_inaction_query();
}
inline void AddCampaignRequest::set_inaction_query(const std::string& value) {
  _internal_set_inaction_query(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
}
inline std::string* AddCampaignRequest::mutable_inaction_query() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
  return _internal_mutable_inaction_query();
}
inline const std::string& AddCampaignRequest::_internal_inaction_query() const {
  return inaction_query_.Get();
}
inline void AddCampaignRequest::_internal_set_inaction_query(const std::string& value) {
  
  inaction_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignRequest::set_inaction_query(std::string&& value) {
  
  inaction_query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
}
inline void AddCampaignRequest::set_inaction_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inaction_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
}
inline void AddCampaignRequest::set_inaction_query(const char* value,
    size_t size) {
  
  inaction_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
}
inline std::string* AddCampaignRequest::_internal_mutable_inaction_query() {
  
  return inaction_query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignRequest::release_inaction_query() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
  return inaction_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignRequest::set_allocated_inaction_query(std::string* inaction_query) {
  if (inaction_query != nullptr) {
    
  } else {
    
  }
  inaction_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inaction_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inaction_query)
}

// .farm.nurture.core.contracts.common.ActorID createdByActor = 15;
inline bool AddCampaignRequest::_internal_has_createdbyactor() const {
  return this != internal_default_instance() && createdbyactor_ != nullptr;
}
inline bool AddCampaignRequest::has_createdbyactor() const {
  return _internal_has_createdbyactor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddCampaignRequest::_internal_createdbyactor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = createdbyactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddCampaignRequest::createdbyactor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor)
  return _internal_createdbyactor();
}
inline void AddCampaignRequest::unsafe_arena_set_allocated_createdbyactor(
    ::farm::nurture::core::contracts::common::ActorID* createdbyactor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdbyactor_);
  }
  createdbyactor_ = createdbyactor;
  if (createdbyactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor)
}
inline ::farm::nurture::core::contracts::common::ActorID* AddCampaignRequest::release_createdbyactor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = createdbyactor_;
  createdbyactor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddCampaignRequest::unsafe_arena_release_createdbyactor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = createdbyactor_;
  createdbyactor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddCampaignRequest::_internal_mutable_createdbyactor() {
  
  if (createdbyactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    createdbyactor_ = p;
  }
  return createdbyactor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddCampaignRequest::mutable_createdbyactor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor)
  return _internal_mutable_createdbyactor();
}
inline void AddCampaignRequest::set_allocated_createdbyactor(::farm::nurture::core::contracts::common::ActorID* createdbyactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdbyactor_);
  }
  if (createdbyactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdbyactor)->GetArena();
    if (message_arena != submessage_arena) {
      createdbyactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdbyactor, submessage_arena);
    }
    
  } else {
    
  }
  createdbyactor_ = createdbyactor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor)
}

// .farm.nurture.core.contracts.ce.Media media = 16;
inline bool AddCampaignRequest::_internal_has_media() const {
  return this != internal_default_instance() && media_ != nullptr;
}
inline bool AddCampaignRequest::has_media() const {
  return _internal_has_media();
}
inline const ::farm::nurture::core::contracts::ce::Media& AddCampaignRequest::_internal_media() const {
  const ::farm::nurture::core::contracts::ce::Media* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::Media&>(
      ::farm::nurture::core::contracts::ce::_Media_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::Media& AddCampaignRequest::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media)
  return _internal_media();
}
inline void AddCampaignRequest::unsafe_arena_set_allocated_media(
    ::farm::nurture::core::contracts::ce::Media* media) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media)
}
inline ::farm::nurture::core::contracts::ce::Media* AddCampaignRequest::release_media() {
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* AddCampaignRequest::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media)
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* AddCampaignRequest::_internal_mutable_media() {
  
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::Media>(GetArena());
    media_ = p;
  }
  return media_;
}
inline ::farm::nurture::core::contracts::ce::Media* AddCampaignRequest::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media)
  return _internal_mutable_media();
}
inline void AddCampaignRequest::set_allocated_media(::farm::nurture::core::contracts::ce::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media)->GetArena();
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    
  } else {
    
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media)
}

// .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 17;
inline bool AddCampaignRequest::_internal_has_channel_attributes() const {
  return this != internal_default_instance() && channel_attributes_ != nullptr;
}
inline bool AddCampaignRequest::has_channel_attributes() const {
  return _internal_has_channel_attributes();
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& AddCampaignRequest::_internal_channel_attributes() const {
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* p = channel_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&>(
      ::farm::nurture::core::contracts::ce::_CommunicationChannelAttributes_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& AddCampaignRequest::channel_attributes() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes)
  return _internal_channel_attributes();
}
inline void AddCampaignRequest::unsafe_arena_set_allocated_channel_attributes(
    ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes_);
  }
  channel_attributes_ = channel_attributes;
  if (channel_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes)
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* AddCampaignRequest::release_channel_attributes() {
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* AddCampaignRequest::unsafe_arena_release_channel_attributes() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes)
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* AddCampaignRequest::_internal_mutable_channel_attributes() {
  
  if (channel_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationChannelAttributes>(GetArena());
    channel_attributes_ = p;
  }
  return channel_attributes_;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* AddCampaignRequest::mutable_channel_attributes() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes)
  return _internal_mutable_channel_attributes();
}
inline void AddCampaignRequest::set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes_);
  }
  if (channel_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      channel_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_attributes, submessage_arena);
    }
    
  } else {
    
  }
  channel_attributes_ = channel_attributes;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes)
}

// -------------------------------------------------------------------

// TestCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool TestCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool TestCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void TestCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void TestCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.NameSpace namespace = 2;
inline void TestCampaignRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace TestCampaignRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace TestCampaignRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.namespace)
  return _internal_namespace_();
}
inline void TestCampaignRequest::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void TestCampaignRequest::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.namespace)
}

// repeated .farm.nurture.core.contracts.common.Attribs content_metadata = 3;
inline int TestCampaignRequest::_internal_content_metadata_size() const {
  return content_metadata_.size();
}
inline int TestCampaignRequest::content_metadata_size() const {
  return _internal_content_metadata_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* TestCampaignRequest::mutable_content_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata)
  return content_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
TestCampaignRequest::mutable_content_metadata() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata)
  return &content_metadata_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& TestCampaignRequest::_internal_content_metadata(int index) const {
  return content_metadata_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& TestCampaignRequest::content_metadata(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata)
  return _internal_content_metadata(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* TestCampaignRequest::_internal_add_content_metadata() {
  return content_metadata_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* TestCampaignRequest::add_content_metadata() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata)
  return _internal_add_content_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
TestCampaignRequest::content_metadata() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata)
  return content_metadata_;
}

// .farm.nurture.core.contracts.common.CommunicationChannel communicationChannel = 4;
inline void TestCampaignRequest::clear_communicationchannel() {
  communicationchannel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel TestCampaignRequest::_internal_communicationchannel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(communicationchannel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel TestCampaignRequest::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.communicationChannel)
  return _internal_communicationchannel();
}
inline void TestCampaignRequest::_internal_set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  communicationchannel_ = value;
}
inline void TestCampaignRequest::set_communicationchannel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.communicationChannel)
}

// .farm.nurture.core.contracts.common.CampaignQueryType type = 5;
inline void TestCampaignRequest::clear_type() {
  type_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignQueryType TestCampaignRequest::_internal_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignQueryType >(type_);
}
inline ::farm::nurture::core::contracts::common::CampaignQueryType TestCampaignRequest::type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.type)
  return _internal_type();
}
inline void TestCampaignRequest::_internal_set_type(::farm::nurture::core::contracts::common::CampaignQueryType value) {
  
  type_ = value;
}
inline void TestCampaignRequest::set_type(::farm::nurture::core::contracts::common::CampaignQueryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.type)
}

// string query = 6;
inline void TestCampaignRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& TestCampaignRequest::query() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
  return _internal_query();
}
inline void TestCampaignRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
}
inline std::string* TestCampaignRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
  return _internal_mutable_query();
}
inline const std::string& TestCampaignRequest::_internal_query() const {
  return query_.Get();
}
inline void TestCampaignRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestCampaignRequest::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
}
inline void TestCampaignRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
}
inline void TestCampaignRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
}
inline std::string* TestCampaignRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestCampaignRequest::release_query() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestCampaignRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.query)
}

// .farm.nurture.core.contracts.ce.Media media = 7;
inline bool TestCampaignRequest::_internal_has_media() const {
  return this != internal_default_instance() && media_ != nullptr;
}
inline bool TestCampaignRequest::has_media() const {
  return _internal_has_media();
}
inline const ::farm::nurture::core::contracts::ce::Media& TestCampaignRequest::_internal_media() const {
  const ::farm::nurture::core::contracts::ce::Media* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::Media&>(
      ::farm::nurture::core::contracts::ce::_Media_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::Media& TestCampaignRequest::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media)
  return _internal_media();
}
inline void TestCampaignRequest::unsafe_arena_set_allocated_media(
    ::farm::nurture::core::contracts::ce::Media* media) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media)
}
inline ::farm::nurture::core::contracts::ce::Media* TestCampaignRequest::release_media() {
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* TestCampaignRequest::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media)
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* TestCampaignRequest::_internal_mutable_media() {
  
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::Media>(GetArena());
    media_ = p;
  }
  return media_;
}
inline ::farm::nurture::core::contracts::ce::Media* TestCampaignRequest::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media)
  return _internal_mutable_media();
}
inline void TestCampaignRequest::set_allocated_media(::farm::nurture::core::contracts::ce::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media)->GetArena();
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    
  } else {
    
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media)
}

// .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 8;
inline bool TestCampaignRequest::_internal_has_channel_attributes() const {
  return this != internal_default_instance() && channel_attributes_ != nullptr;
}
inline bool TestCampaignRequest::has_channel_attributes() const {
  return _internal_has_channel_attributes();
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& TestCampaignRequest::_internal_channel_attributes() const {
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* p = channel_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&>(
      ::farm::nurture::core::contracts::ce::_CommunicationChannelAttributes_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& TestCampaignRequest::channel_attributes() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes)
  return _internal_channel_attributes();
}
inline void TestCampaignRequest::unsafe_arena_set_allocated_channel_attributes(
    ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes_);
  }
  channel_attributes_ = channel_attributes;
  if (channel_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes)
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* TestCampaignRequest::release_channel_attributes() {
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* TestCampaignRequest::unsafe_arena_release_channel_attributes() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes)
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* TestCampaignRequest::_internal_mutable_channel_attributes() {
  
  if (channel_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationChannelAttributes>(GetArena());
    channel_attributes_ = p;
  }
  return channel_attributes_;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* TestCampaignRequest::mutable_channel_attributes() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes)
  return _internal_mutable_channel_attributes();
}
inline void TestCampaignRequest::set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes_);
  }
  if (channel_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      channel_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_attributes, submessage_arena);
    }
    
  } else {
    
  }
  channel_attributes_ = channel_attributes;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes)
}

// -------------------------------------------------------------------

// BulkAddCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddCampaignRequest requests = 2;
inline int BulkAddCampaignRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddCampaignRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddCampaignRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* BulkAddCampaignRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >*
BulkAddCampaignRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& BulkAddCampaignRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& BulkAddCampaignRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* BulkAddCampaignRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* BulkAddCampaignRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >&
BulkAddCampaignRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status)
  return _internal_status();
}
inline void AddCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status)
  return _internal_mutable_status();
}
inline void AddCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status)
}

// int32 count = 2;
inline void AddCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.count)
  return _internal_count();
}
inline void AddCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.count)
}

// string recordId = 3;
inline void AddCampaignResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddCampaignResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
  return _internal_recordid();
}
inline void AddCampaignResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
}
inline std::string* AddCampaignResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddCampaignResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddCampaignResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
}
inline void AddCampaignResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
}
inline void AddCampaignResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
}
inline std::string* AddCampaignResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddCampaignResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddCampaignResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddCampaignResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddCampaignResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status)
  return _internal_status();
}
inline void BulkAddCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status)
}

// int32 count = 2;
inline void BulkAddCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.count)
  return _internal_count();
}
inline void BulkAddCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddCampaignResponse responses = 3;
inline int BulkAddCampaignResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddCampaignResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddCampaignResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* BulkAddCampaignResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >*
BulkAddCampaignResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& BulkAddCampaignResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& BulkAddCampaignResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* BulkAddCampaignResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* BulkAddCampaignResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >&
BulkAddCampaignResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// UpdateCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders)
}

// string name = 2;
inline void UpdateCampaignRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateCampaignRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
  return _internal_name();
}
inline void UpdateCampaignRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
}
inline std::string* UpdateCampaignRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateCampaignRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateCampaignRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCampaignRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
}
inline void UpdateCampaignRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
}
inline void UpdateCampaignRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
}
inline std::string* UpdateCampaignRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCampaignRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCampaignRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.name)
}

// string cronExpression = 3;
inline void UpdateCampaignRequest::clear_cronexpression() {
  cronexpression_.ClearToEmpty();
}
inline const std::string& UpdateCampaignRequest::cronexpression() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
  return _internal_cronexpression();
}
inline void UpdateCampaignRequest::set_cronexpression(const std::string& value) {
  _internal_set_cronexpression(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
}
inline std::string* UpdateCampaignRequest::mutable_cronexpression() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
  return _internal_mutable_cronexpression();
}
inline const std::string& UpdateCampaignRequest::_internal_cronexpression() const {
  return cronexpression_.Get();
}
inline void UpdateCampaignRequest::_internal_set_cronexpression(const std::string& value) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCampaignRequest::set_cronexpression(std::string&& value) {
  
  cronexpression_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
}
inline void UpdateCampaignRequest::set_cronexpression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
}
inline void UpdateCampaignRequest::set_cronexpression(const char* value,
    size_t size) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
}
inline std::string* UpdateCampaignRequest::_internal_mutable_cronexpression() {
  
  return cronexpression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCampaignRequest::release_cronexpression() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
  return cronexpression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCampaignRequest::set_allocated_cronexpression(std::string* cronexpression) {
  if (cronexpression != nullptr) {
    
  } else {
    
  }
  cronexpression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cronexpression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.cronExpression)
}

// .farm.nurture.core.contracts.common.CampaignStatus status = 4;
inline void UpdateCampaignRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignStatus UpdateCampaignRequest::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::CampaignStatus UpdateCampaignRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.status)
  return _internal_status();
}
inline void UpdateCampaignRequest::_internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  
  status_ = value;
}
inline void UpdateCampaignRequest::set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.status)
}

// string query = 5;
inline void UpdateCampaignRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& UpdateCampaignRequest::query() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
  return _internal_query();
}
inline void UpdateCampaignRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
}
inline std::string* UpdateCampaignRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
  return _internal_mutable_query();
}
inline const std::string& UpdateCampaignRequest::_internal_query() const {
  return query_.Get();
}
inline void UpdateCampaignRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCampaignRequest::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
}
inline void UpdateCampaignRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
}
inline void UpdateCampaignRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
}
inline std::string* UpdateCampaignRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCampaignRequest::release_query() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCampaignRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.query)
}

// .farm.nurture.core.contracts.common.ActorID updatedByActor = 6;
inline bool UpdateCampaignRequest::_internal_has_updatedbyactor() const {
  return this != internal_default_instance() && updatedbyactor_ != nullptr;
}
inline bool UpdateCampaignRequest::has_updatedbyactor() const {
  return _internal_has_updatedbyactor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateCampaignRequest::_internal_updatedbyactor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = updatedbyactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& UpdateCampaignRequest::updatedbyactor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor)
  return _internal_updatedbyactor();
}
inline void UpdateCampaignRequest::unsafe_arena_set_allocated_updatedbyactor(
    ::farm::nurture::core::contracts::common::ActorID* updatedbyactor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyactor_);
  }
  updatedbyactor_ = updatedbyactor;
  if (updatedbyactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor)
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateCampaignRequest::release_updatedbyactor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = updatedbyactor_;
  updatedbyactor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateCampaignRequest::unsafe_arena_release_updatedbyactor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = updatedbyactor_;
  updatedbyactor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateCampaignRequest::_internal_mutable_updatedbyactor() {
  
  if (updatedbyactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    updatedbyactor_ = p;
  }
  return updatedbyactor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* UpdateCampaignRequest::mutable_updatedbyactor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor)
  return _internal_mutable_updatedbyactor();
}
inline void UpdateCampaignRequest::set_allocated_updatedbyactor(::farm::nurture::core::contracts::common::ActorID* updatedbyactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyactor_);
  }
  if (updatedbyactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedbyactor)->GetArena();
    if (message_arena != submessage_arena) {
      updatedbyactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedbyactor, submessage_arena);
    }
    
  } else {
    
  }
  updatedbyactor_ = updatedbyactor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor)
}

// int32 occurrences = 7;
inline void UpdateCampaignRequest::clear_occurrences() {
  occurrences_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateCampaignRequest::_internal_occurrences() const {
  return occurrences_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateCampaignRequest::occurrences() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.occurrences)
  return _internal_occurrences();
}
inline void UpdateCampaignRequest::_internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  occurrences_ = value;
}
inline void UpdateCampaignRequest::set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.occurrences)
}

// int64 id = 8;
inline void UpdateCampaignRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateCampaignRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateCampaignRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.id)
  return _internal_id();
}
inline void UpdateCampaignRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateCampaignRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.id)
}

// -------------------------------------------------------------------

// BulkUpdateCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest requests = 2;
inline int BulkUpdateCampaignRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateCampaignRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateCampaignRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* BulkUpdateCampaignRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >*
BulkUpdateCampaignRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& BulkUpdateCampaignRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& BulkUpdateCampaignRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* BulkUpdateCampaignRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* BulkUpdateCampaignRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >&
BulkUpdateCampaignRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status)
  return _internal_status();
}
inline void UpdateCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status)
  return _internal_mutable_status();
}
inline void UpdateCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status)
}

// int32 count = 2;
inline void UpdateCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.count)
  return _internal_count();
}
inline void UpdateCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.count)
}

// string recordId = 3;
inline void UpdateCampaignResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateCampaignResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
  return _internal_recordid();
}
inline void UpdateCampaignResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
}
inline std::string* UpdateCampaignResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateCampaignResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateCampaignResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCampaignResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
}
inline void UpdateCampaignResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
}
inline void UpdateCampaignResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
}
inline std::string* UpdateCampaignResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCampaignResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCampaignResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateCampaignResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateCampaignResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateCampaignResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateCampaignResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateCampaignResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateCampaignResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateCampaignResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateCampaignResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateCampaignResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status)
  return _internal_status();
}
inline void BulkUpdateCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status)
}

// int32 count = 2;
inline void BulkUpdateCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.count)
  return _internal_count();
}
inline void BulkUpdateCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse responses = 3;
inline int BulkUpdateCampaignResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateCampaignResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateCampaignResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* BulkUpdateCampaignResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >*
BulkUpdateCampaignResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& BulkUpdateCampaignResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& BulkUpdateCampaignResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* BulkUpdateCampaignResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* BulkUpdateCampaignResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >&
BulkUpdateCampaignResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddCampaignTemplateRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddCampaignTemplateRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddCampaignTemplateRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddCampaignTemplateRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddCampaignTemplateRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddCampaignTemplateRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignTemplateRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignTemplateRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignTemplateRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddCampaignTemplateRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddCampaignTemplateRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void AddCampaignTemplateRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCampaignTemplateRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCampaignTemplateRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignId)
  return _internal_campaignid();
}
inline void AddCampaignTemplateRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void AddCampaignTemplateRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignId)
}

// string templateName = 3;
inline void AddCampaignTemplateRequest::clear_templatename() {
  templatename_.ClearToEmpty();
}
inline const std::string& AddCampaignTemplateRequest::templatename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
  return _internal_templatename();
}
inline void AddCampaignTemplateRequest::set_templatename(const std::string& value) {
  _internal_set_templatename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
}
inline std::string* AddCampaignTemplateRequest::mutable_templatename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
  return _internal_mutable_templatename();
}
inline const std::string& AddCampaignTemplateRequest::_internal_templatename() const {
  return templatename_.Get();
}
inline void AddCampaignTemplateRequest::_internal_set_templatename(const std::string& value) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignTemplateRequest::set_templatename(std::string&& value) {
  
  templatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
}
inline void AddCampaignTemplateRequest::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
}
inline void AddCampaignTemplateRequest::set_templatename(const char* value,
    size_t size) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
}
inline std::string* AddCampaignTemplateRequest::_internal_mutable_templatename() {
  
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignTemplateRequest::release_templatename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
  return templatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignTemplateRequest::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    
  } else {
    
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.templateName)
}

// string campaignName = 4;
inline void AddCampaignTemplateRequest::clear_campaignname() {
  campaignname_.ClearToEmpty();
}
inline const std::string& AddCampaignTemplateRequest::campaignname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
  return _internal_campaignname();
}
inline void AddCampaignTemplateRequest::set_campaignname(const std::string& value) {
  _internal_set_campaignname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
}
inline std::string* AddCampaignTemplateRequest::mutable_campaignname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
  return _internal_mutable_campaignname();
}
inline const std::string& AddCampaignTemplateRequest::_internal_campaignname() const {
  return campaignname_.Get();
}
inline void AddCampaignTemplateRequest::_internal_set_campaignname(const std::string& value) {
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignTemplateRequest::set_campaignname(std::string&& value) {
  
  campaignname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
}
inline void AddCampaignTemplateRequest::set_campaignname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
}
inline void AddCampaignTemplateRequest::set_campaignname(const char* value,
    size_t size) {
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
}
inline std::string* AddCampaignTemplateRequest::_internal_mutable_campaignname() {
  
  return campaignname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignTemplateRequest::release_campaignname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
  return campaignname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignTemplateRequest::set_allocated_campaignname(std::string* campaignname) {
  if (campaignname != nullptr) {
    
  } else {
    
  }
  campaignname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), campaignname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.campaignName)
}

// int32 distributionPercent = 5;
inline void AddCampaignTemplateRequest::clear_distributionpercent() {
  distributionpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignTemplateRequest::_internal_distributionpercent() const {
  return distributionpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignTemplateRequest::distributionpercent() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.distributionPercent)
  return _internal_distributionpercent();
}
inline void AddCampaignTemplateRequest::_internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distributionpercent_ = value;
}
inline void AddCampaignTemplateRequest::set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distributionpercent(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.distributionPercent)
}

// -------------------------------------------------------------------

// TestCampaignTemplateRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool TestCampaignTemplateRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool TestCampaignTemplateRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignTemplateRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignTemplateRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void TestCampaignTemplateRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignTemplateRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignTemplateRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignTemplateRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignTemplateRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void TestCampaignTemplateRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders)
}

// string templateName = 2;
inline void TestCampaignTemplateRequest::clear_templatename() {
  templatename_.ClearToEmpty();
}
inline const std::string& TestCampaignTemplateRequest::templatename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
  return _internal_templatename();
}
inline void TestCampaignTemplateRequest::set_templatename(const std::string& value) {
  _internal_set_templatename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
}
inline std::string* TestCampaignTemplateRequest::mutable_templatename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
  return _internal_mutable_templatename();
}
inline const std::string& TestCampaignTemplateRequest::_internal_templatename() const {
  return templatename_.Get();
}
inline void TestCampaignTemplateRequest::_internal_set_templatename(const std::string& value) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestCampaignTemplateRequest::set_templatename(std::string&& value) {
  
  templatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
}
inline void TestCampaignTemplateRequest::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
}
inline void TestCampaignTemplateRequest::set_templatename(const char* value,
    size_t size) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
}
inline std::string* TestCampaignTemplateRequest::_internal_mutable_templatename() {
  
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestCampaignTemplateRequest::release_templatename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
  return templatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestCampaignTemplateRequest::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    
  } else {
    
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.templateName)
}

// int32 distributionPercent = 3;
inline void TestCampaignTemplateRequest::clear_distributionpercent() {
  distributionpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCampaignTemplateRequest::_internal_distributionpercent() const {
  return distributionpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCampaignTemplateRequest::distributionpercent() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.distributionPercent)
  return _internal_distributionpercent();
}
inline void TestCampaignTemplateRequest::_internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distributionpercent_ = value;
}
inline void TestCampaignTemplateRequest::set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distributionpercent(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.distributionPercent)
}

// -------------------------------------------------------------------

// BulkAddCampaignTemplateRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddCampaignTemplateRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddCampaignTemplateRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddCampaignTemplateRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddCampaignTemplateRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddCampaignTemplateRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignTemplateRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignTemplateRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignTemplateRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddCampaignTemplateRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddCampaignTemplateRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest requests = 2;
inline int BulkAddCampaignTemplateRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddCampaignTemplateRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddCampaignTemplateRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* BulkAddCampaignTemplateRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >*
BulkAddCampaignTemplateRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& BulkAddCampaignTemplateRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& BulkAddCampaignTemplateRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* BulkAddCampaignTemplateRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* BulkAddCampaignTemplateRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >&
BulkAddCampaignTemplateRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddCampaignTemplateResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddCampaignTemplateResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddCampaignTemplateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddCampaignTemplateResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddCampaignTemplateResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status)
  return _internal_status();
}
inline void AddCampaignTemplateResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignTemplateResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignTemplateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignTemplateResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddCampaignTemplateResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status)
  return _internal_mutable_status();
}
inline void AddCampaignTemplateResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status)
}

// int32 count = 2;
inline void AddCampaignTemplateResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignTemplateResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCampaignTemplateResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.count)
  return _internal_count();
}
inline void AddCampaignTemplateResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddCampaignTemplateResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.count)
}

// string recordId = 3;
inline void AddCampaignTemplateResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddCampaignTemplateResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
  return _internal_recordid();
}
inline void AddCampaignTemplateResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
}
inline std::string* AddCampaignTemplateResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddCampaignTemplateResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddCampaignTemplateResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCampaignTemplateResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
}
inline void AddCampaignTemplateResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
}
inline void AddCampaignTemplateResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
}
inline std::string* AddCampaignTemplateResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCampaignTemplateResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddCampaignTemplateResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddCampaignTemplateResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddCampaignTemplateResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignTemplateResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddCampaignTemplateResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignTemplateResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddCampaignTemplateResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignTemplateResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddCampaignTemplateResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddCampaignTemplateResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddCampaignTemplateResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddCampaignTemplateResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddCampaignTemplateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddCampaignTemplateResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddCampaignTemplateResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status)
  return _internal_status();
}
inline void BulkAddCampaignTemplateResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignTemplateResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignTemplateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignTemplateResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddCampaignTemplateResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddCampaignTemplateResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status)
}

// int32 count = 2;
inline void BulkAddCampaignTemplateResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddCampaignTemplateResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddCampaignTemplateResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.count)
  return _internal_count();
}
inline void BulkAddCampaignTemplateResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddCampaignTemplateResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse responses = 3;
inline int BulkAddCampaignTemplateResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddCampaignTemplateResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddCampaignTemplateResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* BulkAddCampaignTemplateResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >*
BulkAddCampaignTemplateResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& BulkAddCampaignTemplateResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& BulkAddCampaignTemplateResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* BulkAddCampaignTemplateResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* BulkAddCampaignTemplateResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >&
BulkAddCampaignTemplateResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddNewCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddNewCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddNewCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddNewCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddNewCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddNewCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddNewCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddNewCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddNewCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddNewCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddNewCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders)
}

// .farm.nurture.core.contracts.CampaignService.AddCampaignRequest addCampaignRequest = 3;
inline bool AddNewCampaignRequest::_internal_has_addcampaignrequest() const {
  return this != internal_default_instance() && addcampaignrequest_ != nullptr;
}
inline bool AddNewCampaignRequest::has_addcampaignrequest() const {
  return _internal_has_addcampaignrequest();
}
inline void AddNewCampaignRequest::clear_addcampaignrequest() {
  if (GetArena() == nullptr && addcampaignrequest_ != nullptr) {
    delete addcampaignrequest_;
  }
  addcampaignrequest_ = nullptr;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& AddNewCampaignRequest::_internal_addcampaignrequest() const {
  const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* p = addcampaignrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest&>(
      ::farm::nurture::core::contracts::CampaignService::_AddCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& AddNewCampaignRequest::addcampaignrequest() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest)
  return _internal_addcampaignrequest();
}
inline void AddNewCampaignRequest::unsafe_arena_set_allocated_addcampaignrequest(
    ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* addcampaignrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addcampaignrequest_);
  }
  addcampaignrequest_ = addcampaignrequest;
  if (addcampaignrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest)
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* AddNewCampaignRequest::release_addcampaignrequest() {
  
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* temp = addcampaignrequest_;
  addcampaignrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* AddNewCampaignRequest::unsafe_arena_release_addcampaignrequest() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest)
  
  ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* temp = addcampaignrequest_;
  addcampaignrequest_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* AddNewCampaignRequest::_internal_mutable_addcampaignrequest() {
  
  if (addcampaignrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::AddCampaignRequest>(GetArena());
    addcampaignrequest_ = p;
  }
  return addcampaignrequest_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* AddNewCampaignRequest::mutable_addcampaignrequest() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest)
  return _internal_mutable_addcampaignrequest();
}
inline void AddNewCampaignRequest::set_allocated_addcampaignrequest(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* addcampaignrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete addcampaignrequest_;
  }
  if (addcampaignrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addcampaignrequest);
    if (message_arena != submessage_arena) {
      addcampaignrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addcampaignrequest, submessage_arena);
    }
    
  } else {
    
  }
  addcampaignrequest_ = addcampaignrequest;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest addCampaignTemplateRequests = 4;
inline int AddNewCampaignRequest::_internal_addcampaigntemplaterequests_size() const {
  return addcampaigntemplaterequests_.size();
}
inline int AddNewCampaignRequest::addcampaigntemplaterequests_size() const {
  return _internal_addcampaigntemplaterequests_size();
}
inline void AddNewCampaignRequest::clear_addcampaigntemplaterequests() {
  addcampaigntemplaterequests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* AddNewCampaignRequest::mutable_addcampaigntemplaterequests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests)
  return addcampaigntemplaterequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >*
AddNewCampaignRequest::mutable_addcampaigntemplaterequests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests)
  return &addcampaigntemplaterequests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& AddNewCampaignRequest::_internal_addcampaigntemplaterequests(int index) const {
  return addcampaigntemplaterequests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& AddNewCampaignRequest::addcampaigntemplaterequests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests)
  return _internal_addcampaigntemplaterequests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* AddNewCampaignRequest::_internal_add_addcampaigntemplaterequests() {
  return addcampaigntemplaterequests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* AddNewCampaignRequest::add_addcampaigntemplaterequests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests)
  return _internal_add_addcampaigntemplaterequests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >&
AddNewCampaignRequest::addcampaigntemplaterequests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests)
  return addcampaigntemplaterequests_;
}

// repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest addTargetUserRequests = 5;
inline int AddNewCampaignRequest::_internal_addtargetuserrequests_size() const {
  return addtargetuserrequests_.size();
}
inline int AddNewCampaignRequest::addtargetuserrequests_size() const {
  return _internal_addtargetuserrequests_size();
}
inline void AddNewCampaignRequest::clear_addtargetuserrequests() {
  addtargetuserrequests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* AddNewCampaignRequest::mutable_addtargetuserrequests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests)
  return addtargetuserrequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >*
AddNewCampaignRequest::mutable_addtargetuserrequests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests)
  return &addtargetuserrequests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& AddNewCampaignRequest::_internal_addtargetuserrequests(int index) const {
  return addtargetuserrequests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& AddNewCampaignRequest::addtargetuserrequests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests)
  return _internal_addtargetuserrequests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* AddNewCampaignRequest::_internal_add_addtargetuserrequests() {
  return addtargetuserrequests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* AddNewCampaignRequest::add_addtargetuserrequests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests)
  return _internal_add_addtargetuserrequests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >&
AddNewCampaignRequest::addtargetuserrequests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests)
  return addtargetuserrequests_;
}

// -------------------------------------------------------------------

// BulkAddNewCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddNewCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddNewCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddNewCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddNewCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddNewCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddNewCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddNewCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddNewCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddNewCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddNewCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest requests = 2;
inline int BulkAddNewCampaignRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddNewCampaignRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddNewCampaignRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* BulkAddNewCampaignRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >*
BulkAddNewCampaignRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& BulkAddNewCampaignRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& BulkAddNewCampaignRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* BulkAddNewCampaignRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* BulkAddNewCampaignRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >&
BulkAddNewCampaignRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddNewCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddNewCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddNewCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddNewCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddNewCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status)
  return _internal_status();
}
inline void AddNewCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddNewCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddNewCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddNewCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddNewCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status)
  return _internal_mutable_status();
}
inline void AddNewCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status)
}

// int32 count = 2;
inline void AddNewCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddNewCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddNewCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.count)
  return _internal_count();
}
inline void AddNewCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddNewCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.count)
}

// string recordId = 3;
inline void AddNewCampaignResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddNewCampaignResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
  return _internal_recordid();
}
inline void AddNewCampaignResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
}
inline std::string* AddNewCampaignResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddNewCampaignResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddNewCampaignResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddNewCampaignResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
}
inline void AddNewCampaignResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
}
inline void AddNewCampaignResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
}
inline std::string* AddNewCampaignResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddNewCampaignResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddNewCampaignResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddNewCampaignResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddNewCampaignResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddNewCampaignResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddNewCampaignResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddNewCampaignResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddNewCampaignResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddNewCampaignResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddNewCampaignResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddNewCampaignResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddNewCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddNewCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddNewCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddNewCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddNewCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status)
  return _internal_status();
}
inline void BulkAddNewCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddNewCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddNewCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddNewCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddNewCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddNewCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status)
}

// int32 count = 2;
inline void BulkAddNewCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddNewCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddNewCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.count)
  return _internal_count();
}
inline void BulkAddNewCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddNewCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse responses = 3;
inline int BulkAddNewCampaignResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddNewCampaignResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddNewCampaignResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* BulkAddNewCampaignResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >*
BulkAddNewCampaignResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& BulkAddNewCampaignResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& BulkAddNewCampaignResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* BulkAddNewCampaignResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* BulkAddNewCampaignResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >&
BulkAddNewCampaignResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// CampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool CampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool CampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& CampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& CampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void CampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* CampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* CampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* CampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* CampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void CampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void CampaignRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool CampaignRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool CampaignRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.CampaignRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void CampaignRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void CampaignRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.CampaignRequest.isStaleAllowed)
}

// int64 campaignId = 3;
inline void CampaignRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CampaignRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CampaignRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.CampaignRequest.campaignId)
  return _internal_campaignid();
}
inline void CampaignRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void CampaignRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.CampaignRequest.campaignId)
}

// -------------------------------------------------------------------

// CampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool CampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& CampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& CampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.CampaignResponse.status)
  return _internal_status();
}
inline void CampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.CampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* CampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* CampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.CampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* CampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* CampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.CampaignResponse.status)
  return _internal_mutable_status();
}
inline void CampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.CampaignResponse.status)
}

// int32 count = 2;
inline void CampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.CampaignResponse.count)
  return _internal_count();
}
inline void CampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.CampaignResponse.count)
}

// -------------------------------------------------------------------

// FindCampaignByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FindCampaignByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FindCampaignByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindCampaignByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindCampaignByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FindCampaignByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FindCampaignByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FindCampaignByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FindCampaignByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FindCampaignByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FindCampaignByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FindCampaignByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.isStaleAllowed)
}

// int64 id = 3;
inline void FindCampaignByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.id)
  return _internal_id();
}
inline void FindCampaignByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FindCampaignByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.id)
}

// -------------------------------------------------------------------

// FindCampaignByIdResponseRecord

// int64 id = 1;
inline void FindCampaignByIdResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.id)
  return _internal_id();
}
inline void FindCampaignByIdResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FindCampaignByIdResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.id)
}

// string namespace = 2;
inline void FindCampaignByIdResponseRecord::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
  return _internal_namespace_();
}
inline void FindCampaignByIdResponseRecord::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_namespace_() const {
  return namespace__.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
}
inline void FindCampaignByIdResponseRecord::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
}
inline void FindCampaignByIdResponseRecord::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.namespace)
}

// string name = 3;
inline void FindCampaignByIdResponseRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
  return _internal_name();
}
inline void FindCampaignByIdResponseRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
  return _internal_mutable_name();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_name() const {
  return name_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
}
inline void FindCampaignByIdResponseRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
}
inline void FindCampaignByIdResponseRecord::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.name)
}

// string description = 4;
inline void FindCampaignByIdResponseRecord::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::description() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
  return _internal_description();
}
inline void FindCampaignByIdResponseRecord::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_description() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
  return _internal_mutable_description();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_description() const {
  return description_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
}
inline void FindCampaignByIdResponseRecord::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
}
inline void FindCampaignByIdResponseRecord::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_description() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.description)
}

// string cronExpression = 5;
inline void FindCampaignByIdResponseRecord::clear_cronexpression() {
  cronexpression_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::cronexpression() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
  return _internal_cronexpression();
}
inline void FindCampaignByIdResponseRecord::set_cronexpression(const std::string& value) {
  _internal_set_cronexpression(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_cronexpression() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
  return _internal_mutable_cronexpression();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_cronexpression() const {
  return cronexpression_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_cronexpression(const std::string& value) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_cronexpression(std::string&& value) {
  
  cronexpression_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
}
inline void FindCampaignByIdResponseRecord::set_cronexpression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
}
inline void FindCampaignByIdResponseRecord::set_cronexpression(const char* value,
    size_t size) {
  
  cronexpression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_cronexpression() {
  
  return cronexpression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_cronexpression() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
  return cronexpression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_cronexpression(std::string* cronexpression) {
  if (cronexpression != nullptr) {
    
  } else {
    
  }
  cronexpression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cronexpression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.cronExpression)
}

// int32 occurrences = 6;
inline void FindCampaignByIdResponseRecord::clear_occurrences() {
  occurrences_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignByIdResponseRecord::_internal_occurrences() const {
  return occurrences_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignByIdResponseRecord::occurrences() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.occurrences)
  return _internal_occurrences();
}
inline void FindCampaignByIdResponseRecord::_internal_set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  occurrences_ = value;
}
inline void FindCampaignByIdResponseRecord::set_occurrences(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.occurrences)
}

// string communicationChannel = 7;
inline void FindCampaignByIdResponseRecord::clear_communicationchannel() {
  communicationchannel_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::communicationchannel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
  return _internal_communicationchannel();
}
inline void FindCampaignByIdResponseRecord::set_communicationchannel(const std::string& value) {
  _internal_set_communicationchannel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_communicationchannel() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
  return _internal_mutable_communicationchannel();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_communicationchannel() const {
  return communicationchannel_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_communicationchannel(const std::string& value) {
  
  communicationchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_communicationchannel(std::string&& value) {
  
  communicationchannel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
}
inline void FindCampaignByIdResponseRecord::set_communicationchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  communicationchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
}
inline void FindCampaignByIdResponseRecord::set_communicationchannel(const char* value,
    size_t size) {
  
  communicationchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_communicationchannel() {
  
  return communicationchannel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_communicationchannel() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
  return communicationchannel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_communicationchannel(std::string* communicationchannel) {
  if (communicationchannel != nullptr) {
    
  } else {
    
  }
  communicationchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), communicationchannel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.communicationChannel)
}

// string status = 8;
inline void FindCampaignByIdResponseRecord::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
  return _internal_status();
}
inline void FindCampaignByIdResponseRecord::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
  return _internal_mutable_status();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_status() const {
  return status_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
}
inline void FindCampaignByIdResponseRecord::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
}
inline void FindCampaignByIdResponseRecord::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.status)
}

// string type = 9;
inline void FindCampaignByIdResponseRecord::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
  return _internal_type();
}
inline void FindCampaignByIdResponseRecord::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_type() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
  return _internal_mutable_type();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_type() const {
  return type_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
}
inline void FindCampaignByIdResponseRecord::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
}
inline void FindCampaignByIdResponseRecord::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_type() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.type)
}

// string scheduleType = 10;
inline void FindCampaignByIdResponseRecord::clear_scheduletype() {
  scheduletype_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::scheduletype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
  return _internal_scheduletype();
}
inline void FindCampaignByIdResponseRecord::set_scheduletype(const std::string& value) {
  _internal_set_scheduletype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_scheduletype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
  return _internal_mutable_scheduletype();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_scheduletype() const {
  return scheduletype_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_scheduletype(const std::string& value) {
  
  scheduletype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_scheduletype(std::string&& value) {
  
  scheduletype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
}
inline void FindCampaignByIdResponseRecord::set_scheduletype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scheduletype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
}
inline void FindCampaignByIdResponseRecord::set_scheduletype(const char* value,
    size_t size) {
  
  scheduletype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_scheduletype() {
  
  return scheduletype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_scheduletype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
  return scheduletype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_scheduletype(std::string* scheduletype) {
  if (scheduletype != nullptr) {
    
  } else {
    
  }
  scheduletype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheduletype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.scheduleType)
}

// string query = 11;
inline void FindCampaignByIdResponseRecord::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::query() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
  return _internal_query();
}
inline void FindCampaignByIdResponseRecord::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_query() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
  return _internal_mutable_query();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_query() const {
  return query_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
}
inline void FindCampaignByIdResponseRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
}
inline void FindCampaignByIdResponseRecord::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_query() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.query)
}

// string inactionQuery = 12;
inline void FindCampaignByIdResponseRecord::clear_inactionquery() {
  inactionquery_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::inactionquery() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
  return _internal_inactionquery();
}
inline void FindCampaignByIdResponseRecord::set_inactionquery(const std::string& value) {
  _internal_set_inactionquery(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_inactionquery() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
  return _internal_mutable_inactionquery();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_inactionquery() const {
  return inactionquery_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_inactionquery(const std::string& value) {
  
  inactionquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_inactionquery(std::string&& value) {
  
  inactionquery_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
}
inline void FindCampaignByIdResponseRecord::set_inactionquery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inactionquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
}
inline void FindCampaignByIdResponseRecord::set_inactionquery(const char* value,
    size_t size) {
  
  inactionquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_inactionquery() {
  
  return inactionquery_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_inactionquery() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
  return inactionquery_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_inactionquery(std::string* inactionquery) {
  if (inactionquery != nullptr) {
    
  } else {
    
  }
  inactionquery_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inactionquery,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionQuery)
}

// int64 inactionDuration = 13;
inline void FindCampaignByIdResponseRecord::clear_inactionduration() {
  inactionduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_inactionduration() const {
  return inactionduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::inactionduration() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionDuration)
  return _internal_inactionduration();
}
inline void FindCampaignByIdResponseRecord::_internal_set_inactionduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inactionduration_ = value;
}
inline void FindCampaignByIdResponseRecord::set_inactionduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inactionduration(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.inactionDuration)
}

// string attributes = 14;
inline void FindCampaignByIdResponseRecord::clear_attributes() {
  attributes_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::attributes() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
  return _internal_attributes();
}
inline void FindCampaignByIdResponseRecord::set_attributes(const std::string& value) {
  _internal_set_attributes(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
  return _internal_mutable_attributes();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_attributes() const {
  return attributes_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_attributes(const std::string& value) {
  
  attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_attributes(std::string&& value) {
  
  attributes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
}
inline void FindCampaignByIdResponseRecord::set_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
}
inline void FindCampaignByIdResponseRecord::set_attributes(const char* value,
    size_t size) {
  
  attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_attributes() {
  
  return attributes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_attributes() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
  return attributes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_attributes(std::string* attributes) {
  if (attributes != nullptr) {
    
  } else {
    
  }
  attributes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.attributes)
}

// int64 createdByActorid = 15;
inline void FindCampaignByIdResponseRecord::clear_createdbyactorid() {
  createdbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_createdbyactorid() const {
  return createdbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::createdbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActorid)
  return _internal_createdbyactorid();
}
inline void FindCampaignByIdResponseRecord::_internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdbyactorid_ = value;
}
inline void FindCampaignByIdResponseRecord::set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActorid)
}

// string createdByActortype = 16;
inline void FindCampaignByIdResponseRecord::clear_createdbyactortype() {
  createdbyactortype_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::createdbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
  return _internal_createdbyactortype();
}
inline void FindCampaignByIdResponseRecord::set_createdbyactortype(const std::string& value) {
  _internal_set_createdbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_createdbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
  return _internal_mutable_createdbyactortype();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_createdbyactortype() const {
  return createdbyactortype_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_createdbyactortype(const std::string& value) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_createdbyactortype(std::string&& value) {
  
  createdbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
}
inline void FindCampaignByIdResponseRecord::set_createdbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
}
inline void FindCampaignByIdResponseRecord::set_createdbyactortype(const char* value,
    size_t size) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_createdbyactortype() {
  
  return createdbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_createdbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
  return createdbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_createdbyactortype(std::string* createdbyactortype) {
  if (createdbyactortype != nullptr) {
    
  } else {
    
  }
  createdbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdByActortype)
}

// int64 updatedByActorid = 17;
inline void FindCampaignByIdResponseRecord::clear_updatedbyactorid() {
  updatedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_updatedbyactorid() const {
  return updatedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::updatedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActorid)
  return _internal_updatedbyactorid();
}
inline void FindCampaignByIdResponseRecord::_internal_set_updatedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedbyactorid_ = value;
}
inline void FindCampaignByIdResponseRecord::set_updatedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActorid)
}

// string updatedByActortype = 18;
inline void FindCampaignByIdResponseRecord::clear_updatedbyactortype() {
  updatedbyactortype_.ClearToEmpty();
}
inline const std::string& FindCampaignByIdResponseRecord::updatedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
  return _internal_updatedbyactortype();
}
inline void FindCampaignByIdResponseRecord::set_updatedbyactortype(const std::string& value) {
  _internal_set_updatedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
}
inline std::string* FindCampaignByIdResponseRecord::mutable_updatedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
  return _internal_mutable_updatedbyactortype();
}
inline const std::string& FindCampaignByIdResponseRecord::_internal_updatedbyactortype() const {
  return updatedbyactortype_.Get();
}
inline void FindCampaignByIdResponseRecord::_internal_set_updatedbyactortype(const std::string& value) {
  
  updatedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignByIdResponseRecord::set_updatedbyactortype(std::string&& value) {
  
  updatedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
}
inline void FindCampaignByIdResponseRecord::set_updatedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
}
inline void FindCampaignByIdResponseRecord::set_updatedbyactortype(const char* value,
    size_t size) {
  
  updatedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
}
inline std::string* FindCampaignByIdResponseRecord::_internal_mutable_updatedbyactortype() {
  
  return updatedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignByIdResponseRecord::release_updatedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
  return updatedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignByIdResponseRecord::set_allocated_updatedbyactortype(std::string* updatedbyactortype) {
  if (updatedbyactortype != nullptr) {
    
  } else {
    
  }
  updatedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedByActortype)
}

// int64 version = 19;
inline void FindCampaignByIdResponseRecord::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.version)
  return _internal_version();
}
inline void FindCampaignByIdResponseRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void FindCampaignByIdResponseRecord::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.version)
}

// int64 createdAt = 20;
inline void FindCampaignByIdResponseRecord::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdAt)
  return _internal_createdat();
}
inline void FindCampaignByIdResponseRecord::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void FindCampaignByIdResponseRecord::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.createdAt)
}

// int64 updatedAt = 21;
inline void FindCampaignByIdResponseRecord::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedAt)
  return _internal_updatedat();
}
inline void FindCampaignByIdResponseRecord::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedat_ = value;
}
inline void FindCampaignByIdResponseRecord::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.updatedAt)
}

// int64 deletedAt = 22;
inline void FindCampaignByIdResponseRecord::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignByIdResponseRecord::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.deletedAt)
  return _internal_deletedat();
}
inline void FindCampaignByIdResponseRecord::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void FindCampaignByIdResponseRecord::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.deletedAt)
}

// -------------------------------------------------------------------

// FindCampaignByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FindCampaignByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FindCampaignByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindCampaignByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindCampaignByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status)
  return _internal_status();
}
inline void FindCampaignByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status)
  return _internal_mutable_status();
}
inline void FindCampaignByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status)
}

// int32 count = 2;
inline void FindCampaignByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.count)
  return _internal_count();
}
inline void FindCampaignByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FindCampaignByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FindCampaignByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FindCampaignByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FindCampaignByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindCampaignByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindCampaignByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FindCampaignByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs)
  return attribs_;
}

// .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 4;
inline bool FindCampaignByIdResponse::_internal_has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline bool FindCampaignByIdResponse::has_records() const {
  return _internal_has_records();
}
inline void FindCampaignByIdResponse::clear_records() {
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& FindCampaignByIdResponse::_internal_records() const {
  const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* p = records_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord&>(
      ::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponseRecord_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& FindCampaignByIdResponse::records() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records)
  return _internal_records();
}
inline void FindCampaignByIdResponse::unsafe_arena_set_allocated_records(
    ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* records) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(records_);
  }
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records)
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FindCampaignByIdResponse::release_records() {
  
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* temp = records_;
  records_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FindCampaignByIdResponse::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records)
  
  ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FindCampaignByIdResponse::_internal_mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord>(GetArena());
    records_ = p;
  }
  return records_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FindCampaignByIdResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records)
  return _internal_mutable_records();
}
inline void FindCampaignByIdResponse::set_allocated_records(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records)
}

// -------------------------------------------------------------------

// FindCampaignTemplateByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FindCampaignTemplateByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FindCampaignTemplateByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindCampaignTemplateByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindCampaignTemplateByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FindCampaignTemplateByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignTemplateByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignTemplateByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignTemplateByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindCampaignTemplateByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FindCampaignTemplateByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FindCampaignTemplateByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FindCampaignTemplateByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FindCampaignTemplateByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FindCampaignTemplateByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FindCampaignTemplateByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.isStaleAllowed)
}

// int64 campaignId = 3;
inline void FindCampaignTemplateByIdRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.campaignId)
  return _internal_campaignid();
}
inline void FindCampaignTemplateByIdRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindCampaignTemplateByIdRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.campaignId)
}

// -------------------------------------------------------------------

// FindCampaignTemplateByIdResponseRecord

// int64 id = 1;
inline void FindCampaignTemplateByIdResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.id)
  return _internal_id();
}
inline void FindCampaignTemplateByIdResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FindCampaignTemplateByIdResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.id)
}

// int64 campaignId = 2;
inline void FindCampaignTemplateByIdResponseRecord::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdResponseRecord::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindCampaignTemplateByIdResponseRecord::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignId)
  return _internal_campaignid();
}
inline void FindCampaignTemplateByIdResponseRecord::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindCampaignTemplateByIdResponseRecord::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignId)
}

// string templateName = 3;
inline void FindCampaignTemplateByIdResponseRecord::clear_templatename() {
  templatename_.ClearToEmpty();
}
inline const std::string& FindCampaignTemplateByIdResponseRecord::templatename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
  return _internal_templatename();
}
inline void FindCampaignTemplateByIdResponseRecord::set_templatename(const std::string& value) {
  _internal_set_templatename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
}
inline std::string* FindCampaignTemplateByIdResponseRecord::mutable_templatename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
  return _internal_mutable_templatename();
}
inline const std::string& FindCampaignTemplateByIdResponseRecord::_internal_templatename() const {
  return templatename_.Get();
}
inline void FindCampaignTemplateByIdResponseRecord::_internal_set_templatename(const std::string& value) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignTemplateByIdResponseRecord::set_templatename(std::string&& value) {
  
  templatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
}
inline void FindCampaignTemplateByIdResponseRecord::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
}
inline void FindCampaignTemplateByIdResponseRecord::set_templatename(const char* value,
    size_t size) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
}
inline std::string* FindCampaignTemplateByIdResponseRecord::_internal_mutable_templatename() {
  
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignTemplateByIdResponseRecord::release_templatename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
  return templatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignTemplateByIdResponseRecord::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    
  } else {
    
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.templateName)
}

// string campaignName = 4;
inline void FindCampaignTemplateByIdResponseRecord::clear_campaignname() {
  campaignname_.ClearToEmpty();
}
inline const std::string& FindCampaignTemplateByIdResponseRecord::campaignname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
  return _internal_campaignname();
}
inline void FindCampaignTemplateByIdResponseRecord::set_campaignname(const std::string& value) {
  _internal_set_campaignname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
}
inline std::string* FindCampaignTemplateByIdResponseRecord::mutable_campaignname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
  return _internal_mutable_campaignname();
}
inline const std::string& FindCampaignTemplateByIdResponseRecord::_internal_campaignname() const {
  return campaignname_.Get();
}
inline void FindCampaignTemplateByIdResponseRecord::_internal_set_campaignname(const std::string& value) {
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindCampaignTemplateByIdResponseRecord::set_campaignname(std::string&& value) {
  
  campaignname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
}
inline void FindCampaignTemplateByIdResponseRecord::set_campaignname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
}
inline void FindCampaignTemplateByIdResponseRecord::set_campaignname(const char* value,
    size_t size) {
  
  campaignname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
}
inline std::string* FindCampaignTemplateByIdResponseRecord::_internal_mutable_campaignname() {
  
  return campaignname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindCampaignTemplateByIdResponseRecord::release_campaignname() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
  return campaignname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindCampaignTemplateByIdResponseRecord::set_allocated_campaignname(std::string* campaignname) {
  if (campaignname != nullptr) {
    
  } else {
    
  }
  campaignname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), campaignname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.campaignName)
}

// int32 distributionPercent = 5;
inline void FindCampaignTemplateByIdResponseRecord::clear_distributionpercent() {
  distributionpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignTemplateByIdResponseRecord::_internal_distributionpercent() const {
  return distributionpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignTemplateByIdResponseRecord::distributionpercent() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.distributionPercent)
  return _internal_distributionpercent();
}
inline void FindCampaignTemplateByIdResponseRecord::_internal_set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distributionpercent_ = value;
}
inline void FindCampaignTemplateByIdResponseRecord::set_distributionpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distributionpercent(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord.distributionPercent)
}

// -------------------------------------------------------------------

// FindCampaignTemplateByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FindCampaignTemplateByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FindCampaignTemplateByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindCampaignTemplateByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindCampaignTemplateByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status)
  return _internal_status();
}
inline void FindCampaignTemplateByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignTemplateByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignTemplateByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignTemplateByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindCampaignTemplateByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status)
  return _internal_mutable_status();
}
inline void FindCampaignTemplateByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status)
}

// int32 count = 2;
inline void FindCampaignTemplateByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignTemplateByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindCampaignTemplateByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.count)
  return _internal_count();
}
inline void FindCampaignTemplateByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FindCampaignTemplateByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FindCampaignTemplateByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FindCampaignTemplateByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignTemplateByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FindCampaignTemplateByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindCampaignTemplateByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindCampaignTemplateByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignTemplateByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindCampaignTemplateByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FindCampaignTemplateByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord records = 4;
inline int FindCampaignTemplateByIdResponse::_internal_records_size() const {
  return records_.size();
}
inline int FindCampaignTemplateByIdResponse::records_size() const {
  return _internal_records_size();
}
inline void FindCampaignTemplateByIdResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* FindCampaignTemplateByIdResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >*
FindCampaignTemplateByIdResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records)
  return &records_;
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord& FindCampaignTemplateByIdResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord& FindCampaignTemplateByIdResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* FindCampaignTemplateByIdResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord* FindCampaignTemplateByIdResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponseRecord >&
FindCampaignTemplateByIdResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// FindTargetUserByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FindTargetUserByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FindTargetUserByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindTargetUserByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindTargetUserByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FindTargetUserByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindTargetUserByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindTargetUserByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindTargetUserByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindTargetUserByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FindTargetUserByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FindTargetUserByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FindTargetUserByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FindTargetUserByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FindTargetUserByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FindTargetUserByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.isStaleAllowed)
}

// int64 campaignId = 3;
inline void FindTargetUserByIdRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.campaignId)
  return _internal_campaignid();
}
inline void FindTargetUserByIdRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindTargetUserByIdRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.campaignId)
}

// -------------------------------------------------------------------

// FindTargetUserByIdResponseRecord

// int64 id = 1;
inline void FindTargetUserByIdResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.id)
  return _internal_id();
}
inline void FindTargetUserByIdResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FindTargetUserByIdResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.id)
}

// int64 campaignId = 2;
inline void FindTargetUserByIdResponseRecord::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.campaignId)
  return _internal_campaignid();
}
inline void FindTargetUserByIdResponseRecord::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindTargetUserByIdResponseRecord::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.campaignId)
}

// int64 userId = 3;
inline void FindTargetUserByIdResponseRecord::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindTargetUserByIdResponseRecord::userid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userId)
  return _internal_userid();
}
inline void FindTargetUserByIdResponseRecord::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void FindTargetUserByIdResponseRecord::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userId)
}

// string userType = 4;
inline void FindTargetUserByIdResponseRecord::clear_usertype() {
  usertype_.ClearToEmpty();
}
inline const std::string& FindTargetUserByIdResponseRecord::usertype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
  return _internal_usertype();
}
inline void FindTargetUserByIdResponseRecord::set_usertype(const std::string& value) {
  _internal_set_usertype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
}
inline std::string* FindTargetUserByIdResponseRecord::mutable_usertype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
  return _internal_mutable_usertype();
}
inline const std::string& FindTargetUserByIdResponseRecord::_internal_usertype() const {
  return usertype_.Get();
}
inline void FindTargetUserByIdResponseRecord::_internal_set_usertype(const std::string& value) {
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindTargetUserByIdResponseRecord::set_usertype(std::string&& value) {
  
  usertype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
}
inline void FindTargetUserByIdResponseRecord::set_usertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
}
inline void FindTargetUserByIdResponseRecord::set_usertype(const char* value,
    size_t size) {
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
}
inline std::string* FindTargetUserByIdResponseRecord::_internal_mutable_usertype() {
  
  return usertype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindTargetUserByIdResponseRecord::release_usertype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
  return usertype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindTargetUserByIdResponseRecord::set_allocated_usertype(std::string* usertype) {
  if (usertype != nullptr) {
    
  } else {
    
  }
  usertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usertype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.userType)
}

// -------------------------------------------------------------------

// FindTargetUserByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FindTargetUserByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FindTargetUserByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindTargetUserByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindTargetUserByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status)
  return _internal_status();
}
inline void FindTargetUserByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindTargetUserByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindTargetUserByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindTargetUserByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindTargetUserByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status)
  return _internal_mutable_status();
}
inline void FindTargetUserByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status)
}

// int32 count = 2;
inline void FindTargetUserByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindTargetUserByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindTargetUserByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.count)
  return _internal_count();
}
inline void FindTargetUserByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FindTargetUserByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FindTargetUserByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FindTargetUserByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindTargetUserByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FindTargetUserByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindTargetUserByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindTargetUserByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FindTargetUserByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindTargetUserByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FindTargetUserByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord records = 4;
inline int FindTargetUserByIdResponse::_internal_records_size() const {
  return records_.size();
}
inline int FindTargetUserByIdResponse::records_size() const {
  return _internal_records_size();
}
inline void FindTargetUserByIdResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* FindTargetUserByIdResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >*
FindTargetUserByIdResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records)
  return &records_;
}
inline const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord& FindTargetUserByIdResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord& FindTargetUserByIdResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* FindTargetUserByIdResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord* FindTargetUserByIdResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponseRecord >&
FindTargetUserByIdResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetDynamicDataByKeyRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetDynamicDataByKeyRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetDynamicDataByKeyRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetDynamicDataByKeyRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetDynamicDataByKeyRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetDynamicDataByKeyRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDynamicDataByKeyRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDynamicDataByKeyRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDynamicDataByKeyRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDynamicDataByKeyRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetDynamicDataByKeyRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetDynamicDataByKeyRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetDynamicDataByKeyRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetDynamicDataByKeyRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetDynamicDataByKeyRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetDynamicDataByKeyRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.isStaleAllowed)
}

// int64 campaignId = 3;
inline void GetDynamicDataByKeyRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDynamicDataByKeyRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDynamicDataByKeyRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.campaignId)
  return _internal_campaignid();
}
inline void GetDynamicDataByKeyRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void GetDynamicDataByKeyRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.campaignId)
}

// string dynamicKey = 4;
inline void GetDynamicDataByKeyRequest::clear_dynamickey() {
  dynamickey_.ClearToEmpty();
}
inline const std::string& GetDynamicDataByKeyRequest::dynamickey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
  return _internal_dynamickey();
}
inline void GetDynamicDataByKeyRequest::set_dynamickey(const std::string& value) {
  _internal_set_dynamickey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
}
inline std::string* GetDynamicDataByKeyRequest::mutable_dynamickey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
  return _internal_mutable_dynamickey();
}
inline const std::string& GetDynamicDataByKeyRequest::_internal_dynamickey() const {
  return dynamickey_.Get();
}
inline void GetDynamicDataByKeyRequest::_internal_set_dynamickey(const std::string& value) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDynamicDataByKeyRequest::set_dynamickey(std::string&& value) {
  
  dynamickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
}
inline void GetDynamicDataByKeyRequest::set_dynamickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
}
inline void GetDynamicDataByKeyRequest::set_dynamickey(const char* value,
    size_t size) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
}
inline std::string* GetDynamicDataByKeyRequest::_internal_mutable_dynamickey() {
  
  return dynamickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDynamicDataByKeyRequest::release_dynamickey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
  return dynamickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDynamicDataByKeyRequest::set_allocated_dynamickey(std::string* dynamickey) {
  if (dynamickey != nullptr) {
    
  } else {
    
  }
  dynamickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dynamickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.dynamicKey)
}

// -------------------------------------------------------------------

// GetDynamicDataByKeyResponseRecord

// int64 campaignId = 1;
inline void GetDynamicDataByKeyResponseRecord::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDynamicDataByKeyResponseRecord::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDynamicDataByKeyResponseRecord::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.campaignId)
  return _internal_campaignid();
}
inline void GetDynamicDataByKeyResponseRecord::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void GetDynamicDataByKeyResponseRecord::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.campaignId)
}

// string dynamicKey = 2;
inline void GetDynamicDataByKeyResponseRecord::clear_dynamickey() {
  dynamickey_.ClearToEmpty();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::dynamickey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
  return _internal_dynamickey();
}
inline void GetDynamicDataByKeyResponseRecord::set_dynamickey(const std::string& value) {
  _internal_set_dynamickey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
}
inline std::string* GetDynamicDataByKeyResponseRecord::mutable_dynamickey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
  return _internal_mutable_dynamickey();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::_internal_dynamickey() const {
  return dynamickey_.Get();
}
inline void GetDynamicDataByKeyResponseRecord::_internal_set_dynamickey(const std::string& value) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_dynamickey(std::string&& value) {
  
  dynamickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
}
inline void GetDynamicDataByKeyResponseRecord::set_dynamickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
}
inline void GetDynamicDataByKeyResponseRecord::set_dynamickey(const char* value,
    size_t size) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
}
inline std::string* GetDynamicDataByKeyResponseRecord::_internal_mutable_dynamickey() {
  
  return dynamickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDynamicDataByKeyResponseRecord::release_dynamickey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
  return dynamickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_allocated_dynamickey(std::string* dynamickey) {
  if (dynamickey != nullptr) {
    
  } else {
    
  }
  dynamickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dynamickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.dynamicKey)
}

// string ctaLink = 3;
inline void GetDynamicDataByKeyResponseRecord::clear_ctalink() {
  ctalink_.ClearToEmpty();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::ctalink() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
  return _internal_ctalink();
}
inline void GetDynamicDataByKeyResponseRecord::set_ctalink(const std::string& value) {
  _internal_set_ctalink(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
}
inline std::string* GetDynamicDataByKeyResponseRecord::mutable_ctalink() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
  return _internal_mutable_ctalink();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::_internal_ctalink() const {
  return ctalink_.Get();
}
inline void GetDynamicDataByKeyResponseRecord::_internal_set_ctalink(const std::string& value) {
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_ctalink(std::string&& value) {
  
  ctalink_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
}
inline void GetDynamicDataByKeyResponseRecord::set_ctalink(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
}
inline void GetDynamicDataByKeyResponseRecord::set_ctalink(const char* value,
    size_t size) {
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
}
inline std::string* GetDynamicDataByKeyResponseRecord::_internal_mutable_ctalink() {
  
  return ctalink_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDynamicDataByKeyResponseRecord::release_ctalink() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
  return ctalink_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_allocated_ctalink(std::string* ctalink) {
  if (ctalink != nullptr) {
    
  } else {
    
  }
  ctalink_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ctalink,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.ctaLink)
}

// string media = 4;
inline void GetDynamicDataByKeyResponseRecord::clear_media() {
  media_.ClearToEmpty();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
  return _internal_media();
}
inline void GetDynamicDataByKeyResponseRecord::set_media(const std::string& value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
}
inline std::string* GetDynamicDataByKeyResponseRecord::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
  return _internal_mutable_media();
}
inline const std::string& GetDynamicDataByKeyResponseRecord::_internal_media() const {
  return media_.Get();
}
inline void GetDynamicDataByKeyResponseRecord::_internal_set_media(const std::string& value) {
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_media(std::string&& value) {
  
  media_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
}
inline void GetDynamicDataByKeyResponseRecord::set_media(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
}
inline void GetDynamicDataByKeyResponseRecord::set_media(const char* value,
    size_t size) {
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
}
inline std::string* GetDynamicDataByKeyResponseRecord::_internal_mutable_media() {
  
  return media_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDynamicDataByKeyResponseRecord::release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
  return media_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDynamicDataByKeyResponseRecord::set_allocated_media(std::string* media) {
  if (media != nullptr) {
    
  } else {
    
  }
  media_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord.media)
}

// -------------------------------------------------------------------

// GetDynamicDataByKeyResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetDynamicDataByKeyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetDynamicDataByKeyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetDynamicDataByKeyResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetDynamicDataByKeyResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status)
  return _internal_status();
}
inline void GetDynamicDataByKeyResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDynamicDataByKeyResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDynamicDataByKeyResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDynamicDataByKeyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDynamicDataByKeyResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status)
  return _internal_mutable_status();
}
inline void GetDynamicDataByKeyResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status)
}

// int32 count = 2;
inline void GetDynamicDataByKeyResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDynamicDataByKeyResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDynamicDataByKeyResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.count)
  return _internal_count();
}
inline void GetDynamicDataByKeyResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetDynamicDataByKeyResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetDynamicDataByKeyResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetDynamicDataByKeyResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDynamicDataByKeyResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetDynamicDataByKeyResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetDynamicDataByKeyResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetDynamicDataByKeyResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDynamicDataByKeyResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDynamicDataByKeyResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetDynamicDataByKeyResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord records = 4;
inline int GetDynamicDataByKeyResponse::_internal_records_size() const {
  return records_.size();
}
inline int GetDynamicDataByKeyResponse::records_size() const {
  return _internal_records_size();
}
inline void GetDynamicDataByKeyResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* GetDynamicDataByKeyResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >*
GetDynamicDataByKeyResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records)
  return &records_;
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord& GetDynamicDataByKeyResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord& GetDynamicDataByKeyResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* GetDynamicDataByKeyResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord* GetDynamicDataByKeyResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponseRecord >&
GetDynamicDataByKeyResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// AddDynamicDataRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddDynamicDataRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddDynamicDataRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddDynamicDataRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddDynamicDataRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddDynamicDataRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddDynamicDataRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddDynamicDataRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddDynamicDataRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddDynamicDataRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddDynamicDataRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void AddDynamicDataRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddDynamicDataRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddDynamicDataRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.campaignId)
  return _internal_campaignid();
}
inline void AddDynamicDataRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void AddDynamicDataRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.campaignId)
}

// string dynamicKey = 3;
inline void AddDynamicDataRequest::clear_dynamickey() {
  dynamickey_.ClearToEmpty();
}
inline const std::string& AddDynamicDataRequest::dynamickey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
  return _internal_dynamickey();
}
inline void AddDynamicDataRequest::set_dynamickey(const std::string& value) {
  _internal_set_dynamickey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
}
inline std::string* AddDynamicDataRequest::mutable_dynamickey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
  return _internal_mutable_dynamickey();
}
inline const std::string& AddDynamicDataRequest::_internal_dynamickey() const {
  return dynamickey_.Get();
}
inline void AddDynamicDataRequest::_internal_set_dynamickey(const std::string& value) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddDynamicDataRequest::set_dynamickey(std::string&& value) {
  
  dynamickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
}
inline void AddDynamicDataRequest::set_dynamickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
}
inline void AddDynamicDataRequest::set_dynamickey(const char* value,
    size_t size) {
  
  dynamickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
}
inline std::string* AddDynamicDataRequest::_internal_mutable_dynamickey() {
  
  return dynamickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddDynamicDataRequest::release_dynamickey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
  return dynamickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDynamicDataRequest::set_allocated_dynamickey(std::string* dynamickey) {
  if (dynamickey != nullptr) {
    
  } else {
    
  }
  dynamickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dynamickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.dynamicKey)
}

// string ctaLink = 4;
inline void AddDynamicDataRequest::clear_ctalink() {
  ctalink_.ClearToEmpty();
}
inline const std::string& AddDynamicDataRequest::ctalink() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
  return _internal_ctalink();
}
inline void AddDynamicDataRequest::set_ctalink(const std::string& value) {
  _internal_set_ctalink(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
}
inline std::string* AddDynamicDataRequest::mutable_ctalink() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
  return _internal_mutable_ctalink();
}
inline const std::string& AddDynamicDataRequest::_internal_ctalink() const {
  return ctalink_.Get();
}
inline void AddDynamicDataRequest::_internal_set_ctalink(const std::string& value) {
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddDynamicDataRequest::set_ctalink(std::string&& value) {
  
  ctalink_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
}
inline void AddDynamicDataRequest::set_ctalink(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
}
inline void AddDynamicDataRequest::set_ctalink(const char* value,
    size_t size) {
  
  ctalink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
}
inline std::string* AddDynamicDataRequest::_internal_mutable_ctalink() {
  
  return ctalink_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddDynamicDataRequest::release_ctalink() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
  return ctalink_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDynamicDataRequest::set_allocated_ctalink(std::string* ctalink) {
  if (ctalink != nullptr) {
    
  } else {
    
  }
  ctalink_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ctalink,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.ctaLink)
}

// string media = 5;
inline void AddDynamicDataRequest::clear_media() {
  media_.ClearToEmpty();
}
inline const std::string& AddDynamicDataRequest::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
  return _internal_media();
}
inline void AddDynamicDataRequest::set_media(const std::string& value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
}
inline std::string* AddDynamicDataRequest::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
  return _internal_mutable_media();
}
inline const std::string& AddDynamicDataRequest::_internal_media() const {
  return media_.Get();
}
inline void AddDynamicDataRequest::_internal_set_media(const std::string& value) {
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddDynamicDataRequest::set_media(std::string&& value) {
  
  media_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
}
inline void AddDynamicDataRequest::set_media(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
}
inline void AddDynamicDataRequest::set_media(const char* value,
    size_t size) {
  
  media_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
}
inline std::string* AddDynamicDataRequest::_internal_mutable_media() {
  
  return media_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddDynamicDataRequest::release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
  return media_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDynamicDataRequest::set_allocated_media(std::string* media) {
  if (media != nullptr) {
    
  } else {
    
  }
  media_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.media)
}

// -------------------------------------------------------------------

// BulkAddDynamicDataRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddDynamicDataRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddDynamicDataRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddDynamicDataRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddDynamicDataRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddDynamicDataRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddDynamicDataRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddDynamicDataRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddDynamicDataRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddDynamicDataRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddDynamicDataRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest requests = 2;
inline int BulkAddDynamicDataRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddDynamicDataRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddDynamicDataRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* BulkAddDynamicDataRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >*
BulkAddDynamicDataRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& BulkAddDynamicDataRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& BulkAddDynamicDataRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* BulkAddDynamicDataRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* BulkAddDynamicDataRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >&
BulkAddDynamicDataRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddDynamicDataResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddDynamicDataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddDynamicDataResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddDynamicDataResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddDynamicDataResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status)
  return _internal_status();
}
inline void AddDynamicDataResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddDynamicDataResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddDynamicDataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddDynamicDataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddDynamicDataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status)
  return _internal_mutable_status();
}
inline void AddDynamicDataResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status)
}

// int32 count = 2;
inline void AddDynamicDataResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddDynamicDataResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddDynamicDataResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.count)
  return _internal_count();
}
inline void AddDynamicDataResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddDynamicDataResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.count)
}

// string recordId = 3;
inline void AddDynamicDataResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddDynamicDataResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
  return _internal_recordid();
}
inline void AddDynamicDataResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
}
inline std::string* AddDynamicDataResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddDynamicDataResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddDynamicDataResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddDynamicDataResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
}
inline void AddDynamicDataResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
}
inline void AddDynamicDataResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
}
inline std::string* AddDynamicDataResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddDynamicDataResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDynamicDataResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddDynamicDataResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddDynamicDataResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddDynamicDataResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddDynamicDataResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddDynamicDataResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddDynamicDataResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddDynamicDataResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddDynamicDataResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddDynamicDataResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddDynamicDataResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddDynamicDataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddDynamicDataResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddDynamicDataResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddDynamicDataResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status)
  return _internal_status();
}
inline void BulkAddDynamicDataResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddDynamicDataResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddDynamicDataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddDynamicDataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddDynamicDataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddDynamicDataResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status)
}

// int32 count = 2;
inline void BulkAddDynamicDataResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddDynamicDataResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddDynamicDataResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.count)
  return _internal_count();
}
inline void BulkAddDynamicDataResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddDynamicDataResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse responses = 3;
inline int BulkAddDynamicDataResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddDynamicDataResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddDynamicDataResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* BulkAddDynamicDataResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >*
BulkAddDynamicDataResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& BulkAddDynamicDataResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& BulkAddDynamicDataResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* BulkAddDynamicDataResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* BulkAddDynamicDataResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >&
BulkAddDynamicDataResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddTargetUserRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddTargetUserRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddTargetUserRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddTargetUserRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddTargetUserRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddTargetUserRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddTargetUserRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddTargetUserRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddTargetUserRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddTargetUserRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddTargetUserRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void AddTargetUserRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddTargetUserRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddTargetUserRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.campaignId)
  return _internal_campaignid();
}
inline void AddTargetUserRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void AddTargetUserRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.campaignId)
}

// .farm.nurture.core.contracts.common.ActorID user = 3;
inline bool AddTargetUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool AddTargetUserRequest::has_user() const {
  return _internal_has_user();
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddTargetUserRequest::_internal_user() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddTargetUserRequest::user() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user)
  return _internal_user();
}
inline void AddTargetUserRequest::unsafe_arena_set_allocated_user(
    ::farm::nurture::core::contracts::common::ActorID* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user)
}
inline ::farm::nurture::core::contracts::common::ActorID* AddTargetUserRequest::release_user() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddTargetUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddTargetUserRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddTargetUserRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user)
  return _internal_mutable_user();
}
inline void AddTargetUserRequest::set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user)
}

// -------------------------------------------------------------------

// TestTargetUserRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool TestTargetUserRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool TestTargetUserRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestTargetUserRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestTargetUserRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void TestTargetUserRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestTargetUserRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestTargetUserRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestTargetUserRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestTargetUserRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void TestTargetUserRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders)
}

// .farm.nurture.core.contracts.common.ActorID user = 2;
inline bool TestTargetUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool TestTargetUserRequest::has_user() const {
  return _internal_has_user();
}
inline const ::farm::nurture::core::contracts::common::ActorID& TestTargetUserRequest::_internal_user() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& TestTargetUserRequest::user() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user)
  return _internal_user();
}
inline void TestTargetUserRequest::unsafe_arena_set_allocated_user(
    ::farm::nurture::core::contracts::common::ActorID* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user)
}
inline ::farm::nurture::core::contracts::common::ActorID* TestTargetUserRequest::release_user() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* TestTargetUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* TestTargetUserRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::farm::nurture::core::contracts::common::ActorID* TestTargetUserRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user)
  return _internal_mutable_user();
}
inline void TestTargetUserRequest::set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user)
}

// -------------------------------------------------------------------

// BulkAddTargetUserRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddTargetUserRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddTargetUserRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddTargetUserRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddTargetUserRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddTargetUserRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddTargetUserRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddTargetUserRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddTargetUserRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddTargetUserRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddTargetUserRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest requests = 2;
inline int BulkAddTargetUserRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddTargetUserRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddTargetUserRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* BulkAddTargetUserRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >*
BulkAddTargetUserRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& BulkAddTargetUserRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& BulkAddTargetUserRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* BulkAddTargetUserRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* BulkAddTargetUserRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >&
BulkAddTargetUserRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddTargetUserResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddTargetUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddTargetUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddTargetUserResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddTargetUserResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status)
  return _internal_status();
}
inline void AddTargetUserResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddTargetUserResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddTargetUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddTargetUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddTargetUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status)
  return _internal_mutable_status();
}
inline void AddTargetUserResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status)
}

// int32 count = 2;
inline void AddTargetUserResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddTargetUserResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddTargetUserResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.count)
  return _internal_count();
}
inline void AddTargetUserResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddTargetUserResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.count)
}

// string recordId = 3;
inline void AddTargetUserResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddTargetUserResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
  return _internal_recordid();
}
inline void AddTargetUserResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
}
inline std::string* AddTargetUserResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddTargetUserResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddTargetUserResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTargetUserResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
}
inline void AddTargetUserResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
}
inline void AddTargetUserResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
}
inline std::string* AddTargetUserResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTargetUserResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTargetUserResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddTargetUserResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddTargetUserResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTargetUserResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddTargetUserResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTargetUserResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTargetUserResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTargetUserResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTargetUserResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddTargetUserResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddTargetUserResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddTargetUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddTargetUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddTargetUserResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddTargetUserResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status)
  return _internal_status();
}
inline void BulkAddTargetUserResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddTargetUserResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddTargetUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddTargetUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddTargetUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddTargetUserResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status)
}

// int32 count = 2;
inline void BulkAddTargetUserResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddTargetUserResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddTargetUserResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.count)
  return _internal_count();
}
inline void BulkAddTargetUserResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddTargetUserResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse responses = 3;
inline int BulkAddTargetUserResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddTargetUserResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddTargetUserResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* BulkAddTargetUserResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >*
BulkAddTargetUserResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& BulkAddTargetUserResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& BulkAddTargetUserResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* BulkAddTargetUserResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* BulkAddTargetUserResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >&
BulkAddTargetUserResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// AddInactionTargetUserRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddInactionTargetUserRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddInactionTargetUserRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddInactionTargetUserRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddInactionTargetUserRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddInactionTargetUserRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddInactionTargetUserRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddInactionTargetUserRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddInactionTargetUserRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddInactionTargetUserRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddInactionTargetUserRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void AddInactionTargetUserRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddInactionTargetUserRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddInactionTargetUserRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.campaignId)
  return _internal_campaignid();
}
inline void AddInactionTargetUserRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void AddInactionTargetUserRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.campaignId)
}

// .farm.nurture.core.contracts.common.ActorID user = 3;
inline bool AddInactionTargetUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool AddInactionTargetUserRequest::has_user() const {
  return _internal_has_user();
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddInactionTargetUserRequest::_internal_user() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& AddInactionTargetUserRequest::user() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user)
  return _internal_user();
}
inline void AddInactionTargetUserRequest::unsafe_arena_set_allocated_user(
    ::farm::nurture::core::contracts::common::ActorID* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user)
}
inline ::farm::nurture::core::contracts::common::ActorID* AddInactionTargetUserRequest::release_user() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddInactionTargetUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddInactionTargetUserRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::farm::nurture::core::contracts::common::ActorID* AddInactionTargetUserRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user)
  return _internal_mutable_user();
}
inline void AddInactionTargetUserRequest::set_allocated_user(::farm::nurture::core::contracts::common::ActorID* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user)
}

// -------------------------------------------------------------------

// BulkAddInactionTargetUserRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddInactionTargetUserRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddInactionTargetUserRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddInactionTargetUserRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddInactionTargetUserRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddInactionTargetUserRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddInactionTargetUserRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddInactionTargetUserRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddInactionTargetUserRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddInactionTargetUserRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddInactionTargetUserRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest requests = 2;
inline int BulkAddInactionTargetUserRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddInactionTargetUserRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddInactionTargetUserRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* BulkAddInactionTargetUserRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >*
BulkAddInactionTargetUserRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& BulkAddInactionTargetUserRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& BulkAddInactionTargetUserRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* BulkAddInactionTargetUserRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* BulkAddInactionTargetUserRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >&
BulkAddInactionTargetUserRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddInactionTargetUserResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddInactionTargetUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddInactionTargetUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddInactionTargetUserResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddInactionTargetUserResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status)
  return _internal_status();
}
inline void AddInactionTargetUserResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddInactionTargetUserResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddInactionTargetUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddInactionTargetUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddInactionTargetUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status)
  return _internal_mutable_status();
}
inline void AddInactionTargetUserResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status)
}

// int32 count = 2;
inline void AddInactionTargetUserResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddInactionTargetUserResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddInactionTargetUserResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.count)
  return _internal_count();
}
inline void AddInactionTargetUserResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddInactionTargetUserResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.count)
}

// string recordId = 3;
inline void AddInactionTargetUserResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddInactionTargetUserResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
  return _internal_recordid();
}
inline void AddInactionTargetUserResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
}
inline std::string* AddInactionTargetUserResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddInactionTargetUserResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddInactionTargetUserResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddInactionTargetUserResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
}
inline void AddInactionTargetUserResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
}
inline void AddInactionTargetUserResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
}
inline std::string* AddInactionTargetUserResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddInactionTargetUserResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddInactionTargetUserResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddInactionTargetUserResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddInactionTargetUserResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddInactionTargetUserResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddInactionTargetUserResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddInactionTargetUserResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddInactionTargetUserResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddInactionTargetUserResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddInactionTargetUserResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddInactionTargetUserResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddInactionTargetUserResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddInactionTargetUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddInactionTargetUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddInactionTargetUserResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddInactionTargetUserResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status)
  return _internal_status();
}
inline void BulkAddInactionTargetUserResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddInactionTargetUserResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddInactionTargetUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddInactionTargetUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddInactionTargetUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddInactionTargetUserResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status)
}

// int32 count = 2;
inline void BulkAddInactionTargetUserResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddInactionTargetUserResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddInactionTargetUserResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.count)
  return _internal_count();
}
inline void BulkAddInactionTargetUserResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddInactionTargetUserResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse responses = 3;
inline int BulkAddInactionTargetUserResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddInactionTargetUserResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddInactionTargetUserResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* BulkAddInactionTargetUserResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >*
BulkAddInactionTargetUserResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& BulkAddInactionTargetUserResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& BulkAddInactionTargetUserResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* BulkAddInactionTargetUserResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* BulkAddInactionTargetUserResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >&
BulkAddInactionTargetUserResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// FindInactionTargetUserByCampaignIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FindInactionTargetUserByCampaignIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FindInactionTargetUserByCampaignIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindInactionTargetUserByCampaignIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FindInactionTargetUserByCampaignIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FindInactionTargetUserByCampaignIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindInactionTargetUserByCampaignIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindInactionTargetUserByCampaignIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindInactionTargetUserByCampaignIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FindInactionTargetUserByCampaignIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FindInactionTargetUserByCampaignIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FindInactionTargetUserByCampaignIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FindInactionTargetUserByCampaignIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FindInactionTargetUserByCampaignIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FindInactionTargetUserByCampaignIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FindInactionTargetUserByCampaignIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.isStaleAllowed)
}

// int64 campaignId = 3;
inline void FindInactionTargetUserByCampaignIdRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.campaignId)
  return _internal_campaignid();
}
inline void FindInactionTargetUserByCampaignIdRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindInactionTargetUserByCampaignIdRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.campaignId)
}

// -------------------------------------------------------------------

// FindInactionTargetUserByCampaignIdResponseRecord

// int64 id = 1;
inline void FindInactionTargetUserByCampaignIdResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.id)
  return _internal_id();
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.id)
}

// int64 campaignId = 2;
inline void FindInactionTargetUserByCampaignIdResponseRecord::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.campaignId)
  return _internal_campaignid();
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.campaignId)
}

// int64 userId = 3;
inline void FindInactionTargetUserByCampaignIdResponseRecord::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInactionTargetUserByCampaignIdResponseRecord::userid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userId)
  return _internal_userid();
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userId)
}

// string userType = 4;
inline void FindInactionTargetUserByCampaignIdResponseRecord::clear_usertype() {
  usertype_.ClearToEmpty();
}
inline const std::string& FindInactionTargetUserByCampaignIdResponseRecord::usertype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
  return _internal_usertype();
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_usertype(const std::string& value) {
  _internal_set_usertype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
}
inline std::string* FindInactionTargetUserByCampaignIdResponseRecord::mutable_usertype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
  return _internal_mutable_usertype();
}
inline const std::string& FindInactionTargetUserByCampaignIdResponseRecord::_internal_usertype() const {
  return usertype_.Get();
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::_internal_set_usertype(const std::string& value) {
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_usertype(std::string&& value) {
  
  usertype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_usertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_usertype(const char* value,
    size_t size) {
  
  usertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
}
inline std::string* FindInactionTargetUserByCampaignIdResponseRecord::_internal_mutable_usertype() {
  
  return usertype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindInactionTargetUserByCampaignIdResponseRecord::release_usertype() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
  return usertype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindInactionTargetUserByCampaignIdResponseRecord::set_allocated_usertype(std::string* usertype) {
  if (usertype != nullptr) {
    
  } else {
    
  }
  usertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usertype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord.userType)
}

// -------------------------------------------------------------------

// FindInactionTargetUserByCampaignIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FindInactionTargetUserByCampaignIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FindInactionTargetUserByCampaignIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindInactionTargetUserByCampaignIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FindInactionTargetUserByCampaignIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status)
  return _internal_status();
}
inline void FindInactionTargetUserByCampaignIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindInactionTargetUserByCampaignIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindInactionTargetUserByCampaignIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindInactionTargetUserByCampaignIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FindInactionTargetUserByCampaignIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status)
  return _internal_mutable_status();
}
inline void FindInactionTargetUserByCampaignIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status)
}

// int32 count = 2;
inline void FindInactionTargetUserByCampaignIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindInactionTargetUserByCampaignIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindInactionTargetUserByCampaignIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.count)
  return _internal_count();
}
inline void FindInactionTargetUserByCampaignIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FindInactionTargetUserByCampaignIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FindInactionTargetUserByCampaignIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FindInactionTargetUserByCampaignIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindInactionTargetUserByCampaignIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FindInactionTargetUserByCampaignIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindInactionTargetUserByCampaignIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FindInactionTargetUserByCampaignIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FindInactionTargetUserByCampaignIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FindInactionTargetUserByCampaignIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FindInactionTargetUserByCampaignIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord records = 4;
inline int FindInactionTargetUserByCampaignIdResponse::_internal_records_size() const {
  return records_.size();
}
inline int FindInactionTargetUserByCampaignIdResponse::records_size() const {
  return _internal_records_size();
}
inline void FindInactionTargetUserByCampaignIdResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* FindInactionTargetUserByCampaignIdResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >*
FindInactionTargetUserByCampaignIdResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records)
  return &records_;
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord& FindInactionTargetUserByCampaignIdResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord& FindInactionTargetUserByCampaignIdResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* FindInactionTargetUserByCampaignIdResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord* FindInactionTargetUserByCampaignIdResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponseRecord >&
FindInactionTargetUserByCampaignIdResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// AthenaQueryRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AthenaQueryRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AthenaQueryRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AthenaQueryRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AthenaQueryRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AthenaQueryRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AthenaQueryRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AthenaQueryRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AthenaQueryRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AthenaQueryRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AthenaQueryRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders)
}

// string athenaQuery = 2;
inline void AthenaQueryRequest::clear_athenaquery() {
  athenaquery_.ClearToEmpty();
}
inline const std::string& AthenaQueryRequest::athenaquery() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
  return _internal_athenaquery();
}
inline void AthenaQueryRequest::set_athenaquery(const std::string& value) {
  _internal_set_athenaquery(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
}
inline std::string* AthenaQueryRequest::mutable_athenaquery() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
  return _internal_mutable_athenaquery();
}
inline const std::string& AthenaQueryRequest::_internal_athenaquery() const {
  return athenaquery_.Get();
}
inline void AthenaQueryRequest::_internal_set_athenaquery(const std::string& value) {
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AthenaQueryRequest::set_athenaquery(std::string&& value) {
  
  athenaquery_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
}
inline void AthenaQueryRequest::set_athenaquery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
}
inline void AthenaQueryRequest::set_athenaquery(const char* value,
    size_t size) {
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
}
inline std::string* AthenaQueryRequest::_internal_mutable_athenaquery() {
  
  return athenaquery_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AthenaQueryRequest::release_athenaquery() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
  return athenaquery_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AthenaQueryRequest::set_allocated_athenaquery(std::string* athenaquery) {
  if (athenaquery != nullptr) {
    
  } else {
    
  }
  athenaquery_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), athenaquery,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.athenaQuery)
}

// -------------------------------------------------------------------

// AthenaQueryResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AthenaQueryResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AthenaQueryResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AthenaQueryResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AthenaQueryResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status)
  return _internal_status();
}
inline void AthenaQueryResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AthenaQueryResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AthenaQueryResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AthenaQueryResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AthenaQueryResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status)
  return _internal_mutable_status();
}
inline void AthenaQueryResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status)
}

// int64 count = 2;
inline void AthenaQueryResponse::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AthenaQueryResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AthenaQueryResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.count)
  return _internal_count();
}
inline void AthenaQueryResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void AthenaQueryResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.count)
}

// -------------------------------------------------------------------

// TestNewCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool TestNewCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool TestNewCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestNewCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestNewCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void TestNewCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestNewCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestNewCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestNewCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestNewCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void TestNewCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders)
}

// .farm.nurture.core.contracts.CampaignService.TestCampaignRequest testCampaignRequest = 3;
inline bool TestNewCampaignRequest::_internal_has_testcampaignrequest() const {
  return this != internal_default_instance() && testcampaignrequest_ != nullptr;
}
inline bool TestNewCampaignRequest::has_testcampaignrequest() const {
  return _internal_has_testcampaignrequest();
}
inline void TestNewCampaignRequest::clear_testcampaignrequest() {
  if (GetArena() == nullptr && testcampaignrequest_ != nullptr) {
    delete testcampaignrequest_;
  }
  testcampaignrequest_ = nullptr;
}
inline const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest& TestNewCampaignRequest::_internal_testcampaignrequest() const {
  const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* p = testcampaignrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest&>(
      ::farm::nurture::core::contracts::CampaignService::_TestCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest& TestNewCampaignRequest::testcampaignrequest() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest)
  return _internal_testcampaignrequest();
}
inline void TestNewCampaignRequest::unsafe_arena_set_allocated_testcampaignrequest(
    ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* testcampaignrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testcampaignrequest_);
  }
  testcampaignrequest_ = testcampaignrequest;
  if (testcampaignrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest)
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* TestNewCampaignRequest::release_testcampaignrequest() {
  
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* temp = testcampaignrequest_;
  testcampaignrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* TestNewCampaignRequest::unsafe_arena_release_testcampaignrequest() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest)
  
  ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* temp = testcampaignrequest_;
  testcampaignrequest_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* TestNewCampaignRequest::_internal_mutable_testcampaignrequest() {
  
  if (testcampaignrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::CampaignService::TestCampaignRequest>(GetArena());
    testcampaignrequest_ = p;
  }
  return testcampaignrequest_;
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* TestNewCampaignRequest::mutable_testcampaignrequest() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest)
  return _internal_mutable_testcampaignrequest();
}
inline void TestNewCampaignRequest::set_allocated_testcampaignrequest(::farm::nurture::core::contracts::CampaignService::TestCampaignRequest* testcampaignrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete testcampaignrequest_;
  }
  if (testcampaignrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(testcampaignrequest);
    if (message_arena != submessage_arena) {
      testcampaignrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testcampaignrequest, submessage_arena);
    }
    
  } else {
    
  }
  testcampaignrequest_ = testcampaignrequest;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest)
}

// repeated .farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest testCampaignTemplateRequests = 4;
inline int TestNewCampaignRequest::_internal_testcampaigntemplaterequests_size() const {
  return testcampaigntemplaterequests_.size();
}
inline int TestNewCampaignRequest::testcampaigntemplaterequests_size() const {
  return _internal_testcampaigntemplaterequests_size();
}
inline void TestNewCampaignRequest::clear_testcampaigntemplaterequests() {
  testcampaigntemplaterequests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* TestNewCampaignRequest::mutable_testcampaigntemplaterequests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests)
  return testcampaigntemplaterequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >*
TestNewCampaignRequest::mutable_testcampaigntemplaterequests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests)
  return &testcampaigntemplaterequests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest& TestNewCampaignRequest::_internal_testcampaigntemplaterequests(int index) const {
  return testcampaigntemplaterequests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest& TestNewCampaignRequest::testcampaigntemplaterequests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests)
  return _internal_testcampaigntemplaterequests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* TestNewCampaignRequest::_internal_add_testcampaigntemplaterequests() {
  return testcampaigntemplaterequests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest* TestNewCampaignRequest::add_testcampaigntemplaterequests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests)
  return _internal_add_testcampaigntemplaterequests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestCampaignTemplateRequest >&
TestNewCampaignRequest::testcampaigntemplaterequests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests)
  return testcampaigntemplaterequests_;
}

// repeated .farm.nurture.core.contracts.CampaignService.TestTargetUserRequest testTargetUserRequests = 5;
inline int TestNewCampaignRequest::_internal_testtargetuserrequests_size() const {
  return testtargetuserrequests_.size();
}
inline int TestNewCampaignRequest::testtargetuserrequests_size() const {
  return _internal_testtargetuserrequests_size();
}
inline void TestNewCampaignRequest::clear_testtargetuserrequests() {
  testtargetuserrequests_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* TestNewCampaignRequest::mutable_testtargetuserrequests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests)
  return testtargetuserrequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >*
TestNewCampaignRequest::mutable_testtargetuserrequests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests)
  return &testtargetuserrequests_;
}
inline const ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest& TestNewCampaignRequest::_internal_testtargetuserrequests(int index) const {
  return testtargetuserrequests_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest& TestNewCampaignRequest::testtargetuserrequests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests)
  return _internal_testtargetuserrequests(index);
}
inline ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* TestNewCampaignRequest::_internal_add_testtargetuserrequests() {
  return testtargetuserrequests_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest* TestNewCampaignRequest::add_testtargetuserrequests() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests)
  return _internal_add_testtargetuserrequests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::TestTargetUserRequest >&
TestNewCampaignRequest::testtargetuserrequests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests)
  return testtargetuserrequests_;
}

// -------------------------------------------------------------------

// TestNewCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool TestNewCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool TestNewCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& TestNewCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& TestNewCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status)
  return _internal_status();
}
inline void TestNewCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestNewCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestNewCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestNewCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestNewCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status)
  return _internal_mutable_status();
}
inline void TestNewCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status)
}

// -------------------------------------------------------------------

// MultiRequests

// bool onTxn = 1;
inline void MultiRequests::clear_ontxn() {
  ontxn_ = false;
}
inline bool MultiRequests::_internal_ontxn() const {
  return ontxn_;
}
inline bool MultiRequests::ontxn() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.MultiRequests.onTxn)
  return _internal_ontxn();
}
inline void MultiRequests::_internal_set_ontxn(bool value) {
  
  ontxn_ = value;
}
inline void MultiRequests::set_ontxn(bool value) {
  _internal_set_ontxn(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.MultiRequests.onTxn)
}

// repeated .farm.nurture.core.contracts.CampaignService.Request request = 2;
inline int MultiRequests::_internal_request_size() const {
  return request_.size();
}
inline int MultiRequests::request_size() const {
  return _internal_request_size();
}
inline void MultiRequests::clear_request() {
  request_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::Request* MultiRequests::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.MultiRequests.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Request >*
MultiRequests::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.MultiRequests.request)
  return &request_;
}
inline const ::farm::nurture::core::contracts::CampaignService::Request& MultiRequests::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::Request& MultiRequests::request(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.MultiRequests.request)
  return _internal_request(index);
}
inline ::farm::nurture::core::contracts::CampaignService::Request* MultiRequests::_internal_add_request() {
  return request_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::Request* MultiRequests::add_request() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.MultiRequests.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Request >&
MultiRequests::request() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.MultiRequests.request)
  return request_;
}

// -------------------------------------------------------------------

// Request

// string index = 1;
inline void Request::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Request::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.index)
  return _internal_index();
}
inline void Request::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.Request.index)
}
inline std::string* Request::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.index)
  return _internal_mutable_index();
}
inline const std::string& Request::_internal_index() const {
  return index_.Get();
}
inline void Request::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.Request.index)
}
inline void Request::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.Request.index)
}
inline void Request::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.Request.index)
}
inline std::string* Request::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Request.index)
}

// .farm.nurture.core.contracts.CampaignService.AddCampaignRequest reqAddCampaign = 2;
inline bool Request::_internal_has_reqaddcampaign() const {
  return ARequest_case() == kReqAddCampaign;
}
inline bool Request::has_reqaddcampaign() const {
  return _internal_has_reqaddcampaign();
}
inline void Request::set_has_reqaddcampaign() {
  _oneof_case_[0] = kReqAddCampaign;
}
inline void Request::clear_reqaddcampaign() {
  if (_internal_has_reqaddcampaign()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddcampaign_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Request::release_reqaddcampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
  if (_internal_has_reqaddcampaign()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* temp = ARequest_.reqaddcampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& Request::_internal_reqaddcampaign() const {
  return _internal_has_reqaddcampaign()
      ? *ARequest_.reqaddcampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_AddCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& Request::reqaddcampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
  return _internal_reqaddcampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Request::unsafe_arena_release_reqaddcampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
  if (_internal_has_reqaddcampaign()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* temp = ARequest_.reqaddcampaign_;
    ARequest_.reqaddcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* reqaddcampaign) {
  clear_ARequest();
  if (reqaddcampaign) {
    set_has_reqaddcampaign();
    ARequest_.reqaddcampaign_ = reqaddcampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Request::_internal_mutable_reqaddcampaign() {
  if (!_internal_has_reqaddcampaign()) {
    clear_ARequest();
    set_has_reqaddcampaign();
    ARequest_.reqaddcampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest >(GetArena());
  }
  return ARequest_.reqaddcampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* Request::mutable_reqaddcampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign)
  return _internal_mutable_reqaddcampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest reqAddCampaignBulk = 3;
inline bool Request::_internal_has_reqaddcampaignbulk() const {
  return ARequest_case() == kReqAddCampaignBulk;
}
inline bool Request::has_reqaddcampaignbulk() const {
  return _internal_has_reqaddcampaignbulk();
}
inline void Request::set_has_reqaddcampaignbulk() {
  _oneof_case_[0] = kReqAddCampaignBulk;
}
inline void Request::clear_reqaddcampaignbulk() {
  if (_internal_has_reqaddcampaignbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddcampaignbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Request::release_reqaddcampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
  if (_internal_has_reqaddcampaignbulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* temp = ARequest_.reqaddcampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& Request::_internal_reqaddcampaignbulk() const {
  return _internal_has_reqaddcampaignbulk()
      ? *ARequest_.reqaddcampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& Request::reqaddcampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
  return _internal_reqaddcampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Request::unsafe_arena_release_reqaddcampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
  if (_internal_has_reqaddcampaignbulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* temp = ARequest_.reqaddcampaignbulk_;
    ARequest_.reqaddcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* reqaddcampaignbulk) {
  clear_ARequest();
  if (reqaddcampaignbulk) {
    set_has_reqaddcampaignbulk();
    ARequest_.reqaddcampaignbulk_ = reqaddcampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Request::_internal_mutable_reqaddcampaignbulk() {
  if (!_internal_has_reqaddcampaignbulk()) {
    clear_ARequest();
    set_has_reqaddcampaignbulk();
    ARequest_.reqaddcampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest >(GetArena());
  }
  return ARequest_.reqaddcampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* Request::mutable_reqaddcampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk)
  return _internal_mutable_reqaddcampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest reqUpdateCampaign = 4;
inline bool Request::_internal_has_requpdatecampaign() const {
  return ARequest_case() == kReqUpdateCampaign;
}
inline bool Request::has_requpdatecampaign() const {
  return _internal_has_requpdatecampaign();
}
inline void Request::set_has_requpdatecampaign() {
  _oneof_case_[0] = kReqUpdateCampaign;
}
inline void Request::clear_requpdatecampaign() {
  if (_internal_has_requpdatecampaign()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatecampaign_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Request::release_requpdatecampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
  if (_internal_has_requpdatecampaign()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* temp = ARequest_.requpdatecampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatecampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& Request::_internal_requpdatecampaign() const {
  return _internal_has_requpdatecampaign()
      ? *ARequest_.requpdatecampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_UpdateCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& Request::requpdatecampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
  return _internal_requpdatecampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Request::unsafe_arena_release_requpdatecampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
  if (_internal_has_requpdatecampaign()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* temp = ARequest_.requpdatecampaign_;
    ARequest_.requpdatecampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* requpdatecampaign) {
  clear_ARequest();
  if (requpdatecampaign) {
    set_has_requpdatecampaign();
    ARequest_.requpdatecampaign_ = requpdatecampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Request::_internal_mutable_requpdatecampaign() {
  if (!_internal_has_requpdatecampaign()) {
    clear_ARequest();
    set_has_requpdatecampaign();
    ARequest_.requpdatecampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest >(GetArena());
  }
  return ARequest_.requpdatecampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* Request::mutable_requpdatecampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign)
  return _internal_mutable_requpdatecampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest reqUpdateCampaignBulk = 5;
inline bool Request::_internal_has_requpdatecampaignbulk() const {
  return ARequest_case() == kReqUpdateCampaignBulk;
}
inline bool Request::has_requpdatecampaignbulk() const {
  return _internal_has_requpdatecampaignbulk();
}
inline void Request::set_has_requpdatecampaignbulk() {
  _oneof_case_[0] = kReqUpdateCampaignBulk;
}
inline void Request::clear_requpdatecampaignbulk() {
  if (_internal_has_requpdatecampaignbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatecampaignbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Request::release_requpdatecampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
  if (_internal_has_requpdatecampaignbulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* temp = ARequest_.requpdatecampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatecampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& Request::_internal_requpdatecampaignbulk() const {
  return _internal_has_requpdatecampaignbulk()
      ? *ARequest_.requpdatecampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& Request::requpdatecampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
  return _internal_requpdatecampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Request::unsafe_arena_release_requpdatecampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
  if (_internal_has_requpdatecampaignbulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* temp = ARequest_.requpdatecampaignbulk_;
    ARequest_.requpdatecampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* requpdatecampaignbulk) {
  clear_ARequest();
  if (requpdatecampaignbulk) {
    set_has_requpdatecampaignbulk();
    ARequest_.requpdatecampaignbulk_ = requpdatecampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Request::_internal_mutable_requpdatecampaignbulk() {
  if (!_internal_has_requpdatecampaignbulk()) {
    clear_ARequest();
    set_has_requpdatecampaignbulk();
    ARequest_.requpdatecampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest >(GetArena());
  }
  return ARequest_.requpdatecampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* Request::mutable_requpdatecampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk)
  return _internal_mutable_requpdatecampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest reqAddCampaignTemplate = 6;
inline bool Request::_internal_has_reqaddcampaigntemplate() const {
  return ARequest_case() == kReqAddCampaignTemplate;
}
inline bool Request::has_reqaddcampaigntemplate() const {
  return _internal_has_reqaddcampaigntemplate();
}
inline void Request::set_has_reqaddcampaigntemplate() {
  _oneof_case_[0] = kReqAddCampaignTemplate;
}
inline void Request::clear_reqaddcampaigntemplate() {
  if (_internal_has_reqaddcampaigntemplate()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddcampaigntemplate_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Request::release_reqaddcampaigntemplate() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
  if (_internal_has_reqaddcampaigntemplate()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* temp = ARequest_.reqaddcampaigntemplate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddcampaigntemplate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& Request::_internal_reqaddcampaigntemplate() const {
  return _internal_has_reqaddcampaigntemplate()
      ? *ARequest_.reqaddcampaigntemplate_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest&>(::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& Request::reqaddcampaigntemplate() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
  return _internal_reqaddcampaigntemplate();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Request::unsafe_arena_release_reqaddcampaigntemplate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
  if (_internal_has_reqaddcampaigntemplate()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* temp = ARequest_.reqaddcampaigntemplate_;
    ARequest_.reqaddcampaigntemplate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* reqaddcampaigntemplate) {
  clear_ARequest();
  if (reqaddcampaigntemplate) {
    set_has_reqaddcampaigntemplate();
    ARequest_.reqaddcampaigntemplate_ = reqaddcampaigntemplate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Request::_internal_mutable_reqaddcampaigntemplate() {
  if (!_internal_has_reqaddcampaigntemplate()) {
    clear_ARequest();
    set_has_reqaddcampaigntemplate();
    ARequest_.reqaddcampaigntemplate_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest >(GetArena());
  }
  return ARequest_.reqaddcampaigntemplate_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* Request::mutable_reqaddcampaigntemplate() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate)
  return _internal_mutable_reqaddcampaigntemplate();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest reqAddCampaignTemplateBulk = 7;
inline bool Request::_internal_has_reqaddcampaigntemplatebulk() const {
  return ARequest_case() == kReqAddCampaignTemplateBulk;
}
inline bool Request::has_reqaddcampaigntemplatebulk() const {
  return _internal_has_reqaddcampaigntemplatebulk();
}
inline void Request::set_has_reqaddcampaigntemplatebulk() {
  _oneof_case_[0] = kReqAddCampaignTemplateBulk;
}
inline void Request::clear_reqaddcampaigntemplatebulk() {
  if (_internal_has_reqaddcampaigntemplatebulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddcampaigntemplatebulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Request::release_reqaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
  if (_internal_has_reqaddcampaigntemplatebulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* temp = ARequest_.reqaddcampaigntemplatebulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddcampaigntemplatebulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& Request::_internal_reqaddcampaigntemplatebulk() const {
  return _internal_has_reqaddcampaigntemplatebulk()
      ? *ARequest_.reqaddcampaigntemplatebulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& Request::reqaddcampaigntemplatebulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
  return _internal_reqaddcampaigntemplatebulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Request::unsafe_arena_release_reqaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
  if (_internal_has_reqaddcampaigntemplatebulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* temp = ARequest_.reqaddcampaigntemplatebulk_;
    ARequest_.reqaddcampaigntemplatebulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* reqaddcampaigntemplatebulk) {
  clear_ARequest();
  if (reqaddcampaigntemplatebulk) {
    set_has_reqaddcampaigntemplatebulk();
    ARequest_.reqaddcampaigntemplatebulk_ = reqaddcampaigntemplatebulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Request::_internal_mutable_reqaddcampaigntemplatebulk() {
  if (!_internal_has_reqaddcampaigntemplatebulk()) {
    clear_ARequest();
    set_has_reqaddcampaigntemplatebulk();
    ARequest_.reqaddcampaigntemplatebulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest >(GetArena());
  }
  return ARequest_.reqaddcampaigntemplatebulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* Request::mutable_reqaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk)
  return _internal_mutable_reqaddcampaigntemplatebulk();
}

// .farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest reqAddNewCampaign = 8;
inline bool Request::_internal_has_reqaddnewcampaign() const {
  return ARequest_case() == kReqAddNewCampaign;
}
inline bool Request::has_reqaddnewcampaign() const {
  return _internal_has_reqaddnewcampaign();
}
inline void Request::set_has_reqaddnewcampaign() {
  _oneof_case_[0] = kReqAddNewCampaign;
}
inline void Request::clear_reqaddnewcampaign() {
  if (_internal_has_reqaddnewcampaign()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddnewcampaign_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Request::release_reqaddnewcampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
  if (_internal_has_reqaddnewcampaign()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* temp = ARequest_.reqaddnewcampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddnewcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& Request::_internal_reqaddnewcampaign() const {
  return _internal_has_reqaddnewcampaign()
      ? *ARequest_.reqaddnewcampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_AddNewCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& Request::reqaddnewcampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
  return _internal_reqaddnewcampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Request::unsafe_arena_release_reqaddnewcampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
  if (_internal_has_reqaddnewcampaign()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* temp = ARequest_.reqaddnewcampaign_;
    ARequest_.reqaddnewcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* reqaddnewcampaign) {
  clear_ARequest();
  if (reqaddnewcampaign) {
    set_has_reqaddnewcampaign();
    ARequest_.reqaddnewcampaign_ = reqaddnewcampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Request::_internal_mutable_reqaddnewcampaign() {
  if (!_internal_has_reqaddnewcampaign()) {
    clear_ARequest();
    set_has_reqaddnewcampaign();
    ARequest_.reqaddnewcampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest >(GetArena());
  }
  return ARequest_.reqaddnewcampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* Request::mutable_reqaddnewcampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign)
  return _internal_mutable_reqaddnewcampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest reqAddNewCampaignBulk = 9;
inline bool Request::_internal_has_reqaddnewcampaignbulk() const {
  return ARequest_case() == kReqAddNewCampaignBulk;
}
inline bool Request::has_reqaddnewcampaignbulk() const {
  return _internal_has_reqaddnewcampaignbulk();
}
inline void Request::set_has_reqaddnewcampaignbulk() {
  _oneof_case_[0] = kReqAddNewCampaignBulk;
}
inline void Request::clear_reqaddnewcampaignbulk() {
  if (_internal_has_reqaddnewcampaignbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddnewcampaignbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Request::release_reqaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
  if (_internal_has_reqaddnewcampaignbulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* temp = ARequest_.reqaddnewcampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddnewcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& Request::_internal_reqaddnewcampaignbulk() const {
  return _internal_has_reqaddnewcampaignbulk()
      ? *ARequest_.reqaddnewcampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& Request::reqaddnewcampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
  return _internal_reqaddnewcampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Request::unsafe_arena_release_reqaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
  if (_internal_has_reqaddnewcampaignbulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* temp = ARequest_.reqaddnewcampaignbulk_;
    ARequest_.reqaddnewcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* reqaddnewcampaignbulk) {
  clear_ARequest();
  if (reqaddnewcampaignbulk) {
    set_has_reqaddnewcampaignbulk();
    ARequest_.reqaddnewcampaignbulk_ = reqaddnewcampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Request::_internal_mutable_reqaddnewcampaignbulk() {
  if (!_internal_has_reqaddnewcampaignbulk()) {
    clear_ARequest();
    set_has_reqaddnewcampaignbulk();
    ARequest_.reqaddnewcampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest >(GetArena());
  }
  return ARequest_.reqaddnewcampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* Request::mutable_reqaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk)
  return _internal_mutable_reqaddnewcampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.CampaignRequest reqGetUserList = 10;
inline bool Request::_internal_has_reqgetuserlist() const {
  return ARequest_case() == kReqGetUserList;
}
inline bool Request::has_reqgetuserlist() const {
  return _internal_has_reqgetuserlist();
}
inline void Request::set_has_reqgetuserlist() {
  _oneof_case_[0] = kReqGetUserList;
}
inline void Request::clear_reqgetuserlist() {
  if (_internal_has_reqgetuserlist()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetuserlist_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Request::release_reqgetuserlist() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
  if (_internal_has_reqgetuserlist()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::CampaignRequest* temp = ARequest_.reqgetuserlist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetuserlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& Request::_internal_reqgetuserlist() const {
  return _internal_has_reqgetuserlist()
      ? *ARequest_.reqgetuserlist_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::CampaignRequest&>(::farm::nurture::core::contracts::CampaignService::_CampaignRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& Request::reqgetuserlist() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
  return _internal_reqgetuserlist();
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Request::unsafe_arena_release_reqgetuserlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
  if (_internal_has_reqgetuserlist()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::CampaignRequest* temp = ARequest_.reqgetuserlist_;
    ARequest_.reqgetuserlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignRequest* reqgetuserlist) {
  clear_ARequest();
  if (reqgetuserlist) {
    set_has_reqgetuserlist();
    ARequest_.reqgetuserlist_ = reqgetuserlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Request::_internal_mutable_reqgetuserlist() {
  if (!_internal_has_reqgetuserlist()) {
    clear_ARequest();
    set_has_reqgetuserlist();
    ARequest_.reqgetuserlist_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::CampaignRequest >(GetArena());
  }
  return ARequest_.reqgetuserlist_;
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignRequest* Request::mutable_reqgetuserlist() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqGetUserList)
  return _internal_mutable_reqgetuserlist();
}

// .farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest reqFindCampaignById = 11;
inline bool Request::_internal_has_reqfindcampaignbyid() const {
  return ARequest_case() == kReqFindCampaignById;
}
inline bool Request::has_reqfindcampaignbyid() const {
  return _internal_has_reqfindcampaignbyid();
}
inline void Request::set_has_reqfindcampaignbyid() {
  _oneof_case_[0] = kReqFindCampaignById;
}
inline void Request::clear_reqfindcampaignbyid() {
  if (_internal_has_reqfindcampaignbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfindcampaignbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Request::release_reqfindcampaignbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
  if (_internal_has_reqfindcampaignbyid()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* temp = ARequest_.reqfindcampaignbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfindcampaignbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& Request::_internal_reqfindcampaignbyid() const {
  return _internal_has_reqfindcampaignbyid()
      ? *ARequest_.reqfindcampaignbyid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest&>(::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& Request::reqfindcampaignbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
  return _internal_reqfindcampaignbyid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Request::unsafe_arena_release_reqfindcampaignbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
  if (_internal_has_reqfindcampaignbyid()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* temp = ARequest_.reqfindcampaignbyid_;
    ARequest_.reqfindcampaignbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* reqfindcampaignbyid) {
  clear_ARequest();
  if (reqfindcampaignbyid) {
    set_has_reqfindcampaignbyid();
    ARequest_.reqfindcampaignbyid_ = reqfindcampaignbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Request::_internal_mutable_reqfindcampaignbyid() {
  if (!_internal_has_reqfindcampaignbyid()) {
    clear_ARequest();
    set_has_reqfindcampaignbyid();
    ARequest_.reqfindcampaignbyid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest >(GetArena());
  }
  return ARequest_.reqfindcampaignbyid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* Request::mutable_reqfindcampaignbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById)
  return _internal_mutable_reqfindcampaignbyid();
}

// .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest reqFindCampaignTemplateById = 12;
inline bool Request::_internal_has_reqfindcampaigntemplatebyid() const {
  return ARequest_case() == kReqFindCampaignTemplateById;
}
inline bool Request::has_reqfindcampaigntemplatebyid() const {
  return _internal_has_reqfindcampaigntemplatebyid();
}
inline void Request::set_has_reqfindcampaigntemplatebyid() {
  _oneof_case_[0] = kReqFindCampaignTemplateById;
}
inline void Request::clear_reqfindcampaigntemplatebyid() {
  if (_internal_has_reqfindcampaigntemplatebyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfindcampaigntemplatebyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Request::release_reqfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
  if (_internal_has_reqfindcampaigntemplatebyid()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* temp = ARequest_.reqfindcampaigntemplatebyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfindcampaigntemplatebyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& Request::_internal_reqfindcampaigntemplatebyid() const {
  return _internal_has_reqfindcampaigntemplatebyid()
      ? *ARequest_.reqfindcampaigntemplatebyid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest&>(::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& Request::reqfindcampaigntemplatebyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
  return _internal_reqfindcampaigntemplatebyid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Request::unsafe_arena_release_reqfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
  if (_internal_has_reqfindcampaigntemplatebyid()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* temp = ARequest_.reqfindcampaigntemplatebyid_;
    ARequest_.reqfindcampaigntemplatebyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* reqfindcampaigntemplatebyid) {
  clear_ARequest();
  if (reqfindcampaigntemplatebyid) {
    set_has_reqfindcampaigntemplatebyid();
    ARequest_.reqfindcampaigntemplatebyid_ = reqfindcampaigntemplatebyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Request::_internal_mutable_reqfindcampaigntemplatebyid() {
  if (!_internal_has_reqfindcampaigntemplatebyid()) {
    clear_ARequest();
    set_has_reqfindcampaigntemplatebyid();
    ARequest_.reqfindcampaigntemplatebyid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest >(GetArena());
  }
  return ARequest_.reqfindcampaigntemplatebyid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* Request::mutable_reqfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById)
  return _internal_mutable_reqfindcampaigntemplatebyid();
}

// .farm.nurture.core.contracts.CampaignService.AddTargetUserRequest reqAddTargetUser = 13;
inline bool Request::_internal_has_reqaddtargetuser() const {
  return ARequest_case() == kReqAddTargetUser;
}
inline bool Request::has_reqaddtargetuser() const {
  return _internal_has_reqaddtargetuser();
}
inline void Request::set_has_reqaddtargetuser() {
  _oneof_case_[0] = kReqAddTargetUser;
}
inline void Request::clear_reqaddtargetuser() {
  if (_internal_has_reqaddtargetuser()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddtargetuser_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Request::release_reqaddtargetuser() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
  if (_internal_has_reqaddtargetuser()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* temp = ARequest_.reqaddtargetuser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddtargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& Request::_internal_reqaddtargetuser() const {
  return _internal_has_reqaddtargetuser()
      ? *ARequest_.reqaddtargetuser_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest&>(::farm::nurture::core::contracts::CampaignService::_AddTargetUserRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& Request::reqaddtargetuser() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
  return _internal_reqaddtargetuser();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Request::unsafe_arena_release_reqaddtargetuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
  if (_internal_has_reqaddtargetuser()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* temp = ARequest_.reqaddtargetuser_;
    ARequest_.reqaddtargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* reqaddtargetuser) {
  clear_ARequest();
  if (reqaddtargetuser) {
    set_has_reqaddtargetuser();
    ARequest_.reqaddtargetuser_ = reqaddtargetuser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Request::_internal_mutable_reqaddtargetuser() {
  if (!_internal_has_reqaddtargetuser()) {
    clear_ARequest();
    set_has_reqaddtargetuser();
    ARequest_.reqaddtargetuser_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest >(GetArena());
  }
  return ARequest_.reqaddtargetuser_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* Request::mutable_reqaddtargetuser() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser)
  return _internal_mutable_reqaddtargetuser();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest reqAddTargetUserBulk = 14;
inline bool Request::_internal_has_reqaddtargetuserbulk() const {
  return ARequest_case() == kReqAddTargetUserBulk;
}
inline bool Request::has_reqaddtargetuserbulk() const {
  return _internal_has_reqaddtargetuserbulk();
}
inline void Request::set_has_reqaddtargetuserbulk() {
  _oneof_case_[0] = kReqAddTargetUserBulk;
}
inline void Request::clear_reqaddtargetuserbulk() {
  if (_internal_has_reqaddtargetuserbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddtargetuserbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Request::release_reqaddtargetuserbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
  if (_internal_has_reqaddtargetuserbulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* temp = ARequest_.reqaddtargetuserbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddtargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& Request::_internal_reqaddtargetuserbulk() const {
  return _internal_has_reqaddtargetuserbulk()
      ? *ARequest_.reqaddtargetuserbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& Request::reqaddtargetuserbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
  return _internal_reqaddtargetuserbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Request::unsafe_arena_release_reqaddtargetuserbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
  if (_internal_has_reqaddtargetuserbulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* temp = ARequest_.reqaddtargetuserbulk_;
    ARequest_.reqaddtargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* reqaddtargetuserbulk) {
  clear_ARequest();
  if (reqaddtargetuserbulk) {
    set_has_reqaddtargetuserbulk();
    ARequest_.reqaddtargetuserbulk_ = reqaddtargetuserbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Request::_internal_mutable_reqaddtargetuserbulk() {
  if (!_internal_has_reqaddtargetuserbulk()) {
    clear_ARequest();
    set_has_reqaddtargetuserbulk();
    ARequest_.reqaddtargetuserbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest >(GetArena());
  }
  return ARequest_.reqaddtargetuserbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* Request::mutable_reqaddtargetuserbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk)
  return _internal_mutable_reqaddtargetuserbulk();
}

// .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest reqAddInactionTargetUser = 15;
inline bool Request::_internal_has_reqaddinactiontargetuser() const {
  return ARequest_case() == kReqAddInactionTargetUser;
}
inline bool Request::has_reqaddinactiontargetuser() const {
  return _internal_has_reqaddinactiontargetuser();
}
inline void Request::set_has_reqaddinactiontargetuser() {
  _oneof_case_[0] = kReqAddInactionTargetUser;
}
inline void Request::clear_reqaddinactiontargetuser() {
  if (_internal_has_reqaddinactiontargetuser()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddinactiontargetuser_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Request::release_reqaddinactiontargetuser() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
  if (_internal_has_reqaddinactiontargetuser()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* temp = ARequest_.reqaddinactiontargetuser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddinactiontargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& Request::_internal_reqaddinactiontargetuser() const {
  return _internal_has_reqaddinactiontargetuser()
      ? *ARequest_.reqaddinactiontargetuser_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest&>(::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& Request::reqaddinactiontargetuser() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
  return _internal_reqaddinactiontargetuser();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Request::unsafe_arena_release_reqaddinactiontargetuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
  if (_internal_has_reqaddinactiontargetuser()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* temp = ARequest_.reqaddinactiontargetuser_;
    ARequest_.reqaddinactiontargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* reqaddinactiontargetuser) {
  clear_ARequest();
  if (reqaddinactiontargetuser) {
    set_has_reqaddinactiontargetuser();
    ARequest_.reqaddinactiontargetuser_ = reqaddinactiontargetuser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Request::_internal_mutable_reqaddinactiontargetuser() {
  if (!_internal_has_reqaddinactiontargetuser()) {
    clear_ARequest();
    set_has_reqaddinactiontargetuser();
    ARequest_.reqaddinactiontargetuser_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest >(GetArena());
  }
  return ARequest_.reqaddinactiontargetuser_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* Request::mutable_reqaddinactiontargetuser() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser)
  return _internal_mutable_reqaddinactiontargetuser();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest reqAddInactionTargetUserBulk = 16;
inline bool Request::_internal_has_reqaddinactiontargetuserbulk() const {
  return ARequest_case() == kReqAddInactionTargetUserBulk;
}
inline bool Request::has_reqaddinactiontargetuserbulk() const {
  return _internal_has_reqaddinactiontargetuserbulk();
}
inline void Request::set_has_reqaddinactiontargetuserbulk() {
  _oneof_case_[0] = kReqAddInactionTargetUserBulk;
}
inline void Request::clear_reqaddinactiontargetuserbulk() {
  if (_internal_has_reqaddinactiontargetuserbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddinactiontargetuserbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Request::release_reqaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
  if (_internal_has_reqaddinactiontargetuserbulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* temp = ARequest_.reqaddinactiontargetuserbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddinactiontargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& Request::_internal_reqaddinactiontargetuserbulk() const {
  return _internal_has_reqaddinactiontargetuserbulk()
      ? *ARequest_.reqaddinactiontargetuserbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& Request::reqaddinactiontargetuserbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
  return _internal_reqaddinactiontargetuserbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Request::unsafe_arena_release_reqaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
  if (_internal_has_reqaddinactiontargetuserbulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* temp = ARequest_.reqaddinactiontargetuserbulk_;
    ARequest_.reqaddinactiontargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* reqaddinactiontargetuserbulk) {
  clear_ARequest();
  if (reqaddinactiontargetuserbulk) {
    set_has_reqaddinactiontargetuserbulk();
    ARequest_.reqaddinactiontargetuserbulk_ = reqaddinactiontargetuserbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Request::_internal_mutable_reqaddinactiontargetuserbulk() {
  if (!_internal_has_reqaddinactiontargetuserbulk()) {
    clear_ARequest();
    set_has_reqaddinactiontargetuserbulk();
    ARequest_.reqaddinactiontargetuserbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest >(GetArena());
  }
  return ARequest_.reqaddinactiontargetuserbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* Request::mutable_reqaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk)
  return _internal_mutable_reqaddinactiontargetuserbulk();
}

// .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest reqFindInactionTargetUserByCampaignId = 17;
inline bool Request::_internal_has_reqfindinactiontargetuserbycampaignid() const {
  return ARequest_case() == kReqFindInactionTargetUserByCampaignId;
}
inline bool Request::has_reqfindinactiontargetuserbycampaignid() const {
  return _internal_has_reqfindinactiontargetuserbycampaignid();
}
inline void Request::set_has_reqfindinactiontargetuserbycampaignid() {
  _oneof_case_[0] = kReqFindInactionTargetUserByCampaignId;
}
inline void Request::clear_reqfindinactiontargetuserbycampaignid() {
  if (_internal_has_reqfindinactiontargetuserbycampaignid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfindinactiontargetuserbycampaignid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Request::release_reqfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
  if (_internal_has_reqfindinactiontargetuserbycampaignid()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* temp = ARequest_.reqfindinactiontargetuserbycampaignid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfindinactiontargetuserbycampaignid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& Request::_internal_reqfindinactiontargetuserbycampaignid() const {
  return _internal_has_reqfindinactiontargetuserbycampaignid()
      ? *ARequest_.reqfindinactiontargetuserbycampaignid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest&>(::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& Request::reqfindinactiontargetuserbycampaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
  return _internal_reqfindinactiontargetuserbycampaignid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Request::unsafe_arena_release_reqfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
  if (_internal_has_reqfindinactiontargetuserbycampaignid()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* temp = ARequest_.reqfindinactiontargetuserbycampaignid_;
    ARequest_.reqfindinactiontargetuserbycampaignid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* reqfindinactiontargetuserbycampaignid) {
  clear_ARequest();
  if (reqfindinactiontargetuserbycampaignid) {
    set_has_reqfindinactiontargetuserbycampaignid();
    ARequest_.reqfindinactiontargetuserbycampaignid_ = reqfindinactiontargetuserbycampaignid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Request::_internal_mutable_reqfindinactiontargetuserbycampaignid() {
  if (!_internal_has_reqfindinactiontargetuserbycampaignid()) {
    clear_ARequest();
    set_has_reqfindinactiontargetuserbycampaignid();
    ARequest_.reqfindinactiontargetuserbycampaignid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest >(GetArena());
  }
  return ARequest_.reqfindinactiontargetuserbycampaignid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* Request::mutable_reqfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId)
  return _internal_mutable_reqfindinactiontargetuserbycampaignid();
}

// .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest reqGetDynamicDataByKey = 18;
inline bool Request::_internal_has_reqgetdynamicdatabykey() const {
  return ARequest_case() == kReqGetDynamicDataByKey;
}
inline bool Request::has_reqgetdynamicdatabykey() const {
  return _internal_has_reqgetdynamicdatabykey();
}
inline void Request::set_has_reqgetdynamicdatabykey() {
  _oneof_case_[0] = kReqGetDynamicDataByKey;
}
inline void Request::clear_reqgetdynamicdatabykey() {
  if (_internal_has_reqgetdynamicdatabykey()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetdynamicdatabykey_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Request::release_reqgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
  if (_internal_has_reqgetdynamicdatabykey()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* temp = ARequest_.reqgetdynamicdatabykey_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetdynamicdatabykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest& Request::_internal_reqgetdynamicdatabykey() const {
  return _internal_has_reqgetdynamicdatabykey()
      ? *ARequest_.reqgetdynamicdatabykey_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest&>(::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest& Request::reqgetdynamicdatabykey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
  return _internal_reqgetdynamicdatabykey();
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Request::unsafe_arena_release_reqgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
  if (_internal_has_reqgetdynamicdatabykey()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* temp = ARequest_.reqgetdynamicdatabykey_;
    ARequest_.reqgetdynamicdatabykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* reqgetdynamicdatabykey) {
  clear_ARequest();
  if (reqgetdynamicdatabykey) {
    set_has_reqgetdynamicdatabykey();
    ARequest_.reqgetdynamicdatabykey_ = reqgetdynamicdatabykey;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Request::_internal_mutable_reqgetdynamicdatabykey() {
  if (!_internal_has_reqgetdynamicdatabykey()) {
    clear_ARequest();
    set_has_reqgetdynamicdatabykey();
    ARequest_.reqgetdynamicdatabykey_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest >(GetArena());
  }
  return ARequest_.reqgetdynamicdatabykey_;
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyRequest* Request::mutable_reqgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey)
  return _internal_mutable_reqgetdynamicdatabykey();
}

// .farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest reqAddDynamicData = 19;
inline bool Request::_internal_has_reqadddynamicdata() const {
  return ARequest_case() == kReqAddDynamicData;
}
inline bool Request::has_reqadddynamicdata() const {
  return _internal_has_reqadddynamicdata();
}
inline void Request::set_has_reqadddynamicdata() {
  _oneof_case_[0] = kReqAddDynamicData;
}
inline void Request::clear_reqadddynamicdata() {
  if (_internal_has_reqadddynamicdata()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqadddynamicdata_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Request::release_reqadddynamicdata() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
  if (_internal_has_reqadddynamicdata()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* temp = ARequest_.reqadddynamicdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqadddynamicdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& Request::_internal_reqadddynamicdata() const {
  return _internal_has_reqadddynamicdata()
      ? *ARequest_.reqadddynamicdata_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest&>(::farm::nurture::core::contracts::CampaignService::_AddDynamicDataRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest& Request::reqadddynamicdata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
  return _internal_reqadddynamicdata();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Request::unsafe_arena_release_reqadddynamicdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
  if (_internal_has_reqadddynamicdata()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* temp = ARequest_.reqadddynamicdata_;
    ARequest_.reqadddynamicdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* reqadddynamicdata) {
  clear_ARequest();
  if (reqadddynamicdata) {
    set_has_reqadddynamicdata();
    ARequest_.reqadddynamicdata_ = reqadddynamicdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Request::_internal_mutable_reqadddynamicdata() {
  if (!_internal_has_reqadddynamicdata()) {
    clear_ARequest();
    set_has_reqadddynamicdata();
    ARequest_.reqadddynamicdata_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest >(GetArena());
  }
  return ARequest_.reqadddynamicdata_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataRequest* Request::mutable_reqadddynamicdata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData)
  return _internal_mutable_reqadddynamicdata();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest reqAddDynamicDataBulk = 20;
inline bool Request::_internal_has_reqadddynamicdatabulk() const {
  return ARequest_case() == kReqAddDynamicDataBulk;
}
inline bool Request::has_reqadddynamicdatabulk() const {
  return _internal_has_reqadddynamicdatabulk();
}
inline void Request::set_has_reqadddynamicdatabulk() {
  _oneof_case_[0] = kReqAddDynamicDataBulk;
}
inline void Request::clear_reqadddynamicdatabulk() {
  if (_internal_has_reqadddynamicdatabulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqadddynamicdatabulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Request::release_reqadddynamicdatabulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
  if (_internal_has_reqadddynamicdatabulk()) {
    clear_has_ARequest();
      ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* temp = ARequest_.reqadddynamicdatabulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqadddynamicdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest& Request::_internal_reqadddynamicdatabulk() const {
  return _internal_has_reqadddynamicdatabulk()
      ? *ARequest_.reqadddynamicdatabulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest&>(::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataRequest_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest& Request::reqadddynamicdatabulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
  return _internal_reqadddynamicdatabulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Request::unsafe_arena_release_reqadddynamicdatabulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
  if (_internal_has_reqadddynamicdatabulk()) {
    clear_has_ARequest();
    ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* temp = ARequest_.reqadddynamicdatabulk_;
    ARequest_.reqadddynamicdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* reqadddynamicdatabulk) {
  clear_ARequest();
  if (reqadddynamicdatabulk) {
    set_has_reqadddynamicdatabulk();
    ARequest_.reqadddynamicdatabulk_ = reqadddynamicdatabulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Request::_internal_mutable_reqadddynamicdatabulk() {
  if (!_internal_has_reqadddynamicdatabulk()) {
    clear_ARequest();
    set_has_reqadddynamicdatabulk();
    ARequest_.reqadddynamicdatabulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest >(GetArena());
  }
  return ARequest_.reqadddynamicdatabulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataRequest* Request::mutable_reqadddynamicdatabulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk)
  return _internal_mutable_reqadddynamicdatabulk();
}

inline bool Request::has_ARequest() const {
  return ARequest_case() != AREQUEST_NOT_SET;
}
inline void Request::clear_has_ARequest() {
  _oneof_case_[0] = AREQUEST_NOT_SET;
}
inline Request::ARequestCase Request::ARequest_case() const {
  return Request::ARequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultiResponses

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool MultiResponses::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiResponses::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MultiResponses::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MultiResponses::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.MultiResponses.status)
  return _internal_status();
}
inline void MultiResponses::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.MultiResponses.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.MultiResponses.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.MultiResponses.status)
  return _internal_mutable_status();
}
inline void MultiResponses::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.MultiResponses.status)
}

// repeated .farm.nurture.core.contracts.CampaignService.Response response = 2;
inline int MultiResponses::_internal_response_size() const {
  return response_.size();
}
inline int MultiResponses::response_size() const {
  return _internal_response_size();
}
inline void MultiResponses::clear_response() {
  response_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::Response* MultiResponses::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.MultiResponses.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Response >*
MultiResponses::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.MultiResponses.response)
  return &response_;
}
inline const ::farm::nurture::core::contracts::CampaignService::Response& MultiResponses::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::Response& MultiResponses::response(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.MultiResponses.response)
  return _internal_response(index);
}
inline ::farm::nurture::core::contracts::CampaignService::Response* MultiResponses::_internal_add_response() {
  return response_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::Response* MultiResponses::add_response() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.MultiResponses.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::Response >&
MultiResponses::response() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.MultiResponses.response)
  return response_;
}

// -------------------------------------------------------------------

// Response

// string index = 1;
inline void Response::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Response::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.index)
  return _internal_index();
}
inline void Response::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.Response.index)
}
inline std::string* Response::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.index)
  return _internal_mutable_index();
}
inline const std::string& Response::_internal_index() const {
  return index_.Get();
}
inline void Response::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.Response.index)
}
inline void Response::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.Response.index)
}
inline void Response::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.Response.index)
}
inline std::string* Response::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.index)
}

// .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
inline bool Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Response::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Response::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.status)
  return _internal_status();
}
inline void Response::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.status)
  return _internal_mutable_status();
}
inline void Response::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.Response.status)
}

// .farm.nurture.core.contracts.CampaignService.AddCampaignResponse resAddCampaign = 3;
inline bool Response::_internal_has_resaddcampaign() const {
  return AResponse_case() == kResAddCampaign;
}
inline bool Response::has_resaddcampaign() const {
  return _internal_has_resaddcampaign();
}
inline void Response::set_has_resaddcampaign() {
  _oneof_case_[0] = kResAddCampaign;
}
inline void Response::clear_resaddcampaign() {
  if (_internal_has_resaddcampaign()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddcampaign_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Response::release_resaddcampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
  if (_internal_has_resaddcampaign()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* temp = AResponse_.resaddcampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& Response::_internal_resaddcampaign() const {
  return _internal_has_resaddcampaign()
      ? *AResponse_.resaddcampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_AddCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse& Response::resaddcampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
  return _internal_resaddcampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Response::unsafe_arena_release_resaddcampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
  if (_internal_has_resaddcampaign()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* temp = AResponse_.resaddcampaign_;
    AResponse_.resaddcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddcampaign(::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* resaddcampaign) {
  clear_AResponse();
  if (resaddcampaign) {
    set_has_resaddcampaign();
    AResponse_.resaddcampaign_ = resaddcampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Response::_internal_mutable_resaddcampaign() {
  if (!_internal_has_resaddcampaign()) {
    clear_AResponse();
    set_has_resaddcampaign();
    AResponse_.resaddcampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse >(GetArena());
  }
  return AResponse_.resaddcampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* Response::mutable_resaddcampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddCampaign)
  return _internal_mutable_resaddcampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse resAddCampaignBulk = 4;
inline bool Response::_internal_has_resaddcampaignbulk() const {
  return AResponse_case() == kResAddCampaignBulk;
}
inline bool Response::has_resaddcampaignbulk() const {
  return _internal_has_resaddcampaignbulk();
}
inline void Response::set_has_resaddcampaignbulk() {
  _oneof_case_[0] = kResAddCampaignBulk;
}
inline void Response::clear_resaddcampaignbulk() {
  if (_internal_has_resaddcampaignbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddcampaignbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Response::release_resaddcampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
  if (_internal_has_resaddcampaignbulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* temp = AResponse_.resaddcampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse& Response::_internal_resaddcampaignbulk() const {
  return _internal_has_resaddcampaignbulk()
      ? *AResponse_.resaddcampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse& Response::resaddcampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
  return _internal_resaddcampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Response::unsafe_arena_release_resaddcampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
  if (_internal_has_resaddcampaignbulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* temp = AResponse_.resaddcampaignbulk_;
    AResponse_.resaddcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* resaddcampaignbulk) {
  clear_AResponse();
  if (resaddcampaignbulk) {
    set_has_resaddcampaignbulk();
    AResponse_.resaddcampaignbulk_ = resaddcampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Response::_internal_mutable_resaddcampaignbulk() {
  if (!_internal_has_resaddcampaignbulk()) {
    clear_AResponse();
    set_has_resaddcampaignbulk();
    AResponse_.resaddcampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse >(GetArena());
  }
  return AResponse_.resaddcampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* Response::mutable_resaddcampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk)
  return _internal_mutable_resaddcampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse resUpdateCampaign = 5;
inline bool Response::_internal_has_resupdatecampaign() const {
  return AResponse_case() == kResUpdateCampaign;
}
inline bool Response::has_resupdatecampaign() const {
  return _internal_has_resupdatecampaign();
}
inline void Response::set_has_resupdatecampaign() {
  _oneof_case_[0] = kResUpdateCampaign;
}
inline void Response::clear_resupdatecampaign() {
  if (_internal_has_resupdatecampaign()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatecampaign_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Response::release_resupdatecampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
  if (_internal_has_resupdatecampaign()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* temp = AResponse_.resupdatecampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatecampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& Response::_internal_resupdatecampaign() const {
  return _internal_has_resupdatecampaign()
      ? *AResponse_.resupdatecampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_UpdateCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse& Response::resupdatecampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
  return _internal_resupdatecampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Response::unsafe_arena_release_resupdatecampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
  if (_internal_has_resupdatecampaign()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* temp = AResponse_.resupdatecampaign_;
    AResponse_.resupdatecampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatecampaign(::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* resupdatecampaign) {
  clear_AResponse();
  if (resupdatecampaign) {
    set_has_resupdatecampaign();
    AResponse_.resupdatecampaign_ = resupdatecampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Response::_internal_mutable_resupdatecampaign() {
  if (!_internal_has_resupdatecampaign()) {
    clear_AResponse();
    set_has_resupdatecampaign();
    AResponse_.resupdatecampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse >(GetArena());
  }
  return AResponse_.resupdatecampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* Response::mutable_resupdatecampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign)
  return _internal_mutable_resupdatecampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse resUpdateCampaignBulk = 6;
inline bool Response::_internal_has_resupdatecampaignbulk() const {
  return AResponse_case() == kResUpdateCampaignBulk;
}
inline bool Response::has_resupdatecampaignbulk() const {
  return _internal_has_resupdatecampaignbulk();
}
inline void Response::set_has_resupdatecampaignbulk() {
  _oneof_case_[0] = kResUpdateCampaignBulk;
}
inline void Response::clear_resupdatecampaignbulk() {
  if (_internal_has_resupdatecampaignbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatecampaignbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Response::release_resupdatecampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
  if (_internal_has_resupdatecampaignbulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* temp = AResponse_.resupdatecampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatecampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse& Response::_internal_resupdatecampaignbulk() const {
  return _internal_has_resupdatecampaignbulk()
      ? *AResponse_.resupdatecampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkUpdateCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse& Response::resupdatecampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
  return _internal_resupdatecampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Response::unsafe_arena_release_resupdatecampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
  if (_internal_has_resupdatecampaignbulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* temp = AResponse_.resupdatecampaignbulk_;
    AResponse_.resupdatecampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatecampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* resupdatecampaignbulk) {
  clear_AResponse();
  if (resupdatecampaignbulk) {
    set_has_resupdatecampaignbulk();
    AResponse_.resupdatecampaignbulk_ = resupdatecampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Response::_internal_mutable_resupdatecampaignbulk() {
  if (!_internal_has_resupdatecampaignbulk()) {
    clear_AResponse();
    set_has_resupdatecampaignbulk();
    AResponse_.resupdatecampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse >(GetArena());
  }
  return AResponse_.resupdatecampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* Response::mutable_resupdatecampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk)
  return _internal_mutable_resupdatecampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse resAddCampaignTemplate = 7;
inline bool Response::_internal_has_resaddcampaigntemplate() const {
  return AResponse_case() == kResAddCampaignTemplate;
}
inline bool Response::has_resaddcampaigntemplate() const {
  return _internal_has_resaddcampaigntemplate();
}
inline void Response::set_has_resaddcampaigntemplate() {
  _oneof_case_[0] = kResAddCampaignTemplate;
}
inline void Response::clear_resaddcampaigntemplate() {
  if (_internal_has_resaddcampaigntemplate()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddcampaigntemplate_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Response::release_resaddcampaigntemplate() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
  if (_internal_has_resaddcampaigntemplate()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* temp = AResponse_.resaddcampaigntemplate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddcampaigntemplate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& Response::_internal_resaddcampaigntemplate() const {
  return _internal_has_resaddcampaigntemplate()
      ? *AResponse_.resaddcampaigntemplate_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse&>(::farm::nurture::core::contracts::CampaignService::_AddCampaignTemplateResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse& Response::resaddcampaigntemplate() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
  return _internal_resaddcampaigntemplate();
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Response::unsafe_arena_release_resaddcampaigntemplate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
  if (_internal_has_resaddcampaigntemplate()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* temp = AResponse_.resaddcampaigntemplate_;
    AResponse_.resaddcampaigntemplate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddcampaigntemplate(::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* resaddcampaigntemplate) {
  clear_AResponse();
  if (resaddcampaigntemplate) {
    set_has_resaddcampaigntemplate();
    AResponse_.resaddcampaigntemplate_ = resaddcampaigntemplate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Response::_internal_mutable_resaddcampaigntemplate() {
  if (!_internal_has_resaddcampaigntemplate()) {
    clear_AResponse();
    set_has_resaddcampaigntemplate();
    AResponse_.resaddcampaigntemplate_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse >(GetArena());
  }
  return AResponse_.resaddcampaigntemplate_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* Response::mutable_resaddcampaigntemplate() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate)
  return _internal_mutable_resaddcampaigntemplate();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse resAddCampaignTemplateBulk = 8;
inline bool Response::_internal_has_resaddcampaigntemplatebulk() const {
  return AResponse_case() == kResAddCampaignTemplateBulk;
}
inline bool Response::has_resaddcampaigntemplatebulk() const {
  return _internal_has_resaddcampaigntemplatebulk();
}
inline void Response::set_has_resaddcampaigntemplatebulk() {
  _oneof_case_[0] = kResAddCampaignTemplateBulk;
}
inline void Response::clear_resaddcampaigntemplatebulk() {
  if (_internal_has_resaddcampaigntemplatebulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddcampaigntemplatebulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Response::release_resaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
  if (_internal_has_resaddcampaigntemplatebulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* temp = AResponse_.resaddcampaigntemplatebulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddcampaigntemplatebulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse& Response::_internal_resaddcampaigntemplatebulk() const {
  return _internal_has_resaddcampaigntemplatebulk()
      ? *AResponse_.resaddcampaigntemplatebulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddCampaignTemplateResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse& Response::resaddcampaigntemplatebulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
  return _internal_resaddcampaigntemplatebulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Response::unsafe_arena_release_resaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
  if (_internal_has_resaddcampaigntemplatebulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* temp = AResponse_.resaddcampaigntemplatebulk_;
    AResponse_.resaddcampaigntemplatebulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddcampaigntemplatebulk(::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* resaddcampaigntemplatebulk) {
  clear_AResponse();
  if (resaddcampaigntemplatebulk) {
    set_has_resaddcampaigntemplatebulk();
    AResponse_.resaddcampaigntemplatebulk_ = resaddcampaigntemplatebulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Response::_internal_mutable_resaddcampaigntemplatebulk() {
  if (!_internal_has_resaddcampaigntemplatebulk()) {
    clear_AResponse();
    set_has_resaddcampaigntemplatebulk();
    AResponse_.resaddcampaigntemplatebulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse >(GetArena());
  }
  return AResponse_.resaddcampaigntemplatebulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* Response::mutable_resaddcampaigntemplatebulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk)
  return _internal_mutable_resaddcampaigntemplatebulk();
}

// .farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse resAddNewCampaign = 9;
inline bool Response::_internal_has_resaddnewcampaign() const {
  return AResponse_case() == kResAddNewCampaign;
}
inline bool Response::has_resaddnewcampaign() const {
  return _internal_has_resaddnewcampaign();
}
inline void Response::set_has_resaddnewcampaign() {
  _oneof_case_[0] = kResAddNewCampaign;
}
inline void Response::clear_resaddnewcampaign() {
  if (_internal_has_resaddnewcampaign()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddnewcampaign_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Response::release_resaddnewcampaign() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
  if (_internal_has_resaddnewcampaign()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* temp = AResponse_.resaddnewcampaign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddnewcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& Response::_internal_resaddnewcampaign() const {
  return _internal_has_resaddnewcampaign()
      ? *AResponse_.resaddnewcampaign_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_AddNewCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse& Response::resaddnewcampaign() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
  return _internal_resaddnewcampaign();
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Response::unsafe_arena_release_resaddnewcampaign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
  if (_internal_has_resaddnewcampaign()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* temp = AResponse_.resaddnewcampaign_;
    AResponse_.resaddnewcampaign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddnewcampaign(::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* resaddnewcampaign) {
  clear_AResponse();
  if (resaddnewcampaign) {
    set_has_resaddnewcampaign();
    AResponse_.resaddnewcampaign_ = resaddnewcampaign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Response::_internal_mutable_resaddnewcampaign() {
  if (!_internal_has_resaddnewcampaign()) {
    clear_AResponse();
    set_has_resaddnewcampaign();
    AResponse_.resaddnewcampaign_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse >(GetArena());
  }
  return AResponse_.resaddnewcampaign_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* Response::mutable_resaddnewcampaign() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign)
  return _internal_mutable_resaddnewcampaign();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse resAddNewCampaignBulk = 10;
inline bool Response::_internal_has_resaddnewcampaignbulk() const {
  return AResponse_case() == kResAddNewCampaignBulk;
}
inline bool Response::has_resaddnewcampaignbulk() const {
  return _internal_has_resaddnewcampaignbulk();
}
inline void Response::set_has_resaddnewcampaignbulk() {
  _oneof_case_[0] = kResAddNewCampaignBulk;
}
inline void Response::clear_resaddnewcampaignbulk() {
  if (_internal_has_resaddnewcampaignbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddnewcampaignbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Response::release_resaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
  if (_internal_has_resaddnewcampaignbulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* temp = AResponse_.resaddnewcampaignbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddnewcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse& Response::_internal_resaddnewcampaignbulk() const {
  return _internal_has_resaddnewcampaignbulk()
      ? *AResponse_.resaddnewcampaignbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddNewCampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse& Response::resaddnewcampaignbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
  return _internal_resaddnewcampaignbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Response::unsafe_arena_release_resaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
  if (_internal_has_resaddnewcampaignbulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* temp = AResponse_.resaddnewcampaignbulk_;
    AResponse_.resaddnewcampaignbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddnewcampaignbulk(::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* resaddnewcampaignbulk) {
  clear_AResponse();
  if (resaddnewcampaignbulk) {
    set_has_resaddnewcampaignbulk();
    AResponse_.resaddnewcampaignbulk_ = resaddnewcampaignbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Response::_internal_mutable_resaddnewcampaignbulk() {
  if (!_internal_has_resaddnewcampaignbulk()) {
    clear_AResponse();
    set_has_resaddnewcampaignbulk();
    AResponse_.resaddnewcampaignbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse >(GetArena());
  }
  return AResponse_.resaddnewcampaignbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* Response::mutable_resaddnewcampaignbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk)
  return _internal_mutable_resaddnewcampaignbulk();
}

// .farm.nurture.core.contracts.CampaignService.CampaignResponse resGetUserList = 11;
inline bool Response::_internal_has_resgetuserlist() const {
  return AResponse_case() == kResGetUserList;
}
inline bool Response::has_resgetuserlist() const {
  return _internal_has_resgetuserlist();
}
inline void Response::set_has_resgetuserlist() {
  _oneof_case_[0] = kResGetUserList;
}
inline void Response::clear_resgetuserlist() {
  if (_internal_has_resgetuserlist()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetuserlist_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Response::release_resgetuserlist() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
  if (_internal_has_resgetuserlist()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::CampaignResponse* temp = AResponse_.resgetuserlist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetuserlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::CampaignResponse& Response::_internal_resgetuserlist() const {
  return _internal_has_resgetuserlist()
      ? *AResponse_.resgetuserlist_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::CampaignResponse&>(::farm::nurture::core::contracts::CampaignService::_CampaignResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::CampaignResponse& Response::resgetuserlist() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
  return _internal_resgetuserlist();
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Response::unsafe_arena_release_resgetuserlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
  if (_internal_has_resgetuserlist()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::CampaignResponse* temp = AResponse_.resgetuserlist_;
    AResponse_.resgetuserlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetuserlist(::farm::nurture::core::contracts::CampaignService::CampaignResponse* resgetuserlist) {
  clear_AResponse();
  if (resgetuserlist) {
    set_has_resgetuserlist();
    AResponse_.resgetuserlist_ = resgetuserlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Response::_internal_mutable_resgetuserlist() {
  if (!_internal_has_resgetuserlist()) {
    clear_AResponse();
    set_has_resgetuserlist();
    AResponse_.resgetuserlist_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::CampaignResponse >(GetArena());
  }
  return AResponse_.resgetuserlist_;
}
inline ::farm::nurture::core::contracts::CampaignService::CampaignResponse* Response::mutable_resgetuserlist() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resGetUserList)
  return _internal_mutable_resgetuserlist();
}

// .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse resFindCampaignById = 12;
inline bool Response::_internal_has_resfindcampaignbyid() const {
  return AResponse_case() == kResFindCampaignById;
}
inline bool Response::has_resfindcampaignbyid() const {
  return _internal_has_resfindcampaignbyid();
}
inline void Response::set_has_resfindcampaignbyid() {
  _oneof_case_[0] = kResFindCampaignById;
}
inline void Response::clear_resfindcampaignbyid() {
  if (_internal_has_resfindcampaignbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfindcampaignbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Response::release_resfindcampaignbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
  if (_internal_has_resfindcampaignbyid()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* temp = AResponse_.resfindcampaignbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfindcampaignbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse& Response::_internal_resfindcampaignbyid() const {
  return _internal_has_resfindcampaignbyid()
      ? *AResponse_.resfindcampaignbyid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse&>(::farm::nurture::core::contracts::CampaignService::_FindCampaignByIdResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse& Response::resfindcampaignbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
  return _internal_resfindcampaignbyid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Response::unsafe_arena_release_resfindcampaignbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
  if (_internal_has_resfindcampaignbyid()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* temp = AResponse_.resfindcampaignbyid_;
    AResponse_.resfindcampaignbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfindcampaignbyid(::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* resfindcampaignbyid) {
  clear_AResponse();
  if (resfindcampaignbyid) {
    set_has_resfindcampaignbyid();
    AResponse_.resfindcampaignbyid_ = resfindcampaignbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Response::_internal_mutable_resfindcampaignbyid() {
  if (!_internal_has_resfindcampaignbyid()) {
    clear_AResponse();
    set_has_resfindcampaignbyid();
    AResponse_.resfindcampaignbyid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse >(GetArena());
  }
  return AResponse_.resfindcampaignbyid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* Response::mutable_resfindcampaignbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById)
  return _internal_mutable_resfindcampaignbyid();
}

// .farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse resFindCampaignTemplateById = 13;
inline bool Response::_internal_has_resfindcampaigntemplatebyid() const {
  return AResponse_case() == kResFindCampaignTemplateById;
}
inline bool Response::has_resfindcampaigntemplatebyid() const {
  return _internal_has_resfindcampaigntemplatebyid();
}
inline void Response::set_has_resfindcampaigntemplatebyid() {
  _oneof_case_[0] = kResFindCampaignTemplateById;
}
inline void Response::clear_resfindcampaigntemplatebyid() {
  if (_internal_has_resfindcampaigntemplatebyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfindcampaigntemplatebyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Response::release_resfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
  if (_internal_has_resfindcampaigntemplatebyid()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* temp = AResponse_.resfindcampaigntemplatebyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfindcampaigntemplatebyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse& Response::_internal_resfindcampaigntemplatebyid() const {
  return _internal_has_resfindcampaigntemplatebyid()
      ? *AResponse_.resfindcampaigntemplatebyid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse&>(::farm::nurture::core::contracts::CampaignService::_FindCampaignTemplateByIdResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse& Response::resfindcampaigntemplatebyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
  return _internal_resfindcampaigntemplatebyid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Response::unsafe_arena_release_resfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
  if (_internal_has_resfindcampaigntemplatebyid()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* temp = AResponse_.resfindcampaigntemplatebyid_;
    AResponse_.resfindcampaigntemplatebyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfindcampaigntemplatebyid(::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* resfindcampaigntemplatebyid) {
  clear_AResponse();
  if (resfindcampaigntemplatebyid) {
    set_has_resfindcampaigntemplatebyid();
    AResponse_.resfindcampaigntemplatebyid_ = resfindcampaigntemplatebyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Response::_internal_mutable_resfindcampaigntemplatebyid() {
  if (!_internal_has_resfindcampaigntemplatebyid()) {
    clear_AResponse();
    set_has_resfindcampaigntemplatebyid();
    AResponse_.resfindcampaigntemplatebyid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse >(GetArena());
  }
  return AResponse_.resfindcampaigntemplatebyid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* Response::mutable_resfindcampaigntemplatebyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById)
  return _internal_mutable_resfindcampaigntemplatebyid();
}

// .farm.nurture.core.contracts.CampaignService.AddTargetUserResponse resAddTargetUser = 14;
inline bool Response::_internal_has_resaddtargetuser() const {
  return AResponse_case() == kResAddTargetUser;
}
inline bool Response::has_resaddtargetuser() const {
  return _internal_has_resaddtargetuser();
}
inline void Response::set_has_resaddtargetuser() {
  _oneof_case_[0] = kResAddTargetUser;
}
inline void Response::clear_resaddtargetuser() {
  if (_internal_has_resaddtargetuser()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddtargetuser_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Response::release_resaddtargetuser() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
  if (_internal_has_resaddtargetuser()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* temp = AResponse_.resaddtargetuser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddtargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& Response::_internal_resaddtargetuser() const {
  return _internal_has_resaddtargetuser()
      ? *AResponse_.resaddtargetuser_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse&>(::farm::nurture::core::contracts::CampaignService::_AddTargetUserResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse& Response::resaddtargetuser() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
  return _internal_resaddtargetuser();
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Response::unsafe_arena_release_resaddtargetuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
  if (_internal_has_resaddtargetuser()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* temp = AResponse_.resaddtargetuser_;
    AResponse_.resaddtargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddtargetuser(::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* resaddtargetuser) {
  clear_AResponse();
  if (resaddtargetuser) {
    set_has_resaddtargetuser();
    AResponse_.resaddtargetuser_ = resaddtargetuser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Response::_internal_mutable_resaddtargetuser() {
  if (!_internal_has_resaddtargetuser()) {
    clear_AResponse();
    set_has_resaddtargetuser();
    AResponse_.resaddtargetuser_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse >(GetArena());
  }
  return AResponse_.resaddtargetuser_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* Response::mutable_resaddtargetuser() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser)
  return _internal_mutable_resaddtargetuser();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse resAddTargetUserBulk = 15;
inline bool Response::_internal_has_resaddtargetuserbulk() const {
  return AResponse_case() == kResAddTargetUserBulk;
}
inline bool Response::has_resaddtargetuserbulk() const {
  return _internal_has_resaddtargetuserbulk();
}
inline void Response::set_has_resaddtargetuserbulk() {
  _oneof_case_[0] = kResAddTargetUserBulk;
}
inline void Response::clear_resaddtargetuserbulk() {
  if (_internal_has_resaddtargetuserbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddtargetuserbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Response::release_resaddtargetuserbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
  if (_internal_has_resaddtargetuserbulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* temp = AResponse_.resaddtargetuserbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddtargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse& Response::_internal_resaddtargetuserbulk() const {
  return _internal_has_resaddtargetuserbulk()
      ? *AResponse_.resaddtargetuserbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddTargetUserResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse& Response::resaddtargetuserbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
  return _internal_resaddtargetuserbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Response::unsafe_arena_release_resaddtargetuserbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
  if (_internal_has_resaddtargetuserbulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* temp = AResponse_.resaddtargetuserbulk_;
    AResponse_.resaddtargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddtargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* resaddtargetuserbulk) {
  clear_AResponse();
  if (resaddtargetuserbulk) {
    set_has_resaddtargetuserbulk();
    AResponse_.resaddtargetuserbulk_ = resaddtargetuserbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Response::_internal_mutable_resaddtargetuserbulk() {
  if (!_internal_has_resaddtargetuserbulk()) {
    clear_AResponse();
    set_has_resaddtargetuserbulk();
    AResponse_.resaddtargetuserbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse >(GetArena());
  }
  return AResponse_.resaddtargetuserbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* Response::mutable_resaddtargetuserbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk)
  return _internal_mutable_resaddtargetuserbulk();
}

// .farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse resAddInactionTargetUser = 16;
inline bool Response::_internal_has_resaddinactiontargetuser() const {
  return AResponse_case() == kResAddInactionTargetUser;
}
inline bool Response::has_resaddinactiontargetuser() const {
  return _internal_has_resaddinactiontargetuser();
}
inline void Response::set_has_resaddinactiontargetuser() {
  _oneof_case_[0] = kResAddInactionTargetUser;
}
inline void Response::clear_resaddinactiontargetuser() {
  if (_internal_has_resaddinactiontargetuser()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddinactiontargetuser_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Response::release_resaddinactiontargetuser() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
  if (_internal_has_resaddinactiontargetuser()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* temp = AResponse_.resaddinactiontargetuser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddinactiontargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& Response::_internal_resaddinactiontargetuser() const {
  return _internal_has_resaddinactiontargetuser()
      ? *AResponse_.resaddinactiontargetuser_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse&>(::farm::nurture::core::contracts::CampaignService::_AddInactionTargetUserResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse& Response::resaddinactiontargetuser() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
  return _internal_resaddinactiontargetuser();
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Response::unsafe_arena_release_resaddinactiontargetuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
  if (_internal_has_resaddinactiontargetuser()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* temp = AResponse_.resaddinactiontargetuser_;
    AResponse_.resaddinactiontargetuser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddinactiontargetuser(::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* resaddinactiontargetuser) {
  clear_AResponse();
  if (resaddinactiontargetuser) {
    set_has_resaddinactiontargetuser();
    AResponse_.resaddinactiontargetuser_ = resaddinactiontargetuser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Response::_internal_mutable_resaddinactiontargetuser() {
  if (!_internal_has_resaddinactiontargetuser()) {
    clear_AResponse();
    set_has_resaddinactiontargetuser();
    AResponse_.resaddinactiontargetuser_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse >(GetArena());
  }
  return AResponse_.resaddinactiontargetuser_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* Response::mutable_resaddinactiontargetuser() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser)
  return _internal_mutable_resaddinactiontargetuser();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse resAddInactionTargetUserBulk = 17;
inline bool Response::_internal_has_resaddinactiontargetuserbulk() const {
  return AResponse_case() == kResAddInactionTargetUserBulk;
}
inline bool Response::has_resaddinactiontargetuserbulk() const {
  return _internal_has_resaddinactiontargetuserbulk();
}
inline void Response::set_has_resaddinactiontargetuserbulk() {
  _oneof_case_[0] = kResAddInactionTargetUserBulk;
}
inline void Response::clear_resaddinactiontargetuserbulk() {
  if (_internal_has_resaddinactiontargetuserbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddinactiontargetuserbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Response::release_resaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
  if (_internal_has_resaddinactiontargetuserbulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* temp = AResponse_.resaddinactiontargetuserbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddinactiontargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse& Response::_internal_resaddinactiontargetuserbulk() const {
  return _internal_has_resaddinactiontargetuserbulk()
      ? *AResponse_.resaddinactiontargetuserbulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddInactionTargetUserResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse& Response::resaddinactiontargetuserbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
  return _internal_resaddinactiontargetuserbulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Response::unsafe_arena_release_resaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
  if (_internal_has_resaddinactiontargetuserbulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* temp = AResponse_.resaddinactiontargetuserbulk_;
    AResponse_.resaddinactiontargetuserbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddinactiontargetuserbulk(::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* resaddinactiontargetuserbulk) {
  clear_AResponse();
  if (resaddinactiontargetuserbulk) {
    set_has_resaddinactiontargetuserbulk();
    AResponse_.resaddinactiontargetuserbulk_ = resaddinactiontargetuserbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Response::_internal_mutable_resaddinactiontargetuserbulk() {
  if (!_internal_has_resaddinactiontargetuserbulk()) {
    clear_AResponse();
    set_has_resaddinactiontargetuserbulk();
    AResponse_.resaddinactiontargetuserbulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse >(GetArena());
  }
  return AResponse_.resaddinactiontargetuserbulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* Response::mutable_resaddinactiontargetuserbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk)
  return _internal_mutable_resaddinactiontargetuserbulk();
}

// .farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse resFindInactionTargetUserByCampaignId = 18;
inline bool Response::_internal_has_resfindinactiontargetuserbycampaignid() const {
  return AResponse_case() == kResFindInactionTargetUserByCampaignId;
}
inline bool Response::has_resfindinactiontargetuserbycampaignid() const {
  return _internal_has_resfindinactiontargetuserbycampaignid();
}
inline void Response::set_has_resfindinactiontargetuserbycampaignid() {
  _oneof_case_[0] = kResFindInactionTargetUserByCampaignId;
}
inline void Response::clear_resfindinactiontargetuserbycampaignid() {
  if (_internal_has_resfindinactiontargetuserbycampaignid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfindinactiontargetuserbycampaignid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Response::release_resfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
  if (_internal_has_resfindinactiontargetuserbycampaignid()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* temp = AResponse_.resfindinactiontargetuserbycampaignid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfindinactiontargetuserbycampaignid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse& Response::_internal_resfindinactiontargetuserbycampaignid() const {
  return _internal_has_resfindinactiontargetuserbycampaignid()
      ? *AResponse_.resfindinactiontargetuserbycampaignid_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse&>(::farm::nurture::core::contracts::CampaignService::_FindInactionTargetUserByCampaignIdResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse& Response::resfindinactiontargetuserbycampaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
  return _internal_resfindinactiontargetuserbycampaignid();
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Response::unsafe_arena_release_resfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
  if (_internal_has_resfindinactiontargetuserbycampaignid()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* temp = AResponse_.resfindinactiontargetuserbycampaignid_;
    AResponse_.resfindinactiontargetuserbycampaignid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfindinactiontargetuserbycampaignid(::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* resfindinactiontargetuserbycampaignid) {
  clear_AResponse();
  if (resfindinactiontargetuserbycampaignid) {
    set_has_resfindinactiontargetuserbycampaignid();
    AResponse_.resfindinactiontargetuserbycampaignid_ = resfindinactiontargetuserbycampaignid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Response::_internal_mutable_resfindinactiontargetuserbycampaignid() {
  if (!_internal_has_resfindinactiontargetuserbycampaignid()) {
    clear_AResponse();
    set_has_resfindinactiontargetuserbycampaignid();
    AResponse_.resfindinactiontargetuserbycampaignid_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse >(GetArena());
  }
  return AResponse_.resfindinactiontargetuserbycampaignid_;
}
inline ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* Response::mutable_resfindinactiontargetuserbycampaignid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId)
  return _internal_mutable_resfindinactiontargetuserbycampaignid();
}

// .farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse resGetDynamicDataByKey = 19;
inline bool Response::_internal_has_resgetdynamicdatabykey() const {
  return AResponse_case() == kResGetDynamicDataByKey;
}
inline bool Response::has_resgetdynamicdatabykey() const {
  return _internal_has_resgetdynamicdatabykey();
}
inline void Response::set_has_resgetdynamicdatabykey() {
  _oneof_case_[0] = kResGetDynamicDataByKey;
}
inline void Response::clear_resgetdynamicdatabykey() {
  if (_internal_has_resgetdynamicdatabykey()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetdynamicdatabykey_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Response::release_resgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
  if (_internal_has_resgetdynamicdatabykey()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* temp = AResponse_.resgetdynamicdatabykey_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetdynamicdatabykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse& Response::_internal_resgetdynamicdatabykey() const {
  return _internal_has_resgetdynamicdatabykey()
      ? *AResponse_.resgetdynamicdatabykey_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse&>(::farm::nurture::core::contracts::CampaignService::_GetDynamicDataByKeyResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse& Response::resgetdynamicdatabykey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
  return _internal_resgetdynamicdatabykey();
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Response::unsafe_arena_release_resgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
  if (_internal_has_resgetdynamicdatabykey()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* temp = AResponse_.resgetdynamicdatabykey_;
    AResponse_.resgetdynamicdatabykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetdynamicdatabykey(::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* resgetdynamicdatabykey) {
  clear_AResponse();
  if (resgetdynamicdatabykey) {
    set_has_resgetdynamicdatabykey();
    AResponse_.resgetdynamicdatabykey_ = resgetdynamicdatabykey;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Response::_internal_mutable_resgetdynamicdatabykey() {
  if (!_internal_has_resgetdynamicdatabykey()) {
    clear_AResponse();
    set_has_resgetdynamicdatabykey();
    AResponse_.resgetdynamicdatabykey_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse >(GetArena());
  }
  return AResponse_.resgetdynamicdatabykey_;
}
inline ::farm::nurture::core::contracts::CampaignService::GetDynamicDataByKeyResponse* Response::mutable_resgetdynamicdatabykey() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey)
  return _internal_mutable_resgetdynamicdatabykey();
}

// .farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse resAddDynamicData = 20;
inline bool Response::_internal_has_resadddynamicdata() const {
  return AResponse_case() == kResAddDynamicData;
}
inline bool Response::has_resadddynamicdata() const {
  return _internal_has_resadddynamicdata();
}
inline void Response::set_has_resadddynamicdata() {
  _oneof_case_[0] = kResAddDynamicData;
}
inline void Response::clear_resadddynamicdata() {
  if (_internal_has_resadddynamicdata()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resadddynamicdata_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Response::release_resadddynamicdata() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
  if (_internal_has_resadddynamicdata()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* temp = AResponse_.resadddynamicdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resadddynamicdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& Response::_internal_resadddynamicdata() const {
  return _internal_has_resadddynamicdata()
      ? *AResponse_.resadddynamicdata_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse&>(::farm::nurture::core::contracts::CampaignService::_AddDynamicDataResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse& Response::resadddynamicdata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
  return _internal_resadddynamicdata();
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Response::unsafe_arena_release_resadddynamicdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
  if (_internal_has_resadddynamicdata()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* temp = AResponse_.resadddynamicdata_;
    AResponse_.resadddynamicdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resadddynamicdata(::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* resadddynamicdata) {
  clear_AResponse();
  if (resadddynamicdata) {
    set_has_resadddynamicdata();
    AResponse_.resadddynamicdata_ = resadddynamicdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Response::_internal_mutable_resadddynamicdata() {
  if (!_internal_has_resadddynamicdata()) {
    clear_AResponse();
    set_has_resadddynamicdata();
    AResponse_.resadddynamicdata_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse >(GetArena());
  }
  return AResponse_.resadddynamicdata_;
}
inline ::farm::nurture::core::contracts::CampaignService::AddDynamicDataResponse* Response::mutable_resadddynamicdata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData)
  return _internal_mutable_resadddynamicdata();
}

// .farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse resAddDynamicDataBulk = 21;
inline bool Response::_internal_has_resadddynamicdatabulk() const {
  return AResponse_case() == kResAddDynamicDataBulk;
}
inline bool Response::has_resadddynamicdatabulk() const {
  return _internal_has_resadddynamicdatabulk();
}
inline void Response::set_has_resadddynamicdatabulk() {
  _oneof_case_[0] = kResAddDynamicDataBulk;
}
inline void Response::clear_resadddynamicdatabulk() {
  if (_internal_has_resadddynamicdatabulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resadddynamicdatabulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Response::release_resadddynamicdatabulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
  if (_internal_has_resadddynamicdatabulk()) {
    clear_has_AResponse();
      ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* temp = AResponse_.resadddynamicdatabulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resadddynamicdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse& Response::_internal_resadddynamicdatabulk() const {
  return _internal_has_resadddynamicdatabulk()
      ? *AResponse_.resadddynamicdatabulk_
      : reinterpret_cast< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse&>(::farm::nurture::core::contracts::CampaignService::_BulkAddDynamicDataResponse_default_instance_);
}
inline const ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse& Response::resadddynamicdatabulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
  return _internal_resadddynamicdatabulk();
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Response::unsafe_arena_release_resadddynamicdatabulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
  if (_internal_has_resadddynamicdatabulk()) {
    clear_has_AResponse();
    ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* temp = AResponse_.resadddynamicdatabulk_;
    AResponse_.resadddynamicdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resadddynamicdatabulk(::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* resadddynamicdatabulk) {
  clear_AResponse();
  if (resadddynamicdatabulk) {
    set_has_resadddynamicdatabulk();
    AResponse_.resadddynamicdatabulk_ = resadddynamicdatabulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Response::_internal_mutable_resadddynamicdatabulk() {
  if (!_internal_has_resadddynamicdatabulk()) {
    clear_AResponse();
    set_has_resadddynamicdatabulk();
    AResponse_.resadddynamicdatabulk_ = CreateMaybeMessage< ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse >(GetArena());
  }
  return AResponse_.resadddynamicdatabulk_;
}
inline ::farm::nurture::core::contracts::CampaignService::BulkAddDynamicDataResponse* Response::mutable_resadddynamicdatabulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk)
  return _internal_mutable_resadddynamicdatabulk();
}

inline bool Response::has_AResponse() const {
  return AResponse_case() != ARESPONSE_NOT_SET;
}
inline void Response::clear_has_AResponse() {
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}
inline Response::AResponseCase Response::AResponse_case() const {
  return Response::AResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FilterCampaignRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FilterCampaignRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FilterCampaignRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FilterCampaignRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FilterCampaignRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FilterCampaignRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FilterCampaignRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FilterCampaignRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FilterCampaignRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FilterCampaignRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FilterCampaignRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders)
}

// string name = 2;
inline void FilterCampaignRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FilterCampaignRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
  return _internal_name();
}
inline void FilterCampaignRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
}
inline std::string* FilterCampaignRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FilterCampaignRequest::_internal_name() const {
  return name_.Get();
}
inline void FilterCampaignRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterCampaignRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
}
inline void FilterCampaignRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
}
inline void FilterCampaignRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
}
inline std::string* FilterCampaignRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterCampaignRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterCampaignRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.name)
}

// .farm.nurture.core.contracts.common.CampaignStatus status = 3;
inline void FilterCampaignRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::CampaignStatus FilterCampaignRequest::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::CampaignStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::CampaignStatus FilterCampaignRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.status)
  return _internal_status();
}
inline void FilterCampaignRequest::_internal_set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  
  status_ = value;
}
inline void FilterCampaignRequest::set_status(::farm::nurture::core::contracts::common::CampaignStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.status)
}

// string description = 4;
inline void FilterCampaignRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FilterCampaignRequest::description() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
  return _internal_description();
}
inline void FilterCampaignRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
}
inline std::string* FilterCampaignRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
  return _internal_mutable_description();
}
inline const std::string& FilterCampaignRequest::_internal_description() const {
  return description_.Get();
}
inline void FilterCampaignRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterCampaignRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
}
inline void FilterCampaignRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
}
inline void FilterCampaignRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
}
inline std::string* FilterCampaignRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterCampaignRequest::release_description() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterCampaignRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.description)
}

// string templateName = 5;
inline void FilterCampaignRequest::clear_templatename() {
  templatename_.ClearToEmpty();
}
inline const std::string& FilterCampaignRequest::templatename() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
  return _internal_templatename();
}
inline void FilterCampaignRequest::set_templatename(const std::string& value) {
  _internal_set_templatename(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
}
inline std::string* FilterCampaignRequest::mutable_templatename() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
  return _internal_mutable_templatename();
}
inline const std::string& FilterCampaignRequest::_internal_templatename() const {
  return templatename_.Get();
}
inline void FilterCampaignRequest::_internal_set_templatename(const std::string& value) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterCampaignRequest::set_templatename(std::string&& value) {
  
  templatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
}
inline void FilterCampaignRequest::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
}
inline void FilterCampaignRequest::set_templatename(const char* value,
    size_t size) {
  
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
}
inline std::string* FilterCampaignRequest::_internal_mutable_templatename() {
  
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterCampaignRequest::release_templatename() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
  return templatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterCampaignRequest::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    
  } else {
    
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.templateName)
}

// int32 pageNumber = 6;
inline void FilterCampaignRequest::clear_pagenumber() {
  pagenumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignRequest::_internal_pagenumber() const {
  return pagenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignRequest::pagenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.pageNumber)
  return _internal_pagenumber();
}
inline void FilterCampaignRequest::_internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagenumber_ = value;
}
inline void FilterCampaignRequest::set_pagenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.pageNumber)
}

// int32 limit = 7;
inline void FilterCampaignRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignRequest::limit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.limit)
  return _internal_limit();
}
inline void FilterCampaignRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void FilterCampaignRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.limit)
}

// -------------------------------------------------------------------

// FilterCampaignResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FilterCampaignResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FilterCampaignResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FilterCampaignResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FilterCampaignResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status)
  return _internal_status();
}
inline void FilterCampaignResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FilterCampaignResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FilterCampaignResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FilterCampaignResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FilterCampaignResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status)
  return _internal_mutable_status();
}
inline void FilterCampaignResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status)
}

// int32 count = 2;
inline void FilterCampaignResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterCampaignResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.count)
  return _internal_count();
}
inline void FilterCampaignResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FilterCampaignResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.count)
}

// repeated .farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord records = 3;
inline int FilterCampaignResponse::_internal_records_size() const {
  return records_.size();
}
inline int FilterCampaignResponse::records_size() const {
  return _internal_records_size();
}
inline void FilterCampaignResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FilterCampaignResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >*
FilterCampaignResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records)
  return &records_;
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& FilterCampaignResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord& FilterCampaignResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FilterCampaignResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord* FilterCampaignResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponseRecord >&
FilterCampaignResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// TestCampaignByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool TestCampaignByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool TestCampaignByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& TestCampaignByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void TestCampaignByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* TestCampaignByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void TestCampaignByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders)
}

// int64 campaignId = 2;
inline void TestCampaignByIdRequest::clear_campaignid() {
  campaignid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCampaignByIdRequest::_internal_campaignid() const {
  return campaignid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCampaignByIdRequest::campaignid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.campaignId)
  return _internal_campaignid();
}
inline void TestCampaignByIdRequest::_internal_set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  campaignid_ = value;
}
inline void TestCampaignByIdRequest::set_campaignid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_campaignid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.campaignId)
}

// string athenaQuery = 3;
inline void TestCampaignByIdRequest::clear_athenaquery() {
  athenaquery_.ClearToEmpty();
}
inline const std::string& TestCampaignByIdRequest::athenaquery() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
  return _internal_athenaquery();
}
inline void TestCampaignByIdRequest::set_athenaquery(const std::string& value) {
  _internal_set_athenaquery(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
}
inline std::string* TestCampaignByIdRequest::mutable_athenaquery() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
  return _internal_mutable_athenaquery();
}
inline const std::string& TestCampaignByIdRequest::_internal_athenaquery() const {
  return athenaquery_.Get();
}
inline void TestCampaignByIdRequest::_internal_set_athenaquery(const std::string& value) {
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestCampaignByIdRequest::set_athenaquery(std::string&& value) {
  
  athenaquery_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
}
inline void TestCampaignByIdRequest::set_athenaquery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
}
inline void TestCampaignByIdRequest::set_athenaquery(const char* value,
    size_t size) {
  
  athenaquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
}
inline std::string* TestCampaignByIdRequest::_internal_mutable_athenaquery() {
  
  return athenaquery_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestCampaignByIdRequest::release_athenaquery() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
  return athenaquery_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestCampaignByIdRequest::set_allocated_athenaquery(std::string* athenaquery) {
  if (athenaquery != nullptr) {
    
  } else {
    
  }
  athenaquery_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), athenaquery,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.athenaQuery)
}

// -------------------------------------------------------------------

// TestCampaignByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool TestCampaignByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool TestCampaignByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& TestCampaignByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& TestCampaignByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status)
  return _internal_status();
}
inline void TestCampaignByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestCampaignByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestCampaignByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestCampaignByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* TestCampaignByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status)
  return _internal_mutable_status();
}
inline void TestCampaignByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CampaignService
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CampaignService_2fcampaign_5fservice_2eproto
