// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CampaignService/campaign_service.proto
#ifndef GRPC_CampaignService_2fcampaign_5fservice_2eproto__INCLUDED
#define GRPC_CampaignService_2fcampaign_5fservice_2eproto__INCLUDED

#include "CampaignService/campaign_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace CampaignService {

class CampaignService final {
 public:
  static constexpr char const* service_full_name() {
    return "farm.nurture.core.contracts.CampaignService.CampaignService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>> AsyncExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>>(AsyncExecuteAddCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>> PrepareAsyncExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>>(PrepareAsyncExecuteAddCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>> AsyncExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>>(AsyncExecuteAddCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>> PrepareAsyncExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>>(PrepareAsyncExecuteAddCampaignBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>> AsyncExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>>(AsyncExecuteUpdateCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>> PrepareAsyncExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>>(PrepareAsyncExecuteUpdateCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>> AsyncExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>>(AsyncExecuteUpdateCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>> PrepareAsyncExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>>(PrepareAsyncExecuteUpdateCampaignBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>> AsyncExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>>(AsyncExecuteAddCampaignTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>> PrepareAsyncExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>>(PrepareAsyncExecuteAddCampaignTemplateRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>> AsyncExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>>(AsyncExecuteAddCampaignTemplateBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>> PrepareAsyncExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>>(PrepareAsyncExecuteAddCampaignTemplateBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>> AsyncExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>>(AsyncExecuteAddNewCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>> PrepareAsyncExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>>(PrepareAsyncExecuteAddNewCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>> AsyncExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>>(AsyncExecuteAddNewCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>> PrepareAsyncExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>>(PrepareAsyncExecuteAddNewCampaignBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>> AsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>>(AsyncExecuteCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>> PrepareAsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>>(PrepareAsyncExecuteCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>> AsyncExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>>(AsyncExecuteFindCampaignByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>> PrepareAsyncExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>>(PrepareAsyncExecuteFindCampaignByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>> AsyncExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>>(AsyncExecuteFindCampaignTemplateByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>> PrepareAsyncExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>>(PrepareAsyncExecuteFindCampaignTemplateByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>> AsyncExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>>(AsyncExecuteFindTargetUserByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>> PrepareAsyncExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>>(PrepareAsyncExecuteFindTargetUserByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>> AsyncExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>>(AsyncExecuteAddTargetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>> PrepareAsyncExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>>(PrepareAsyncExecuteAddTargetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>> AsyncExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>>(AsyncExecuteAddTargetUserBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>> PrepareAsyncExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>>(PrepareAsyncExecuteAddTargetUserBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>> AsyncExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>>(AsyncExecuteAddInactionTargetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>> PrepareAsyncExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>>(PrepareAsyncExecuteAddInactionTargetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>> AsyncExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>>(AsyncExecuteAddInactionTargetUserBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>> PrepareAsyncExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>>(PrepareAsyncExecuteAddInactionTargetUserBulkRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>> AsyncExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>>(AsyncExecuteFindInactionTargetUserByCampaignIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>> PrepareAsyncExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>>(PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(context, request, cq));
    }
    virtual ::grpc::Status Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>> AsyncExecute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>> AsyncExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>>(AsyncExecuteAthenaQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>> PrepareAsyncExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>>(PrepareAsyncExecuteAthenaQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>> AsyncExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>>(AsyncExecuteTestNewCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>> PrepareAsyncExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>>(PrepareAsyncExecuteTestNewCampaignRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>> AsyncExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>>(AsyncExecuteFilterCampaignsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>> PrepareAsyncExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>>(PrepareAsyncExecuteFilterCampaignsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* AsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* PrepareAsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* AsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* PrepareAsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* AsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* PrepareAsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* AsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* PrepareAsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* AsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* PrepareAsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* AsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* PrepareAsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* AsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* PrepareAsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* AsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* PrepareAsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* AsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* PrepareAsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* AsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* PrepareAsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* AsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* PrepareAsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* AsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* PrepareAsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* AsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* PrepareAsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* AsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* PrepareAsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* AsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* PrepareAsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* AsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* PrepareAsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* AsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* AsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* PrepareAsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* AsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* PrepareAsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* AsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* PrepareAsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>> AsyncExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>>(AsyncExecuteAddCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>> PrepareAsyncExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>>(PrepareAsyncExecuteAddCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>> AsyncExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>>(AsyncExecuteAddCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>> PrepareAsyncExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>>(PrepareAsyncExecuteAddCampaignBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>> AsyncExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>>(AsyncExecuteUpdateCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>> PrepareAsyncExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>>(PrepareAsyncExecuteUpdateCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>> AsyncExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>>(AsyncExecuteUpdateCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>> PrepareAsyncExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>>(PrepareAsyncExecuteUpdateCampaignBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>> AsyncExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>>(AsyncExecuteAddCampaignTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>> PrepareAsyncExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>>(PrepareAsyncExecuteAddCampaignTemplateRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>> AsyncExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>>(AsyncExecuteAddCampaignTemplateBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>> PrepareAsyncExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>>(PrepareAsyncExecuteAddCampaignTemplateBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>> AsyncExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>>(AsyncExecuteAddNewCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>> PrepareAsyncExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>>(PrepareAsyncExecuteAddNewCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>> AsyncExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>>(AsyncExecuteAddNewCampaignBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>> PrepareAsyncExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>>(PrepareAsyncExecuteAddNewCampaignBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>> AsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>>(AsyncExecuteCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>> PrepareAsyncExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>>(PrepareAsyncExecuteCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>> AsyncExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>>(AsyncExecuteFindCampaignByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>> PrepareAsyncExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>>(PrepareAsyncExecuteFindCampaignByIdRaw(context, request, cq));
    }
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>> AsyncExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>>(AsyncExecuteFindCampaignTemplateByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>> PrepareAsyncExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>>(PrepareAsyncExecuteFindCampaignTemplateByIdRaw(context, request, cq));
    }
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>> AsyncExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>>(AsyncExecuteFindTargetUserByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>> PrepareAsyncExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>>(PrepareAsyncExecuteFindTargetUserByIdRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>> AsyncExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>>(AsyncExecuteAddTargetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>> PrepareAsyncExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>>(PrepareAsyncExecuteAddTargetUserRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>> AsyncExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>>(AsyncExecuteAddTargetUserBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>> PrepareAsyncExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>>(PrepareAsyncExecuteAddTargetUserBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>> AsyncExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>>(AsyncExecuteAddInactionTargetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>> PrepareAsyncExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>>(PrepareAsyncExecuteAddInactionTargetUserRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>> AsyncExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>>(AsyncExecuteAddInactionTargetUserBulkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>> PrepareAsyncExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>>(PrepareAsyncExecuteAddInactionTargetUserBulkRaw(context, request, cq));
    }
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>> AsyncExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>>(AsyncExecuteFindInactionTargetUserByCampaignIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>> PrepareAsyncExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>>(PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(context, request, cq));
    }
    ::grpc::Status Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>> AsyncExecute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>> AsyncExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>>(AsyncExecuteAthenaQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>> PrepareAsyncExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>>(PrepareAsyncExecuteAthenaQueryRaw(context, request, cq));
    }
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>> AsyncExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>>(AsyncExecuteTestNewCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>> PrepareAsyncExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>>(PrepareAsyncExecuteTestNewCampaignRaw(context, request, cq));
    }
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>> AsyncExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>>(AsyncExecuteFilterCampaignsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>> PrepareAsyncExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>>(PrepareAsyncExecuteFilterCampaignsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteUpdateCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteUpdateCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddCampaignTemplate(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddCampaignTemplateBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddNewCampaignBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteFindCampaignById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteFindCampaignTemplateById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteFindTargetUserById(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddInactionTargetUser(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAddInactionTargetUserBulk(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteFindInactionTargetUserByCampaignId(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, std::function<void(::grpc::Status)>) override;
      void Execute(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAthenaQuery(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteTestNewCampaign(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteFilterCampaigns(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* AsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* PrepareAsyncExecuteAddCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* AsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* PrepareAsyncExecuteAddCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* AsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* PrepareAsyncExecuteUpdateCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* AsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* PrepareAsyncExecuteUpdateCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* AsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* PrepareAsyncExecuteAddCampaignTemplateRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* AsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* PrepareAsyncExecuteAddCampaignTemplateBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* AsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* PrepareAsyncExecuteAddNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* AsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* PrepareAsyncExecuteAddNewCampaignBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* AsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* PrepareAsyncExecuteCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* AsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* PrepareAsyncExecuteFindCampaignByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* AsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* PrepareAsyncExecuteFindCampaignTemplateByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* AsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* PrepareAsyncExecuteFindTargetUserByIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* AsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* PrepareAsyncExecuteAddTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* AsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* PrepareAsyncExecuteAddTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* AsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* PrepareAsyncExecuteAddInactionTargetUserRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* AsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* PrepareAsyncExecuteAddInactionTargetUserBulkRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* AsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* PrepareAsyncExecuteFindInactionTargetUserByCampaignIdRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* AsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* PrepareAsyncExecuteAthenaQueryRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* AsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* PrepareAsyncExecuteTestNewCampaignRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* AsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* PrepareAsyncExecuteFilterCampaignsRaw(::grpc::ClientContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddCampaignBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteUpdateCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteUpdateCampaignBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddCampaignTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddCampaignTemplateBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddNewCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddNewCampaignBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteFindCampaignById_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteFindCampaignTemplateById_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteFindTargetUserById_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddTargetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddTargetUserBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddInactionTargetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAddInactionTargetUserBulk_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteFindInactionTargetUserByCampaignId_;
    const ::grpc::internal::RpcMethod rpcmethod_Execute_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAthenaQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteTestNewCampaign_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteFilterCampaigns_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response);
    virtual ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response);
    virtual ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response);
    virtual ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response);
    virtual ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response);
    virtual ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response);
    virtual ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response);
    virtual ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response);
    virtual ::grpc::Status ExecuteCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response);
    virtual ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response);
    virtual ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response);
    virtual ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response);
    virtual ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response);
    virtual ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response);
    virtual ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response);
    virtual ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response);
    virtual ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response);
    virtual ::grpc::Status Execute(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response);
    virtual ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response);
    virtual ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response);
    virtual ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUpdateCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUpdateCampaignBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignTemplate(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignTemplateBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddNewCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddNewCampaignBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindCampaignById(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindCampaignTemplateById(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindTargetUserById(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddTargetUser(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddTargetUserBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddInactionTargetUser(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddInactionTargetUserBulk(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Execute() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::MultiResponses>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAthenaQuery(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteTestNewCampaign(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFilterCampaigns(::grpc::ServerContext* context, ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteAddCampaign<WithAsyncMethod_ExecuteAddCampaignBulk<WithAsyncMethod_ExecuteUpdateCampaign<WithAsyncMethod_ExecuteUpdateCampaignBulk<WithAsyncMethod_ExecuteAddCampaignTemplate<WithAsyncMethod_ExecuteAddCampaignTemplateBulk<WithAsyncMethod_ExecuteAddNewCampaign<WithAsyncMethod_ExecuteAddNewCampaignBulk<WithAsyncMethod_ExecuteCampaign<WithAsyncMethod_ExecuteFindCampaignById<WithAsyncMethod_ExecuteFindCampaignTemplateById<WithAsyncMethod_ExecuteFindTargetUserById<WithAsyncMethod_ExecuteAddTargetUser<WithAsyncMethod_ExecuteAddTargetUserBulk<WithAsyncMethod_ExecuteAddInactionTargetUser<WithAsyncMethod_ExecuteAddInactionTargetUserBulk<WithAsyncMethod_ExecuteFindInactionTargetUserByCampaignId<WithAsyncMethod_Execute<WithAsyncMethod_ExecuteAthenaQuery<WithAsyncMethod_ExecuteTestNewCampaign<WithAsyncMethod_ExecuteFilterCampaigns<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* response) { return this->ExecuteAddCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* response) { return this->ExecuteAddCampaignBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddCampaignBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* response) { return this->ExecuteUpdateCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteUpdateCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUpdateCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* response) { return this->ExecuteUpdateCampaignBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteUpdateCampaignBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUpdateCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* response) { return this->ExecuteAddCampaignTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddCampaignTemplate(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* response) { return this->ExecuteAddCampaignTemplateBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddCampaignTemplateBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignTemplateBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* response) { return this->ExecuteAddNewCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddNewCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddNewCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* response) { return this->ExecuteAddNewCampaignBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddNewCampaignBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddNewCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* response) { return this->ExecuteCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* response) { return this->ExecuteFindCampaignById(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteFindCampaignById(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindCampaignById(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* response) { return this->ExecuteFindCampaignTemplateById(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteFindCampaignTemplateById(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindCampaignTemplateById(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* response) { return this->ExecuteFindTargetUserById(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteFindTargetUserById(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindTargetUserById(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* response) { return this->ExecuteAddTargetUser(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddTargetUser(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddTargetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* response) { return this->ExecuteAddTargetUserBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddTargetUserBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddTargetUserBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* response) { return this->ExecuteAddInactionTargetUser(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddInactionTargetUser(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddInactionTargetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* request, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* response) { return this->ExecuteAddInactionTargetUserBulk(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAddInactionTargetUserBulk(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddInactionTargetUserBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* request, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* response) { return this->ExecuteFindInactionTargetUserByCampaignId(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteFindInactionTargetUserByCampaignId(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindInactionTargetUserByCampaignId(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* request, ::farm::nurture::core::contracts::CampaignService::MultiResponses* response) { return this->Execute(context, request, response); }));}
    void SetMessageAllocatorFor_Execute(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* request, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* response) { return this->ExecuteAthenaQuery(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAthenaQuery(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAthenaQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* response) { return this->ExecuteTestNewCampaign(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteTestNewCampaign(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteTestNewCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* request, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* response) { return this->ExecuteFilterCampaigns(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteFilterCampaigns(
        ::grpc::MessageAllocator< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFilterCampaigns(
      ::grpc::CallbackServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteAddCampaign<WithCallbackMethod_ExecuteAddCampaignBulk<WithCallbackMethod_ExecuteUpdateCampaign<WithCallbackMethod_ExecuteUpdateCampaignBulk<WithCallbackMethod_ExecuteAddCampaignTemplate<WithCallbackMethod_ExecuteAddCampaignTemplateBulk<WithCallbackMethod_ExecuteAddNewCampaign<WithCallbackMethod_ExecuteAddNewCampaignBulk<WithCallbackMethod_ExecuteCampaign<WithCallbackMethod_ExecuteFindCampaignById<WithCallbackMethod_ExecuteFindCampaignTemplateById<WithCallbackMethod_ExecuteFindTargetUserById<WithCallbackMethod_ExecuteAddTargetUser<WithCallbackMethod_ExecuteAddTargetUserBulk<WithCallbackMethod_ExecuteAddInactionTargetUser<WithCallbackMethod_ExecuteAddInactionTargetUserBulk<WithCallbackMethod_ExecuteFindInactionTargetUserByCampaignId<WithCallbackMethod_Execute<WithCallbackMethod_ExecuteAthenaQuery<WithCallbackMethod_ExecuteTestNewCampaign<WithCallbackMethod_ExecuteFilterCampaigns<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Execute() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUpdateCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUpdateCampaignBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddCampaignTemplateBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddNewCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddNewCampaignBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindCampaignById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindCampaignTemplateById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindTargetUserById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddTargetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddTargetUserBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddInactionTargetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAddInactionTargetUserBulk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Execute() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAthenaQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteTestNewCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteFilterCampaigns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddCampaignBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteUpdateCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUpdateCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteUpdateCampaignBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteUpdateCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddCampaignTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddCampaignTemplateBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddCampaignTemplateBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddNewCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddNewCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddNewCampaignBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddNewCampaignBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteFindCampaignById(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindCampaignById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteFindCampaignTemplateById(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindCampaignTemplateById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteFindTargetUserById(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindTargetUserById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddTargetUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddTargetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddTargetUserBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddTargetUserBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddInactionTargetUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddInactionTargetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAddInactionTargetUserBulk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAddInactionTargetUserBulk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteFindInactionTargetUserByCampaignId(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFindInactionTargetUserByCampaignId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Execute(context, request, response); }));
    }
    ~WithRawCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAthenaQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteAthenaQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteTestNewCampaign(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteTestNewCampaign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteFilterCampaigns(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteFilterCampaigns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddCampaign() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* streamer) {
                       return this->StreamedExecuteAddCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AddCampaignRequest,::farm::nurture::core::contracts::CampaignService::AddCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddCampaignBulk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* streamer) {
                       return this->StreamedExecuteAddCampaignBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddCampaignBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignRequest,::farm::nurture::core::contracts::CampaignService::BulkAddCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteUpdateCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteUpdateCampaign() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* streamer) {
                       return this->StreamedExecuteUpdateCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteUpdateCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteUpdateCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteUpdateCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::UpdateCampaignRequest,::farm::nurture::core::contracts::CampaignService::UpdateCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteUpdateCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteUpdateCampaignBulk() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* streamer) {
                       return this->StreamedExecuteUpdateCampaignBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteUpdateCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteUpdateCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteUpdateCampaignBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignRequest,::farm::nurture::core::contracts::CampaignService::BulkUpdateCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddCampaignTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddCampaignTemplate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* streamer) {
                       return this->StreamedExecuteAddCampaignTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddCampaignTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddCampaignTemplate(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddCampaignTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateRequest,::farm::nurture::core::contracts::CampaignService::AddCampaignTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddCampaignTemplateBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddCampaignTemplateBulk() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* streamer) {
                       return this->StreamedExecuteAddCampaignTemplateBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddCampaignTemplateBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddCampaignTemplateBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddCampaignTemplateBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateRequest,::farm::nurture::core::contracts::CampaignService::BulkAddCampaignTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddNewCampaign() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* streamer) {
                       return this->StreamedExecuteAddNewCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddNewCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AddNewCampaignRequest,::farm::nurture::core::contracts::CampaignService::AddNewCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddNewCampaignBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddNewCampaignBulk() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* streamer) {
                       return this->StreamedExecuteAddNewCampaignBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddNewCampaignBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddNewCampaignBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddNewCampaignBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignRequest,::farm::nurture::core::contracts::CampaignService::BulkAddNewCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteCampaign() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::CampaignRequest, ::farm::nurture::core::contracts::CampaignService::CampaignResponse>* streamer) {
                       return this->StreamedExecuteCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::CampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::CampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::CampaignRequest,::farm::nurture::core::contracts::CampaignService::CampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteFindCampaignById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteFindCampaignById() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* streamer) {
                       return this->StreamedExecuteFindCampaignById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteFindCampaignById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteFindCampaignById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteFindCampaignById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::FindCampaignByIdRequest,::farm::nurture::core::contracts::CampaignService::FindCampaignByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteFindCampaignTemplateById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteFindCampaignTemplateById() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* streamer) {
                       return this->StreamedExecuteFindCampaignTemplateById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteFindCampaignTemplateById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteFindCampaignTemplateById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteFindCampaignTemplateById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdRequest,::farm::nurture::core::contracts::CampaignService::FindCampaignTemplateByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteFindTargetUserById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteFindTargetUserById() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* streamer) {
                       return this->StreamedExecuteFindTargetUserById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteFindTargetUserById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteFindTargetUserById(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteFindTargetUserById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdRequest,::farm::nurture::core::contracts::CampaignService::FindTargetUserByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddTargetUser() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* streamer) {
                       return this->StreamedExecuteAddTargetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddTargetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AddTargetUserRequest,::farm::nurture::core::contracts::CampaignService::AddTargetUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddTargetUserBulk() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* streamer) {
                       return this->StreamedExecuteAddTargetUserBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddTargetUserBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserRequest,::farm::nurture::core::contracts::CampaignService::BulkAddTargetUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddInactionTargetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddInactionTargetUser() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* streamer) {
                       return this->StreamedExecuteAddInactionTargetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddInactionTargetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddInactionTargetUser(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddInactionTargetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserRequest,::farm::nurture::core::contracts::CampaignService::AddInactionTargetUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAddInactionTargetUserBulk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAddInactionTargetUserBulk() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* streamer) {
                       return this->StreamedExecuteAddInactionTargetUserBulk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAddInactionTargetUserBulk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAddInactionTargetUserBulk(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAddInactionTargetUserBulk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserRequest,::farm::nurture::core::contracts::CampaignService::BulkAddInactionTargetUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteFindInactionTargetUserByCampaignId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteFindInactionTargetUserByCampaignId() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* streamer) {
                       return this->StreamedExecuteFindInactionTargetUserByCampaignId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteFindInactionTargetUserByCampaignId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteFindInactionTargetUserByCampaignId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdRequest,::farm::nurture::core::contracts::CampaignService::FindInactionTargetUserByCampaignIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Execute() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::MultiRequests, ::farm::nurture::core::contracts::CampaignService::MultiResponses>* streamer) {
                       return this->StreamedExecute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::MultiRequests* /*request*/, ::farm::nurture::core::contracts::CampaignService::MultiResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::MultiRequests,::farm::nurture::core::contracts::CampaignService::MultiResponses>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAthenaQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAthenaQuery() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* streamer) {
                       return this->StreamedExecuteAthenaQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAthenaQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAthenaQuery(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAthenaQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::AthenaQueryRequest,::farm::nurture::core::contracts::CampaignService::AthenaQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteTestNewCampaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteTestNewCampaign() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* streamer) {
                       return this->StreamedExecuteTestNewCampaign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteTestNewCampaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteTestNewCampaign(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteTestNewCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::TestNewCampaignRequest,::farm::nurture::core::contracts::CampaignService::TestNewCampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteFilterCampaigns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteFilterCampaigns() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* streamer) {
                       return this->StreamedExecuteFilterCampaigns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteFilterCampaigns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteFilterCampaigns(::grpc::ServerContext* /*context*/, const ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest* /*request*/, ::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteFilterCampaigns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::farm::nurture::core::contracts::CampaignService::FilterCampaignRequest,::farm::nurture::core::contracts::CampaignService::FilterCampaignResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteAddCampaign<WithStreamedUnaryMethod_ExecuteAddCampaignBulk<WithStreamedUnaryMethod_ExecuteUpdateCampaign<WithStreamedUnaryMethod_ExecuteUpdateCampaignBulk<WithStreamedUnaryMethod_ExecuteAddCampaignTemplate<WithStreamedUnaryMethod_ExecuteAddCampaignTemplateBulk<WithStreamedUnaryMethod_ExecuteAddNewCampaign<WithStreamedUnaryMethod_ExecuteAddNewCampaignBulk<WithStreamedUnaryMethod_ExecuteCampaign<WithStreamedUnaryMethod_ExecuteFindCampaignById<WithStreamedUnaryMethod_ExecuteFindCampaignTemplateById<WithStreamedUnaryMethod_ExecuteFindTargetUserById<WithStreamedUnaryMethod_ExecuteAddTargetUser<WithStreamedUnaryMethod_ExecuteAddTargetUserBulk<WithStreamedUnaryMethod_ExecuteAddInactionTargetUser<WithStreamedUnaryMethod_ExecuteAddInactionTargetUserBulk<WithStreamedUnaryMethod_ExecuteFindInactionTargetUserByCampaignId<WithStreamedUnaryMethod_Execute<WithStreamedUnaryMethod_ExecuteAthenaQuery<WithStreamedUnaryMethod_ExecuteTestNewCampaign<WithStreamedUnaryMethod_ExecuteFilterCampaigns<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteAddCampaign<WithStreamedUnaryMethod_ExecuteAddCampaignBulk<WithStreamedUnaryMethod_ExecuteUpdateCampaign<WithStreamedUnaryMethod_ExecuteUpdateCampaignBulk<WithStreamedUnaryMethod_ExecuteAddCampaignTemplate<WithStreamedUnaryMethod_ExecuteAddCampaignTemplateBulk<WithStreamedUnaryMethod_ExecuteAddNewCampaign<WithStreamedUnaryMethod_ExecuteAddNewCampaignBulk<WithStreamedUnaryMethod_ExecuteCampaign<WithStreamedUnaryMethod_ExecuteFindCampaignById<WithStreamedUnaryMethod_ExecuteFindCampaignTemplateById<WithStreamedUnaryMethod_ExecuteFindTargetUserById<WithStreamedUnaryMethod_ExecuteAddTargetUser<WithStreamedUnaryMethod_ExecuteAddTargetUserBulk<WithStreamedUnaryMethod_ExecuteAddInactionTargetUser<WithStreamedUnaryMethod_ExecuteAddInactionTargetUserBulk<WithStreamedUnaryMethod_ExecuteFindInactionTargetUserByCampaignId<WithStreamedUnaryMethod_Execute<WithStreamedUnaryMethod_ExecuteAthenaQuery<WithStreamedUnaryMethod_ExecuteTestNewCampaign<WithStreamedUnaryMethod_ExecuteFilterCampaigns<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace CampaignService
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm


#endif  // GRPC_CampaignService_2fcampaign_5fservice_2eproto__INCLUDED
