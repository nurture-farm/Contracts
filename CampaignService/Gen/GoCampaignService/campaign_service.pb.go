// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: CampaignService/campaign_service.proto

package CampaignService

import (
	GoCommon "code.nurture.farm/Core/Contracts/Common/Gen/GoCommon"
	GoCommunicationEngine "code.nurture.farm/Core/Contracts/CommunicationEngine/Gen/GoCommunicationEngine"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders         *GoCommon.RequestHeaders                              `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Namespace              GoCommon.NameSpace                                    `protobuf:"varint,2,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Name                   string                                                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                                                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CronExpression         string                                                `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	Occurrences            int32                                                 `protobuf:"varint,6,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	ContentMetadata        []*GoCommon.Attribs                                   `protobuf:"bytes,7,rep,name=content_metadata,json=contentMetadata,proto3" json:"content_metadata,omitempty"`
	CommunicationChannel   GoCommon.CommunicationChannel                         `protobuf:"varint,8,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
	Status                 GoCommon.CampaignStatus                               `protobuf:"varint,9,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.CampaignStatus" json:"status,omitempty"`
	Type                   GoCommon.CampaignQueryType                            `protobuf:"varint,10,opt,name=type,proto3,enum=farm.nurture.core.contracts.common.CampaignQueryType" json:"type,omitempty"`
	CampaignScheduleType   GoCommon.CampaignScheduleType                         `protobuf:"varint,11,opt,name=campaignScheduleType,proto3,enum=farm.nurture.core.contracts.common.CampaignScheduleType" json:"campaignScheduleType,omitempty"`
	InactionDuration       *durationpb.Duration                                  `protobuf:"bytes,12,opt,name=inactionDuration,proto3" json:"inactionDuration,omitempty"`
	Query                  string                                                `protobuf:"bytes,13,opt,name=query,proto3" json:"query,omitempty"`
	InactionQuery          string                                                `protobuf:"bytes,14,opt,name=inaction_query,json=inactionQuery,proto3" json:"inaction_query,omitempty"`
	CreatedByActor         *GoCommon.ActorID                                     `protobuf:"bytes,15,opt,name=createdByActor,proto3" json:"createdByActor,omitempty"`
	Media                  *GoCommunicationEngine.Media                          `protobuf:"bytes,16,opt,name=media,proto3" json:"media,omitempty"`
	ChannelAttributes      *GoCommunicationEngine.CommunicationChannelAttributes `protobuf:"bytes,17,opt,name=channel_attributes,json=channelAttributes,proto3" json:"channel_attributes,omitempty"`
	Metadata               string                                                `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ControlGroupPercentage int32                                                 `protobuf:"varint,19,opt,name=controlGroupPercentage,proto3" json:"controlGroupPercentage,omitempty"`
}

func (x *AddCampaignRequest) Reset() {
	*x = AddCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCampaignRequest) ProtoMessage() {}

func (x *AddCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCampaignRequest.ProtoReflect.Descriptor instead.
func (*AddCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddCampaignRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *AddCampaignRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCampaignRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddCampaignRequest) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *AddCampaignRequest) GetOccurrences() int32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

func (x *AddCampaignRequest) GetContentMetadata() []*GoCommon.Attribs {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *AddCampaignRequest) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *AddCampaignRequest) GetStatus() GoCommon.CampaignStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.CampaignStatus_NO_CAMPAGIN_STATUS
}

func (x *AddCampaignRequest) GetType() GoCommon.CampaignQueryType {
	if x != nil {
		return x.Type
	}
	return GoCommon.CampaignQueryType_NO_CAMPAIGN_QUERY_TYPE
}

func (x *AddCampaignRequest) GetCampaignScheduleType() GoCommon.CampaignScheduleType {
	if x != nil {
		return x.CampaignScheduleType
	}
	return GoCommon.CampaignScheduleType_NO_CAMPAIGN_SCHEDULE_TYPE
}

func (x *AddCampaignRequest) GetInactionDuration() *durationpb.Duration {
	if x != nil {
		return x.InactionDuration
	}
	return nil
}

func (x *AddCampaignRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AddCampaignRequest) GetInactionQuery() string {
	if x != nil {
		return x.InactionQuery
	}
	return ""
}

func (x *AddCampaignRequest) GetCreatedByActor() *GoCommon.ActorID {
	if x != nil {
		return x.CreatedByActor
	}
	return nil
}

func (x *AddCampaignRequest) GetMedia() *GoCommunicationEngine.Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *AddCampaignRequest) GetChannelAttributes() *GoCommunicationEngine.CommunicationChannelAttributes {
	if x != nil {
		return x.ChannelAttributes
	}
	return nil
}

func (x *AddCampaignRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *AddCampaignRequest) GetControlGroupPercentage() int32 {
	if x != nil {
		return x.ControlGroupPercentage
	}
	return 0
}

type TestCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders       *GoCommon.RequestHeaders                              `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Namespace            GoCommon.NameSpace                                    `protobuf:"varint,2,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	ContentMetadata      []*GoCommon.Attribs                                   `protobuf:"bytes,3,rep,name=content_metadata,json=contentMetadata,proto3" json:"content_metadata,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel                         `protobuf:"varint,4,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
	Type                 GoCommon.CampaignQueryType                            `protobuf:"varint,5,opt,name=type,proto3,enum=farm.nurture.core.contracts.common.CampaignQueryType" json:"type,omitempty"`
	Query                string                                                `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Media                *GoCommunicationEngine.Media                          `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	ChannelAttributes    *GoCommunicationEngine.CommunicationChannelAttributes `protobuf:"bytes,8,opt,name=channel_attributes,json=channelAttributes,proto3" json:"channel_attributes,omitempty"`
}

func (x *TestCampaignRequest) Reset() {
	*x = TestCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCampaignRequest) ProtoMessage() {}

func (x *TestCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCampaignRequest.ProtoReflect.Descriptor instead.
func (*TestCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{1}
}

func (x *TestCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *TestCampaignRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *TestCampaignRequest) GetContentMetadata() []*GoCommon.Attribs {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *TestCampaignRequest) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *TestCampaignRequest) GetType() GoCommon.CampaignQueryType {
	if x != nil {
		return x.Type
	}
	return GoCommon.CampaignQueryType_NO_CAMPAIGN_QUERY_TYPE
}

func (x *TestCampaignRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TestCampaignRequest) GetMedia() *GoCommunicationEngine.Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TestCampaignRequest) GetChannelAttributes() *GoCommunicationEngine.CommunicationChannelAttributes {
	if x != nil {
		return x.ChannelAttributes
	}
	return nil
}

type BulkAddCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddCampaignRequest    `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddCampaignRequest) Reset() {
	*x = BulkAddCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddCampaignRequest) ProtoMessage() {}

func (x *BulkAddCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddCampaignRequest.ProtoReflect.Descriptor instead.
func (*BulkAddCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{2}
}

func (x *BulkAddCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddCampaignRequest) GetRequests() []*AddCampaignRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddCampaignResponse) Reset() {
	*x = AddCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCampaignResponse) ProtoMessage() {}

func (x *AddCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCampaignResponse.ProtoReflect.Descriptor instead.
func (*AddCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddCampaignResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddCampaignResponse        `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddCampaignResponse) Reset() {
	*x = BulkAddCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddCampaignResponse) ProtoMessage() {}

func (x *BulkAddCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddCampaignResponse.ProtoReflect.Descriptor instead.
func (*BulkAddCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{4}
}

func (x *BulkAddCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddCampaignResponse) GetResponses() []*AddCampaignResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddControlGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Attributes     string                   `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	BloomFilter    []byte                   `protobuf:"bytes,4,opt,name=bloomFilter,proto3" json:"bloomFilter,omitempty"`
}

func (x *AddControlGroupRequest) Reset() {
	*x = AddControlGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddControlGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddControlGroupRequest) ProtoMessage() {}

func (x *AddControlGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddControlGroupRequest.ProtoReflect.Descriptor instead.
func (*AddControlGroupRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{5}
}

func (x *AddControlGroupRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddControlGroupRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *AddControlGroupRequest) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *AddControlGroupRequest) GetBloomFilter() []byte {
	if x != nil {
		return x.BloomFilter
	}
	return nil
}

type AddControlGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddControlGroupResponse) Reset() {
	*x = AddControlGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddControlGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddControlGroupResponse) ProtoMessage() {}

func (x *AddControlGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddControlGroupResponse.ProtoReflect.Descriptor instead.
func (*AddControlGroupResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddControlGroupResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddControlGroupResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddControlGroupResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddControlGroupResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type UpdateCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders              *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Id                          int64                         `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	UpdatedByActor              *GoCommon.ActorID             `protobuf:"bytes,6,opt,name=updatedByActor,proto3" json:"updatedByActor,omitempty"`
	AddCampaignRequest          *AddCampaignRequest           `protobuf:"bytes,9,opt,name=addCampaignRequest,proto3" json:"addCampaignRequest,omitempty"`
	AddCampaignTemplateRequests []*AddCampaignTemplateRequest `protobuf:"bytes,10,rep,name=addCampaignTemplateRequests,proto3" json:"addCampaignTemplateRequests,omitempty"`
}

func (x *UpdateCampaignRequest) Reset() {
	*x = UpdateCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCampaignRequest) ProtoMessage() {}

func (x *UpdateCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCampaignRequest.ProtoReflect.Descriptor instead.
func (*UpdateCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateCampaignRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCampaignRequest) GetUpdatedByActor() *GoCommon.ActorID {
	if x != nil {
		return x.UpdatedByActor
	}
	return nil
}

func (x *UpdateCampaignRequest) GetAddCampaignRequest() *AddCampaignRequest {
	if x != nil {
		return x.AddCampaignRequest
	}
	return nil
}

func (x *UpdateCampaignRequest) GetAddCampaignTemplateRequests() []*AddCampaignTemplateRequest {
	if x != nil {
		return x.AddCampaignTemplateRequests
	}
	return nil
}

type BulkUpdateCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateCampaignRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateCampaignRequest) Reset() {
	*x = BulkUpdateCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateCampaignRequest) ProtoMessage() {}

func (x *BulkUpdateCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateCampaignRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{8}
}

func (x *BulkUpdateCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateCampaignRequest) GetRequests() []*UpdateCampaignRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateCampaignResponse) Reset() {
	*x = UpdateCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCampaignResponse) ProtoMessage() {}

func (x *UpdateCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCampaignResponse.ProtoReflect.Descriptor instead.
func (*UpdateCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateCampaignResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateCampaignResponse     `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateCampaignResponse) Reset() {
	*x = BulkUpdateCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateCampaignResponse) ProtoMessage() {}

func (x *BulkUpdateCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateCampaignResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{10}
}

func (x *BulkUpdateCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateCampaignResponse) GetResponses() []*UpdateCampaignResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddCampaignTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId          int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	TemplateName        string                   `protobuf:"bytes,3,opt,name=templateName,proto3" json:"templateName,omitempty"`
	CampaignName        string                   `protobuf:"bytes,4,opt,name=campaignName,proto3" json:"campaignName,omitempty"`
	DistributionPercent int32                    `protobuf:"varint,5,opt,name=distributionPercent,proto3" json:"distributionPercent,omitempty"`
}

func (x *AddCampaignTemplateRequest) Reset() {
	*x = AddCampaignTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCampaignTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCampaignTemplateRequest) ProtoMessage() {}

func (x *AddCampaignTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCampaignTemplateRequest.ProtoReflect.Descriptor instead.
func (*AddCampaignTemplateRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{11}
}

func (x *AddCampaignTemplateRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddCampaignTemplateRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *AddCampaignTemplateRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *AddCampaignTemplateRequest) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *AddCampaignTemplateRequest) GetDistributionPercent() int32 {
	if x != nil {
		return x.DistributionPercent
	}
	return 0
}

type TestCampaignTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	TemplateName        string                   `protobuf:"bytes,2,opt,name=templateName,proto3" json:"templateName,omitempty"`
	DistributionPercent int32                    `protobuf:"varint,3,opt,name=distributionPercent,proto3" json:"distributionPercent,omitempty"`
}

func (x *TestCampaignTemplateRequest) Reset() {
	*x = TestCampaignTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCampaignTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCampaignTemplateRequest) ProtoMessage() {}

func (x *TestCampaignTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCampaignTemplateRequest.ProtoReflect.Descriptor instead.
func (*TestCampaignTemplateRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{12}
}

func (x *TestCampaignTemplateRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *TestCampaignTemplateRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *TestCampaignTemplateRequest) GetDistributionPercent() int32 {
	if x != nil {
		return x.DistributionPercent
	}
	return 0
}

type BulkAddCampaignTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddCampaignTemplateRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddCampaignTemplateRequest) Reset() {
	*x = BulkAddCampaignTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddCampaignTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddCampaignTemplateRequest) ProtoMessage() {}

func (x *BulkAddCampaignTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddCampaignTemplateRequest.ProtoReflect.Descriptor instead.
func (*BulkAddCampaignTemplateRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{13}
}

func (x *BulkAddCampaignTemplateRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddCampaignTemplateRequest) GetRequests() []*AddCampaignTemplateRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddCampaignTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddCampaignTemplateResponse) Reset() {
	*x = AddCampaignTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCampaignTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCampaignTemplateResponse) ProtoMessage() {}

func (x *AddCampaignTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCampaignTemplateResponse.ProtoReflect.Descriptor instead.
func (*AddCampaignTemplateResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{14}
}

func (x *AddCampaignTemplateResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddCampaignTemplateResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddCampaignTemplateResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddCampaignTemplateResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddCampaignTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddCampaignTemplateResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddCampaignTemplateResponse) Reset() {
	*x = BulkAddCampaignTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddCampaignTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddCampaignTemplateResponse) ProtoMessage() {}

func (x *BulkAddCampaignTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddCampaignTemplateResponse.ProtoReflect.Descriptor instead.
func (*BulkAddCampaignTemplateResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{15}
}

func (x *BulkAddCampaignTemplateResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddCampaignTemplateResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddCampaignTemplateResponse) GetResponses() []*AddCampaignTemplateResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddNewCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders              *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	AddCampaignRequest          *AddCampaignRequest           `protobuf:"bytes,3,opt,name=addCampaignRequest,proto3" json:"addCampaignRequest,omitempty"`
	AddCampaignTemplateRequests []*AddCampaignTemplateRequest `protobuf:"bytes,4,rep,name=addCampaignTemplateRequests,proto3" json:"addCampaignTemplateRequests,omitempty"`
	AddTargetUserRequests       []*AddTargetUserRequest       `protobuf:"bytes,5,rep,name=addTargetUserRequests,proto3" json:"addTargetUserRequests,omitempty"`
}

func (x *AddNewCampaignRequest) Reset() {
	*x = AddNewCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewCampaignRequest) ProtoMessage() {}

func (x *AddNewCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewCampaignRequest.ProtoReflect.Descriptor instead.
func (*AddNewCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{16}
}

func (x *AddNewCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddNewCampaignRequest) GetAddCampaignRequest() *AddCampaignRequest {
	if x != nil {
		return x.AddCampaignRequest
	}
	return nil
}

func (x *AddNewCampaignRequest) GetAddCampaignTemplateRequests() []*AddCampaignTemplateRequest {
	if x != nil {
		return x.AddCampaignTemplateRequests
	}
	return nil
}

func (x *AddNewCampaignRequest) GetAddTargetUserRequests() []*AddTargetUserRequest {
	if x != nil {
		return x.AddTargetUserRequests
	}
	return nil
}

type BulkAddNewCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddNewCampaignRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddNewCampaignRequest) Reset() {
	*x = BulkAddNewCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddNewCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddNewCampaignRequest) ProtoMessage() {}

func (x *BulkAddNewCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddNewCampaignRequest.ProtoReflect.Descriptor instead.
func (*BulkAddNewCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{17}
}

func (x *BulkAddNewCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddNewCampaignRequest) GetRequests() []*AddNewCampaignRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddNewCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddNewCampaignResponse) Reset() {
	*x = AddNewCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewCampaignResponse) ProtoMessage() {}

func (x *AddNewCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewCampaignResponse.ProtoReflect.Descriptor instead.
func (*AddNewCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{18}
}

func (x *AddNewCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddNewCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddNewCampaignResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddNewCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddNewCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddNewCampaignResponse     `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddNewCampaignResponse) Reset() {
	*x = BulkAddNewCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddNewCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddNewCampaignResponse) ProtoMessage() {}

func (x *BulkAddNewCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddNewCampaignResponse.ProtoReflect.Descriptor instead.
func (*BulkAddNewCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{19}
}

func (x *BulkAddNewCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddNewCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddNewCampaignResponse) GetResponses() []*AddNewCampaignResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *CampaignRequest) Reset() {
	*x = CampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignRequest) ProtoMessage() {}

func (x *CampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignRequest.ProtoReflect.Descriptor instead.
func (*CampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{20}
}

func (x *CampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *CampaignRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *CampaignRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type CampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count  int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CampaignResponse) Reset() {
	*x = CampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignResponse) ProtoMessage() {}

func (x *CampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignResponse.ProtoReflect.Descriptor instead.
func (*CampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{21}
}

func (x *CampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FindCampaignByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindCampaignByIdRequest) Reset() {
	*x = FindCampaignByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignByIdRequest) ProtoMessage() {}

func (x *FindCampaignByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignByIdRequest.ProtoReflect.Descriptor instead.
func (*FindCampaignByIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{22}
}

func (x *FindCampaignByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindCampaignByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindCampaignByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindCampaignByIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string                            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CronExpression       string                            `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	Occurrences          int32                             `protobuf:"varint,6,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	CommunicationChannel string                            `protobuf:"bytes,7,opt,name=communicationChannel,proto3" json:"communicationChannel,omitempty"`
	Status               string                            `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Type                 string                            `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	ScheduleType         string                            `protobuf:"bytes,10,opt,name=scheduleType,proto3" json:"scheduleType,omitempty"`
	Query                string                            `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
	InactionQuery        string                            `protobuf:"bytes,12,opt,name=inactionQuery,proto3" json:"inactionQuery,omitempty"`
	InactionDuration     int64                             `protobuf:"varint,13,opt,name=inactionDuration,proto3" json:"inactionDuration,omitempty"`
	Attributes           string                            `protobuf:"bytes,14,opt,name=attributes,proto3" json:"attributes,omitempty"`
	CreatedByActorid     int64                             `protobuf:"varint,15,opt,name=createdByActorid,proto3" json:"createdByActorid,omitempty"`
	CreatedByActortype   string                            `protobuf:"bytes,16,opt,name=createdByActortype,proto3" json:"createdByActortype,omitempty"`
	UpdatedByActorid     int64                             `protobuf:"varint,17,opt,name=updatedByActorid,proto3" json:"updatedByActorid,omitempty"`
	UpdatedByActortype   string                            `protobuf:"bytes,18,opt,name=updatedByActortype,proto3" json:"updatedByActortype,omitempty"`
	Version              int64                             `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt            int64                             `protobuf:"varint,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            int64                             `protobuf:"varint,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt            int64                             `protobuf:"varint,22,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	TemplateResponse     *FindCampaignTemplateByIdResponse `protobuf:"bytes,23,opt,name=templateResponse,proto3" json:"templateResponse,omitempty"`
}

func (x *FindCampaignByIdResponseRecord) Reset() {
	*x = FindCampaignByIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignByIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignByIdResponseRecord) ProtoMessage() {}

func (x *FindCampaignByIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignByIdResponseRecord.ProtoReflect.Descriptor instead.
func (*FindCampaignByIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{23}
}

func (x *FindCampaignByIdResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetOccurrences() int32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetCommunicationChannel() string {
	if x != nil {
		return x.CommunicationChannel
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetInactionQuery() string {
	if x != nil {
		return x.InactionQuery
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetInactionDuration() int64 {
	if x != nil {
		return x.InactionDuration
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetCreatedByActorid() int64 {
	if x != nil {
		return x.CreatedByActorid
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetCreatedByActortype() string {
	if x != nil {
		return x.CreatedByActortype
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetUpdatedByActorid() int64 {
	if x != nil {
		return x.UpdatedByActorid
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetUpdatedByActortype() string {
	if x != nil {
		return x.UpdatedByActortype
	}
	return ""
}

func (x *FindCampaignByIdResponseRecord) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *FindCampaignByIdResponseRecord) GetTemplateResponse() *FindCampaignTemplateByIdResponse {
	if x != nil {
		return x.TemplateResponse
	}
	return nil
}

type FindCampaignByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs             `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records *FindCampaignByIdResponseRecord `protobuf:"bytes,4,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *FindCampaignByIdResponse) Reset() {
	*x = FindCampaignByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignByIdResponse) ProtoMessage() {}

func (x *FindCampaignByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignByIdResponse.ProtoReflect.Descriptor instead.
func (*FindCampaignByIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{24}
}

func (x *FindCampaignByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindCampaignByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindCampaignByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindCampaignByIdResponse) GetRecords() *FindCampaignByIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FindControlGroupByCampaignIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *FindControlGroupByCampaignIdRequest) Reset() {
	*x = FindControlGroupByCampaignIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindControlGroupByCampaignIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindControlGroupByCampaignIdRequest) ProtoMessage() {}

func (x *FindControlGroupByCampaignIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindControlGroupByCampaignIdRequest.ProtoReflect.Descriptor instead.
func (*FindControlGroupByCampaignIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{25}
}

func (x *FindControlGroupByCampaignIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindControlGroupByCampaignIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindControlGroupByCampaignIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type FindControlGroupByCampaignIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId  int64  `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Attributes  string `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	BloomFilter []byte `protobuf:"bytes,4,opt,name=bloomFilter,proto3" json:"bloomFilter,omitempty"`
}

func (x *FindControlGroupByCampaignIdResponseRecord) Reset() {
	*x = FindControlGroupByCampaignIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindControlGroupByCampaignIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindControlGroupByCampaignIdResponseRecord) ProtoMessage() {}

func (x *FindControlGroupByCampaignIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindControlGroupByCampaignIdResponseRecord.ProtoReflect.Descriptor instead.
func (*FindControlGroupByCampaignIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{26}
}

func (x *FindControlGroupByCampaignIdResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindControlGroupByCampaignIdResponseRecord) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *FindControlGroupByCampaignIdResponseRecord) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *FindControlGroupByCampaignIdResponseRecord) GetBloomFilter() []byte {
	if x != nil {
		return x.BloomFilter
	}
	return nil
}

type FindControlGroupByCampaignIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                         `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records *FindControlGroupByCampaignIdResponseRecord `protobuf:"bytes,4,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *FindControlGroupByCampaignIdResponse) Reset() {
	*x = FindControlGroupByCampaignIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindControlGroupByCampaignIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindControlGroupByCampaignIdResponse) ProtoMessage() {}

func (x *FindControlGroupByCampaignIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindControlGroupByCampaignIdResponse.ProtoReflect.Descriptor instead.
func (*FindControlGroupByCampaignIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{27}
}

func (x *FindControlGroupByCampaignIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindControlGroupByCampaignIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindControlGroupByCampaignIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindControlGroupByCampaignIdResponse) GetRecords() *FindControlGroupByCampaignIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FindCampaignTemplateByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *FindCampaignTemplateByIdRequest) Reset() {
	*x = FindCampaignTemplateByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignTemplateByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignTemplateByIdRequest) ProtoMessage() {}

func (x *FindCampaignTemplateByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignTemplateByIdRequest.ProtoReflect.Descriptor instead.
func (*FindCampaignTemplateByIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{28}
}

func (x *FindCampaignTemplateByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindCampaignTemplateByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindCampaignTemplateByIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type FindCampaignTemplateByIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId          int64  `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	TemplateName        string `protobuf:"bytes,3,opt,name=templateName,proto3" json:"templateName,omitempty"`
	CampaignName        string `protobuf:"bytes,4,opt,name=campaignName,proto3" json:"campaignName,omitempty"`
	DistributionPercent int32  `protobuf:"varint,5,opt,name=distributionPercent,proto3" json:"distributionPercent,omitempty"`
}

func (x *FindCampaignTemplateByIdResponseRecord) Reset() {
	*x = FindCampaignTemplateByIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignTemplateByIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignTemplateByIdResponseRecord) ProtoMessage() {}

func (x *FindCampaignTemplateByIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignTemplateByIdResponseRecord.ProtoReflect.Descriptor instead.
func (*FindCampaignTemplateByIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{29}
}

func (x *FindCampaignTemplateByIdResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindCampaignTemplateByIdResponseRecord) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *FindCampaignTemplateByIdResponseRecord) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *FindCampaignTemplateByIdResponseRecord) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *FindCampaignTemplateByIdResponseRecord) GetDistributionPercent() int32 {
	if x != nil {
		return x.DistributionPercent
	}
	return 0
}

type FindCampaignTemplateByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                       `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindCampaignTemplateByIdResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindCampaignTemplateByIdResponse) Reset() {
	*x = FindCampaignTemplateByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCampaignTemplateByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCampaignTemplateByIdResponse) ProtoMessage() {}

func (x *FindCampaignTemplateByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCampaignTemplateByIdResponse.ProtoReflect.Descriptor instead.
func (*FindCampaignTemplateByIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{30}
}

func (x *FindCampaignTemplateByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindCampaignTemplateByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindCampaignTemplateByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindCampaignTemplateByIdResponse) GetRecords() []*FindCampaignTemplateByIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FindTargetUserByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *FindTargetUserByIdRequest) Reset() {
	*x = FindTargetUserByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTargetUserByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTargetUserByIdRequest) ProtoMessage() {}

func (x *FindTargetUserByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTargetUserByIdRequest.ProtoReflect.Descriptor instead.
func (*FindTargetUserByIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{31}
}

func (x *FindTargetUserByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindTargetUserByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindTargetUserByIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type FindTargetUserByIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId int64               `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	UserId     int64               `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	UserType   string              `protobuf:"bytes,4,opt,name=userType,proto3" json:"userType,omitempty"`
	Attribs    []*GoCommon.Attribs `protobuf:"bytes,5,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *FindTargetUserByIdResponseRecord) Reset() {
	*x = FindTargetUserByIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTargetUserByIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTargetUserByIdResponseRecord) ProtoMessage() {}

func (x *FindTargetUserByIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTargetUserByIdResponseRecord.ProtoReflect.Descriptor instead.
func (*FindTargetUserByIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{32}
}

func (x *FindTargetUserByIdResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindTargetUserByIdResponseRecord) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *FindTargetUserByIdResponseRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindTargetUserByIdResponseRecord) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *FindTargetUserByIdResponseRecord) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type FindTargetUserByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                 `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindTargetUserByIdResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindTargetUserByIdResponse) Reset() {
	*x = FindTargetUserByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTargetUserByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTargetUserByIdResponse) ProtoMessage() {}

func (x *FindTargetUserByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTargetUserByIdResponse.ProtoReflect.Descriptor instead.
func (*FindTargetUserByIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{33}
}

func (x *FindTargetUserByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindTargetUserByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindTargetUserByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindTargetUserByIdResponse) GetRecords() []*FindTargetUserByIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetDynamicDataByKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	DynamicKey     string                   `protobuf:"bytes,4,opt,name=dynamicKey,proto3" json:"dynamicKey,omitempty"`
}

func (x *GetDynamicDataByKeyRequest) Reset() {
	*x = GetDynamicDataByKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDynamicDataByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDynamicDataByKeyRequest) ProtoMessage() {}

func (x *GetDynamicDataByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDynamicDataByKeyRequest.ProtoReflect.Descriptor instead.
func (*GetDynamicDataByKeyRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetDynamicDataByKeyRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetDynamicDataByKeyRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetDynamicDataByKeyRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *GetDynamicDataByKeyRequest) GetDynamicKey() string {
	if x != nil {
		return x.DynamicKey
	}
	return ""
}

type GetDynamicDataByKeyResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignId int64  `protobuf:"varint,1,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	DynamicKey string `protobuf:"bytes,2,opt,name=dynamicKey,proto3" json:"dynamicKey,omitempty"`
	CtaLink    string `protobuf:"bytes,3,opt,name=ctaLink,proto3" json:"ctaLink,omitempty"`
	Media      string `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *GetDynamicDataByKeyResponseRecord) Reset() {
	*x = GetDynamicDataByKeyResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDynamicDataByKeyResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDynamicDataByKeyResponseRecord) ProtoMessage() {}

func (x *GetDynamicDataByKeyResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDynamicDataByKeyResponseRecord.ProtoReflect.Descriptor instead.
func (*GetDynamicDataByKeyResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetDynamicDataByKeyResponseRecord) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *GetDynamicDataByKeyResponseRecord) GetDynamicKey() string {
	if x != nil {
		return x.DynamicKey
	}
	return ""
}

func (x *GetDynamicDataByKeyResponseRecord) GetCtaLink() string {
	if x != nil {
		return x.CtaLink
	}
	return ""
}

func (x *GetDynamicDataByKeyResponseRecord) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

type GetDynamicDataByKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                  `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*GetDynamicDataByKeyResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetDynamicDataByKeyResponse) Reset() {
	*x = GetDynamicDataByKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDynamicDataByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDynamicDataByKeyResponse) ProtoMessage() {}

func (x *GetDynamicDataByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDynamicDataByKeyResponse.ProtoReflect.Descriptor instead.
func (*GetDynamicDataByKeyResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetDynamicDataByKeyResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetDynamicDataByKeyResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetDynamicDataByKeyResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetDynamicDataByKeyResponse) GetRecords() []*GetDynamicDataByKeyResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AddDynamicDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	DynamicKey     string                   `protobuf:"bytes,3,opt,name=dynamicKey,proto3" json:"dynamicKey,omitempty"`
	CtaLink        string                   `protobuf:"bytes,4,opt,name=ctaLink,proto3" json:"ctaLink,omitempty"`
	Media          string                   `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *AddDynamicDataRequest) Reset() {
	*x = AddDynamicDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicDataRequest) ProtoMessage() {}

func (x *AddDynamicDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicDataRequest.ProtoReflect.Descriptor instead.
func (*AddDynamicDataRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{37}
}

func (x *AddDynamicDataRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddDynamicDataRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *AddDynamicDataRequest) GetDynamicKey() string {
	if x != nil {
		return x.DynamicKey
	}
	return ""
}

func (x *AddDynamicDataRequest) GetCtaLink() string {
	if x != nil {
		return x.CtaLink
	}
	return ""
}

func (x *AddDynamicDataRequest) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

type BulkAddDynamicDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddDynamicDataRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddDynamicDataRequest) Reset() {
	*x = BulkAddDynamicDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddDynamicDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddDynamicDataRequest) ProtoMessage() {}

func (x *BulkAddDynamicDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddDynamicDataRequest.ProtoReflect.Descriptor instead.
func (*BulkAddDynamicDataRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{38}
}

func (x *BulkAddDynamicDataRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddDynamicDataRequest) GetRequests() []*AddDynamicDataRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddDynamicDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddDynamicDataResponse) Reset() {
	*x = AddDynamicDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicDataResponse) ProtoMessage() {}

func (x *AddDynamicDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicDataResponse.ProtoReflect.Descriptor instead.
func (*AddDynamicDataResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{39}
}

func (x *AddDynamicDataResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddDynamicDataResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddDynamicDataResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddDynamicDataResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddDynamicDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddDynamicDataResponse     `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddDynamicDataResponse) Reset() {
	*x = BulkAddDynamicDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddDynamicDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddDynamicDataResponse) ProtoMessage() {}

func (x *BulkAddDynamicDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddDynamicDataResponse.ProtoReflect.Descriptor instead.
func (*BulkAddDynamicDataResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{40}
}

func (x *BulkAddDynamicDataResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddDynamicDataResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddDynamicDataResponse) GetResponses() []*AddDynamicDataResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type FindQueryCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Type           string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FindQueryCampaignRequest) Reset() {
	*x = FindQueryCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindQueryCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindQueryCampaignRequest) ProtoMessage() {}

func (x *FindQueryCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindQueryCampaignRequest.ProtoReflect.Descriptor instead.
func (*FindQueryCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{41}
}

func (x *FindQueryCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindQueryCampaignRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindQueryCampaignRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FindQueryCampaignResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FindQueryCampaignResponseRecord) Reset() {
	*x = FindQueryCampaignResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindQueryCampaignResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindQueryCampaignResponseRecord) ProtoMessage() {}

func (x *FindQueryCampaignResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindQueryCampaignResponseRecord.ProtoReflect.Descriptor instead.
func (*FindQueryCampaignResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{42}
}

func (x *FindQueryCampaignResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindQueryCampaignResponseRecord) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FindQueryCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindQueryCampaignResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindQueryCampaignResponse) Reset() {
	*x = FindQueryCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindQueryCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindQueryCampaignResponse) ProtoMessage() {}

func (x *FindQueryCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindQueryCampaignResponse.ProtoReflect.Descriptor instead.
func (*FindQueryCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{43}
}

func (x *FindQueryCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindQueryCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindQueryCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindQueryCampaignResponse) GetRecords() []*FindQueryCampaignResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AddQueryCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name           string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Query          string                   `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	UpdatedBy      string                   `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *AddQueryCampaignRequest) Reset() {
	*x = AddQueryCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQueryCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQueryCampaignRequest) ProtoMessage() {}

func (x *AddQueryCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQueryCampaignRequest.ProtoReflect.Descriptor instead.
func (*AddQueryCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{44}
}

func (x *AddQueryCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddQueryCampaignRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddQueryCampaignRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddQueryCampaignRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AddQueryCampaignRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type BulkAddQueryCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders   `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddQueryCampaignRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddQueryCampaignRequest) Reset() {
	*x = BulkAddQueryCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddQueryCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddQueryCampaignRequest) ProtoMessage() {}

func (x *BulkAddQueryCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddQueryCampaignRequest.ProtoReflect.Descriptor instead.
func (*BulkAddQueryCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{45}
}

func (x *BulkAddQueryCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddQueryCampaignRequest) GetRequests() []*AddQueryCampaignRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddQueryCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddQueryCampaignResponse) Reset() {
	*x = AddQueryCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQueryCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQueryCampaignResponse) ProtoMessage() {}

func (x *AddQueryCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQueryCampaignResponse.ProtoReflect.Descriptor instead.
func (*AddQueryCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{46}
}

func (x *AddQueryCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddQueryCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddQueryCampaignResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddQueryCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddQueryCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddQueryCampaignResponse   `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddQueryCampaignResponse) Reset() {
	*x = BulkAddQueryCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddQueryCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddQueryCampaignResponse) ProtoMessage() {}

func (x *BulkAddQueryCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddQueryCampaignResponse.ProtoReflect.Descriptor instead.
func (*BulkAddQueryCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{47}
}

func (x *BulkAddQueryCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddQueryCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddQueryCampaignResponse) GetResponses() []*AddQueryCampaignResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddTargetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	User           *GoCommon.ActorID        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Attribs        []*GoCommon.Attribs      `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddTargetUserRequest) Reset() {
	*x = AddTargetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTargetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTargetUserRequest) ProtoMessage() {}

func (x *AddTargetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTargetUserRequest.ProtoReflect.Descriptor instead.
func (*AddTargetUserRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{48}
}

func (x *AddTargetUserRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddTargetUserRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *AddTargetUserRequest) GetUser() *GoCommon.ActorID {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AddTargetUserRequest) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type TestTargetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	User           *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Attribs        []*GoCommon.Attribs      `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *TestTargetUserRequest) Reset() {
	*x = TestTargetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTargetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTargetUserRequest) ProtoMessage() {}

func (x *TestTargetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTargetUserRequest.ProtoReflect.Descriptor instead.
func (*TestTargetUserRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{49}
}

func (x *TestTargetUserRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *TestTargetUserRequest) GetUser() *GoCommon.ActorID {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TestTargetUserRequest) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddTargetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddTargetUserRequest  `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddTargetUserRequest) Reset() {
	*x = BulkAddTargetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddTargetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddTargetUserRequest) ProtoMessage() {}

func (x *BulkAddTargetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddTargetUserRequest.ProtoReflect.Descriptor instead.
func (*BulkAddTargetUserRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{50}
}

func (x *BulkAddTargetUserRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddTargetUserRequest) GetRequests() []*AddTargetUserRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddTargetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddTargetUserResponse) Reset() {
	*x = AddTargetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTargetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTargetUserResponse) ProtoMessage() {}

func (x *AddTargetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTargetUserResponse.ProtoReflect.Descriptor instead.
func (*AddTargetUserResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{51}
}

func (x *AddTargetUserResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddTargetUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddTargetUserResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddTargetUserResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddTargetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddTargetUserResponse      `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddTargetUserResponse) Reset() {
	*x = BulkAddTargetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddTargetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddTargetUserResponse) ProtoMessage() {}

func (x *BulkAddTargetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddTargetUserResponse.ProtoReflect.Descriptor instead.
func (*BulkAddTargetUserResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{52}
}

func (x *BulkAddTargetUserResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddTargetUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddTargetUserResponse) GetResponses() []*AddTargetUserResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddInactionTargetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	User           *GoCommon.ActorID        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddInactionTargetUserRequest) Reset() {
	*x = AddInactionTargetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInactionTargetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInactionTargetUserRequest) ProtoMessage() {}

func (x *AddInactionTargetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInactionTargetUserRequest.ProtoReflect.Descriptor instead.
func (*AddInactionTargetUserRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{53}
}

func (x *AddInactionTargetUserRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddInactionTargetUserRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *AddInactionTargetUserRequest) GetUser() *GoCommon.ActorID {
	if x != nil {
		return x.User
	}
	return nil
}

type BulkAddInactionTargetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders        `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddInactionTargetUserRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddInactionTargetUserRequest) Reset() {
	*x = BulkAddInactionTargetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddInactionTargetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddInactionTargetUserRequest) ProtoMessage() {}

func (x *BulkAddInactionTargetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddInactionTargetUserRequest.ProtoReflect.Descriptor instead.
func (*BulkAddInactionTargetUserRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{54}
}

func (x *BulkAddInactionTargetUserRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddInactionTargetUserRequest) GetRequests() []*AddInactionTargetUserRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddInactionTargetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddInactionTargetUserResponse) Reset() {
	*x = AddInactionTargetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInactionTargetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInactionTargetUserResponse) ProtoMessage() {}

func (x *AddInactionTargetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInactionTargetUserResponse.ProtoReflect.Descriptor instead.
func (*AddInactionTargetUserResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{55}
}

func (x *AddInactionTargetUserResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddInactionTargetUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddInactionTargetUserResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddInactionTargetUserResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddInactionTargetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddInactionTargetUserResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddInactionTargetUserResponse) Reset() {
	*x = BulkAddInactionTargetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddInactionTargetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddInactionTargetUserResponse) ProtoMessage() {}

func (x *BulkAddInactionTargetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddInactionTargetUserResponse.ProtoReflect.Descriptor instead.
func (*BulkAddInactionTargetUserResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{56}
}

func (x *BulkAddInactionTargetUserResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddInactionTargetUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddInactionTargetUserResponse) GetResponses() []*AddInactionTargetUserResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type FindInactionTargetUserByCampaignIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CampaignId     int64                    `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *FindInactionTargetUserByCampaignIdRequest) Reset() {
	*x = FindInactionTargetUserByCampaignIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInactionTargetUserByCampaignIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInactionTargetUserByCampaignIdRequest) ProtoMessage() {}

func (x *FindInactionTargetUserByCampaignIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInactionTargetUserByCampaignIdRequest.ProtoReflect.Descriptor instead.
func (*FindInactionTargetUserByCampaignIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{57}
}

func (x *FindInactionTargetUserByCampaignIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindInactionTargetUserByCampaignIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindInactionTargetUserByCampaignIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type FindInactionTargetUserByCampaignIdResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId int64  `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	UserId     int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	UserType   string `protobuf:"bytes,4,opt,name=userType,proto3" json:"userType,omitempty"`
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) Reset() {
	*x = FindInactionTargetUserByCampaignIdResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInactionTargetUserByCampaignIdResponseRecord) ProtoMessage() {}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInactionTargetUserByCampaignIdResponseRecord.ProtoReflect.Descriptor instead.
func (*FindInactionTargetUserByCampaignIdResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{58}
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindInactionTargetUserByCampaignIdResponseRecord) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

type FindInactionTargetUserByCampaignIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                                 `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindInactionTargetUserByCampaignIdResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindInactionTargetUserByCampaignIdResponse) Reset() {
	*x = FindInactionTargetUserByCampaignIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInactionTargetUserByCampaignIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInactionTargetUserByCampaignIdResponse) ProtoMessage() {}

func (x *FindInactionTargetUserByCampaignIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInactionTargetUserByCampaignIdResponse.ProtoReflect.Descriptor instead.
func (*FindInactionTargetUserByCampaignIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{59}
}

func (x *FindInactionTargetUserByCampaignIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindInactionTargetUserByCampaignIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindInactionTargetUserByCampaignIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindInactionTargetUserByCampaignIdResponse) GetRecords() []*FindInactionTargetUserByCampaignIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AthenaQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	AthenaQuery    string                   `protobuf:"bytes,2,opt,name=athenaQuery,proto3" json:"athenaQuery,omitempty"`
}

func (x *AthenaQueryRequest) Reset() {
	*x = AthenaQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthenaQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthenaQueryRequest) ProtoMessage() {}

func (x *AthenaQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthenaQueryRequest.ProtoReflect.Descriptor instead.
func (*AthenaQueryRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{60}
}

func (x *AthenaQueryRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AthenaQueryRequest) GetAthenaQuery() string {
	if x != nil {
		return x.AthenaQuery
	}
	return ""
}

type AthenaQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count  int64                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AthenaQueryResponse) Reset() {
	*x = AthenaQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthenaQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthenaQueryResponse) ProtoMessage() {}

func (x *AthenaQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthenaQueryResponse.ProtoReflect.Descriptor instead.
func (*AthenaQueryResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{61}
}

func (x *AthenaQueryResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AthenaQueryResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TestNewCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders               *GoCommon.RequestHeaders       `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	TestCampaignRequest          *TestCampaignRequest           `protobuf:"bytes,3,opt,name=testCampaignRequest,proto3" json:"testCampaignRequest,omitempty"`
	TestCampaignTemplateRequests []*TestCampaignTemplateRequest `protobuf:"bytes,4,rep,name=testCampaignTemplateRequests,proto3" json:"testCampaignTemplateRequests,omitempty"`
	TestTargetUserRequests       []*TestTargetUserRequest       `protobuf:"bytes,5,rep,name=testTargetUserRequests,proto3" json:"testTargetUserRequests,omitempty"`
}

func (x *TestNewCampaignRequest) Reset() {
	*x = TestNewCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNewCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNewCampaignRequest) ProtoMessage() {}

func (x *TestNewCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNewCampaignRequest.ProtoReflect.Descriptor instead.
func (*TestNewCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{62}
}

func (x *TestNewCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *TestNewCampaignRequest) GetTestCampaignRequest() *TestCampaignRequest {
	if x != nil {
		return x.TestCampaignRequest
	}
	return nil
}

func (x *TestNewCampaignRequest) GetTestCampaignTemplateRequests() []*TestCampaignTemplateRequest {
	if x != nil {
		return x.TestCampaignTemplateRequests
	}
	return nil
}

func (x *TestNewCampaignRequest) GetTestTargetUserRequests() []*TestTargetUserRequest {
	if x != nil {
		return x.TestTargetUserRequests
	}
	return nil
}

type TestNewCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestNewCampaignResponse) Reset() {
	*x = TestNewCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNewCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNewCampaignResponse) ProtoMessage() {}

func (x *TestNewCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNewCampaignResponse.ProtoReflect.Descriptor instead.
func (*TestNewCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{63}
}

func (x *TestNewCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

type ScheduleUserJourneyCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Namespace           GoCommon.NameSpace       `protobuf:"varint,2,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Name                string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Campaign            *UserJourneyCampaign     `protobuf:"bytes,4,opt,name=campaign,proto3" json:"campaign,omitempty"`
	CreatedByActor      *GoCommon.ActorID        `protobuf:"bytes,7,opt,name=createdByActor,proto3" json:"createdByActor,omitempty"`
	CampaignId          int64                    `protobuf:"varint,8,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	TriggerCampaign     bool                     `protobuf:"varint,9,opt,name=triggerCampaign,proto3" json:"triggerCampaign,omitempty"`
	UserJourneyMetadata string                   `protobuf:"bytes,10,opt,name=userJourneyMetadata,proto3" json:"userJourneyMetadata,omitempty"`
	EngagementMetadata  string                   `protobuf:"bytes,11,opt,name=engagementMetadata,proto3" json:"engagementMetadata,omitempty"`
}

func (x *ScheduleUserJourneyCampaignRequest) Reset() {
	*x = ScheduleUserJourneyCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleUserJourneyCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleUserJourneyCampaignRequest) ProtoMessage() {}

func (x *ScheduleUserJourneyCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleUserJourneyCampaignRequest.ProtoReflect.Descriptor instead.
func (*ScheduleUserJourneyCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{64}
}

func (x *ScheduleUserJourneyCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *ScheduleUserJourneyCampaignRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleUserJourneyCampaignRequest) GetCampaign() *UserJourneyCampaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignRequest) GetCreatedByActor() *GoCommon.ActorID {
	if x != nil {
		return x.CreatedByActor
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *ScheduleUserJourneyCampaignRequest) GetTriggerCampaign() bool {
	if x != nil {
		return x.TriggerCampaign
	}
	return false
}

func (x *ScheduleUserJourneyCampaignRequest) GetUserJourneyMetadata() string {
	if x != nil {
		return x.UserJourneyMetadata
	}
	return ""
}

func (x *ScheduleUserJourneyCampaignRequest) GetEngagementMetadata() string {
	if x != nil {
		return x.EngagementMetadata
	}
	return ""
}

type UserJourneyCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserJourneys          []*UserJourney    `protobuf:"bytes,1,rep,name=userJourneys,proto3" json:"userJourneys,omitempty"`
	EngagementStartVertex *EngagementVertex `protobuf:"bytes,2,opt,name=engagementStartVertex,proto3" json:"engagementStartVertex,omitempty"`
}

func (x *UserJourneyCampaign) Reset() {
	*x = UserJourneyCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyCampaign) ProtoMessage() {}

func (x *UserJourneyCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyCampaign.ProtoReflect.Descriptor instead.
func (*UserJourneyCampaign) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{65}
}

func (x *UserJourneyCampaign) GetUserJourneys() []*UserJourney {
	if x != nil {
		return x.UserJourneys
	}
	return nil
}

func (x *UserJourneyCampaign) GetEngagementStartVertex() *EngagementVertex {
	if x != nil {
		return x.EngagementStartVertex
	}
	return nil
}

type UserJourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserJourneyVertex *UserJourneyVertex       `protobuf:"bytes,1,opt,name=userJourneyVertex,proto3" json:"userJourneyVertex,omitempty"`
	Operator          GoCommon.LogicalOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=farm.nurture.core.contracts.common.LogicalOperator" json:"operator,omitempty"`
	UserMetadata      *UserMetadata            `protobuf:"bytes,3,opt,name=userMetadata,proto3" json:"userMetadata,omitempty"`
}

func (x *UserJourney) Reset() {
	*x = UserJourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourney) ProtoMessage() {}

func (x *UserJourney) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourney.ProtoReflect.Descriptor instead.
func (*UserJourney) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{66}
}

func (x *UserJourney) GetUserJourneyVertex() *UserJourneyVertex {
	if x != nil {
		return x.UserJourneyVertex
	}
	return nil
}

func (x *UserJourney) GetOperator() GoCommon.LogicalOperator {
	if x != nil {
		return x.Operator
	}
	return GoCommon.LogicalOperator_NO_LOGICAL_OPERATOR
}

func (x *UserJourney) GetUserMetadata() *UserMetadata {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type UserJourneyVertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventType             GoCommon.UserJourneyEventType `protobuf:"varint,2,opt,name=eventType,proto3,enum=farm.nurture.core.contracts.common.UserJourneyEventType" json:"eventType,omitempty"`
	EventMetadata         *EventMetadata                `protobuf:"bytes,3,opt,name=eventMetadata,proto3" json:"eventMetadata,omitempty"`
	InactionEventMetadata *EventMetadata                `protobuf:"bytes,4,opt,name=inactionEventMetadata,proto3" json:"inactionEventMetadata,omitempty"`
	InactionDuration      string                        `protobuf:"bytes,5,opt,name=inactionDuration,proto3" json:"inactionDuration,omitempty"`
	Edge                  *UserJourneyEdge              `protobuf:"bytes,6,opt,name=edge,proto3" json:"edge,omitempty"`
	PastEventData         []*PastEventData              `protobuf:"bytes,8,rep,name=pastEventData,proto3" json:"pastEventData,omitempty"`
}

func (x *UserJourneyVertex) Reset() {
	*x = UserJourneyVertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyVertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyVertex) ProtoMessage() {}

func (x *UserJourneyVertex) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyVertex.ProtoReflect.Descriptor instead.
func (*UserJourneyVertex) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{67}
}

func (x *UserJourneyVertex) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserJourneyVertex) GetEventType() GoCommon.UserJourneyEventType {
	if x != nil {
		return x.EventType
	}
	return GoCommon.UserJourneyEventType_NO_USER_JOURNEY_EVENT_TYPE
}

func (x *UserJourneyVertex) GetEventMetadata() *EventMetadata {
	if x != nil {
		return x.EventMetadata
	}
	return nil
}

func (x *UserJourneyVertex) GetInactionEventMetadata() *EventMetadata {
	if x != nil {
		return x.InactionEventMetadata
	}
	return nil
}

func (x *UserJourneyVertex) GetInactionDuration() string {
	if x != nil {
		return x.InactionDuration
	}
	return ""
}

func (x *UserJourneyVertex) GetEdge() *UserJourneyEdge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *UserJourneyVertex) GetPastEventData() []*PastEventData {
	if x != nil {
		return x.PastEventData
	}
	return nil
}

type PastEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType    GoCommon.UserJourneyEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=farm.nurture.core.contracts.common.UserJourneyEventType" json:"eventType,omitempty"`
	EventName    string                        `protobuf:"bytes,2,opt,name=eventName,proto3" json:"eventName,omitempty"`
	EventFilters []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=eventFilters,proto3" json:"eventFilters,omitempty"`
	Duration     string                        `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PastEventData) Reset() {
	*x = PastEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PastEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastEventData) ProtoMessage() {}

func (x *PastEventData) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastEventData.ProtoReflect.Descriptor instead.
func (*PastEventData) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{68}
}

func (x *PastEventData) GetEventType() GoCommon.UserJourneyEventType {
	if x != nil {
		return x.EventType
	}
	return GoCommon.UserJourneyEventType_NO_USER_JOURNEY_EVENT_TYPE
}

func (x *PastEventData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *PastEventData) GetEventFilters() []*GoCommon.Attribs {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *PastEventData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

type EventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName    string              `protobuf:"bytes,1,opt,name=eventName,proto3" json:"eventName,omitempty"`
	EventFilters []*GoCommon.Attribs `protobuf:"bytes,2,rep,name=eventFilters,proto3" json:"eventFilters,omitempty"`
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{69}
}

func (x *EventMetadata) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventMetadata) GetEventFilters() []*GoCommon.Attribs {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

type UserMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFilters []*GoCommon.Attribs `protobuf:"bytes,1,rep,name=userFilters,proto3" json:"userFilters,omitempty"`
}

func (x *UserMetadata) Reset() {
	*x = UserMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetadata) ProtoMessage() {}

func (x *UserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetadata.ProtoReflect.Descriptor instead.
func (*UserMetadata) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{70}
}

func (x *UserMetadata) GetUserFilters() []*GoCommon.Attribs {
	if x != nil {
		return x.UserFilters
	}
	return nil
}

type UserJourneyEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WaitTime          *WaitTime                 `protobuf:"bytes,2,opt,name=waitTime,proto3" json:"waitTime,omitempty"`
	EdgeType          GoCommon.CampaignEdgeType `protobuf:"varint,3,opt,name=edgeType,proto3,enum=farm.nurture.core.contracts.common.CampaignEdgeType" json:"edgeType,omitempty"`
	UserJourneyVertex *UserJourneyVertex        `protobuf:"bytes,4,opt,name=userJourneyVertex,proto3" json:"userJourneyVertex,omitempty"`
}

func (x *UserJourneyEdge) Reset() {
	*x = UserJourneyEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyEdge) ProtoMessage() {}

func (x *UserJourneyEdge) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyEdge.ProtoReflect.Descriptor instead.
func (*UserJourneyEdge) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{71}
}

func (x *UserJourneyEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserJourneyEdge) GetWaitTime() *WaitTime {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

func (x *UserJourneyEdge) GetEdgeType() GoCommon.CampaignEdgeType {
	if x != nil {
		return x.EdgeType
	}
	return GoCommon.CampaignEdgeType_NO_EDGE_TYPE
}

func (x *UserJourneyEdge) GetUserJourneyVertex() *UserJourneyVertex {
	if x != nil {
		return x.UserJourneyVertex
	}
	return nil
}

type WaitTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitFor  string `protobuf:"bytes,1,opt,name=waitFor,proto3" json:"waitFor,omitempty"`
	WaitTill string `protobuf:"bytes,2,opt,name=waitTill,proto3" json:"waitTill,omitempty"`
}

func (x *WaitTime) Reset() {
	*x = WaitTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitTime) ProtoMessage() {}

func (x *WaitTime) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitTime.ProtoReflect.Descriptor instead.
func (*WaitTime) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{72}
}

func (x *WaitTime) GetWaitFor() string {
	if x != nil {
		return x.WaitFor
	}
	return ""
}

func (x *WaitTime) GetWaitTill() string {
	if x != nil {
		return x.WaitTill
	}
	return ""
}

type EngagementVertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,2,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
	TemplateName         string                        `protobuf:"bytes,3,opt,name=templateName,proto3" json:"templateName,omitempty"`
	Placeholders         []string                      `protobuf:"bytes,4,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
	AthenaQuery          string                        `protobuf:"bytes,5,opt,name=athenaQuery,proto3" json:"athenaQuery,omitempty"`
	ContentMetadata      []*GoCommon.Attribs           `protobuf:"bytes,6,rep,name=contentMetadata,proto3" json:"contentMetadata,omitempty"`
	MediaInfo            *MediaInfo                    `protobuf:"bytes,7,opt,name=mediaInfo,proto3" json:"mediaInfo,omitempty"`
	Edges                []*EngagementEdge             `protobuf:"bytes,8,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *EngagementVertex) Reset() {
	*x = EngagementVertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngagementVertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngagementVertex) ProtoMessage() {}

func (x *EngagementVertex) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngagementVertex.ProtoReflect.Descriptor instead.
func (*EngagementVertex) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{73}
}

func (x *EngagementVertex) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngagementVertex) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *EngagementVertex) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *EngagementVertex) GetPlaceholders() []string {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

func (x *EngagementVertex) GetAthenaQuery() string {
	if x != nil {
		return x.AthenaQuery
	}
	return ""
}

func (x *EngagementVertex) GetContentMetadata() []*GoCommon.Attribs {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *EngagementVertex) GetMediaInfo() *MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *EngagementVertex) GetEdges() []*EngagementEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileBytes []byte             `protobuf:"bytes,1,opt,name=fileBytes,proto3" json:"fileBytes,omitempty"`
	MediaType GoCommon.MediaType `protobuf:"varint,2,opt,name=mediaType,proto3,enum=farm.nurture.core.contracts.common.MediaType" json:"mediaType,omitempty"`
	FileType  GoCommon.FileType  `protobuf:"varint,3,opt,name=fileType,proto3,enum=farm.nurture.core.contracts.common.FileType" json:"fileType,omitempty"`
	FileName  string             `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{74}
}

func (x *MediaInfo) GetFileBytes() []byte {
	if x != nil {
		return x.FileBytes
	}
	return nil
}

func (x *MediaInfo) GetMediaType() GoCommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return GoCommon.MediaType_NO_MEDIA_TYPE
}

func (x *MediaInfo) GetFileType() GoCommon.FileType {
	if x != nil {
		return x.FileType
	}
	return GoCommon.FileType_NO_FILE_TYPE
}

func (x *MediaInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type EngagementEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WaitTime *WaitTime                     `protobuf:"bytes,2,opt,name=waitTime,proto3" json:"waitTime,omitempty"`
	EdgeType GoCommon.CampaignEdgeType     `protobuf:"varint,3,opt,name=edgeType,proto3,enum=farm.nurture.core.contracts.common.CampaignEdgeType" json:"edgeType,omitempty"`
	States   []GoCommon.CommunicationState `protobuf:"varint,4,rep,packed,name=states,proto3,enum=farm.nurture.core.contracts.common.CommunicationState" json:"states,omitempty"`
	Vertex   *EngagementVertex             `protobuf:"bytes,5,opt,name=vertex,proto3" json:"vertex,omitempty"`
}

func (x *EngagementEdge) Reset() {
	*x = EngagementEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngagementEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngagementEdge) ProtoMessage() {}

func (x *EngagementEdge) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngagementEdge.ProtoReflect.Descriptor instead.
func (*EngagementEdge) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{75}
}

func (x *EngagementEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngagementEdge) GetWaitTime() *WaitTime {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

func (x *EngagementEdge) GetEdgeType() GoCommon.CampaignEdgeType {
	if x != nil {
		return x.EdgeType
	}
	return GoCommon.CampaignEdgeType_NO_EDGE_TYPE
}

func (x *EngagementEdge) GetStates() []GoCommon.CommunicationState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *EngagementEdge) GetVertex() *EngagementVertex {
	if x != nil {
		return x.Vertex
	}
	return nil
}

type ScheduleUserJourneyCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                 int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CampaignId            int64                         `protobuf:"varint,3,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Attribs               []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
	TriggerCampaignStatus *GoCommon.RequestStatusResult `protobuf:"bytes,5,opt,name=triggerCampaignStatus,proto3" json:"triggerCampaignStatus,omitempty"`
	EngagementVertexId    int64                         `protobuf:"varint,6,opt,name=engagementVertexId,proto3" json:"engagementVertexId,omitempty"`
	ReferenceId           string                        `protobuf:"bytes,7,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	CronSchedule          string                        `protobuf:"bytes,8,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
}

func (x *ScheduleUserJourneyCampaignResponse) Reset() {
	*x = ScheduleUserJourneyCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleUserJourneyCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleUserJourneyCampaignResponse) ProtoMessage() {}

func (x *ScheduleUserJourneyCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleUserJourneyCampaignResponse.ProtoReflect.Descriptor instead.
func (*ScheduleUserJourneyCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{76}
}

func (x *ScheduleUserJourneyCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ScheduleUserJourneyCampaignResponse) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *ScheduleUserJourneyCampaignResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignResponse) GetTriggerCampaignStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.TriggerCampaignStatus
	}
	return nil
}

func (x *ScheduleUserJourneyCampaignResponse) GetEngagementVertexId() int64 {
	if x != nil {
		return x.EngagementVertexId
	}
	return 0
}

func (x *ScheduleUserJourneyCampaignResponse) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *ScheduleUserJourneyCampaignResponse) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

type FindUserJourneyCampaignByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (x *FindUserJourneyCampaignByIdRequest) Reset() {
	*x = FindUserJourneyCampaignByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserJourneyCampaignByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserJourneyCampaignByIdRequest) ProtoMessage() {}

func (x *FindUserJourneyCampaignByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserJourneyCampaignByIdRequest.ProtoReflect.Descriptor instead.
func (*FindUserJourneyCampaignByIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{77}
}

func (x *FindUserJourneyCampaignByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindUserJourneyCampaignByIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

type FindUserJourneyCampaignByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Name                string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Campaign            *UserJourneyCampaign          `protobuf:"bytes,3,opt,name=campaign,proto3" json:"campaign,omitempty"`
	UserJourneyMetadata string                        `protobuf:"bytes,4,opt,name=userJourneyMetadata,proto3" json:"userJourneyMetadata,omitempty"`
	EngagementMetadata  string                        `protobuf:"bytes,5,opt,name=engagementMetadata,proto3" json:"engagementMetadata,omitempty"`
}

func (x *FindUserJourneyCampaignByIdResponse) Reset() {
	*x = FindUserJourneyCampaignByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserJourneyCampaignByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserJourneyCampaignByIdResponse) ProtoMessage() {}

func (x *FindUserJourneyCampaignByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserJourneyCampaignByIdResponse.ProtoReflect.Descriptor instead.
func (*FindUserJourneyCampaignByIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{78}
}

func (x *FindUserJourneyCampaignByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindUserJourneyCampaignByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindUserJourneyCampaignByIdResponse) GetCampaign() *UserJourneyCampaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *FindUserJourneyCampaignByIdResponse) GetUserJourneyMetadata() string {
	if x != nil {
		return x.UserJourneyMetadata
	}
	return ""
}

func (x *FindUserJourneyCampaignByIdResponse) GetEngagementMetadata() string {
	if x != nil {
		return x.EngagementMetadata
	}
	return ""
}

type FilterUserJourneyCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	SearchFilter   string                   `protobuf:"bytes,2,opt,name=searchFilter,proto3" json:"searchFilter,omitempty"`
	Namespace      GoCommon.NameSpace       `protobuf:"varint,3,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Status         GoCommon.CampaignStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.CampaignStatus" json:"status,omitempty"`
	StartTime      string                   `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime        string                   `protobuf:"bytes,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PageNumber     int32                    `protobuf:"varint,7,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Limit          int32                    `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilterUserJourneyCampaignRequest) Reset() {
	*x = FilterUserJourneyCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserJourneyCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserJourneyCampaignRequest) ProtoMessage() {}

func (x *FilterUserJourneyCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserJourneyCampaignRequest.ProtoReflect.Descriptor instead.
func (*FilterUserJourneyCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{79}
}

func (x *FilterUserJourneyCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FilterUserJourneyCampaignRequest) GetSearchFilter() string {
	if x != nil {
		return x.SearchFilter
	}
	return ""
}

func (x *FilterUserJourneyCampaignRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *FilterUserJourneyCampaignRequest) GetStatus() GoCommon.CampaignStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.CampaignStatus_NO_CAMPAGIN_STATUS
}

func (x *FilterUserJourneyCampaignRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FilterUserJourneyCampaignRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *FilterUserJourneyCampaignRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FilterUserJourneyCampaignRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilterUserJourneyCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Records []*FilterUserJourneyCampaignResponseRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FilterUserJourneyCampaignResponse) Reset() {
	*x = FilterUserJourneyCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserJourneyCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserJourneyCampaignResponse) ProtoMessage() {}

func (x *FilterUserJourneyCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserJourneyCampaignResponse.ProtoReflect.Descriptor instead.
func (*FilterUserJourneyCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{80}
}

func (x *FilterUserJourneyCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterUserJourneyCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FilterUserJourneyCampaignResponse) GetRecords() []*FilterUserJourneyCampaignResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FilterUserJourneyCampaignResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace      string  `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Qualifications int64   `protobuf:"varint,4,opt,name=qualifications,proto3" json:"qualifications,omitempty"`
	GoaltMet       int64   `protobuf:"varint,5,opt,name=goaltMet,proto3" json:"goaltMet,omitempty"`
	Status         string  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Conversions    float64 `protobuf:"fixed64,7,opt,name=conversions,proto3" json:"conversions,omitempty"`
	StartTime      string  `protobuf:"bytes,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	TriggerAction  bool    `protobuf:"varint,9,opt,name=triggerAction,proto3" json:"triggerAction,omitempty"`
	View           bool    `protobuf:"varint,10,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *FilterUserJourneyCampaignResponseRecord) Reset() {
	*x = FilterUserJourneyCampaignResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserJourneyCampaignResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserJourneyCampaignResponseRecord) ProtoMessage() {}

func (x *FilterUserJourneyCampaignResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserJourneyCampaignResponseRecord.ProtoReflect.Descriptor instead.
func (*FilterUserJourneyCampaignResponseRecord) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{81}
}

func (x *FilterUserJourneyCampaignResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterUserJourneyCampaignResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterUserJourneyCampaignResponseRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FilterUserJourneyCampaignResponseRecord) GetQualifications() int64 {
	if x != nil {
		return x.Qualifications
	}
	return 0
}

func (x *FilterUserJourneyCampaignResponseRecord) GetGoaltMet() int64 {
	if x != nil {
		return x.GoaltMet
	}
	return 0
}

func (x *FilterUserJourneyCampaignResponseRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FilterUserJourneyCampaignResponseRecord) GetConversions() float64 {
	if x != nil {
		return x.Conversions
	}
	return 0
}

func (x *FilterUserJourneyCampaignResponseRecord) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FilterUserJourneyCampaignResponseRecord) GetTriggerAction() bool {
	if x != nil {
		return x.TriggerAction
	}
	return false
}

func (x *FilterUserJourneyCampaignResponseRecord) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

type MultiRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnTxn   bool       `protobuf:"varint,1,opt,name=onTxn,proto3" json:"onTxn,omitempty"`
	Request []*Request `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *MultiRequests) Reset() {
	*x = MultiRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRequests) ProtoMessage() {}

func (x *MultiRequests) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRequests.ProtoReflect.Descriptor instead.
func (*MultiRequests) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{82}
}

func (x *MultiRequests) GetOnTxn() bool {
	if x != nil {
		return x.OnTxn
	}
	return false
}

func (x *MultiRequests) GetRequest() []*Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to ARequest:
	//	*Request_ReqAddCampaign
	//	*Request_ReqAddCampaignBulk
	//	*Request_ReqUpdateCampaign
	//	*Request_ReqUpdateCampaignBulk
	//	*Request_ReqAddCampaignTemplate
	//	*Request_ReqAddCampaignTemplateBulk
	//	*Request_ReqAddNewCampaign
	//	*Request_ReqAddNewCampaignBulk
	//	*Request_ReqGetUserList
	//	*Request_ReqFindCampaignById
	//	*Request_ReqFindCampaignTemplateById
	//	*Request_ReqAddTargetUser
	//	*Request_ReqAddTargetUserBulk
	//	*Request_ReqAddInactionTargetUser
	//	*Request_ReqAddInactionTargetUserBulk
	//	*Request_ReqFindInactionTargetUserByCampaignId
	//	*Request_ReqGetDynamicDataByKey
	//	*Request_ReqAddDynamicData
	//	*Request_ReqAddDynamicDataBulk
	//	*Request_ReqFindQueryCampaign
	//	*Request_ReqAddQueryCampaign
	//	*Request_ReqAddQueryCampaignBulk
	ARequest isRequest_ARequest `protobuf_oneof:"ARequest"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{83}
}

func (x *Request) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (m *Request) GetARequest() isRequest_ARequest {
	if m != nil {
		return m.ARequest
	}
	return nil
}

func (x *Request) GetReqAddCampaign() *AddCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddCampaign); ok {
		return x.ReqAddCampaign
	}
	return nil
}

func (x *Request) GetReqAddCampaignBulk() *BulkAddCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddCampaignBulk); ok {
		return x.ReqAddCampaignBulk
	}
	return nil
}

func (x *Request) GetReqUpdateCampaign() *UpdateCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateCampaign); ok {
		return x.ReqUpdateCampaign
	}
	return nil
}

func (x *Request) GetReqUpdateCampaignBulk() *BulkUpdateCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateCampaignBulk); ok {
		return x.ReqUpdateCampaignBulk
	}
	return nil
}

func (x *Request) GetReqAddCampaignTemplate() *AddCampaignTemplateRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddCampaignTemplate); ok {
		return x.ReqAddCampaignTemplate
	}
	return nil
}

func (x *Request) GetReqAddCampaignTemplateBulk() *BulkAddCampaignTemplateRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddCampaignTemplateBulk); ok {
		return x.ReqAddCampaignTemplateBulk
	}
	return nil
}

func (x *Request) GetReqAddNewCampaign() *AddNewCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddNewCampaign); ok {
		return x.ReqAddNewCampaign
	}
	return nil
}

func (x *Request) GetReqAddNewCampaignBulk() *BulkAddNewCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddNewCampaignBulk); ok {
		return x.ReqAddNewCampaignBulk
	}
	return nil
}

func (x *Request) GetReqGetUserList() *CampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetUserList); ok {
		return x.ReqGetUserList
	}
	return nil
}

func (x *Request) GetReqFindCampaignById() *FindCampaignByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindCampaignById); ok {
		return x.ReqFindCampaignById
	}
	return nil
}

func (x *Request) GetReqFindCampaignTemplateById() *FindCampaignTemplateByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindCampaignTemplateById); ok {
		return x.ReqFindCampaignTemplateById
	}
	return nil
}

func (x *Request) GetReqAddTargetUser() *AddTargetUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddTargetUser); ok {
		return x.ReqAddTargetUser
	}
	return nil
}

func (x *Request) GetReqAddTargetUserBulk() *BulkAddTargetUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddTargetUserBulk); ok {
		return x.ReqAddTargetUserBulk
	}
	return nil
}

func (x *Request) GetReqAddInactionTargetUser() *AddInactionTargetUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddInactionTargetUser); ok {
		return x.ReqAddInactionTargetUser
	}
	return nil
}

func (x *Request) GetReqAddInactionTargetUserBulk() *BulkAddInactionTargetUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddInactionTargetUserBulk); ok {
		return x.ReqAddInactionTargetUserBulk
	}
	return nil
}

func (x *Request) GetReqFindInactionTargetUserByCampaignId() *FindInactionTargetUserByCampaignIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindInactionTargetUserByCampaignId); ok {
		return x.ReqFindInactionTargetUserByCampaignId
	}
	return nil
}

func (x *Request) GetReqGetDynamicDataByKey() *GetDynamicDataByKeyRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetDynamicDataByKey); ok {
		return x.ReqGetDynamicDataByKey
	}
	return nil
}

func (x *Request) GetReqAddDynamicData() *AddDynamicDataRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddDynamicData); ok {
		return x.ReqAddDynamicData
	}
	return nil
}

func (x *Request) GetReqAddDynamicDataBulk() *BulkAddDynamicDataRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddDynamicDataBulk); ok {
		return x.ReqAddDynamicDataBulk
	}
	return nil
}

func (x *Request) GetReqFindQueryCampaign() *FindQueryCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindQueryCampaign); ok {
		return x.ReqFindQueryCampaign
	}
	return nil
}

func (x *Request) GetReqAddQueryCampaign() *AddQueryCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddQueryCampaign); ok {
		return x.ReqAddQueryCampaign
	}
	return nil
}

func (x *Request) GetReqAddQueryCampaignBulk() *BulkAddQueryCampaignRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddQueryCampaignBulk); ok {
		return x.ReqAddQueryCampaignBulk
	}
	return nil
}

type isRequest_ARequest interface {
	isRequest_ARequest()
}

type Request_ReqAddCampaign struct {
	ReqAddCampaign *AddCampaignRequest `protobuf:"bytes,2,opt,name=reqAddCampaign,proto3,oneof"`
}

type Request_ReqAddCampaignBulk struct {
	ReqAddCampaignBulk *BulkAddCampaignRequest `protobuf:"bytes,3,opt,name=reqAddCampaignBulk,proto3,oneof"`
}

type Request_ReqUpdateCampaign struct {
	ReqUpdateCampaign *UpdateCampaignRequest `protobuf:"bytes,4,opt,name=reqUpdateCampaign,proto3,oneof"`
}

type Request_ReqUpdateCampaignBulk struct {
	ReqUpdateCampaignBulk *BulkUpdateCampaignRequest `protobuf:"bytes,5,opt,name=reqUpdateCampaignBulk,proto3,oneof"`
}

type Request_ReqAddCampaignTemplate struct {
	ReqAddCampaignTemplate *AddCampaignTemplateRequest `protobuf:"bytes,6,opt,name=reqAddCampaignTemplate,proto3,oneof"`
}

type Request_ReqAddCampaignTemplateBulk struct {
	ReqAddCampaignTemplateBulk *BulkAddCampaignTemplateRequest `protobuf:"bytes,7,opt,name=reqAddCampaignTemplateBulk,proto3,oneof"`
}

type Request_ReqAddNewCampaign struct {
	ReqAddNewCampaign *AddNewCampaignRequest `protobuf:"bytes,8,opt,name=reqAddNewCampaign,proto3,oneof"`
}

type Request_ReqAddNewCampaignBulk struct {
	ReqAddNewCampaignBulk *BulkAddNewCampaignRequest `protobuf:"bytes,9,opt,name=reqAddNewCampaignBulk,proto3,oneof"`
}

type Request_ReqGetUserList struct {
	ReqGetUserList *CampaignRequest `protobuf:"bytes,10,opt,name=reqGetUserList,proto3,oneof"`
}

type Request_ReqFindCampaignById struct {
	ReqFindCampaignById *FindCampaignByIdRequest `protobuf:"bytes,11,opt,name=reqFindCampaignById,proto3,oneof"`
}

type Request_ReqFindCampaignTemplateById struct {
	ReqFindCampaignTemplateById *FindCampaignTemplateByIdRequest `protobuf:"bytes,12,opt,name=reqFindCampaignTemplateById,proto3,oneof"`
}

type Request_ReqAddTargetUser struct {
	ReqAddTargetUser *AddTargetUserRequest `protobuf:"bytes,13,opt,name=reqAddTargetUser,proto3,oneof"`
}

type Request_ReqAddTargetUserBulk struct {
	ReqAddTargetUserBulk *BulkAddTargetUserRequest `protobuf:"bytes,14,opt,name=reqAddTargetUserBulk,proto3,oneof"`
}

type Request_ReqAddInactionTargetUser struct {
	ReqAddInactionTargetUser *AddInactionTargetUserRequest `protobuf:"bytes,15,opt,name=reqAddInactionTargetUser,proto3,oneof"`
}

type Request_ReqAddInactionTargetUserBulk struct {
	ReqAddInactionTargetUserBulk *BulkAddInactionTargetUserRequest `protobuf:"bytes,16,opt,name=reqAddInactionTargetUserBulk,proto3,oneof"`
}

type Request_ReqFindInactionTargetUserByCampaignId struct {
	ReqFindInactionTargetUserByCampaignId *FindInactionTargetUserByCampaignIdRequest `protobuf:"bytes,17,opt,name=reqFindInactionTargetUserByCampaignId,proto3,oneof"`
}

type Request_ReqGetDynamicDataByKey struct {
	ReqGetDynamicDataByKey *GetDynamicDataByKeyRequest `protobuf:"bytes,18,opt,name=reqGetDynamicDataByKey,proto3,oneof"`
}

type Request_ReqAddDynamicData struct {
	ReqAddDynamicData *AddDynamicDataRequest `protobuf:"bytes,19,opt,name=reqAddDynamicData,proto3,oneof"`
}

type Request_ReqAddDynamicDataBulk struct {
	ReqAddDynamicDataBulk *BulkAddDynamicDataRequest `protobuf:"bytes,20,opt,name=reqAddDynamicDataBulk,proto3,oneof"`
}

type Request_ReqFindQueryCampaign struct {
	ReqFindQueryCampaign *FindQueryCampaignRequest `protobuf:"bytes,21,opt,name=reqFindQueryCampaign,proto3,oneof"`
}

type Request_ReqAddQueryCampaign struct {
	ReqAddQueryCampaign *AddQueryCampaignRequest `protobuf:"bytes,22,opt,name=reqAddQueryCampaign,proto3,oneof"`
}

type Request_ReqAddQueryCampaignBulk struct {
	ReqAddQueryCampaignBulk *BulkAddQueryCampaignRequest `protobuf:"bytes,23,opt,name=reqAddQueryCampaignBulk,proto3,oneof"`
}

func (*Request_ReqAddCampaign) isRequest_ARequest() {}

func (*Request_ReqAddCampaignBulk) isRequest_ARequest() {}

func (*Request_ReqUpdateCampaign) isRequest_ARequest() {}

func (*Request_ReqUpdateCampaignBulk) isRequest_ARequest() {}

func (*Request_ReqAddCampaignTemplate) isRequest_ARequest() {}

func (*Request_ReqAddCampaignTemplateBulk) isRequest_ARequest() {}

func (*Request_ReqAddNewCampaign) isRequest_ARequest() {}

func (*Request_ReqAddNewCampaignBulk) isRequest_ARequest() {}

func (*Request_ReqGetUserList) isRequest_ARequest() {}

func (*Request_ReqFindCampaignById) isRequest_ARequest() {}

func (*Request_ReqFindCampaignTemplateById) isRequest_ARequest() {}

func (*Request_ReqAddTargetUser) isRequest_ARequest() {}

func (*Request_ReqAddTargetUserBulk) isRequest_ARequest() {}

func (*Request_ReqAddInactionTargetUser) isRequest_ARequest() {}

func (*Request_ReqAddInactionTargetUserBulk) isRequest_ARequest() {}

func (*Request_ReqFindInactionTargetUserByCampaignId) isRequest_ARequest() {}

func (*Request_ReqGetDynamicDataByKey) isRequest_ARequest() {}

func (*Request_ReqAddDynamicData) isRequest_ARequest() {}

func (*Request_ReqAddDynamicDataBulk) isRequest_ARequest() {}

func (*Request_ReqFindQueryCampaign) isRequest_ARequest() {}

func (*Request_ReqAddQueryCampaign) isRequest_ARequest() {}

func (*Request_ReqAddQueryCampaignBulk) isRequest_ARequest() {}

type MultiResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Response []*Response                   `protobuf:"bytes,2,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiResponses) Reset() {
	*x = MultiResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiResponses) ProtoMessage() {}

func (x *MultiResponses) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiResponses.ProtoReflect.Descriptor instead.
func (*MultiResponses) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{84}
}

func (x *MultiResponses) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiResponses) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  string                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Status *GoCommon.RequestStatusResult `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to AResponse:
	//	*Response_ResAddCampaign
	//	*Response_ResAddCampaignBulk
	//	*Response_ResUpdateCampaign
	//	*Response_ResUpdateCampaignBulk
	//	*Response_ResAddCampaignTemplate
	//	*Response_ResAddCampaignTemplateBulk
	//	*Response_ResAddNewCampaign
	//	*Response_ResAddNewCampaignBulk
	//	*Response_ResGetUserList
	//	*Response_ResFindCampaignById
	//	*Response_ResFindCampaignTemplateById
	//	*Response_ResAddTargetUser
	//	*Response_ResAddTargetUserBulk
	//	*Response_ResAddInactionTargetUser
	//	*Response_ResAddInactionTargetUserBulk
	//	*Response_ResFindInactionTargetUserByCampaignId
	//	*Response_ResGetDynamicDataByKey
	//	*Response_ResAddDynamicData
	//	*Response_ResAddDynamicDataBulk
	//	*Response_ResFindQueryCampaign
	//	*Response_ResAddQueryCampaign
	//	*Response_ResAddQueryCampaignBulk
	AResponse isResponse_AResponse `protobuf_oneof:"AResponse"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{85}
}

func (x *Response) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Response) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Response) GetAResponse() isResponse_AResponse {
	if m != nil {
		return m.AResponse
	}
	return nil
}

func (x *Response) GetResAddCampaign() *AddCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddCampaign); ok {
		return x.ResAddCampaign
	}
	return nil
}

func (x *Response) GetResAddCampaignBulk() *BulkAddCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddCampaignBulk); ok {
		return x.ResAddCampaignBulk
	}
	return nil
}

func (x *Response) GetResUpdateCampaign() *UpdateCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateCampaign); ok {
		return x.ResUpdateCampaign
	}
	return nil
}

func (x *Response) GetResUpdateCampaignBulk() *BulkUpdateCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateCampaignBulk); ok {
		return x.ResUpdateCampaignBulk
	}
	return nil
}

func (x *Response) GetResAddCampaignTemplate() *AddCampaignTemplateResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddCampaignTemplate); ok {
		return x.ResAddCampaignTemplate
	}
	return nil
}

func (x *Response) GetResAddCampaignTemplateBulk() *BulkAddCampaignTemplateResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddCampaignTemplateBulk); ok {
		return x.ResAddCampaignTemplateBulk
	}
	return nil
}

func (x *Response) GetResAddNewCampaign() *AddNewCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddNewCampaign); ok {
		return x.ResAddNewCampaign
	}
	return nil
}

func (x *Response) GetResAddNewCampaignBulk() *BulkAddNewCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddNewCampaignBulk); ok {
		return x.ResAddNewCampaignBulk
	}
	return nil
}

func (x *Response) GetResGetUserList() *CampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetUserList); ok {
		return x.ResGetUserList
	}
	return nil
}

func (x *Response) GetResFindCampaignById() *FindCampaignByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindCampaignById); ok {
		return x.ResFindCampaignById
	}
	return nil
}

func (x *Response) GetResFindCampaignTemplateById() *FindCampaignTemplateByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindCampaignTemplateById); ok {
		return x.ResFindCampaignTemplateById
	}
	return nil
}

func (x *Response) GetResAddTargetUser() *AddTargetUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddTargetUser); ok {
		return x.ResAddTargetUser
	}
	return nil
}

func (x *Response) GetResAddTargetUserBulk() *BulkAddTargetUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddTargetUserBulk); ok {
		return x.ResAddTargetUserBulk
	}
	return nil
}

func (x *Response) GetResAddInactionTargetUser() *AddInactionTargetUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddInactionTargetUser); ok {
		return x.ResAddInactionTargetUser
	}
	return nil
}

func (x *Response) GetResAddInactionTargetUserBulk() *BulkAddInactionTargetUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddInactionTargetUserBulk); ok {
		return x.ResAddInactionTargetUserBulk
	}
	return nil
}

func (x *Response) GetResFindInactionTargetUserByCampaignId() *FindInactionTargetUserByCampaignIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindInactionTargetUserByCampaignId); ok {
		return x.ResFindInactionTargetUserByCampaignId
	}
	return nil
}

func (x *Response) GetResGetDynamicDataByKey() *GetDynamicDataByKeyResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetDynamicDataByKey); ok {
		return x.ResGetDynamicDataByKey
	}
	return nil
}

func (x *Response) GetResAddDynamicData() *AddDynamicDataResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddDynamicData); ok {
		return x.ResAddDynamicData
	}
	return nil
}

func (x *Response) GetResAddDynamicDataBulk() *BulkAddDynamicDataResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddDynamicDataBulk); ok {
		return x.ResAddDynamicDataBulk
	}
	return nil
}

func (x *Response) GetResFindQueryCampaign() *FindQueryCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindQueryCampaign); ok {
		return x.ResFindQueryCampaign
	}
	return nil
}

func (x *Response) GetResAddQueryCampaign() *AddQueryCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddQueryCampaign); ok {
		return x.ResAddQueryCampaign
	}
	return nil
}

func (x *Response) GetResAddQueryCampaignBulk() *BulkAddQueryCampaignResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddQueryCampaignBulk); ok {
		return x.ResAddQueryCampaignBulk
	}
	return nil
}

type isResponse_AResponse interface {
	isResponse_AResponse()
}

type Response_ResAddCampaign struct {
	ResAddCampaign *AddCampaignResponse `protobuf:"bytes,3,opt,name=resAddCampaign,proto3,oneof"`
}

type Response_ResAddCampaignBulk struct {
	ResAddCampaignBulk *BulkAddCampaignResponse `protobuf:"bytes,4,opt,name=resAddCampaignBulk,proto3,oneof"`
}

type Response_ResUpdateCampaign struct {
	ResUpdateCampaign *UpdateCampaignResponse `protobuf:"bytes,5,opt,name=resUpdateCampaign,proto3,oneof"`
}

type Response_ResUpdateCampaignBulk struct {
	ResUpdateCampaignBulk *BulkUpdateCampaignResponse `protobuf:"bytes,6,opt,name=resUpdateCampaignBulk,proto3,oneof"`
}

type Response_ResAddCampaignTemplate struct {
	ResAddCampaignTemplate *AddCampaignTemplateResponse `protobuf:"bytes,7,opt,name=resAddCampaignTemplate,proto3,oneof"`
}

type Response_ResAddCampaignTemplateBulk struct {
	ResAddCampaignTemplateBulk *BulkAddCampaignTemplateResponse `protobuf:"bytes,8,opt,name=resAddCampaignTemplateBulk,proto3,oneof"`
}

type Response_ResAddNewCampaign struct {
	ResAddNewCampaign *AddNewCampaignResponse `protobuf:"bytes,9,opt,name=resAddNewCampaign,proto3,oneof"`
}

type Response_ResAddNewCampaignBulk struct {
	ResAddNewCampaignBulk *BulkAddNewCampaignResponse `protobuf:"bytes,10,opt,name=resAddNewCampaignBulk,proto3,oneof"`
}

type Response_ResGetUserList struct {
	ResGetUserList *CampaignResponse `protobuf:"bytes,11,opt,name=resGetUserList,proto3,oneof"`
}

type Response_ResFindCampaignById struct {
	ResFindCampaignById *FindCampaignByIdResponse `protobuf:"bytes,12,opt,name=resFindCampaignById,proto3,oneof"`
}

type Response_ResFindCampaignTemplateById struct {
	ResFindCampaignTemplateById *FindCampaignTemplateByIdResponse `protobuf:"bytes,13,opt,name=resFindCampaignTemplateById,proto3,oneof"`
}

type Response_ResAddTargetUser struct {
	ResAddTargetUser *AddTargetUserResponse `protobuf:"bytes,14,opt,name=resAddTargetUser,proto3,oneof"`
}

type Response_ResAddTargetUserBulk struct {
	ResAddTargetUserBulk *BulkAddTargetUserResponse `protobuf:"bytes,15,opt,name=resAddTargetUserBulk,proto3,oneof"`
}

type Response_ResAddInactionTargetUser struct {
	ResAddInactionTargetUser *AddInactionTargetUserResponse `protobuf:"bytes,16,opt,name=resAddInactionTargetUser,proto3,oneof"`
}

type Response_ResAddInactionTargetUserBulk struct {
	ResAddInactionTargetUserBulk *BulkAddInactionTargetUserResponse `protobuf:"bytes,17,opt,name=resAddInactionTargetUserBulk,proto3,oneof"`
}

type Response_ResFindInactionTargetUserByCampaignId struct {
	ResFindInactionTargetUserByCampaignId *FindInactionTargetUserByCampaignIdResponse `protobuf:"bytes,18,opt,name=resFindInactionTargetUserByCampaignId,proto3,oneof"`
}

type Response_ResGetDynamicDataByKey struct {
	ResGetDynamicDataByKey *GetDynamicDataByKeyResponse `protobuf:"bytes,19,opt,name=resGetDynamicDataByKey,proto3,oneof"`
}

type Response_ResAddDynamicData struct {
	ResAddDynamicData *AddDynamicDataResponse `protobuf:"bytes,20,opt,name=resAddDynamicData,proto3,oneof"`
}

type Response_ResAddDynamicDataBulk struct {
	ResAddDynamicDataBulk *BulkAddDynamicDataResponse `protobuf:"bytes,21,opt,name=resAddDynamicDataBulk,proto3,oneof"`
}

type Response_ResFindQueryCampaign struct {
	ResFindQueryCampaign *FindQueryCampaignResponse `protobuf:"bytes,22,opt,name=resFindQueryCampaign,proto3,oneof"`
}

type Response_ResAddQueryCampaign struct {
	ResAddQueryCampaign *AddQueryCampaignResponse `protobuf:"bytes,23,opt,name=resAddQueryCampaign,proto3,oneof"`
}

type Response_ResAddQueryCampaignBulk struct {
	ResAddQueryCampaignBulk *BulkAddQueryCampaignResponse `protobuf:"bytes,24,opt,name=resAddQueryCampaignBulk,proto3,oneof"`
}

func (*Response_ResAddCampaign) isResponse_AResponse() {}

func (*Response_ResAddCampaignBulk) isResponse_AResponse() {}

func (*Response_ResUpdateCampaign) isResponse_AResponse() {}

func (*Response_ResUpdateCampaignBulk) isResponse_AResponse() {}

func (*Response_ResAddCampaignTemplate) isResponse_AResponse() {}

func (*Response_ResAddCampaignTemplateBulk) isResponse_AResponse() {}

func (*Response_ResAddNewCampaign) isResponse_AResponse() {}

func (*Response_ResAddNewCampaignBulk) isResponse_AResponse() {}

func (*Response_ResGetUserList) isResponse_AResponse() {}

func (*Response_ResFindCampaignById) isResponse_AResponse() {}

func (*Response_ResFindCampaignTemplateById) isResponse_AResponse() {}

func (*Response_ResAddTargetUser) isResponse_AResponse() {}

func (*Response_ResAddTargetUserBulk) isResponse_AResponse() {}

func (*Response_ResAddInactionTargetUser) isResponse_AResponse() {}

func (*Response_ResAddInactionTargetUserBulk) isResponse_AResponse() {}

func (*Response_ResFindInactionTargetUserByCampaignId) isResponse_AResponse() {}

func (*Response_ResGetDynamicDataByKey) isResponse_AResponse() {}

func (*Response_ResAddDynamicData) isResponse_AResponse() {}

func (*Response_ResAddDynamicDataBulk) isResponse_AResponse() {}

func (*Response_ResFindQueryCampaign) isResponse_AResponse() {}

func (*Response_ResAddQueryCampaign) isResponse_AResponse() {}

func (*Response_ResAddQueryCampaignBulk) isResponse_AResponse() {}

type FilterCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name           string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status         GoCommon.CampaignStatus  `protobuf:"varint,3,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.CampaignStatus" json:"status,omitempty"`
	Description    string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TemplateName   string                   `protobuf:"bytes,5,opt,name=templateName,proto3" json:"templateName,omitempty"`
	PageNumber     int32                    `protobuf:"varint,6,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Limit          int32                    `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FilterCampaignRequest) Reset() {
	*x = FilterCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCampaignRequest) ProtoMessage() {}

func (x *FilterCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCampaignRequest.ProtoReflect.Descriptor instead.
func (*FilterCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{86}
}

func (x *FilterCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FilterCampaignRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterCampaignRequest) GetStatus() GoCommon.CampaignStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.CampaignStatus_NO_CAMPAGIN_STATUS
}

func (x *FilterCampaignRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilterCampaignRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *FilterCampaignRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FilterCampaignRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilterCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Records []*FindCampaignByIdResponseRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FilterCampaignResponse) Reset() {
	*x = FilterCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCampaignResponse) ProtoMessage() {}

func (x *FilterCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCampaignResponse.ProtoReflect.Descriptor instead.
func (*FilterCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{87}
}

func (x *FilterCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterCampaignResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FilterCampaignResponse) GetRecords() []*FindCampaignByIdResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type UserJourneyCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders     *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId         int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	EngagementVertexId int64                    `protobuf:"varint,3,opt,name=engagementVertexId,proto3" json:"engagementVertexId,omitempty"`
	ReferenceId        string                   `protobuf:"bytes,4,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
}

func (x *UserJourneyCampaignRequest) Reset() {
	*x = UserJourneyCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyCampaignRequest) ProtoMessage() {}

func (x *UserJourneyCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyCampaignRequest.ProtoReflect.Descriptor instead.
func (*UserJourneyCampaignRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{88}
}

func (x *UserJourneyCampaignRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UserJourneyCampaignRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *UserJourneyCampaignRequest) GetEngagementVertexId() int64 {
	if x != nil {
		return x.EngagementVertexId
	}
	return 0
}

func (x *UserJourneyCampaignRequest) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type UserJourneyCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EngagementVertexId int64                         `protobuf:"varint,2,opt,name=engagementVertexId,proto3" json:"engagementVertexId,omitempty"`
	ReferenceId        string                        `protobuf:"bytes,3,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
}

func (x *UserJourneyCampaignResponse) Reset() {
	*x = UserJourneyCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyCampaignResponse) ProtoMessage() {}

func (x *UserJourneyCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyCampaignResponse.ProtoReflect.Descriptor instead.
func (*UserJourneyCampaignResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{89}
}

func (x *UserJourneyCampaignResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UserJourneyCampaignResponse) GetEngagementVertexId() int64 {
	if x != nil {
		return x.EngagementVertexId
	}
	return 0
}

func (x *UserJourneyCampaignResponse) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type TestCampaignByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	CampaignId     int64                    `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	AthenaQuery    string                   `protobuf:"bytes,3,opt,name=athenaQuery,proto3" json:"athenaQuery,omitempty"`
}

func (x *TestCampaignByIdRequest) Reset() {
	*x = TestCampaignByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCampaignByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCampaignByIdRequest) ProtoMessage() {}

func (x *TestCampaignByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCampaignByIdRequest.ProtoReflect.Descriptor instead.
func (*TestCampaignByIdRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{90}
}

func (x *TestCampaignByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *TestCampaignByIdRequest) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *TestCampaignByIdRequest) GetAthenaQuery() string {
	if x != nil {
		return x.AthenaQuery
	}
	return ""
}

type TestCampaignByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestCampaignByIdResponse) Reset() {
	*x = TestCampaignByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCampaignByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCampaignByIdResponse) ProtoMessage() {}

func (x *TestCampaignByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCampaignByIdResponse.ProtoReflect.Descriptor instead.
func (*TestCampaignByIdResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{91}
}

func (x *TestCampaignByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

type FetchCampaignScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders       *GoCommon.RequestHeaders      `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	ScheduleStartTime    int64                         `protobuf:"varint,2,opt,name=scheduleStartTime,proto3" json:"scheduleStartTime,omitempty"`
	ScheduleEndTime      int64                         `protobuf:"varint,3,opt,name=scheduleEndTime,proto3" json:"scheduleEndTime,omitempty"`
	Namespace            GoCommon.NameSpace            `protobuf:"varint,4,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Status               GoCommon.CampaignStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.CampaignStatus" json:"status,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,6,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
}

func (x *FetchCampaignScheduleRequest) Reset() {
	*x = FetchCampaignScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCampaignScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCampaignScheduleRequest) ProtoMessage() {}

func (x *FetchCampaignScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCampaignScheduleRequest.ProtoReflect.Descriptor instead.
func (*FetchCampaignScheduleRequest) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{92}
}

func (x *FetchCampaignScheduleRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchCampaignScheduleRequest) GetScheduleStartTime() int64 {
	if x != nil {
		return x.ScheduleStartTime
	}
	return 0
}

func (x *FetchCampaignScheduleRequest) GetScheduleEndTime() int64 {
	if x != nil {
		return x.ScheduleEndTime
	}
	return 0
}

func (x *FetchCampaignScheduleRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *FetchCampaignScheduleRequest) GetStatus() GoCommon.CampaignStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.CampaignStatus_NO_CAMPAGIN_STATUS
}

func (x *FetchCampaignScheduleRequest) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

type FetchCampaignScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CountDays        int32                         `protobuf:"varint,2,opt,name=countDays,proto3" json:"countDays,omitempty"`
	CampaignSchedule []*CampaignsSchedule          `protobuf:"bytes,3,rep,name=campaignSchedule,proto3" json:"campaignSchedule,omitempty"`
}

func (x *FetchCampaignScheduleResponse) Reset() {
	*x = FetchCampaignScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCampaignScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCampaignScheduleResponse) ProtoMessage() {}

func (x *FetchCampaignScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCampaignScheduleResponse.ProtoReflect.Descriptor instead.
func (*FetchCampaignScheduleResponse) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{93}
}

func (x *FetchCampaignScheduleResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchCampaignScheduleResponse) GetCountDays() int32 {
	if x != nil {
		return x.CountDays
	}
	return 0
}

func (x *FetchCampaignScheduleResponse) GetCampaignSchedule() []*CampaignsSchedule {
	if x != nil {
		return x.CampaignSchedule
	}
	return nil
}

type CampaignsSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date             string              `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Count            int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CampaignSchedule []*CampaignSchedule `protobuf:"bytes,3,rep,name=campaignSchedule,proto3" json:"campaignSchedule,omitempty"`
}

func (x *CampaignsSchedule) Reset() {
	*x = CampaignsSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignsSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignsSchedule) ProtoMessage() {}

func (x *CampaignsSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignsSchedule.ProtoReflect.Descriptor instead.
func (*CampaignsSchedule) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{94}
}

func (x *CampaignsSchedule) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CampaignsSchedule) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CampaignsSchedule) GetCampaignSchedule() []*CampaignSchedule {
	if x != nil {
		return x.CampaignSchedule
	}
	return nil
}

type CampaignSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        string            `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime          string            `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CampaignMetaData *CampaignMetaData `protobuf:"bytes,3,opt,name=campaignMetaData,proto3" json:"campaignMetaData,omitempty"`
}

func (x *CampaignSchedule) Reset() {
	*x = CampaignSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignSchedule) ProtoMessage() {}

func (x *CampaignSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignSchedule.ProtoReflect.Descriptor instead.
func (*CampaignSchedule) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{95}
}

func (x *CampaignSchedule) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CampaignSchedule) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CampaignSchedule) GetCampaignMetaData() *CampaignMetaData {
	if x != nil {
		return x.CampaignMetaData
	}
	return nil
}

type CampaignMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignId           int64                         `protobuf:"varint,1,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	CampaignName         string                        `protobuf:"bytes,2,opt,name=campaignName,proto3" json:"campaignName,omitempty"`
	Namespace            GoCommon.NameSpace            `protobuf:"varint,4,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	CommunicationChannel GoCommon.CommunicationChannel `protobuf:"varint,6,opt,name=communicationChannel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"communicationChannel,omitempty"`
	TemplateNames        []string                      `protobuf:"bytes,7,rep,name=templateNames,proto3" json:"templateNames,omitempty"`
	UserSegmentSize      int64                         `protobuf:"varint,8,opt,name=userSegmentSize,proto3" json:"userSegmentSize,omitempty"`
}

func (x *CampaignMetaData) Reset() {
	*x = CampaignMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CampaignService_campaign_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignMetaData) ProtoMessage() {}

func (x *CampaignMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_CampaignService_campaign_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignMetaData.ProtoReflect.Descriptor instead.
func (*CampaignMetaData) Descriptor() ([]byte, []int) {
	return file_CampaignService_campaign_service_proto_rawDescGZIP(), []int{96}
}

func (x *CampaignMetaData) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *CampaignMetaData) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *CampaignMetaData) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *CampaignMetaData) GetCommunicationChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.CommunicationChannel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *CampaignMetaData) GetTemplateNames() []string {
	if x != nil {
		return x.TemplateNames
	}
	return nil
}

func (x *CampaignMetaData) GetUserSegmentSize() int64 {
	if x != nil {
		return x.UserSegmentSize
	}
	return 0
}

var File_CampaignService_campaign_service_proto protoreflect.FileDescriptor

var file_CampaignService_campaign_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x09, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x6d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x91, 0x05, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x6d, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a,
	0x16, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xdf, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe3,
	0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x6f, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x61, 0x64,
	0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x89, 0x01, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x1b, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a,
	0x19, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1a,
	0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x61, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x1e,
	0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0xe7, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1f, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xe9, 0x03, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x6f, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1b, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x77, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x61, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c,
	0x6b, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x81, 0x07, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x79, 0x0a, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x12, 0x65, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x23, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc7, 0x02, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x71, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x26, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xbf, 0x02,
	0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x6d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x22, 0xcd, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x22, 0xb3, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x67,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x22, 0xb5, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x68,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xd7,
	0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe6, 0x01,
	0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x46,
	0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x19, 0x46, 0x69, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd1, 0x01, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe4,
	0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22,
	0xfb, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x19, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0xdb, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe5,
	0x01, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x65, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x68, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x29, 0x46, 0x69,
	0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x30,
	0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x12, 0x77, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x41,
	0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x7c, 0x0a, 0x13, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf3, 0x03,
	0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xc0, 0x04, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x30, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xe8, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x5c, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x12, 0x73, 0x0a, 0x15, 0x65, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x15, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x22, 0xab, 0x02,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x6c, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x4f, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x04, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x15, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x04, 0x65, 0x64, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x70,
	0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x70, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x56, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x5d, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x45, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x64, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x22, 0x40, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6c, 0x6c, 0x22, 0xfa, 0x03, 0x0a, 0x10, 0x45,
	0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x68, 0x65,
	0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x48, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0e, 0x45, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x77, 0x61, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08,
	0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x64, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x06, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x22, 0xd8, 0x03, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x6d, 0x0a, 0x15, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa9, 0x03, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xfa, 0x01, 0x0a,
	0x21, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x27, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x75, 0x0a,
	0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f,
	0x6e, 0x54, 0x78, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x16, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x69, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x75, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x72, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x7e, 0x0a, 0x15,
	0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x81, 0x01, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x72, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x12, 0x7e, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x42, 0x75, 0x6c, 0x6b, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x13,
	0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x14, 0x72, 0x65,
	0x71, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75,
	0x6c, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x41,
	0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75,
	0x6c, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0xae, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x71, 0x46,
	0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x25, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x72, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x7e, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64,
	0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x7b, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x78, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x41,
	0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x75, 0x6c, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x0a,
	0x0a, 0x08, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9c, 0x17, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x76, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x73, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x7f,
	0x0a, 0x15, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x82, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65,
	0x73, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x6c, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x73, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x7f, 0x0a, 0x15, 0x72, 0x65,
	0x73, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x75, 0x6c, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x67, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x91, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x72,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x94,
	0x01, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0xaf, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x25, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x7f, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0x7c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x73, 0x46,
	0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x79, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x41,
	0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x75, 0x6c, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcf, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x1a,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xfa,
	0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x6a, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x11,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe1,
	0x02, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x32, 0xd3, 0x30, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x43, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x42, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbd, 0x01, 0x0a,
	0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xc0, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xb7, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3,
	0x01, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xde, 0x01, 0x0a, 0x29, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x12, 0x56, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x3b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa3, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x42, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xb1, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x18,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xb4, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x42, 0x75, 0x6c, 0x6b, 0x12, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc9, 0x01, 0x0a, 0x22,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc9, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x4f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xc4, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x1a, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb8,
	0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xcc, 0x01, 0x0a, 0x23, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x12, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x55, 0x0a, 0x1f, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2f, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_CampaignService_campaign_service_proto_rawDescOnce sync.Once
	file_CampaignService_campaign_service_proto_rawDescData = file_CampaignService_campaign_service_proto_rawDesc
)

func file_CampaignService_campaign_service_proto_rawDescGZIP() []byte {
	file_CampaignService_campaign_service_proto_rawDescOnce.Do(func() {
		file_CampaignService_campaign_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_CampaignService_campaign_service_proto_rawDescData)
	})
	return file_CampaignService_campaign_service_proto_rawDescData
}

var file_CampaignService_campaign_service_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_CampaignService_campaign_service_proto_goTypes = []interface{}{
	(*AddCampaignRequest)(nil),                                   // 0: farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	(*TestCampaignRequest)(nil),                                  // 1: farm.nurture.core.contracts.CampaignService.TestCampaignRequest
	(*BulkAddCampaignRequest)(nil),                               // 2: farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest
	(*AddCampaignResponse)(nil),                                  // 3: farm.nurture.core.contracts.CampaignService.AddCampaignResponse
	(*BulkAddCampaignResponse)(nil),                              // 4: farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse
	(*AddControlGroupRequest)(nil),                               // 5: farm.nurture.core.contracts.CampaignService.AddControlGroupRequest
	(*AddControlGroupResponse)(nil),                              // 6: farm.nurture.core.contracts.CampaignService.AddControlGroupResponse
	(*UpdateCampaignRequest)(nil),                                // 7: farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest
	(*BulkUpdateCampaignRequest)(nil),                            // 8: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest
	(*UpdateCampaignResponse)(nil),                               // 9: farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse
	(*BulkUpdateCampaignResponse)(nil),                           // 10: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse
	(*AddCampaignTemplateRequest)(nil),                           // 11: farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	(*TestCampaignTemplateRequest)(nil),                          // 12: farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest
	(*BulkAddCampaignTemplateRequest)(nil),                       // 13: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest
	(*AddCampaignTemplateResponse)(nil),                          // 14: farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse
	(*BulkAddCampaignTemplateResponse)(nil),                      // 15: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse
	(*AddNewCampaignRequest)(nil),                                // 16: farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest
	(*BulkAddNewCampaignRequest)(nil),                            // 17: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest
	(*AddNewCampaignResponse)(nil),                               // 18: farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse
	(*BulkAddNewCampaignResponse)(nil),                           // 19: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse
	(*CampaignRequest)(nil),                                      // 20: farm.nurture.core.contracts.CampaignService.CampaignRequest
	(*CampaignResponse)(nil),                                     // 21: farm.nurture.core.contracts.CampaignService.CampaignResponse
	(*FindCampaignByIdRequest)(nil),                              // 22: farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest
	(*FindCampaignByIdResponseRecord)(nil),                       // 23: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord
	(*FindCampaignByIdResponse)(nil),                             // 24: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse
	(*FindControlGroupByCampaignIdRequest)(nil),                  // 25: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdRequest
	(*FindControlGroupByCampaignIdResponseRecord)(nil),           // 26: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponseRecord
	(*FindControlGroupByCampaignIdResponse)(nil),                 // 27: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponse
	(*FindCampaignTemplateByIdRequest)(nil),                      // 28: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest
	(*FindCampaignTemplateByIdResponseRecord)(nil),               // 29: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord
	(*FindCampaignTemplateByIdResponse)(nil),                     // 30: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse
	(*FindTargetUserByIdRequest)(nil),                            // 31: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest
	(*FindTargetUserByIdResponseRecord)(nil),                     // 32: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord
	(*FindTargetUserByIdResponse)(nil),                           // 33: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse
	(*GetDynamicDataByKeyRequest)(nil),                           // 34: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest
	(*GetDynamicDataByKeyResponseRecord)(nil),                    // 35: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord
	(*GetDynamicDataByKeyResponse)(nil),                          // 36: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse
	(*AddDynamicDataRequest)(nil),                                // 37: farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest
	(*BulkAddDynamicDataRequest)(nil),                            // 38: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest
	(*AddDynamicDataResponse)(nil),                               // 39: farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse
	(*BulkAddDynamicDataResponse)(nil),                           // 40: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse
	(*FindQueryCampaignRequest)(nil),                             // 41: farm.nurture.core.contracts.CampaignService.FindQueryCampaignRequest
	(*FindQueryCampaignResponseRecord)(nil),                      // 42: farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponseRecord
	(*FindQueryCampaignResponse)(nil),                            // 43: farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse
	(*AddQueryCampaignRequest)(nil),                              // 44: farm.nurture.core.contracts.CampaignService.AddQueryCampaignRequest
	(*BulkAddQueryCampaignRequest)(nil),                          // 45: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignRequest
	(*AddQueryCampaignResponse)(nil),                             // 46: farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse
	(*BulkAddQueryCampaignResponse)(nil),                         // 47: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignResponse
	(*AddTargetUserRequest)(nil),                                 // 48: farm.nurture.core.contracts.CampaignService.AddTargetUserRequest
	(*TestTargetUserRequest)(nil),                                // 49: farm.nurture.core.contracts.CampaignService.TestTargetUserRequest
	(*BulkAddTargetUserRequest)(nil),                             // 50: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest
	(*AddTargetUserResponse)(nil),                                // 51: farm.nurture.core.contracts.CampaignService.AddTargetUserResponse
	(*BulkAddTargetUserResponse)(nil),                            // 52: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse
	(*AddInactionTargetUserRequest)(nil),                         // 53: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest
	(*BulkAddInactionTargetUserRequest)(nil),                     // 54: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest
	(*AddInactionTargetUserResponse)(nil),                        // 55: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse
	(*BulkAddInactionTargetUserResponse)(nil),                    // 56: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse
	(*FindInactionTargetUserByCampaignIdRequest)(nil),            // 57: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest
	(*FindInactionTargetUserByCampaignIdResponseRecord)(nil),     // 58: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord
	(*FindInactionTargetUserByCampaignIdResponse)(nil),           // 59: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse
	(*AthenaQueryRequest)(nil),                                   // 60: farm.nurture.core.contracts.CampaignService.AthenaQueryRequest
	(*AthenaQueryResponse)(nil),                                  // 61: farm.nurture.core.contracts.CampaignService.AthenaQueryResponse
	(*TestNewCampaignRequest)(nil),                               // 62: farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest
	(*TestNewCampaignResponse)(nil),                              // 63: farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse
	(*ScheduleUserJourneyCampaignRequest)(nil),                   // 64: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest
	(*UserJourneyCampaign)(nil),                                  // 65: farm.nurture.core.contracts.CampaignService.UserJourneyCampaign
	(*UserJourney)(nil),                                          // 66: farm.nurture.core.contracts.CampaignService.UserJourney
	(*UserJourneyVertex)(nil),                                    // 67: farm.nurture.core.contracts.CampaignService.UserJourneyVertex
	(*PastEventData)(nil),                                        // 68: farm.nurture.core.contracts.CampaignService.PastEventData
	(*EventMetadata)(nil),                                        // 69: farm.nurture.core.contracts.CampaignService.EventMetadata
	(*UserMetadata)(nil),                                         // 70: farm.nurture.core.contracts.CampaignService.UserMetadata
	(*UserJourneyEdge)(nil),                                      // 71: farm.nurture.core.contracts.CampaignService.UserJourneyEdge
	(*WaitTime)(nil),                                             // 72: farm.nurture.core.contracts.CampaignService.WaitTime
	(*EngagementVertex)(nil),                                     // 73: farm.nurture.core.contracts.CampaignService.EngagementVertex
	(*MediaInfo)(nil),                                            // 74: farm.nurture.core.contracts.CampaignService.MediaInfo
	(*EngagementEdge)(nil),                                       // 75: farm.nurture.core.contracts.CampaignService.EngagementEdge
	(*ScheduleUserJourneyCampaignResponse)(nil),                  // 76: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignResponse
	(*FindUserJourneyCampaignByIdRequest)(nil),                   // 77: farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdRequest
	(*FindUserJourneyCampaignByIdResponse)(nil),                  // 78: farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdResponse
	(*FilterUserJourneyCampaignRequest)(nil),                     // 79: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignRequest
	(*FilterUserJourneyCampaignResponse)(nil),                    // 80: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponse
	(*FilterUserJourneyCampaignResponseRecord)(nil),              // 81: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponseRecord
	(*MultiRequests)(nil),                                        // 82: farm.nurture.core.contracts.CampaignService.MultiRequests
	(*Request)(nil),                                              // 83: farm.nurture.core.contracts.CampaignService.Request
	(*MultiResponses)(nil),                                       // 84: farm.nurture.core.contracts.CampaignService.MultiResponses
	(*Response)(nil),                                             // 85: farm.nurture.core.contracts.CampaignService.Response
	(*FilterCampaignRequest)(nil),                                // 86: farm.nurture.core.contracts.CampaignService.FilterCampaignRequest
	(*FilterCampaignResponse)(nil),                               // 87: farm.nurture.core.contracts.CampaignService.FilterCampaignResponse
	(*UserJourneyCampaignRequest)(nil),                           // 88: farm.nurture.core.contracts.CampaignService.UserJourneyCampaignRequest
	(*UserJourneyCampaignResponse)(nil),                          // 89: farm.nurture.core.contracts.CampaignService.UserJourneyCampaignResponse
	(*TestCampaignByIdRequest)(nil),                              // 90: farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest
	(*TestCampaignByIdResponse)(nil),                             // 91: farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse
	(*FetchCampaignScheduleRequest)(nil),                         // 92: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest
	(*FetchCampaignScheduleResponse)(nil),                        // 93: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleResponse
	(*CampaignsSchedule)(nil),                                    // 94: farm.nurture.core.contracts.CampaignService.CampaignsSchedule
	(*CampaignSchedule)(nil),                                     // 95: farm.nurture.core.contracts.CampaignService.CampaignSchedule
	(*CampaignMetaData)(nil),                                     // 96: farm.nurture.core.contracts.CampaignService.CampaignMetaData
	(*GoCommon.RequestHeaders)(nil),                              // 97: farm.nurture.core.contracts.common.RequestHeaders
	(GoCommon.NameSpace)(0),                                      // 98: farm.nurture.core.contracts.common.NameSpace
	(*GoCommon.Attribs)(nil),                                     // 99: farm.nurture.core.contracts.common.Attribs
	(GoCommon.CommunicationChannel)(0),                           // 100: farm.nurture.core.contracts.common.CommunicationChannel
	(GoCommon.CampaignStatus)(0),                                 // 101: farm.nurture.core.contracts.common.CampaignStatus
	(GoCommon.CampaignQueryType)(0),                              // 102: farm.nurture.core.contracts.common.CampaignQueryType
	(GoCommon.CampaignScheduleType)(0),                           // 103: farm.nurture.core.contracts.common.CampaignScheduleType
	(*durationpb.Duration)(nil),                                  // 104: google.protobuf.Duration
	(*GoCommon.ActorID)(nil),                                     // 105: farm.nurture.core.contracts.common.ActorID
	(*GoCommunicationEngine.Media)(nil),                          // 106: farm.nurture.core.contracts.ce.Media
	(*GoCommunicationEngine.CommunicationChannelAttributes)(nil), // 107: farm.nurture.core.contracts.ce.CommunicationChannelAttributes
	(*GoCommon.RequestStatusResult)(nil),                         // 108: farm.nurture.core.contracts.common.RequestStatusResult
	(GoCommon.LogicalOperator)(0),                                // 109: farm.nurture.core.contracts.common.LogicalOperator
	(GoCommon.UserJourneyEventType)(0),                           // 110: farm.nurture.core.contracts.common.UserJourneyEventType
	(GoCommon.CampaignEdgeType)(0),                               // 111: farm.nurture.core.contracts.common.CampaignEdgeType
	(GoCommon.MediaType)(0),                                      // 112: farm.nurture.core.contracts.common.MediaType
	(GoCommon.FileType)(0),                                       // 113: farm.nurture.core.contracts.common.FileType
	(GoCommon.CommunicationState)(0),                             // 114: farm.nurture.core.contracts.common.CommunicationState
}
var file_CampaignService_campaign_service_proto_depIdxs = []int32{
	97,  // 0: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	98,  // 1: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	99,  // 2: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.content_metadata:type_name -> farm.nurture.core.contracts.common.Attribs
	100, // 3: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	101, // 4: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.status:type_name -> farm.nurture.core.contracts.common.CampaignStatus
	102, // 5: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.type:type_name -> farm.nurture.core.contracts.common.CampaignQueryType
	103, // 6: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.campaignScheduleType:type_name -> farm.nurture.core.contracts.common.CampaignScheduleType
	104, // 7: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.inactionDuration:type_name -> google.protobuf.Duration
	105, // 8: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.createdByActor:type_name -> farm.nurture.core.contracts.common.ActorID
	106, // 9: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.media:type_name -> farm.nurture.core.contracts.ce.Media
	107, // 10: farm.nurture.core.contracts.CampaignService.AddCampaignRequest.channel_attributes:type_name -> farm.nurture.core.contracts.ce.CommunicationChannelAttributes
	97,  // 11: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	98,  // 12: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	99,  // 13: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.content_metadata:type_name -> farm.nurture.core.contracts.common.Attribs
	100, // 14: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	102, // 15: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.type:type_name -> farm.nurture.core.contracts.common.CampaignQueryType
	106, // 16: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.media:type_name -> farm.nurture.core.contracts.ce.Media
	107, // 17: farm.nurture.core.contracts.CampaignService.TestCampaignRequest.channel_attributes:type_name -> farm.nurture.core.contracts.ce.CommunicationChannelAttributes
	97,  // 18: farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	0,   // 19: farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	108, // 20: farm.nurture.core.contracts.CampaignService.AddCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 21: farm.nurture.core.contracts.CampaignService.AddCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 22: farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	3,   // 23: farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignResponse
	97,  // 24: farm.nurture.core.contracts.CampaignService.AddControlGroupRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 25: farm.nurture.core.contracts.CampaignService.AddControlGroupResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 26: farm.nurture.core.contracts.CampaignService.AddControlGroupResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	97,  // 27: farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	105, // 28: farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.updatedByActor:type_name -> farm.nurture.core.contracts.common.ActorID
	0,   // 29: farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.addCampaignRequest:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	11,  // 30: farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest.addCampaignTemplateRequests:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	97,  // 31: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	7,   // 32: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest
	108, // 33: farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 34: farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 35: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	9,   // 36: farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse
	97,  // 37: farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	97,  // 38: farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	97,  // 39: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	11,  // 40: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	108, // 41: farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 42: farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 43: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	14,  // 44: farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse
	97,  // 45: farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	0,   // 46: farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignRequest:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	11,  // 47: farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addCampaignTemplateRequests:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	48,  // 48: farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest.addTargetUserRequests:type_name -> farm.nurture.core.contracts.CampaignService.AddTargetUserRequest
	97,  // 49: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	16,  // 50: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest
	108, // 51: farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 52: farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 53: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	18,  // 54: farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse
	97,  // 55: farm.nurture.core.contracts.CampaignService.CampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 56: farm.nurture.core.contracts.CampaignService.CampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 57: farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	30,  // 58: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord.templateResponse:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse
	108, // 59: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 60: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	23,  // 61: farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord
	97,  // 62: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 63: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 64: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	26,  // 65: farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponseRecord
	97,  // 66: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 67: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 68: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	29,  // 69: farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponseRecord
	97,  // 70: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	99,  // 71: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 72: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 73: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	32,  // 74: farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponseRecord
	97,  // 75: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 76: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 77: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	35,  // 78: farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponseRecord
	97,  // 79: farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	97,  // 80: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	37,  // 81: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest
	108, // 82: farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 83: farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 84: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	39,  // 85: farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse
	97,  // 86: farm.nurture.core.contracts.CampaignService.FindQueryCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 87: farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 88: farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	42,  // 89: farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponseRecord
	97,  // 90: farm.nurture.core.contracts.CampaignService.AddQueryCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	97,  // 91: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	44,  // 92: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignRequest
	108, // 93: farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 94: farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 95: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	46,  // 96: farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse
	97,  // 97: farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	105, // 98: farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.user:type_name -> farm.nurture.core.contracts.common.ActorID
	99,  // 99: farm.nurture.core.contracts.CampaignService.AddTargetUserRequest.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	97,  // 100: farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	105, // 101: farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.user:type_name -> farm.nurture.core.contracts.common.ActorID
	99,  // 102: farm.nurture.core.contracts.CampaignService.TestTargetUserRequest.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	97,  // 103: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	48,  // 104: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddTargetUserRequest
	108, // 105: farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 106: farm.nurture.core.contracts.CampaignService.AddTargetUserResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 107: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	51,  // 108: farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddTargetUserResponse
	97,  // 109: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	105, // 110: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest.user:type_name -> farm.nurture.core.contracts.common.ActorID
	97,  // 111: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	53,  // 112: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest.requests:type_name -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest
	108, // 113: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 114: farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 115: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	55,  // 116: farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse.responses:type_name -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse
	97,  // 117: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 118: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 119: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	58,  // 120: farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponseRecord
	97,  // 121: farm.nurture.core.contracts.CampaignService.AthenaQueryRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 122: farm.nurture.core.contracts.CampaignService.AthenaQueryResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 123: farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	1,   // 124: farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignRequest:type_name -> farm.nurture.core.contracts.CampaignService.TestCampaignRequest
	12,  // 125: farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testCampaignTemplateRequests:type_name -> farm.nurture.core.contracts.CampaignService.TestCampaignTemplateRequest
	49,  // 126: farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest.testTargetUserRequests:type_name -> farm.nurture.core.contracts.CampaignService.TestTargetUserRequest
	108, // 127: farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 128: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	98,  // 129: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	65,  // 130: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest.campaign:type_name -> farm.nurture.core.contracts.CampaignService.UserJourneyCampaign
	105, // 131: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest.createdByActor:type_name -> farm.nurture.core.contracts.common.ActorID
	66,  // 132: farm.nurture.core.contracts.CampaignService.UserJourneyCampaign.userJourneys:type_name -> farm.nurture.core.contracts.CampaignService.UserJourney
	73,  // 133: farm.nurture.core.contracts.CampaignService.UserJourneyCampaign.engagementStartVertex:type_name -> farm.nurture.core.contracts.CampaignService.EngagementVertex
	67,  // 134: farm.nurture.core.contracts.CampaignService.UserJourney.userJourneyVertex:type_name -> farm.nurture.core.contracts.CampaignService.UserJourneyVertex
	109, // 135: farm.nurture.core.contracts.CampaignService.UserJourney.operator:type_name -> farm.nurture.core.contracts.common.LogicalOperator
	70,  // 136: farm.nurture.core.contracts.CampaignService.UserJourney.userMetadata:type_name -> farm.nurture.core.contracts.CampaignService.UserMetadata
	110, // 137: farm.nurture.core.contracts.CampaignService.UserJourneyVertex.eventType:type_name -> farm.nurture.core.contracts.common.UserJourneyEventType
	69,  // 138: farm.nurture.core.contracts.CampaignService.UserJourneyVertex.eventMetadata:type_name -> farm.nurture.core.contracts.CampaignService.EventMetadata
	69,  // 139: farm.nurture.core.contracts.CampaignService.UserJourneyVertex.inactionEventMetadata:type_name -> farm.nurture.core.contracts.CampaignService.EventMetadata
	71,  // 140: farm.nurture.core.contracts.CampaignService.UserJourneyVertex.edge:type_name -> farm.nurture.core.contracts.CampaignService.UserJourneyEdge
	68,  // 141: farm.nurture.core.contracts.CampaignService.UserJourneyVertex.pastEventData:type_name -> farm.nurture.core.contracts.CampaignService.PastEventData
	110, // 142: farm.nurture.core.contracts.CampaignService.PastEventData.eventType:type_name -> farm.nurture.core.contracts.common.UserJourneyEventType
	99,  // 143: farm.nurture.core.contracts.CampaignService.PastEventData.eventFilters:type_name -> farm.nurture.core.contracts.common.Attribs
	99,  // 144: farm.nurture.core.contracts.CampaignService.EventMetadata.eventFilters:type_name -> farm.nurture.core.contracts.common.Attribs
	99,  // 145: farm.nurture.core.contracts.CampaignService.UserMetadata.userFilters:type_name -> farm.nurture.core.contracts.common.Attribs
	72,  // 146: farm.nurture.core.contracts.CampaignService.UserJourneyEdge.waitTime:type_name -> farm.nurture.core.contracts.CampaignService.WaitTime
	111, // 147: farm.nurture.core.contracts.CampaignService.UserJourneyEdge.edgeType:type_name -> farm.nurture.core.contracts.common.CampaignEdgeType
	67,  // 148: farm.nurture.core.contracts.CampaignService.UserJourneyEdge.userJourneyVertex:type_name -> farm.nurture.core.contracts.CampaignService.UserJourneyVertex
	100, // 149: farm.nurture.core.contracts.CampaignService.EngagementVertex.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	99,  // 150: farm.nurture.core.contracts.CampaignService.EngagementVertex.contentMetadata:type_name -> farm.nurture.core.contracts.common.Attribs
	74,  // 151: farm.nurture.core.contracts.CampaignService.EngagementVertex.mediaInfo:type_name -> farm.nurture.core.contracts.CampaignService.MediaInfo
	75,  // 152: farm.nurture.core.contracts.CampaignService.EngagementVertex.edges:type_name -> farm.nurture.core.contracts.CampaignService.EngagementEdge
	112, // 153: farm.nurture.core.contracts.CampaignService.MediaInfo.mediaType:type_name -> farm.nurture.core.contracts.common.MediaType
	113, // 154: farm.nurture.core.contracts.CampaignService.MediaInfo.fileType:type_name -> farm.nurture.core.contracts.common.FileType
	72,  // 155: farm.nurture.core.contracts.CampaignService.EngagementEdge.waitTime:type_name -> farm.nurture.core.contracts.CampaignService.WaitTime
	111, // 156: farm.nurture.core.contracts.CampaignService.EngagementEdge.edgeType:type_name -> farm.nurture.core.contracts.common.CampaignEdgeType
	114, // 157: farm.nurture.core.contracts.CampaignService.EngagementEdge.states:type_name -> farm.nurture.core.contracts.common.CommunicationState
	73,  // 158: farm.nurture.core.contracts.CampaignService.EngagementEdge.vertex:type_name -> farm.nurture.core.contracts.CampaignService.EngagementVertex
	108, // 159: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	99,  // 160: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	108, // 161: farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignResponse.triggerCampaignStatus:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 162: farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 163: farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	65,  // 164: farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdResponse.campaign:type_name -> farm.nurture.core.contracts.CampaignService.UserJourneyCampaign
	97,  // 165: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	98,  // 166: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	101, // 167: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignRequest.status:type_name -> farm.nurture.core.contracts.common.CampaignStatus
	108, // 168: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	81,  // 169: farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponseRecord
	83,  // 170: farm.nurture.core.contracts.CampaignService.MultiRequests.request:type_name -> farm.nurture.core.contracts.CampaignService.Request
	0,   // 171: farm.nurture.core.contracts.CampaignService.Request.reqAddCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	2,   // 172: farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest
	7,   // 173: farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaign:type_name -> farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest
	8,   // 174: farm.nurture.core.contracts.CampaignService.Request.reqUpdateCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest
	11,  // 175: farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplate:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	13,  // 176: farm.nurture.core.contracts.CampaignService.Request.reqAddCampaignTemplateBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest
	16,  // 177: farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest
	17,  // 178: farm.nurture.core.contracts.CampaignService.Request.reqAddNewCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest
	20,  // 179: farm.nurture.core.contracts.CampaignService.Request.reqGetUserList:type_name -> farm.nurture.core.contracts.CampaignService.CampaignRequest
	22,  // 180: farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignById:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest
	28,  // 181: farm.nurture.core.contracts.CampaignService.Request.reqFindCampaignTemplateById:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest
	48,  // 182: farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUser:type_name -> farm.nurture.core.contracts.CampaignService.AddTargetUserRequest
	50,  // 183: farm.nurture.core.contracts.CampaignService.Request.reqAddTargetUserBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest
	53,  // 184: farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUser:type_name -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest
	54,  // 185: farm.nurture.core.contracts.CampaignService.Request.reqAddInactionTargetUserBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest
	57,  // 186: farm.nurture.core.contracts.CampaignService.Request.reqFindInactionTargetUserByCampaignId:type_name -> farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest
	34,  // 187: farm.nurture.core.contracts.CampaignService.Request.reqGetDynamicDataByKey:type_name -> farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest
	37,  // 188: farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicData:type_name -> farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest
	38,  // 189: farm.nurture.core.contracts.CampaignService.Request.reqAddDynamicDataBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest
	41,  // 190: farm.nurture.core.contracts.CampaignService.Request.reqFindQueryCampaign:type_name -> farm.nurture.core.contracts.CampaignService.FindQueryCampaignRequest
	44,  // 191: farm.nurture.core.contracts.CampaignService.Request.reqAddQueryCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignRequest
	45,  // 192: farm.nurture.core.contracts.CampaignService.Request.reqAddQueryCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignRequest
	108, // 193: farm.nurture.core.contracts.CampaignService.MultiResponses.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	85,  // 194: farm.nurture.core.contracts.CampaignService.MultiResponses.response:type_name -> farm.nurture.core.contracts.CampaignService.Response
	108, // 195: farm.nurture.core.contracts.CampaignService.Response.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	3,   // 196: farm.nurture.core.contracts.CampaignService.Response.resAddCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignResponse
	4,   // 197: farm.nurture.core.contracts.CampaignService.Response.resAddCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse
	9,   // 198: farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaign:type_name -> farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse
	10,  // 199: farm.nurture.core.contracts.CampaignService.Response.resUpdateCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse
	14,  // 200: farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplate:type_name -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse
	15,  // 201: farm.nurture.core.contracts.CampaignService.Response.resAddCampaignTemplateBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse
	18,  // 202: farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse
	19,  // 203: farm.nurture.core.contracts.CampaignService.Response.resAddNewCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse
	21,  // 204: farm.nurture.core.contracts.CampaignService.Response.resGetUserList:type_name -> farm.nurture.core.contracts.CampaignService.CampaignResponse
	24,  // 205: farm.nurture.core.contracts.CampaignService.Response.resFindCampaignById:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse
	30,  // 206: farm.nurture.core.contracts.CampaignService.Response.resFindCampaignTemplateById:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse
	51,  // 207: farm.nurture.core.contracts.CampaignService.Response.resAddTargetUser:type_name -> farm.nurture.core.contracts.CampaignService.AddTargetUserResponse
	52,  // 208: farm.nurture.core.contracts.CampaignService.Response.resAddTargetUserBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse
	55,  // 209: farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUser:type_name -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse
	56,  // 210: farm.nurture.core.contracts.CampaignService.Response.resAddInactionTargetUserBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse
	59,  // 211: farm.nurture.core.contracts.CampaignService.Response.resFindInactionTargetUserByCampaignId:type_name -> farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse
	36,  // 212: farm.nurture.core.contracts.CampaignService.Response.resGetDynamicDataByKey:type_name -> farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse
	39,  // 213: farm.nurture.core.contracts.CampaignService.Response.resAddDynamicData:type_name -> farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse
	40,  // 214: farm.nurture.core.contracts.CampaignService.Response.resAddDynamicDataBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse
	43,  // 215: farm.nurture.core.contracts.CampaignService.Response.resFindQueryCampaign:type_name -> farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse
	46,  // 216: farm.nurture.core.contracts.CampaignService.Response.resAddQueryCampaign:type_name -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse
	47,  // 217: farm.nurture.core.contracts.CampaignService.Response.resAddQueryCampaignBulk:type_name -> farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignResponse
	97,  // 218: farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	101, // 219: farm.nurture.core.contracts.CampaignService.FilterCampaignRequest.status:type_name -> farm.nurture.core.contracts.common.CampaignStatus
	108, // 220: farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	23,  // 221: farm.nurture.core.contracts.CampaignService.FilterCampaignResponse.records:type_name -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponseRecord
	97,  // 222: farm.nurture.core.contracts.CampaignService.UserJourneyCampaignRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 223: farm.nurture.core.contracts.CampaignService.UserJourneyCampaignResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 224: farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 225: farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	97,  // 226: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	98,  // 227: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	101, // 228: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest.status:type_name -> farm.nurture.core.contracts.common.CampaignStatus
	100, // 229: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	108, // 230: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	94,  // 231: farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleResponse.campaignSchedule:type_name -> farm.nurture.core.contracts.CampaignService.CampaignsSchedule
	95,  // 232: farm.nurture.core.contracts.CampaignService.CampaignsSchedule.campaignSchedule:type_name -> farm.nurture.core.contracts.CampaignService.CampaignSchedule
	96,  // 233: farm.nurture.core.contracts.CampaignService.CampaignSchedule.campaignMetaData:type_name -> farm.nurture.core.contracts.CampaignService.CampaignMetaData
	98,  // 234: farm.nurture.core.contracts.CampaignService.CampaignMetaData.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	100, // 235: farm.nurture.core.contracts.CampaignService.CampaignMetaData.communicationChannel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	0,   // 236: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaign:input_type -> farm.nurture.core.contracts.CampaignService.AddCampaignRequest
	2,   // 237: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignRequest
	5,   // 238: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddControlGroup:input_type -> farm.nurture.core.contracts.CampaignService.AddControlGroupRequest
	7,   // 239: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUpdateCampaign:input_type -> farm.nurture.core.contracts.CampaignService.UpdateCampaignRequest
	8,   // 240: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUpdateCampaignBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignRequest
	11,  // 241: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignTemplate:input_type -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateRequest
	13,  // 242: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignTemplateBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateRequest
	16,  // 243: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddNewCampaign:input_type -> farm.nurture.core.contracts.CampaignService.AddNewCampaignRequest
	17,  // 244: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddNewCampaignBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignRequest
	20,  // 245: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteCampaign:input_type -> farm.nurture.core.contracts.CampaignService.CampaignRequest
	22,  // 246: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindCampaignById:input_type -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdRequest
	28,  // 247: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindCampaignTemplateById:input_type -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdRequest
	31,  // 248: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindTargetUserById:input_type -> farm.nurture.core.contracts.CampaignService.FindTargetUserByIdRequest
	48,  // 249: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddTargetUser:input_type -> farm.nurture.core.contracts.CampaignService.AddTargetUserRequest
	50,  // 250: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddTargetUserBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddTargetUserRequest
	53,  // 251: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddInactionTargetUser:input_type -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserRequest
	54,  // 252: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddInactionTargetUserBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserRequest
	57,  // 253: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindInactionTargetUserByCampaignId:input_type -> farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdRequest
	82,  // 254: farm.nurture.core.contracts.CampaignService.CampaignService.Execute:input_type -> farm.nurture.core.contracts.CampaignService.MultiRequests
	60,  // 255: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAthenaQuery:input_type -> farm.nurture.core.contracts.CampaignService.AthenaQueryRequest
	62,  // 256: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteTestNewCampaign:input_type -> farm.nurture.core.contracts.CampaignService.TestNewCampaignRequest
	86,  // 257: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFilterCampaigns:input_type -> farm.nurture.core.contracts.CampaignService.FilterCampaignRequest
	90,  // 258: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteTestCampaignById:input_type -> farm.nurture.core.contracts.CampaignService.TestCampaignByIdRequest
	34,  // 259: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteGetDynamicDataByKey:input_type -> farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyRequest
	37,  // 260: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddDynamicData:input_type -> farm.nurture.core.contracts.CampaignService.AddDynamicDataRequest
	38,  // 261: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddDynamicDataBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataRequest
	41,  // 262: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindQueryCampaign:input_type -> farm.nurture.core.contracts.CampaignService.FindQueryCampaignRequest
	44,  // 263: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddQueryCampaign:input_type -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignRequest
	45,  // 264: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddQueryCampaignBulk:input_type -> farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignRequest
	64,  // 265: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteScheduleUserJourneyCampaign:input_type -> farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignRequest
	77,  // 266: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindUserJourneyCampaignById:input_type -> farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdRequest
	79,  // 267: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFilterUserJourneyCampaigns:input_type -> farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignRequest
	88,  // 268: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUserJourneyCampaign:input_type -> farm.nurture.core.contracts.CampaignService.UserJourneyCampaignRequest
	92,  // 269: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFetchCampaignsSchedule:input_type -> farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleRequest
	25,  // 270: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindControlGroupByCampaignId:input_type -> farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdRequest
	3,   // 271: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaign:output_type -> farm.nurture.core.contracts.CampaignService.AddCampaignResponse
	4,   // 272: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignResponse
	6,   // 273: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddControlGroup:output_type -> farm.nurture.core.contracts.CampaignService.AddControlGroupResponse
	9,   // 274: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUpdateCampaign:output_type -> farm.nurture.core.contracts.CampaignService.UpdateCampaignResponse
	10,  // 275: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUpdateCampaignBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkUpdateCampaignResponse
	14,  // 276: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignTemplate:output_type -> farm.nurture.core.contracts.CampaignService.AddCampaignTemplateResponse
	15,  // 277: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddCampaignTemplateBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddCampaignTemplateResponse
	18,  // 278: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddNewCampaign:output_type -> farm.nurture.core.contracts.CampaignService.AddNewCampaignResponse
	19,  // 279: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddNewCampaignBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddNewCampaignResponse
	21,  // 280: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteCampaign:output_type -> farm.nurture.core.contracts.CampaignService.CampaignResponse
	24,  // 281: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindCampaignById:output_type -> farm.nurture.core.contracts.CampaignService.FindCampaignByIdResponse
	30,  // 282: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindCampaignTemplateById:output_type -> farm.nurture.core.contracts.CampaignService.FindCampaignTemplateByIdResponse
	33,  // 283: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindTargetUserById:output_type -> farm.nurture.core.contracts.CampaignService.FindTargetUserByIdResponse
	51,  // 284: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddTargetUser:output_type -> farm.nurture.core.contracts.CampaignService.AddTargetUserResponse
	52,  // 285: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddTargetUserBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddTargetUserResponse
	55,  // 286: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddInactionTargetUser:output_type -> farm.nurture.core.contracts.CampaignService.AddInactionTargetUserResponse
	56,  // 287: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddInactionTargetUserBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddInactionTargetUserResponse
	59,  // 288: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindInactionTargetUserByCampaignId:output_type -> farm.nurture.core.contracts.CampaignService.FindInactionTargetUserByCampaignIdResponse
	84,  // 289: farm.nurture.core.contracts.CampaignService.CampaignService.Execute:output_type -> farm.nurture.core.contracts.CampaignService.MultiResponses
	61,  // 290: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAthenaQuery:output_type -> farm.nurture.core.contracts.CampaignService.AthenaQueryResponse
	63,  // 291: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteTestNewCampaign:output_type -> farm.nurture.core.contracts.CampaignService.TestNewCampaignResponse
	87,  // 292: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFilterCampaigns:output_type -> farm.nurture.core.contracts.CampaignService.FilterCampaignResponse
	91,  // 293: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteTestCampaignById:output_type -> farm.nurture.core.contracts.CampaignService.TestCampaignByIdResponse
	36,  // 294: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteGetDynamicDataByKey:output_type -> farm.nurture.core.contracts.CampaignService.GetDynamicDataByKeyResponse
	39,  // 295: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddDynamicData:output_type -> farm.nurture.core.contracts.CampaignService.AddDynamicDataResponse
	40,  // 296: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddDynamicDataBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddDynamicDataResponse
	43,  // 297: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindQueryCampaign:output_type -> farm.nurture.core.contracts.CampaignService.FindQueryCampaignResponse
	46,  // 298: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddQueryCampaign:output_type -> farm.nurture.core.contracts.CampaignService.AddQueryCampaignResponse
	47,  // 299: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteAddQueryCampaignBulk:output_type -> farm.nurture.core.contracts.CampaignService.BulkAddQueryCampaignResponse
	76,  // 300: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteScheduleUserJourneyCampaign:output_type -> farm.nurture.core.contracts.CampaignService.ScheduleUserJourneyCampaignResponse
	78,  // 301: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindUserJourneyCampaignById:output_type -> farm.nurture.core.contracts.CampaignService.FindUserJourneyCampaignByIdResponse
	80,  // 302: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFilterUserJourneyCampaigns:output_type -> farm.nurture.core.contracts.CampaignService.FilterUserJourneyCampaignResponse
	89,  // 303: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteUserJourneyCampaign:output_type -> farm.nurture.core.contracts.CampaignService.UserJourneyCampaignResponse
	93,  // 304: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFetchCampaignsSchedule:output_type -> farm.nurture.core.contracts.CampaignService.FetchCampaignScheduleResponse
	27,  // 305: farm.nurture.core.contracts.CampaignService.CampaignService.ExecuteFindControlGroupByCampaignId:output_type -> farm.nurture.core.contracts.CampaignService.FindControlGroupByCampaignIdResponse
	271, // [271:306] is the sub-list for method output_type
	236, // [236:271] is the sub-list for method input_type
	236, // [236:236] is the sub-list for extension type_name
	236, // [236:236] is the sub-list for extension extendee
	0,   // [0:236] is the sub-list for field type_name
}

func init() { file_CampaignService_campaign_service_proto_init() }
func file_CampaignService_campaign_service_proto_init() {
	if File_CampaignService_campaign_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_CampaignService_campaign_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddControlGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddControlGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCampaignTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCampaignTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddCampaignTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCampaignTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddCampaignTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddNewCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddNewCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignByIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindControlGroupByCampaignIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindControlGroupByCampaignIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindControlGroupByCampaignIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignTemplateByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignTemplateByIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCampaignTemplateByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTargetUserByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTargetUserByIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTargetUserByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDynamicDataByKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDynamicDataByKeyResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDynamicDataByKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDynamicDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddDynamicDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDynamicDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddDynamicDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindQueryCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindQueryCampaignResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindQueryCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQueryCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddQueryCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQueryCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddQueryCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTargetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTargetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddTargetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTargetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddTargetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInactionTargetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddInactionTargetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInactionTargetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddInactionTargetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInactionTargetUserByCampaignIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInactionTargetUserByCampaignIdResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInactionTargetUserByCampaignIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthenaQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthenaQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNewCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNewCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleUserJourneyCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyVertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PastEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngagementVertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngagementEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleUserJourneyCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserJourneyCampaignByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserJourneyCampaignByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserJourneyCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserJourneyCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserJourneyCampaignResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCampaignByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCampaignByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCampaignScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCampaignScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignsSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CampaignService_campaign_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_CampaignService_campaign_service_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*Request_ReqAddCampaign)(nil),
		(*Request_ReqAddCampaignBulk)(nil),
		(*Request_ReqUpdateCampaign)(nil),
		(*Request_ReqUpdateCampaignBulk)(nil),
		(*Request_ReqAddCampaignTemplate)(nil),
		(*Request_ReqAddCampaignTemplateBulk)(nil),
		(*Request_ReqAddNewCampaign)(nil),
		(*Request_ReqAddNewCampaignBulk)(nil),
		(*Request_ReqGetUserList)(nil),
		(*Request_ReqFindCampaignById)(nil),
		(*Request_ReqFindCampaignTemplateById)(nil),
		(*Request_ReqAddTargetUser)(nil),
		(*Request_ReqAddTargetUserBulk)(nil),
		(*Request_ReqAddInactionTargetUser)(nil),
		(*Request_ReqAddInactionTargetUserBulk)(nil),
		(*Request_ReqFindInactionTargetUserByCampaignId)(nil),
		(*Request_ReqGetDynamicDataByKey)(nil),
		(*Request_ReqAddDynamicData)(nil),
		(*Request_ReqAddDynamicDataBulk)(nil),
		(*Request_ReqFindQueryCampaign)(nil),
		(*Request_ReqAddQueryCampaign)(nil),
		(*Request_ReqAddQueryCampaignBulk)(nil),
	}
	file_CampaignService_campaign_service_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*Response_ResAddCampaign)(nil),
		(*Response_ResAddCampaignBulk)(nil),
		(*Response_ResUpdateCampaign)(nil),
		(*Response_ResUpdateCampaignBulk)(nil),
		(*Response_ResAddCampaignTemplate)(nil),
		(*Response_ResAddCampaignTemplateBulk)(nil),
		(*Response_ResAddNewCampaign)(nil),
		(*Response_ResAddNewCampaignBulk)(nil),
		(*Response_ResGetUserList)(nil),
		(*Response_ResFindCampaignById)(nil),
		(*Response_ResFindCampaignTemplateById)(nil),
		(*Response_ResAddTargetUser)(nil),
		(*Response_ResAddTargetUserBulk)(nil),
		(*Response_ResAddInactionTargetUser)(nil),
		(*Response_ResAddInactionTargetUserBulk)(nil),
		(*Response_ResFindInactionTargetUserByCampaignId)(nil),
		(*Response_ResGetDynamicDataByKey)(nil),
		(*Response_ResAddDynamicData)(nil),
		(*Response_ResAddDynamicDataBulk)(nil),
		(*Response_ResFindQueryCampaign)(nil),
		(*Response_ResAddQueryCampaign)(nil),
		(*Response_ResAddQueryCampaignBulk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CampaignService_campaign_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_CampaignService_campaign_service_proto_goTypes,
		DependencyIndexes: file_CampaignService_campaign_service_proto_depIdxs,
		MessageInfos:      file_CampaignService_campaign_service_proto_msgTypes,
	}.Build()
	File_CampaignService_campaign_service_proto = out.File
	file_CampaignService_campaign_service_proto_rawDesc = nil
	file_CampaignService_campaign_service_proto_goTypes = nil
	file_CampaignService_campaign_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CampaignServiceClient is the client API for CampaignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CampaignServiceClient interface {
	ExecuteAddCampaign(ctx context.Context, in *AddCampaignRequest, opts ...grpc.CallOption) (*AddCampaignResponse, error)
	ExecuteAddCampaignBulk(ctx context.Context, in *BulkAddCampaignRequest, opts ...grpc.CallOption) (*BulkAddCampaignResponse, error)
	ExecuteAddControlGroup(ctx context.Context, in *AddControlGroupRequest, opts ...grpc.CallOption) (*AddControlGroupResponse, error)
	ExecuteUpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*UpdateCampaignResponse, error)
	ExecuteUpdateCampaignBulk(ctx context.Context, in *BulkUpdateCampaignRequest, opts ...grpc.CallOption) (*BulkUpdateCampaignResponse, error)
	ExecuteAddCampaignTemplate(ctx context.Context, in *AddCampaignTemplateRequest, opts ...grpc.CallOption) (*AddCampaignTemplateResponse, error)
	ExecuteAddCampaignTemplateBulk(ctx context.Context, in *BulkAddCampaignTemplateRequest, opts ...grpc.CallOption) (*BulkAddCampaignTemplateResponse, error)
	ExecuteAddNewCampaign(ctx context.Context, in *AddNewCampaignRequest, opts ...grpc.CallOption) (*AddNewCampaignResponse, error)
	ExecuteAddNewCampaignBulk(ctx context.Context, in *BulkAddNewCampaignRequest, opts ...grpc.CallOption) (*BulkAddNewCampaignResponse, error)
	ExecuteCampaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResponse, error)
	ExecuteFindCampaignById(ctx context.Context, in *FindCampaignByIdRequest, opts ...grpc.CallOption) (*FindCampaignByIdResponse, error)
	ExecuteFindCampaignTemplateById(ctx context.Context, in *FindCampaignTemplateByIdRequest, opts ...grpc.CallOption) (*FindCampaignTemplateByIdResponse, error)
	ExecuteFindTargetUserById(ctx context.Context, in *FindTargetUserByIdRequest, opts ...grpc.CallOption) (*FindTargetUserByIdResponse, error)
	ExecuteAddTargetUser(ctx context.Context, in *AddTargetUserRequest, opts ...grpc.CallOption) (*AddTargetUserResponse, error)
	ExecuteAddTargetUserBulk(ctx context.Context, in *BulkAddTargetUserRequest, opts ...grpc.CallOption) (*BulkAddTargetUserResponse, error)
	ExecuteAddInactionTargetUser(ctx context.Context, in *AddInactionTargetUserRequest, opts ...grpc.CallOption) (*AddInactionTargetUserResponse, error)
	ExecuteAddInactionTargetUserBulk(ctx context.Context, in *BulkAddInactionTargetUserRequest, opts ...grpc.CallOption) (*BulkAddInactionTargetUserResponse, error)
	ExecuteFindInactionTargetUserByCampaignId(ctx context.Context, in *FindInactionTargetUserByCampaignIdRequest, opts ...grpc.CallOption) (*FindInactionTargetUserByCampaignIdResponse, error)
	Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error)
	ExecuteAthenaQuery(ctx context.Context, in *AthenaQueryRequest, opts ...grpc.CallOption) (*AthenaQueryResponse, error)
	ExecuteTestNewCampaign(ctx context.Context, in *TestNewCampaignRequest, opts ...grpc.CallOption) (*TestNewCampaignResponse, error)
	ExecuteFilterCampaigns(ctx context.Context, in *FilterCampaignRequest, opts ...grpc.CallOption) (*FilterCampaignResponse, error)
	ExecuteTestCampaignById(ctx context.Context, in *TestCampaignByIdRequest, opts ...grpc.CallOption) (*TestCampaignByIdResponse, error)
	ExecuteGetDynamicDataByKey(ctx context.Context, in *GetDynamicDataByKeyRequest, opts ...grpc.CallOption) (*GetDynamicDataByKeyResponse, error)
	ExecuteAddDynamicData(ctx context.Context, in *AddDynamicDataRequest, opts ...grpc.CallOption) (*AddDynamicDataResponse, error)
	ExecuteAddDynamicDataBulk(ctx context.Context, in *BulkAddDynamicDataRequest, opts ...grpc.CallOption) (*BulkAddDynamicDataResponse, error)
	ExecuteFindQueryCampaign(ctx context.Context, in *FindQueryCampaignRequest, opts ...grpc.CallOption) (*FindQueryCampaignResponse, error)
	ExecuteAddQueryCampaign(ctx context.Context, in *AddQueryCampaignRequest, opts ...grpc.CallOption) (*AddQueryCampaignResponse, error)
	ExecuteAddQueryCampaignBulk(ctx context.Context, in *BulkAddQueryCampaignRequest, opts ...grpc.CallOption) (*BulkAddQueryCampaignResponse, error)
	ExecuteScheduleUserJourneyCampaign(ctx context.Context, in *ScheduleUserJourneyCampaignRequest, opts ...grpc.CallOption) (*ScheduleUserJourneyCampaignResponse, error)
	ExecuteFindUserJourneyCampaignById(ctx context.Context, in *FindUserJourneyCampaignByIdRequest, opts ...grpc.CallOption) (*FindUserJourneyCampaignByIdResponse, error)
	ExecuteFilterUserJourneyCampaigns(ctx context.Context, in *FilterUserJourneyCampaignRequest, opts ...grpc.CallOption) (*FilterUserJourneyCampaignResponse, error)
	ExecuteUserJourneyCampaign(ctx context.Context, in *UserJourneyCampaignRequest, opts ...grpc.CallOption) (*UserJourneyCampaignResponse, error)
	ExecuteFetchCampaignsSchedule(ctx context.Context, in *FetchCampaignScheduleRequest, opts ...grpc.CallOption) (*FetchCampaignScheduleResponse, error)
	ExecuteFindControlGroupByCampaignId(ctx context.Context, in *FindControlGroupByCampaignIdRequest, opts ...grpc.CallOption) (*FindControlGroupByCampaignIdResponse, error)
}

type campaignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignServiceClient(cc grpc.ClientConnInterface) CampaignServiceClient {
	return &campaignServiceClient{cc}
}

func (c *campaignServiceClient) ExecuteAddCampaign(ctx context.Context, in *AddCampaignRequest, opts ...grpc.CallOption) (*AddCampaignResponse, error) {
	out := new(AddCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddCampaignBulk(ctx context.Context, in *BulkAddCampaignRequest, opts ...grpc.CallOption) (*BulkAddCampaignResponse, error) {
	out := new(BulkAddCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddControlGroup(ctx context.Context, in *AddControlGroupRequest, opts ...grpc.CallOption) (*AddControlGroupResponse, error) {
	out := new(AddControlGroupResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddControlGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteUpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*UpdateCampaignResponse, error) {
	out := new(UpdateCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteUpdateCampaignBulk(ctx context.Context, in *BulkUpdateCampaignRequest, opts ...grpc.CallOption) (*BulkUpdateCampaignResponse, error) {
	out := new(BulkUpdateCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaignBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddCampaignTemplate(ctx context.Context, in *AddCampaignTemplateRequest, opts ...grpc.CallOption) (*AddCampaignTemplateResponse, error) {
	out := new(AddCampaignTemplateResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddCampaignTemplateBulk(ctx context.Context, in *BulkAddCampaignTemplateRequest, opts ...grpc.CallOption) (*BulkAddCampaignTemplateResponse, error) {
	out := new(BulkAddCampaignTemplateResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplateBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddNewCampaign(ctx context.Context, in *AddNewCampaignRequest, opts ...grpc.CallOption) (*AddNewCampaignResponse, error) {
	out := new(AddNewCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddNewCampaignBulk(ctx context.Context, in *BulkAddNewCampaignRequest, opts ...grpc.CallOption) (*BulkAddNewCampaignResponse, error) {
	out := new(BulkAddNewCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaignBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteCampaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResponse, error) {
	out := new(CampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindCampaignById(ctx context.Context, in *FindCampaignByIdRequest, opts ...grpc.CallOption) (*FindCampaignByIdResponse, error) {
	out := new(FindCampaignByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindCampaignTemplateById(ctx context.Context, in *FindCampaignTemplateByIdRequest, opts ...grpc.CallOption) (*FindCampaignTemplateByIdResponse, error) {
	out := new(FindCampaignTemplateByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignTemplateById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindTargetUserById(ctx context.Context, in *FindTargetUserByIdRequest, opts ...grpc.CallOption) (*FindTargetUserByIdResponse, error) {
	out := new(FindTargetUserByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindTargetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddTargetUser(ctx context.Context, in *AddTargetUserRequest, opts ...grpc.CallOption) (*AddTargetUserResponse, error) {
	out := new(AddTargetUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddTargetUserBulk(ctx context.Context, in *BulkAddTargetUserRequest, opts ...grpc.CallOption) (*BulkAddTargetUserResponse, error) {
	out := new(BulkAddTargetUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUserBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddInactionTargetUser(ctx context.Context, in *AddInactionTargetUserRequest, opts ...grpc.CallOption) (*AddInactionTargetUserResponse, error) {
	out := new(AddInactionTargetUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddInactionTargetUserBulk(ctx context.Context, in *BulkAddInactionTargetUserRequest, opts ...grpc.CallOption) (*BulkAddInactionTargetUserResponse, error) {
	out := new(BulkAddInactionTargetUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUserBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindInactionTargetUserByCampaignId(ctx context.Context, in *FindInactionTargetUserByCampaignIdRequest, opts ...grpc.CallOption) (*FindInactionTargetUserByCampaignIdResponse, error) {
	out := new(FindInactionTargetUserByCampaignIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindInactionTargetUserByCampaignId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error) {
	out := new(MultiResponses)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAthenaQuery(ctx context.Context, in *AthenaQueryRequest, opts ...grpc.CallOption) (*AthenaQueryResponse, error) {
	out := new(AthenaQueryResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAthenaQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteTestNewCampaign(ctx context.Context, in *TestNewCampaignRequest, opts ...grpc.CallOption) (*TestNewCampaignResponse, error) {
	out := new(TestNewCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteTestNewCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFilterCampaigns(ctx context.Context, in *FilterCampaignRequest, opts ...grpc.CallOption) (*FilterCampaignResponse, error) {
	out := new(FilterCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFilterCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteTestCampaignById(ctx context.Context, in *TestCampaignByIdRequest, opts ...grpc.CallOption) (*TestCampaignByIdResponse, error) {
	out := new(TestCampaignByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteTestCampaignById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteGetDynamicDataByKey(ctx context.Context, in *GetDynamicDataByKeyRequest, opts ...grpc.CallOption) (*GetDynamicDataByKeyResponse, error) {
	out := new(GetDynamicDataByKeyResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteGetDynamicDataByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddDynamicData(ctx context.Context, in *AddDynamicDataRequest, opts ...grpc.CallOption) (*AddDynamicDataResponse, error) {
	out := new(AddDynamicDataResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddDynamicData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddDynamicDataBulk(ctx context.Context, in *BulkAddDynamicDataRequest, opts ...grpc.CallOption) (*BulkAddDynamicDataResponse, error) {
	out := new(BulkAddDynamicDataResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddDynamicDataBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindQueryCampaign(ctx context.Context, in *FindQueryCampaignRequest, opts ...grpc.CallOption) (*FindQueryCampaignResponse, error) {
	out := new(FindQueryCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindQueryCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddQueryCampaign(ctx context.Context, in *AddQueryCampaignRequest, opts ...grpc.CallOption) (*AddQueryCampaignResponse, error) {
	out := new(AddQueryCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddQueryCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteAddQueryCampaignBulk(ctx context.Context, in *BulkAddQueryCampaignRequest, opts ...grpc.CallOption) (*BulkAddQueryCampaignResponse, error) {
	out := new(BulkAddQueryCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddQueryCampaignBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteScheduleUserJourneyCampaign(ctx context.Context, in *ScheduleUserJourneyCampaignRequest, opts ...grpc.CallOption) (*ScheduleUserJourneyCampaignResponse, error) {
	out := new(ScheduleUserJourneyCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteScheduleUserJourneyCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindUserJourneyCampaignById(ctx context.Context, in *FindUserJourneyCampaignByIdRequest, opts ...grpc.CallOption) (*FindUserJourneyCampaignByIdResponse, error) {
	out := new(FindUserJourneyCampaignByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindUserJourneyCampaignById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFilterUserJourneyCampaigns(ctx context.Context, in *FilterUserJourneyCampaignRequest, opts ...grpc.CallOption) (*FilterUserJourneyCampaignResponse, error) {
	out := new(FilterUserJourneyCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFilterUserJourneyCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteUserJourneyCampaign(ctx context.Context, in *UserJourneyCampaignRequest, opts ...grpc.CallOption) (*UserJourneyCampaignResponse, error) {
	out := new(UserJourneyCampaignResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUserJourneyCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFetchCampaignsSchedule(ctx context.Context, in *FetchCampaignScheduleRequest, opts ...grpc.CallOption) (*FetchCampaignScheduleResponse, error) {
	out := new(FetchCampaignScheduleResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFetchCampaignsSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ExecuteFindControlGroupByCampaignId(ctx context.Context, in *FindControlGroupByCampaignIdRequest, opts ...grpc.CallOption) (*FindControlGroupByCampaignIdResponse, error) {
	out := new(FindControlGroupByCampaignIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindControlGroupByCampaignId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignServiceServer is the server API for CampaignService service.
type CampaignServiceServer interface {
	ExecuteAddCampaign(context.Context, *AddCampaignRequest) (*AddCampaignResponse, error)
	ExecuteAddCampaignBulk(context.Context, *BulkAddCampaignRequest) (*BulkAddCampaignResponse, error)
	ExecuteAddControlGroup(context.Context, *AddControlGroupRequest) (*AddControlGroupResponse, error)
	ExecuteUpdateCampaign(context.Context, *UpdateCampaignRequest) (*UpdateCampaignResponse, error)
	ExecuteUpdateCampaignBulk(context.Context, *BulkUpdateCampaignRequest) (*BulkUpdateCampaignResponse, error)
	ExecuteAddCampaignTemplate(context.Context, *AddCampaignTemplateRequest) (*AddCampaignTemplateResponse, error)
	ExecuteAddCampaignTemplateBulk(context.Context, *BulkAddCampaignTemplateRequest) (*BulkAddCampaignTemplateResponse, error)
	ExecuteAddNewCampaign(context.Context, *AddNewCampaignRequest) (*AddNewCampaignResponse, error)
	ExecuteAddNewCampaignBulk(context.Context, *BulkAddNewCampaignRequest) (*BulkAddNewCampaignResponse, error)
	ExecuteCampaign(context.Context, *CampaignRequest) (*CampaignResponse, error)
	ExecuteFindCampaignById(context.Context, *FindCampaignByIdRequest) (*FindCampaignByIdResponse, error)
	ExecuteFindCampaignTemplateById(context.Context, *FindCampaignTemplateByIdRequest) (*FindCampaignTemplateByIdResponse, error)
	ExecuteFindTargetUserById(context.Context, *FindTargetUserByIdRequest) (*FindTargetUserByIdResponse, error)
	ExecuteAddTargetUser(context.Context, *AddTargetUserRequest) (*AddTargetUserResponse, error)
	ExecuteAddTargetUserBulk(context.Context, *BulkAddTargetUserRequest) (*BulkAddTargetUserResponse, error)
	ExecuteAddInactionTargetUser(context.Context, *AddInactionTargetUserRequest) (*AddInactionTargetUserResponse, error)
	ExecuteAddInactionTargetUserBulk(context.Context, *BulkAddInactionTargetUserRequest) (*BulkAddInactionTargetUserResponse, error)
	ExecuteFindInactionTargetUserByCampaignId(context.Context, *FindInactionTargetUserByCampaignIdRequest) (*FindInactionTargetUserByCampaignIdResponse, error)
	Execute(context.Context, *MultiRequests) (*MultiResponses, error)
	ExecuteAthenaQuery(context.Context, *AthenaQueryRequest) (*AthenaQueryResponse, error)
	ExecuteTestNewCampaign(context.Context, *TestNewCampaignRequest) (*TestNewCampaignResponse, error)
	ExecuteFilterCampaigns(context.Context, *FilterCampaignRequest) (*FilterCampaignResponse, error)
	ExecuteTestCampaignById(context.Context, *TestCampaignByIdRequest) (*TestCampaignByIdResponse, error)
	ExecuteGetDynamicDataByKey(context.Context, *GetDynamicDataByKeyRequest) (*GetDynamicDataByKeyResponse, error)
	ExecuteAddDynamicData(context.Context, *AddDynamicDataRequest) (*AddDynamicDataResponse, error)
	ExecuteAddDynamicDataBulk(context.Context, *BulkAddDynamicDataRequest) (*BulkAddDynamicDataResponse, error)
	ExecuteFindQueryCampaign(context.Context, *FindQueryCampaignRequest) (*FindQueryCampaignResponse, error)
	ExecuteAddQueryCampaign(context.Context, *AddQueryCampaignRequest) (*AddQueryCampaignResponse, error)
	ExecuteAddQueryCampaignBulk(context.Context, *BulkAddQueryCampaignRequest) (*BulkAddQueryCampaignResponse, error)
	ExecuteScheduleUserJourneyCampaign(context.Context, *ScheduleUserJourneyCampaignRequest) (*ScheduleUserJourneyCampaignResponse, error)
	ExecuteFindUserJourneyCampaignById(context.Context, *FindUserJourneyCampaignByIdRequest) (*FindUserJourneyCampaignByIdResponse, error)
	ExecuteFilterUserJourneyCampaigns(context.Context, *FilterUserJourneyCampaignRequest) (*FilterUserJourneyCampaignResponse, error)
	ExecuteUserJourneyCampaign(context.Context, *UserJourneyCampaignRequest) (*UserJourneyCampaignResponse, error)
	ExecuteFetchCampaignsSchedule(context.Context, *FetchCampaignScheduleRequest) (*FetchCampaignScheduleResponse, error)
	ExecuteFindControlGroupByCampaignId(context.Context, *FindControlGroupByCampaignIdRequest) (*FindControlGroupByCampaignIdResponse, error)
}

// UnimplementedCampaignServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCampaignServiceServer struct {
}

func (*UnimplementedCampaignServiceServer) ExecuteAddCampaign(context.Context, *AddCampaignRequest) (*AddCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddCampaignBulk(context.Context, *BulkAddCampaignRequest) (*BulkAddCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddCampaignBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddControlGroup(context.Context, *AddControlGroupRequest) (*AddControlGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddControlGroup not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteUpdateCampaign(context.Context, *UpdateCampaignRequest) (*UpdateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteUpdateCampaignBulk(context.Context, *BulkUpdateCampaignRequest) (*BulkUpdateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateCampaignBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddCampaignTemplate(context.Context, *AddCampaignTemplateRequest) (*AddCampaignTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddCampaignTemplate not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddCampaignTemplateBulk(context.Context, *BulkAddCampaignTemplateRequest) (*BulkAddCampaignTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddCampaignTemplateBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddNewCampaign(context.Context, *AddNewCampaignRequest) (*AddNewCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddNewCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddNewCampaignBulk(context.Context, *BulkAddNewCampaignRequest) (*BulkAddNewCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddNewCampaignBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteCampaign(context.Context, *CampaignRequest) (*CampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindCampaignById(context.Context, *FindCampaignByIdRequest) (*FindCampaignByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindCampaignById not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindCampaignTemplateById(context.Context, *FindCampaignTemplateByIdRequest) (*FindCampaignTemplateByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindCampaignTemplateById not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindTargetUserById(context.Context, *FindTargetUserByIdRequest) (*FindTargetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindTargetUserById not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddTargetUser(context.Context, *AddTargetUserRequest) (*AddTargetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddTargetUser not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddTargetUserBulk(context.Context, *BulkAddTargetUserRequest) (*BulkAddTargetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddTargetUserBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddInactionTargetUser(context.Context, *AddInactionTargetUserRequest) (*AddInactionTargetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddInactionTargetUser not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddInactionTargetUserBulk(context.Context, *BulkAddInactionTargetUserRequest) (*BulkAddInactionTargetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddInactionTargetUserBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindInactionTargetUserByCampaignId(context.Context, *FindInactionTargetUserByCampaignIdRequest) (*FindInactionTargetUserByCampaignIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindInactionTargetUserByCampaignId not implemented")
}
func (*UnimplementedCampaignServiceServer) Execute(context.Context, *MultiRequests) (*MultiResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAthenaQuery(context.Context, *AthenaQueryRequest) (*AthenaQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAthenaQuery not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteTestNewCampaign(context.Context, *TestNewCampaignRequest) (*TestNewCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTestNewCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFilterCampaigns(context.Context, *FilterCampaignRequest) (*FilterCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFilterCampaigns not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteTestCampaignById(context.Context, *TestCampaignByIdRequest) (*TestCampaignByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTestCampaignById not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteGetDynamicDataByKey(context.Context, *GetDynamicDataByKeyRequest) (*GetDynamicDataByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetDynamicDataByKey not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddDynamicData(context.Context, *AddDynamicDataRequest) (*AddDynamicDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddDynamicData not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddDynamicDataBulk(context.Context, *BulkAddDynamicDataRequest) (*BulkAddDynamicDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddDynamicDataBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindQueryCampaign(context.Context, *FindQueryCampaignRequest) (*FindQueryCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindQueryCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddQueryCampaign(context.Context, *AddQueryCampaignRequest) (*AddQueryCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddQueryCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteAddQueryCampaignBulk(context.Context, *BulkAddQueryCampaignRequest) (*BulkAddQueryCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddQueryCampaignBulk not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteScheduleUserJourneyCampaign(context.Context, *ScheduleUserJourneyCampaignRequest) (*ScheduleUserJourneyCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScheduleUserJourneyCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindUserJourneyCampaignById(context.Context, *FindUserJourneyCampaignByIdRequest) (*FindUserJourneyCampaignByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindUserJourneyCampaignById not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFilterUserJourneyCampaigns(context.Context, *FilterUserJourneyCampaignRequest) (*FilterUserJourneyCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFilterUserJourneyCampaigns not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteUserJourneyCampaign(context.Context, *UserJourneyCampaignRequest) (*UserJourneyCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUserJourneyCampaign not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFetchCampaignsSchedule(context.Context, *FetchCampaignScheduleRequest) (*FetchCampaignScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchCampaignsSchedule not implemented")
}
func (*UnimplementedCampaignServiceServer) ExecuteFindControlGroupByCampaignId(context.Context, *FindControlGroupByCampaignIdRequest) (*FindControlGroupByCampaignIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindControlGroupByCampaignId not implemented")
}

func RegisterCampaignServiceServer(s *grpc.Server, srv CampaignServiceServer) {
	s.RegisterService(&_CampaignService_serviceDesc, srv)
}

func _CampaignService_ExecuteAddCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddCampaign(ctx, req.(*AddCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddCampaignBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddCampaignBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddCampaignBulk(ctx, req.(*BulkAddCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddControlGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddControlGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddControlGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddControlGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddControlGroup(ctx, req.(*AddControlGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteUpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteUpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteUpdateCampaign(ctx, req.(*UpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteUpdateCampaignBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteUpdateCampaignBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUpdateCampaignBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteUpdateCampaignBulk(ctx, req.(*BulkUpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddCampaignTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCampaignTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddCampaignTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddCampaignTemplate(ctx, req.(*AddCampaignTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddCampaignTemplateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddCampaignTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddCampaignTemplateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddCampaignTemplateBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddCampaignTemplateBulk(ctx, req.(*BulkAddCampaignTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddNewCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddNewCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddNewCampaign(ctx, req.(*AddNewCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddNewCampaignBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddNewCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddNewCampaignBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddNewCampaignBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddNewCampaignBulk(ctx, req.(*BulkAddNewCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteCampaign(ctx, req.(*CampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindCampaignById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCampaignByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindCampaignById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindCampaignById(ctx, req.(*FindCampaignByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindCampaignTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCampaignTemplateByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindCampaignTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindCampaignTemplateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindCampaignTemplateById(ctx, req.(*FindCampaignTemplateByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindTargetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTargetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindTargetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindTargetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindTargetUserById(ctx, req.(*FindTargetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddTargetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTargetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddTargetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddTargetUser(ctx, req.(*AddTargetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddTargetUserBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddTargetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddTargetUserBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddTargetUserBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddTargetUserBulk(ctx, req.(*BulkAddTargetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddInactionTargetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInactionTargetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddInactionTargetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddInactionTargetUser(ctx, req.(*AddInactionTargetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddInactionTargetUserBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddInactionTargetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddInactionTargetUserBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddInactionTargetUserBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddInactionTargetUserBulk(ctx, req.(*BulkAddInactionTargetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindInactionTargetUserByCampaignId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInactionTargetUserByCampaignIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindInactionTargetUserByCampaignId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindInactionTargetUserByCampaignId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindInactionTargetUserByCampaignId(ctx, req.(*FindInactionTargetUserByCampaignIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).Execute(ctx, req.(*MultiRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAthenaQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthenaQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAthenaQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAthenaQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAthenaQuery(ctx, req.(*AthenaQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteTestNewCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestNewCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteTestNewCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteTestNewCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteTestNewCampaign(ctx, req.(*TestNewCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFilterCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFilterCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFilterCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFilterCampaigns(ctx, req.(*FilterCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteTestCampaignById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCampaignByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteTestCampaignById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteTestCampaignById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteTestCampaignById(ctx, req.(*TestCampaignByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteGetDynamicDataByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicDataByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteGetDynamicDataByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteGetDynamicDataByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteGetDynamicDataByKey(ctx, req.(*GetDynamicDataByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddDynamicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddDynamicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddDynamicData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddDynamicData(ctx, req.(*AddDynamicDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddDynamicDataBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddDynamicDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddDynamicDataBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddDynamicDataBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddDynamicDataBulk(ctx, req.(*BulkAddDynamicDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindQueryCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQueryCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindQueryCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindQueryCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindQueryCampaign(ctx, req.(*FindQueryCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddQueryCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueryCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddQueryCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddQueryCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddQueryCampaign(ctx, req.(*AddQueryCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteAddQueryCampaignBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddQueryCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteAddQueryCampaignBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteAddQueryCampaignBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteAddQueryCampaignBulk(ctx, req.(*BulkAddQueryCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteScheduleUserJourneyCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleUserJourneyCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteScheduleUserJourneyCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteScheduleUserJourneyCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteScheduleUserJourneyCampaign(ctx, req.(*ScheduleUserJourneyCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindUserJourneyCampaignById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserJourneyCampaignByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindUserJourneyCampaignById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindUserJourneyCampaignById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindUserJourneyCampaignById(ctx, req.(*FindUserJourneyCampaignByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFilterUserJourneyCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUserJourneyCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFilterUserJourneyCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFilterUserJourneyCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFilterUserJourneyCampaigns(ctx, req.(*FilterUserJourneyCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteUserJourneyCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJourneyCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteUserJourneyCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteUserJourneyCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteUserJourneyCampaign(ctx, req.(*UserJourneyCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFetchCampaignsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCampaignScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFetchCampaignsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFetchCampaignsSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFetchCampaignsSchedule(ctx, req.(*FetchCampaignScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ExecuteFindControlGroupByCampaignId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindControlGroupByCampaignIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ExecuteFindControlGroupByCampaignId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.CampaignService.CampaignService/ExecuteFindControlGroupByCampaignId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ExecuteFindControlGroupByCampaignId(ctx, req.(*FindControlGroupByCampaignIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CampaignService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.core.contracts.CampaignService.CampaignService",
	HandlerType: (*CampaignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteAddCampaign",
			Handler:    _CampaignService_ExecuteAddCampaign_Handler,
		},
		{
			MethodName: "ExecuteAddCampaignBulk",
			Handler:    _CampaignService_ExecuteAddCampaignBulk_Handler,
		},
		{
			MethodName: "ExecuteAddControlGroup",
			Handler:    _CampaignService_ExecuteAddControlGroup_Handler,
		},
		{
			MethodName: "ExecuteUpdateCampaign",
			Handler:    _CampaignService_ExecuteUpdateCampaign_Handler,
		},
		{
			MethodName: "ExecuteUpdateCampaignBulk",
			Handler:    _CampaignService_ExecuteUpdateCampaignBulk_Handler,
		},
		{
			MethodName: "ExecuteAddCampaignTemplate",
			Handler:    _CampaignService_ExecuteAddCampaignTemplate_Handler,
		},
		{
			MethodName: "ExecuteAddCampaignTemplateBulk",
			Handler:    _CampaignService_ExecuteAddCampaignTemplateBulk_Handler,
		},
		{
			MethodName: "ExecuteAddNewCampaign",
			Handler:    _CampaignService_ExecuteAddNewCampaign_Handler,
		},
		{
			MethodName: "ExecuteAddNewCampaignBulk",
			Handler:    _CampaignService_ExecuteAddNewCampaignBulk_Handler,
		},
		{
			MethodName: "ExecuteCampaign",
			Handler:    _CampaignService_ExecuteCampaign_Handler,
		},
		{
			MethodName: "ExecuteFindCampaignById",
			Handler:    _CampaignService_ExecuteFindCampaignById_Handler,
		},
		{
			MethodName: "ExecuteFindCampaignTemplateById",
			Handler:    _CampaignService_ExecuteFindCampaignTemplateById_Handler,
		},
		{
			MethodName: "ExecuteFindTargetUserById",
			Handler:    _CampaignService_ExecuteFindTargetUserById_Handler,
		},
		{
			MethodName: "ExecuteAddTargetUser",
			Handler:    _CampaignService_ExecuteAddTargetUser_Handler,
		},
		{
			MethodName: "ExecuteAddTargetUserBulk",
			Handler:    _CampaignService_ExecuteAddTargetUserBulk_Handler,
		},
		{
			MethodName: "ExecuteAddInactionTargetUser",
			Handler:    _CampaignService_ExecuteAddInactionTargetUser_Handler,
		},
		{
			MethodName: "ExecuteAddInactionTargetUserBulk",
			Handler:    _CampaignService_ExecuteAddInactionTargetUserBulk_Handler,
		},
		{
			MethodName: "ExecuteFindInactionTargetUserByCampaignId",
			Handler:    _CampaignService_ExecuteFindInactionTargetUserByCampaignId_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _CampaignService_Execute_Handler,
		},
		{
			MethodName: "ExecuteAthenaQuery",
			Handler:    _CampaignService_ExecuteAthenaQuery_Handler,
		},
		{
			MethodName: "ExecuteTestNewCampaign",
			Handler:    _CampaignService_ExecuteTestNewCampaign_Handler,
		},
		{
			MethodName: "ExecuteFilterCampaigns",
			Handler:    _CampaignService_ExecuteFilterCampaigns_Handler,
		},
		{
			MethodName: "ExecuteTestCampaignById",
			Handler:    _CampaignService_ExecuteTestCampaignById_Handler,
		},
		{
			MethodName: "ExecuteGetDynamicDataByKey",
			Handler:    _CampaignService_ExecuteGetDynamicDataByKey_Handler,
		},
		{
			MethodName: "ExecuteAddDynamicData",
			Handler:    _CampaignService_ExecuteAddDynamicData_Handler,
		},
		{
			MethodName: "ExecuteAddDynamicDataBulk",
			Handler:    _CampaignService_ExecuteAddDynamicDataBulk_Handler,
		},
		{
			MethodName: "ExecuteFindQueryCampaign",
			Handler:    _CampaignService_ExecuteFindQueryCampaign_Handler,
		},
		{
			MethodName: "ExecuteAddQueryCampaign",
			Handler:    _CampaignService_ExecuteAddQueryCampaign_Handler,
		},
		{
			MethodName: "ExecuteAddQueryCampaignBulk",
			Handler:    _CampaignService_ExecuteAddQueryCampaignBulk_Handler,
		},
		{
			MethodName: "ExecuteScheduleUserJourneyCampaign",
			Handler:    _CampaignService_ExecuteScheduleUserJourneyCampaign_Handler,
		},
		{
			MethodName: "ExecuteFindUserJourneyCampaignById",
			Handler:    _CampaignService_ExecuteFindUserJourneyCampaignById_Handler,
		},
		{
			MethodName: "ExecuteFilterUserJourneyCampaigns",
			Handler:    _CampaignService_ExecuteFilterUserJourneyCampaigns_Handler,
		},
		{
			MethodName: "ExecuteUserJourneyCampaign",
			Handler:    _CampaignService_ExecuteUserJourneyCampaign_Handler,
		},
		{
			MethodName: "ExecuteFetchCampaignsSchedule",
			Handler:    _CampaignService_ExecuteFetchCampaignsSchedule_Handler,
		},
		{
			MethodName: "ExecuteFindControlGroupByCampaignId",
			Handler:    _CampaignService_ExecuteFindControlGroupByCampaignId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CampaignService/campaign_service.proto",
}
