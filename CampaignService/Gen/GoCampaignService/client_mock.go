// Code generated by MockGen. DO NOT EDIT.
// Source: CampaignService/Gen/GoCampaignService/campaign_service.pb.go

// Package CampaignService is a generated GoMock package.
package CampaignService

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisRequest_ARequest is a mock of isRequest_ARequest interface
type MockisRequest_ARequest struct {
	ctrl     *gomock.Controller
	recorder *MockisRequest_ARequestMockRecorder
}

// MockisRequest_ARequestMockRecorder is the mock recorder for MockisRequest_ARequest
type MockisRequest_ARequestMockRecorder struct {
	mock *MockisRequest_ARequest
}

// NewMockisRequest_ARequest creates a new mock instance
func NewMockisRequest_ARequest(ctrl *gomock.Controller) *MockisRequest_ARequest {
	mock := &MockisRequest_ARequest{ctrl: ctrl}
	mock.recorder = &MockisRequest_ARequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRequest_ARequest) EXPECT() *MockisRequest_ARequestMockRecorder {
	return m.recorder
}

// isRequest_ARequest mocks base method
func (m *MockisRequest_ARequest) isRequest_ARequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRequest_ARequest")
}

// isRequest_ARequest indicates an expected call of isRequest_ARequest
func (mr *MockisRequest_ARequestMockRecorder) isRequest_ARequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRequest_ARequest", reflect.TypeOf((*MockisRequest_ARequest)(nil).isRequest_ARequest))
}

// MockisResponse_AResponse is a mock of isResponse_AResponse interface
type MockisResponse_AResponse struct {
	ctrl     *gomock.Controller
	recorder *MockisResponse_AResponseMockRecorder
}

// MockisResponse_AResponseMockRecorder is the mock recorder for MockisResponse_AResponse
type MockisResponse_AResponseMockRecorder struct {
	mock *MockisResponse_AResponse
}

// NewMockisResponse_AResponse creates a new mock instance
func NewMockisResponse_AResponse(ctrl *gomock.Controller) *MockisResponse_AResponse {
	mock := &MockisResponse_AResponse{ctrl: ctrl}
	mock.recorder = &MockisResponse_AResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisResponse_AResponse) EXPECT() *MockisResponse_AResponseMockRecorder {
	return m.recorder
}

// isResponse_AResponse mocks base method
func (m *MockisResponse_AResponse) isResponse_AResponse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isResponse_AResponse")
}

// isResponse_AResponse indicates an expected call of isResponse_AResponse
func (mr *MockisResponse_AResponseMockRecorder) isResponse_AResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isResponse_AResponse", reflect.TypeOf((*MockisResponse_AResponse)(nil).isResponse_AResponse))
}

// MockCampaignServiceClient is a mock of CampaignServiceClient interface
type MockCampaignServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignServiceClientMockRecorder
}

// MockCampaignServiceClientMockRecorder is the mock recorder for MockCampaignServiceClient
type MockCampaignServiceClientMockRecorder struct {
	mock *MockCampaignServiceClient
}

// NewMockCampaignServiceClient creates a new mock instance
func NewMockCampaignServiceClient(ctrl *gomock.Controller) *MockCampaignServiceClient {
	mock := &MockCampaignServiceClient{ctrl: ctrl}
	mock.recorder = &MockCampaignServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaignServiceClient) EXPECT() *MockCampaignServiceClientMockRecorder {
	return m.recorder
}

// ExecuteAddCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteAddCampaign(ctx context.Context, in *AddCampaignRequest, opts ...grpc.CallOption) (*AddCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddCampaign", varargs...)
	ret0, _ := ret[0].(*AddCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaign indicates an expected call of ExecuteAddCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddCampaign), varargs...)
}

// ExecuteAddCampaignBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddCampaignBulk(ctx context.Context, in *BulkAddCampaignRequest, opts ...grpc.CallOption) (*BulkAddCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddCampaignBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignBulk indicates an expected call of ExecuteAddCampaignBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddCampaignBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddCampaignBulk), varargs...)
}

// ExecuteUpdateCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteUpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*UpdateCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteUpdateCampaign", varargs...)
	ret0, _ := ret[0].(*UpdateCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUpdateCampaign indicates an expected call of ExecuteUpdateCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteUpdateCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdateCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteUpdateCampaign), varargs...)
}

// ExecuteUpdateCampaignBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteUpdateCampaignBulk(ctx context.Context, in *BulkUpdateCampaignRequest, opts ...grpc.CallOption) (*BulkUpdateCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteUpdateCampaignBulk", varargs...)
	ret0, _ := ret[0].(*BulkUpdateCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUpdateCampaignBulk indicates an expected call of ExecuteUpdateCampaignBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteUpdateCampaignBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdateCampaignBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteUpdateCampaignBulk), varargs...)
}

// ExecuteAddCampaignTemplate mocks base method
func (m *MockCampaignServiceClient) ExecuteAddCampaignTemplate(ctx context.Context, in *AddCampaignTemplateRequest, opts ...grpc.CallOption) (*AddCampaignTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddCampaignTemplate", varargs...)
	ret0, _ := ret[0].(*AddCampaignTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignTemplate indicates an expected call of ExecuteAddCampaignTemplate
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddCampaignTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignTemplate", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddCampaignTemplate), varargs...)
}

// ExecuteAddCampaignTemplateBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddCampaignTemplateBulk(ctx context.Context, in *BulkAddCampaignTemplateRequest, opts ...grpc.CallOption) (*BulkAddCampaignTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddCampaignTemplateBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddCampaignTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignTemplateBulk indicates an expected call of ExecuteAddCampaignTemplateBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddCampaignTemplateBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignTemplateBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddCampaignTemplateBulk), varargs...)
}

// ExecuteAddNewCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteAddNewCampaign(ctx context.Context, in *AddNewCampaignRequest, opts ...grpc.CallOption) (*AddNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddNewCampaign", varargs...)
	ret0, _ := ret[0].(*AddNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddNewCampaign indicates an expected call of ExecuteAddNewCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddNewCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddNewCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddNewCampaign), varargs...)
}

// ExecuteAddNewCampaignBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddNewCampaignBulk(ctx context.Context, in *BulkAddNewCampaignRequest, opts ...grpc.CallOption) (*BulkAddNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddNewCampaignBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddNewCampaignBulk indicates an expected call of ExecuteAddNewCampaignBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddNewCampaignBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddNewCampaignBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddNewCampaignBulk), varargs...)
}

// ExecuteCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteCampaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteCampaign", varargs...)
	ret0, _ := ret[0].(*CampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCampaign indicates an expected call of ExecuteCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteCampaign), varargs...)
}

// ExecuteFindCampaignById mocks base method
func (m *MockCampaignServiceClient) ExecuteFindCampaignById(ctx context.Context, in *FindCampaignByIdRequest, opts ...grpc.CallOption) (*FindCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindCampaignById", varargs...)
	ret0, _ := ret[0].(*FindCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindCampaignById indicates an expected call of ExecuteFindCampaignById
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindCampaignById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindCampaignById", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindCampaignById), varargs...)
}

// ExecuteFindCampaignTemplateById mocks base method
func (m *MockCampaignServiceClient) ExecuteFindCampaignTemplateById(ctx context.Context, in *FindCampaignTemplateByIdRequest, opts ...grpc.CallOption) (*FindCampaignTemplateByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindCampaignTemplateById", varargs...)
	ret0, _ := ret[0].(*FindCampaignTemplateByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindCampaignTemplateById indicates an expected call of ExecuteFindCampaignTemplateById
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindCampaignTemplateById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindCampaignTemplateById", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindCampaignTemplateById), varargs...)
}

// ExecuteFindTargetUserById mocks base method
func (m *MockCampaignServiceClient) ExecuteFindTargetUserById(ctx context.Context, in *FindTargetUserByIdRequest, opts ...grpc.CallOption) (*FindTargetUserByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindTargetUserById", varargs...)
	ret0, _ := ret[0].(*FindTargetUserByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindTargetUserById indicates an expected call of ExecuteFindTargetUserById
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindTargetUserById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindTargetUserById", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindTargetUserById), varargs...)
}

// ExecuteAddTargetUser mocks base method
func (m *MockCampaignServiceClient) ExecuteAddTargetUser(ctx context.Context, in *AddTargetUserRequest, opts ...grpc.CallOption) (*AddTargetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddTargetUser", varargs...)
	ret0, _ := ret[0].(*AddTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddTargetUser indicates an expected call of ExecuteAddTargetUser
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddTargetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddTargetUser", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddTargetUser), varargs...)
}

// ExecuteAddTargetUserBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddTargetUserBulk(ctx context.Context, in *BulkAddTargetUserRequest, opts ...grpc.CallOption) (*BulkAddTargetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddTargetUserBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddTargetUserBulk indicates an expected call of ExecuteAddTargetUserBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddTargetUserBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddTargetUserBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddTargetUserBulk), varargs...)
}

// ExecuteAddInactionTargetUser mocks base method
func (m *MockCampaignServiceClient) ExecuteAddInactionTargetUser(ctx context.Context, in *AddInactionTargetUserRequest, opts ...grpc.CallOption) (*AddInactionTargetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddInactionTargetUser", varargs...)
	ret0, _ := ret[0].(*AddInactionTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddInactionTargetUser indicates an expected call of ExecuteAddInactionTargetUser
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddInactionTargetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddInactionTargetUser", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddInactionTargetUser), varargs...)
}

// ExecuteAddInactionTargetUserBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddInactionTargetUserBulk(ctx context.Context, in *BulkAddInactionTargetUserRequest, opts ...grpc.CallOption) (*BulkAddInactionTargetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddInactionTargetUserBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddInactionTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddInactionTargetUserBulk indicates an expected call of ExecuteAddInactionTargetUserBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddInactionTargetUserBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddInactionTargetUserBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddInactionTargetUserBulk), varargs...)
}

// ExecuteFindInactionTargetUserByCampaignId mocks base method
func (m *MockCampaignServiceClient) ExecuteFindInactionTargetUserByCampaignId(ctx context.Context, in *FindInactionTargetUserByCampaignIdRequest, opts ...grpc.CallOption) (*FindInactionTargetUserByCampaignIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindInactionTargetUserByCampaignId", varargs...)
	ret0, _ := ret[0].(*FindInactionTargetUserByCampaignIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindInactionTargetUserByCampaignId indicates an expected call of ExecuteFindInactionTargetUserByCampaignId
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindInactionTargetUserByCampaignId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindInactionTargetUserByCampaignId", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindInactionTargetUserByCampaignId), varargs...)
}

// Execute mocks base method
func (m *MockCampaignServiceClient) Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*MultiResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCampaignServiceClientMockRecorder) Execute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCampaignServiceClient)(nil).Execute), varargs...)
}

// ExecuteAthenaQuery mocks base method
func (m *MockCampaignServiceClient) ExecuteAthenaQuery(ctx context.Context, in *AthenaQueryRequest, opts ...grpc.CallOption) (*AthenaQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAthenaQuery", varargs...)
	ret0, _ := ret[0].(*AthenaQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAthenaQuery indicates an expected call of ExecuteAthenaQuery
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAthenaQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAthenaQuery", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAthenaQuery), varargs...)
}

// ExecuteTestNewCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteTestNewCampaign(ctx context.Context, in *TestNewCampaignRequest, opts ...grpc.CallOption) (*TestNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteTestNewCampaign", varargs...)
	ret0, _ := ret[0].(*TestNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTestNewCampaign indicates an expected call of ExecuteTestNewCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteTestNewCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTestNewCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteTestNewCampaign), varargs...)
}

// ExecuteFilterCampaigns mocks base method
func (m *MockCampaignServiceClient) ExecuteFilterCampaigns(ctx context.Context, in *FilterCampaignRequest, opts ...grpc.CallOption) (*FilterCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFilterCampaigns", varargs...)
	ret0, _ := ret[0].(*FilterCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFilterCampaigns indicates an expected call of ExecuteFilterCampaigns
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFilterCampaigns(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFilterCampaigns", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFilterCampaigns), varargs...)
}

// ExecuteTestCampaignById mocks base method
func (m *MockCampaignServiceClient) ExecuteTestCampaignById(ctx context.Context, in *TestCampaignByIdRequest, opts ...grpc.CallOption) (*TestCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteTestCampaignById", varargs...)
	ret0, _ := ret[0].(*TestCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTestCampaignById indicates an expected call of ExecuteTestCampaignById
func (mr *MockCampaignServiceClientMockRecorder) ExecuteTestCampaignById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTestCampaignById", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteTestCampaignById), varargs...)
}

// ExecuteGetDynamicDataByKey mocks base method
func (m *MockCampaignServiceClient) ExecuteGetDynamicDataByKey(ctx context.Context, in *GetDynamicDataByKeyRequest, opts ...grpc.CallOption) (*GetDynamicDataByKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteGetDynamicDataByKey", varargs...)
	ret0, _ := ret[0].(*GetDynamicDataByKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetDynamicDataByKey indicates an expected call of ExecuteGetDynamicDataByKey
func (mr *MockCampaignServiceClientMockRecorder) ExecuteGetDynamicDataByKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetDynamicDataByKey", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteGetDynamicDataByKey), varargs...)
}

// ExecuteAddDynamicData mocks base method
func (m *MockCampaignServiceClient) ExecuteAddDynamicData(ctx context.Context, in *AddDynamicDataRequest, opts ...grpc.CallOption) (*AddDynamicDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddDynamicData", varargs...)
	ret0, _ := ret[0].(*AddDynamicDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddDynamicData indicates an expected call of ExecuteAddDynamicData
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddDynamicData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddDynamicData", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddDynamicData), varargs...)
}

// ExecuteAddDynamicDataBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddDynamicDataBulk(ctx context.Context, in *BulkAddDynamicDataRequest, opts ...grpc.CallOption) (*BulkAddDynamicDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddDynamicDataBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddDynamicDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddDynamicDataBulk indicates an expected call of ExecuteAddDynamicDataBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddDynamicDataBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddDynamicDataBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddDynamicDataBulk), varargs...)
}

// ExecuteFindQueryCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteFindQueryCampaign(ctx context.Context, in *FindQueryCampaignRequest, opts ...grpc.CallOption) (*FindQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindQueryCampaign", varargs...)
	ret0, _ := ret[0].(*FindQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindQueryCampaign indicates an expected call of ExecuteFindQueryCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindQueryCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindQueryCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindQueryCampaign), varargs...)
}

// ExecuteAddQueryCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteAddQueryCampaign(ctx context.Context, in *AddQueryCampaignRequest, opts ...grpc.CallOption) (*AddQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddQueryCampaign", varargs...)
	ret0, _ := ret[0].(*AddQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddQueryCampaign indicates an expected call of ExecuteAddQueryCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddQueryCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddQueryCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddQueryCampaign), varargs...)
}

// ExecuteAddQueryCampaignBulk mocks base method
func (m *MockCampaignServiceClient) ExecuteAddQueryCampaignBulk(ctx context.Context, in *BulkAddQueryCampaignRequest, opts ...grpc.CallOption) (*BulkAddQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteAddQueryCampaignBulk", varargs...)
	ret0, _ := ret[0].(*BulkAddQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddQueryCampaignBulk indicates an expected call of ExecuteAddQueryCampaignBulk
func (mr *MockCampaignServiceClientMockRecorder) ExecuteAddQueryCampaignBulk(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddQueryCampaignBulk", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteAddQueryCampaignBulk), varargs...)
}

// ExecuteScheduleUserJourneyCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteScheduleUserJourneyCampaign(ctx context.Context, in *ScheduleUserJourneyCampaignRequest, opts ...grpc.CallOption) (*ScheduleUserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScheduleUserJourneyCampaign", varargs...)
	ret0, _ := ret[0].(*ScheduleUserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScheduleUserJourneyCampaign indicates an expected call of ExecuteScheduleUserJourneyCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteScheduleUserJourneyCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScheduleUserJourneyCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteScheduleUserJourneyCampaign), varargs...)
}

// ExecuteFindUserJourneyCampaignById mocks base method
func (m *MockCampaignServiceClient) ExecuteFindUserJourneyCampaignById(ctx context.Context, in *FindUserJourneyCampaignByIdRequest, opts ...grpc.CallOption) (*FindUserJourneyCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFindUserJourneyCampaignById", varargs...)
	ret0, _ := ret[0].(*FindUserJourneyCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindUserJourneyCampaignById indicates an expected call of ExecuteFindUserJourneyCampaignById
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFindUserJourneyCampaignById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindUserJourneyCampaignById", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFindUserJourneyCampaignById), varargs...)
}

// ExecuteFilterUserJourneyCampaigns mocks base method
func (m *MockCampaignServiceClient) ExecuteFilterUserJourneyCampaigns(ctx context.Context, in *FilterUserJourneyCampaignRequest, opts ...grpc.CallOption) (*FilterUserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFilterUserJourneyCampaigns", varargs...)
	ret0, _ := ret[0].(*FilterUserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFilterUserJourneyCampaigns indicates an expected call of ExecuteFilterUserJourneyCampaigns
func (mr *MockCampaignServiceClientMockRecorder) ExecuteFilterUserJourneyCampaigns(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFilterUserJourneyCampaigns", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteFilterUserJourneyCampaigns), varargs...)
}

// ExecuteUserJourneyCampaign mocks base method
func (m *MockCampaignServiceClient) ExecuteUserJourneyCampaign(ctx context.Context, in *UserJourneyCampaignRequest, opts ...grpc.CallOption) (*UserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteUserJourneyCampaign", varargs...)
	ret0, _ := ret[0].(*UserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUserJourneyCampaign indicates an expected call of ExecuteUserJourneyCampaign
func (mr *MockCampaignServiceClientMockRecorder) ExecuteUserJourneyCampaign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUserJourneyCampaign", reflect.TypeOf((*MockCampaignServiceClient)(nil).ExecuteUserJourneyCampaign), varargs...)
}

// MockCampaignServiceServer is a mock of CampaignServiceServer interface
type MockCampaignServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignServiceServerMockRecorder
}

// MockCampaignServiceServerMockRecorder is the mock recorder for MockCampaignServiceServer
type MockCampaignServiceServerMockRecorder struct {
	mock *MockCampaignServiceServer
}

// NewMockCampaignServiceServer creates a new mock instance
func NewMockCampaignServiceServer(ctrl *gomock.Controller) *MockCampaignServiceServer {
	mock := &MockCampaignServiceServer{ctrl: ctrl}
	mock.recorder = &MockCampaignServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaignServiceServer) EXPECT() *MockCampaignServiceServerMockRecorder {
	return m.recorder
}

// ExecuteAddCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteAddCampaign(arg0 context.Context, arg1 *AddCampaignRequest) (*AddCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddCampaign", arg0, arg1)
	ret0, _ := ret[0].(*AddCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaign indicates an expected call of ExecuteAddCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddCampaign), arg0, arg1)
}

// ExecuteAddCampaignBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddCampaignBulk(arg0 context.Context, arg1 *BulkAddCampaignRequest) (*BulkAddCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddCampaignBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignBulk indicates an expected call of ExecuteAddCampaignBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddCampaignBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddCampaignBulk), arg0, arg1)
}

// ExecuteUpdateCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteUpdateCampaign(arg0 context.Context, arg1 *UpdateCampaignRequest) (*UpdateCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUpdateCampaign", arg0, arg1)
	ret0, _ := ret[0].(*UpdateCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUpdateCampaign indicates an expected call of ExecuteUpdateCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteUpdateCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdateCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteUpdateCampaign), arg0, arg1)
}

// ExecuteUpdateCampaignBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteUpdateCampaignBulk(arg0 context.Context, arg1 *BulkUpdateCampaignRequest) (*BulkUpdateCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUpdateCampaignBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkUpdateCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUpdateCampaignBulk indicates an expected call of ExecuteUpdateCampaignBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteUpdateCampaignBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdateCampaignBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteUpdateCampaignBulk), arg0, arg1)
}

// ExecuteAddCampaignTemplate mocks base method
func (m *MockCampaignServiceServer) ExecuteAddCampaignTemplate(arg0 context.Context, arg1 *AddCampaignTemplateRequest) (*AddCampaignTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddCampaignTemplate", arg0, arg1)
	ret0, _ := ret[0].(*AddCampaignTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignTemplate indicates an expected call of ExecuteAddCampaignTemplate
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddCampaignTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignTemplate", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddCampaignTemplate), arg0, arg1)
}

// ExecuteAddCampaignTemplateBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddCampaignTemplateBulk(arg0 context.Context, arg1 *BulkAddCampaignTemplateRequest) (*BulkAddCampaignTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddCampaignTemplateBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddCampaignTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddCampaignTemplateBulk indicates an expected call of ExecuteAddCampaignTemplateBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddCampaignTemplateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCampaignTemplateBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddCampaignTemplateBulk), arg0, arg1)
}

// ExecuteAddNewCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteAddNewCampaign(arg0 context.Context, arg1 *AddNewCampaignRequest) (*AddNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddNewCampaign", arg0, arg1)
	ret0, _ := ret[0].(*AddNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddNewCampaign indicates an expected call of ExecuteAddNewCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddNewCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddNewCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddNewCampaign), arg0, arg1)
}

// ExecuteAddNewCampaignBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddNewCampaignBulk(arg0 context.Context, arg1 *BulkAddNewCampaignRequest) (*BulkAddNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddNewCampaignBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddNewCampaignBulk indicates an expected call of ExecuteAddNewCampaignBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddNewCampaignBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddNewCampaignBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddNewCampaignBulk), arg0, arg1)
}

// ExecuteCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteCampaign(arg0 context.Context, arg1 *CampaignRequest) (*CampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCampaign", arg0, arg1)
	ret0, _ := ret[0].(*CampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCampaign indicates an expected call of ExecuteCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteCampaign), arg0, arg1)
}

// ExecuteFindCampaignById mocks base method
func (m *MockCampaignServiceServer) ExecuteFindCampaignById(arg0 context.Context, arg1 *FindCampaignByIdRequest) (*FindCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindCampaignById", arg0, arg1)
	ret0, _ := ret[0].(*FindCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindCampaignById indicates an expected call of ExecuteFindCampaignById
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindCampaignById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindCampaignById", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindCampaignById), arg0, arg1)
}

// ExecuteFindCampaignTemplateById mocks base method
func (m *MockCampaignServiceServer) ExecuteFindCampaignTemplateById(arg0 context.Context, arg1 *FindCampaignTemplateByIdRequest) (*FindCampaignTemplateByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindCampaignTemplateById", arg0, arg1)
	ret0, _ := ret[0].(*FindCampaignTemplateByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindCampaignTemplateById indicates an expected call of ExecuteFindCampaignTemplateById
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindCampaignTemplateById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindCampaignTemplateById", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindCampaignTemplateById), arg0, arg1)
}

// ExecuteFindTargetUserById mocks base method
func (m *MockCampaignServiceServer) ExecuteFindTargetUserById(arg0 context.Context, arg1 *FindTargetUserByIdRequest) (*FindTargetUserByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindTargetUserById", arg0, arg1)
	ret0, _ := ret[0].(*FindTargetUserByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindTargetUserById indicates an expected call of ExecuteFindTargetUserById
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindTargetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindTargetUserById", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindTargetUserById), arg0, arg1)
}

// ExecuteAddTargetUser mocks base method
func (m *MockCampaignServiceServer) ExecuteAddTargetUser(arg0 context.Context, arg1 *AddTargetUserRequest) (*AddTargetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddTargetUser", arg0, arg1)
	ret0, _ := ret[0].(*AddTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddTargetUser indicates an expected call of ExecuteAddTargetUser
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddTargetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddTargetUser", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddTargetUser), arg0, arg1)
}

// ExecuteAddTargetUserBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddTargetUserBulk(arg0 context.Context, arg1 *BulkAddTargetUserRequest) (*BulkAddTargetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddTargetUserBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddTargetUserBulk indicates an expected call of ExecuteAddTargetUserBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddTargetUserBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddTargetUserBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddTargetUserBulk), arg0, arg1)
}

// ExecuteAddInactionTargetUser mocks base method
func (m *MockCampaignServiceServer) ExecuteAddInactionTargetUser(arg0 context.Context, arg1 *AddInactionTargetUserRequest) (*AddInactionTargetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddInactionTargetUser", arg0, arg1)
	ret0, _ := ret[0].(*AddInactionTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddInactionTargetUser indicates an expected call of ExecuteAddInactionTargetUser
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddInactionTargetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddInactionTargetUser", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddInactionTargetUser), arg0, arg1)
}

// ExecuteAddInactionTargetUserBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddInactionTargetUserBulk(arg0 context.Context, arg1 *BulkAddInactionTargetUserRequest) (*BulkAddInactionTargetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddInactionTargetUserBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddInactionTargetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddInactionTargetUserBulk indicates an expected call of ExecuteAddInactionTargetUserBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddInactionTargetUserBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddInactionTargetUserBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddInactionTargetUserBulk), arg0, arg1)
}

// ExecuteFindInactionTargetUserByCampaignId mocks base method
func (m *MockCampaignServiceServer) ExecuteFindInactionTargetUserByCampaignId(arg0 context.Context, arg1 *FindInactionTargetUserByCampaignIdRequest) (*FindInactionTargetUserByCampaignIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindInactionTargetUserByCampaignId", arg0, arg1)
	ret0, _ := ret[0].(*FindInactionTargetUserByCampaignIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindInactionTargetUserByCampaignId indicates an expected call of ExecuteFindInactionTargetUserByCampaignId
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindInactionTargetUserByCampaignId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindInactionTargetUserByCampaignId", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindInactionTargetUserByCampaignId), arg0, arg1)
}

// Execute mocks base method
func (m *MockCampaignServiceServer) Execute(arg0 context.Context, arg1 *MultiRequests) (*MultiResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*MultiResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCampaignServiceServerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCampaignServiceServer)(nil).Execute), arg0, arg1)
}

// ExecuteAthenaQuery mocks base method
func (m *MockCampaignServiceServer) ExecuteAthenaQuery(arg0 context.Context, arg1 *AthenaQueryRequest) (*AthenaQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAthenaQuery", arg0, arg1)
	ret0, _ := ret[0].(*AthenaQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAthenaQuery indicates an expected call of ExecuteAthenaQuery
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAthenaQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAthenaQuery", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAthenaQuery), arg0, arg1)
}

// ExecuteTestNewCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteTestNewCampaign(arg0 context.Context, arg1 *TestNewCampaignRequest) (*TestNewCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTestNewCampaign", arg0, arg1)
	ret0, _ := ret[0].(*TestNewCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTestNewCampaign indicates an expected call of ExecuteTestNewCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteTestNewCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTestNewCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteTestNewCampaign), arg0, arg1)
}

// ExecuteFilterCampaigns mocks base method
func (m *MockCampaignServiceServer) ExecuteFilterCampaigns(arg0 context.Context, arg1 *FilterCampaignRequest) (*FilterCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFilterCampaigns", arg0, arg1)
	ret0, _ := ret[0].(*FilterCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFilterCampaigns indicates an expected call of ExecuteFilterCampaigns
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFilterCampaigns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFilterCampaigns", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFilterCampaigns), arg0, arg1)
}

// ExecuteTestCampaignById mocks base method
func (m *MockCampaignServiceServer) ExecuteTestCampaignById(arg0 context.Context, arg1 *TestCampaignByIdRequest) (*TestCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTestCampaignById", arg0, arg1)
	ret0, _ := ret[0].(*TestCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTestCampaignById indicates an expected call of ExecuteTestCampaignById
func (mr *MockCampaignServiceServerMockRecorder) ExecuteTestCampaignById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTestCampaignById", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteTestCampaignById), arg0, arg1)
}

// ExecuteGetDynamicDataByKey mocks base method
func (m *MockCampaignServiceServer) ExecuteGetDynamicDataByKey(arg0 context.Context, arg1 *GetDynamicDataByKeyRequest) (*GetDynamicDataByKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetDynamicDataByKey", arg0, arg1)
	ret0, _ := ret[0].(*GetDynamicDataByKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetDynamicDataByKey indicates an expected call of ExecuteGetDynamicDataByKey
func (mr *MockCampaignServiceServerMockRecorder) ExecuteGetDynamicDataByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetDynamicDataByKey", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteGetDynamicDataByKey), arg0, arg1)
}

// ExecuteAddDynamicData mocks base method
func (m *MockCampaignServiceServer) ExecuteAddDynamicData(arg0 context.Context, arg1 *AddDynamicDataRequest) (*AddDynamicDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddDynamicData", arg0, arg1)
	ret0, _ := ret[0].(*AddDynamicDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddDynamicData indicates an expected call of ExecuteAddDynamicData
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddDynamicData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddDynamicData", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddDynamicData), arg0, arg1)
}

// ExecuteAddDynamicDataBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddDynamicDataBulk(arg0 context.Context, arg1 *BulkAddDynamicDataRequest) (*BulkAddDynamicDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddDynamicDataBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddDynamicDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddDynamicDataBulk indicates an expected call of ExecuteAddDynamicDataBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddDynamicDataBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddDynamicDataBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddDynamicDataBulk), arg0, arg1)
}

// ExecuteFindQueryCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteFindQueryCampaign(arg0 context.Context, arg1 *FindQueryCampaignRequest) (*FindQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindQueryCampaign", arg0, arg1)
	ret0, _ := ret[0].(*FindQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindQueryCampaign indicates an expected call of ExecuteFindQueryCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindQueryCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindQueryCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindQueryCampaign), arg0, arg1)
}

// ExecuteAddQueryCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteAddQueryCampaign(arg0 context.Context, arg1 *AddQueryCampaignRequest) (*AddQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddQueryCampaign", arg0, arg1)
	ret0, _ := ret[0].(*AddQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddQueryCampaign indicates an expected call of ExecuteAddQueryCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddQueryCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddQueryCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddQueryCampaign), arg0, arg1)
}

// ExecuteAddQueryCampaignBulk mocks base method
func (m *MockCampaignServiceServer) ExecuteAddQueryCampaignBulk(arg0 context.Context, arg1 *BulkAddQueryCampaignRequest) (*BulkAddQueryCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddQueryCampaignBulk", arg0, arg1)
	ret0, _ := ret[0].(*BulkAddQueryCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddQueryCampaignBulk indicates an expected call of ExecuteAddQueryCampaignBulk
func (mr *MockCampaignServiceServerMockRecorder) ExecuteAddQueryCampaignBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddQueryCampaignBulk", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteAddQueryCampaignBulk), arg0, arg1)
}

// ExecuteScheduleUserJourneyCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteScheduleUserJourneyCampaign(arg0 context.Context, arg1 *ScheduleUserJourneyCampaignRequest) (*ScheduleUserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScheduleUserJourneyCampaign", arg0, arg1)
	ret0, _ := ret[0].(*ScheduleUserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScheduleUserJourneyCampaign indicates an expected call of ExecuteScheduleUserJourneyCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteScheduleUserJourneyCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScheduleUserJourneyCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteScheduleUserJourneyCampaign), arg0, arg1)
}

// ExecuteFindUserJourneyCampaignById mocks base method
func (m *MockCampaignServiceServer) ExecuteFindUserJourneyCampaignById(arg0 context.Context, arg1 *FindUserJourneyCampaignByIdRequest) (*FindUserJourneyCampaignByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFindUserJourneyCampaignById", arg0, arg1)
	ret0, _ := ret[0].(*FindUserJourneyCampaignByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFindUserJourneyCampaignById indicates an expected call of ExecuteFindUserJourneyCampaignById
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFindUserJourneyCampaignById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFindUserJourneyCampaignById", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFindUserJourneyCampaignById), arg0, arg1)
}

// ExecuteFilterUserJourneyCampaigns mocks base method
func (m *MockCampaignServiceServer) ExecuteFilterUserJourneyCampaigns(arg0 context.Context, arg1 *FilterUserJourneyCampaignRequest) (*FilterUserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFilterUserJourneyCampaigns", arg0, arg1)
	ret0, _ := ret[0].(*FilterUserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFilterUserJourneyCampaigns indicates an expected call of ExecuteFilterUserJourneyCampaigns
func (mr *MockCampaignServiceServerMockRecorder) ExecuteFilterUserJourneyCampaigns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFilterUserJourneyCampaigns", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteFilterUserJourneyCampaigns), arg0, arg1)
}

// ExecuteUserJourneyCampaign mocks base method
func (m *MockCampaignServiceServer) ExecuteUserJourneyCampaign(arg0 context.Context, arg1 *UserJourneyCampaignRequest) (*UserJourneyCampaignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUserJourneyCampaign", arg0, arg1)
	ret0, _ := ret[0].(*UserJourneyCampaignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUserJourneyCampaign indicates an expected call of ExecuteUserJourneyCampaign
func (mr *MockCampaignServiceServerMockRecorder) ExecuteUserJourneyCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUserJourneyCampaign", reflect.TypeOf((*MockCampaignServiceServer)(nil).ExecuteUserJourneyCampaign), arg0, arg1)
}
