// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: CommunicationEngine/communication_engine.proto

package CommunicationEngine

import (
	GoCommon "code.nurture.farm/Core/Contracts/Common/Gen/GoCommon"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CommunicationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentTitle         string                          `protobuf:"bytes,1,opt,name=content_title,json=contentTitle,proto3" json:"content_title,omitempty"`
	TemplateName         string                          `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	Placeholder          []*Placeholder                  `protobuf:"bytes,3,rep,name=placeholder,proto3" json:"placeholder,omitempty"`
	ReceiverActor        *GoCommon.ActorID               `protobuf:"bytes,4,opt,name=receiver_actor,json=receiverActor,proto3" json:"receiver_actor,omitempty"`
	ClientId             string                          `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	BusinessFlow         string                          `protobuf:"bytes,6,opt,name=business_flow,json=businessFlow,proto3" json:"business_flow,omitempty"`
	Expiry               *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	SendAfter            *timestamppb.Timestamp          `protobuf:"bytes,8,opt,name=send_after,json=sendAfter,proto3" json:"send_after,omitempty"`
	Channel              []GoCommon.CommunicationChannel `protobuf:"varint,9,rep,packed,name=channel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"channel,omitempty"`
	ReferenceId          string                          `protobuf:"bytes,10,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	ContentMetadata      []*Placeholder                  `protobuf:"bytes,11,rep,name=content_metadata,json=contentMetadata,proto3" json:"content_metadata,omitempty"`
	ReceiverActorDetails *ActorDetails                   `protobuf:"bytes,12,opt,name=receiver_actor_details,json=receiverActorDetails,proto3" json:"receiver_actor_details,omitempty"`
	ChannelAttributes    *CommunicationChannelAttributes `protobuf:"bytes,13,opt,name=channel_attributes,json=channelAttributes,proto3" json:"channel_attributes,omitempty"`
	Tenant               GoCommon.Tenant                 `protobuf:"varint,14,opt,name=tenant,proto3,enum=farm.nurture.core.contracts.common.Tenant" json:"tenant,omitempty"`
	Media                *Media                          `protobuf:"bytes,15,opt,name=media,proto3" json:"media,omitempty"`
	ParentReferenceId    string                          `protobuf:"bytes,16,opt,name=parent_reference_id,json=parentReferenceId,proto3" json:"parent_reference_id,omitempty"`
	CampaignName         string                          `protobuf:"bytes,17,opt,name=campaign_name,json=campaignName,proto3" json:"campaign_name,omitempty"`
	Vendor               GoCommon.CommunicationVendor    `protobuf:"varint,18,opt,name=vendor,proto3,enum=farm.nurture.core.contracts.common.CommunicationVendor" json:"vendor,omitempty"`
}

func (x *CommunicationEvent) Reset() {
	*x = CommunicationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationEvent) ProtoMessage() {}

func (x *CommunicationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationEvent.ProtoReflect.Descriptor instead.
func (*CommunicationEvent) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{0}
}

func (x *CommunicationEvent) GetContentTitle() string {
	if x != nil {
		return x.ContentTitle
	}
	return ""
}

func (x *CommunicationEvent) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *CommunicationEvent) GetPlaceholder() []*Placeholder {
	if x != nil {
		return x.Placeholder
	}
	return nil
}

func (x *CommunicationEvent) GetReceiverActor() *GoCommon.ActorID {
	if x != nil {
		return x.ReceiverActor
	}
	return nil
}

func (x *CommunicationEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CommunicationEvent) GetBusinessFlow() string {
	if x != nil {
		return x.BusinessFlow
	}
	return ""
}

func (x *CommunicationEvent) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *CommunicationEvent) GetSendAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.SendAfter
	}
	return nil
}

func (x *CommunicationEvent) GetChannel() []GoCommon.CommunicationChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CommunicationEvent) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *CommunicationEvent) GetContentMetadata() []*Placeholder {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *CommunicationEvent) GetReceiverActorDetails() *ActorDetails {
	if x != nil {
		return x.ReceiverActorDetails
	}
	return nil
}

func (x *CommunicationEvent) GetChannelAttributes() *CommunicationChannelAttributes {
	if x != nil {
		return x.ChannelAttributes
	}
	return nil
}

func (x *CommunicationEvent) GetTenant() GoCommon.Tenant {
	if x != nil {
		return x.Tenant
	}
	return GoCommon.Tenant_NO_TENANT
}

func (x *CommunicationEvent) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *CommunicationEvent) GetParentReferenceId() string {
	if x != nil {
		return x.ParentReferenceId
	}
	return ""
}

func (x *CommunicationEvent) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *CommunicationEvent) GetVendor() GoCommon.CommunicationVendor {
	if x != nil {
		return x.Vendor
	}
	return GoCommon.CommunicationVendor_NO_VENDOR
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType       GoCommon.MediaType       `protobuf:"varint,1,opt,name=media_type,json=mediaType,proto3,enum=farm.nurture.core.contracts.common.MediaType" json:"media_type,omitempty"`
	MediaAccessType GoCommon.MediaAccessType `protobuf:"varint,2,opt,name=media_access_type,json=mediaAccessType,proto3,enum=farm.nurture.core.contracts.common.MediaAccessType" json:"media_access_type,omitempty"`
	MediaInfo       string                   `protobuf:"bytes,3,opt,name=media_info,json=mediaInfo,proto3" json:"media_info,omitempty"`
	DocumentName    string                   `protobuf:"bytes,4,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	Msg             string                   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetMediaType() GoCommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return GoCommon.MediaType_NO_MEDIA_TYPE
}

func (x *Media) GetMediaAccessType() GoCommon.MediaAccessType {
	if x != nil {
		return x.MediaAccessType
	}
	return GoCommon.MediaAccessType_NO_MEDIA_ACCESS_TYPE
}

func (x *Media) GetMediaInfo() string {
	if x != nil {
		return x.MediaInfo
	}
	return ""
}

func (x *Media) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *Media) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BulkCommunicationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationEvents []*CommunicationEvent `protobuf:"bytes,1,rep,name=communication_events,json=communicationEvents,proto3" json:"communication_events,omitempty"`
}

func (x *BulkCommunicationEvent) Reset() {
	*x = BulkCommunicationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCommunicationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCommunicationEvent) ProtoMessage() {}

func (x *BulkCommunicationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCommunicationEvent.ProtoReflect.Descriptor instead.
func (*BulkCommunicationEvent) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{2}
}

func (x *BulkCommunicationEvent) GetCommunicationEvents() []*CommunicationEvent {
	if x != nil {
		return x.CommunicationEvents
	}
	return nil
}

type CommunicationChannelAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushNotificationType GoCommon.PushNotificationType `protobuf:"varint,1,opt,name=push_notification_type,json=pushNotificationType,proto3,enum=farm.nurture.core.contracts.common.PushNotificationType" json:"push_notification_type,omitempty"`
}

func (x *CommunicationChannelAttributes) Reset() {
	*x = CommunicationChannelAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationChannelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationChannelAttributes) ProtoMessage() {}

func (x *CommunicationChannelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationChannelAttributes.ProtoReflect.Descriptor instead.
func (*CommunicationChannelAttributes) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{3}
}

func (x *CommunicationChannelAttributes) GetPushNotificationType() GoCommon.PushNotificationType {
	if x != nil {
		return x.PushNotificationType
	}
	return GoCommon.PushNotificationType_NO_PUSH_NOTIFICATION_TYPE
}

type Placeholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Placeholder) Reset() {
	*x = Placeholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placeholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placeholder) ProtoMessage() {}

func (x *Placeholder) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placeholder.ProtoReflect.Descriptor instead.
func (*Placeholder) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{4}
}

func (x *Placeholder) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Placeholder) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BulkCommunicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationResponses []*CommunicationResponse `protobuf:"bytes,1,rep,name=communication_responses,json=communicationResponses,proto3" json:"communication_responses,omitempty"`
}

func (x *BulkCommunicationResponse) Reset() {
	*x = BulkCommunicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCommunicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCommunicationResponse) ProtoMessage() {}

func (x *BulkCommunicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCommunicationResponse.ProtoReflect.Descriptor instead.
func (*BulkCommunicationResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{5}
}

func (x *BulkCommunicationResponse) GetCommunicationResponses() []*CommunicationResponse {
	if x != nil {
		return x.CommunicationResponses
	}
	return nil
}

type CommunicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId string `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
}

func (x *CommunicationResponse) Reset() {
	*x = CommunicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationResponse) ProtoMessage() {}

func (x *CommunicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationResponse.ProtoReflect.Descriptor instead.
func (*CommunicationResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{6}
}

func (x *CommunicationResponse) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type ActorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailId               string                `protobuf:"bytes,1,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty"`
	MobileNumber          string                `protobuf:"bytes,2,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	LanguageCode          GoCommon.LanguageCode `protobuf:"varint,3,opt,name=language_code,json=languageCode,proto3,enum=farm.nurture.core.contracts.common.LanguageCode" json:"language_code,omitempty"`
	FcmToken              string                `protobuf:"bytes,4,opt,name=fcm_token,json=fcmToken,proto3" json:"fcm_token,omitempty"`
	AppId                 GoCommon.AppID        `protobuf:"varint,5,opt,name=app_id,json=appId,proto3,enum=farm.nurture.core.contracts.common.AppID" json:"app_id,omitempty"`
	AppType               GoCommon.AppType      `protobuf:"varint,6,opt,name=app_type,json=appType,proto3,enum=farm.nurture.core.contracts.common.AppType" json:"app_type,omitempty"`
	SecondaryLanguageCode GoCommon.LanguageCode `protobuf:"varint,7,opt,name=secondaryLanguage_code,json=secondaryLanguageCode,proto3,enum=farm.nurture.core.contracts.common.LanguageCode" json:"secondaryLanguage_code,omitempty"`
	ToRecipients          []string              `protobuf:"bytes,8,rep,name=to_recipients,json=toRecipients,proto3" json:"to_recipients,omitempty"`
	CcRecipients          []string              `protobuf:"bytes,9,rep,name=cc_recipients,json=ccRecipients,proto3" json:"cc_recipients,omitempty"`
	BccRecipients         []string              `protobuf:"bytes,10,rep,name=bcc_recipients,json=bccRecipients,proto3" json:"bcc_recipients,omitempty"`
}

func (x *ActorDetails) Reset() {
	*x = ActorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorDetails) ProtoMessage() {}

func (x *ActorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorDetails.ProtoReflect.Descriptor instead.
func (*ActorDetails) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{7}
}

func (x *ActorDetails) GetEmailId() string {
	if x != nil {
		return x.EmailId
	}
	return ""
}

func (x *ActorDetails) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *ActorDetails) GetLanguageCode() GoCommon.LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return GoCommon.LanguageCode_NO_LANGUAGE_CODE
}

func (x *ActorDetails) GetFcmToken() string {
	if x != nil {
		return x.FcmToken
	}
	return ""
}

func (x *ActorDetails) GetAppId() GoCommon.AppID {
	if x != nil {
		return x.AppId
	}
	return GoCommon.AppID_NO_APP_ID
}

func (x *ActorDetails) GetAppType() GoCommon.AppType {
	if x != nil {
		return x.AppType
	}
	return GoCommon.AppType_NO_APP_TYPE
}

func (x *ActorDetails) GetSecondaryLanguageCode() GoCommon.LanguageCode {
	if x != nil {
		return x.SecondaryLanguageCode
	}
	return GoCommon.LanguageCode_NO_LANGUAGE_CODE
}

func (x *ActorDetails) GetToRecipients() []string {
	if x != nil {
		return x.ToRecipients
	}
	return nil
}

func (x *ActorDetails) GetCcRecipients() []string {
	if x != nil {
		return x.CcRecipients
	}
	return nil
}

func (x *ActorDetails) GetBccRecipients() []string {
	if x != nil {
		return x.BccRecipients
	}
	return nil
}

type OptInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	Actor          *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	MobileNumber   string                   `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	FarmerName     string                   `protobuf:"bytes,4,opt,name=farmer_name,json=farmerName,proto3" json:"farmer_name,omitempty"`
	SourceSystem   GoCommon.SourceSystem    `protobuf:"varint,5,opt,name=sourceSystem,proto3,enum=farm.nurture.core.contracts.common.SourceSystem" json:"sourceSystem,omitempty"`
	NameSpace      GoCommon.NameSpace       `protobuf:"varint,6,opt,name=nameSpace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"nameSpace,omitempty"`
}

func (x *OptInRequest) Reset() {
	*x = OptInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptInRequest) ProtoMessage() {}

func (x *OptInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptInRequest.ProtoReflect.Descriptor instead.
func (*OptInRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{8}
}

func (x *OptInRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *OptInRequest) GetActor() *GoCommon.ActorID {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *OptInRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *OptInRequest) GetFarmerName() string {
	if x != nil {
		return x.FarmerName
	}
	return ""
}

func (x *OptInRequest) GetSourceSystem() GoCommon.SourceSystem {
	if x != nil {
		return x.SourceSystem
	}
	return GoCommon.SourceSystem_NO_SOURCE_SYSTEM
}

func (x *OptInRequest) GetNameSpace() GoCommon.NameSpace {
	if x != nil {
		return x.NameSpace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

type OptInRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
	Attribs    []*GoCommon.Attribs         `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Id         int64                       `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OptInRespone) Reset() {
	*x = OptInRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptInRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptInRespone) ProtoMessage() {}

func (x *OptInRespone) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptInRespone.ProtoReflect.Descriptor instead.
func (*OptInRespone) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{9}
}

func (x *OptInRespone) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *OptInRespone) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *OptInRespone) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *OptInRespone) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OptOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	Actor          *GoCommon.ActorID        `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	MobileNumber   string                   `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	NameSpace      GoCommon.NameSpace       `protobuf:"varint,4,opt,name=nameSpace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"nameSpace,omitempty"`
}

func (x *OptOutRequest) Reset() {
	*x = OptOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptOutRequest) ProtoMessage() {}

func (x *OptOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptOutRequest.ProtoReflect.Descriptor instead.
func (*OptOutRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{10}
}

func (x *OptOutRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *OptOutRequest) GetActor() *GoCommon.ActorID {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *OptOutRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *OptOutRequest) GetNameSpace() GoCommon.NameSpace {
	if x != nil {
		return x.NameSpace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

type OptOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
}

func (x *OptOutResponse) Reset() {
	*x = OptOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptOutResponse) ProtoMessage() {}

func (x *OptOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptOutResponse.ProtoReflect.Descriptor instead.
func (*OptOutResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{11}
}

func (x *OptOutResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *OptOutResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

type MessageAcknowledgementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders    *GoCommon.RequestHeaders        `protobuf:"bytes,1,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	StartTime         *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp          `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Channels          []GoCommon.CommunicationChannel `protobuf:"varint,4,rep,packed,name=channels,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"channels,omitempty"`
	TemplateNameLike  string                          `protobuf:"bytes,5,opt,name=template_name_like,json=templateNameLike,proto3" json:"template_name_like,omitempty"`
	MobileNumber      string                          `protobuf:"bytes,6,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	ReferenceId       string                          `protobuf:"bytes,7,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	Limit             int32                           `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            int32                           `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	ResponseOrderType GoCommon.ResponseOrderType      `protobuf:"varint,10,opt,name=responseOrderType,proto3,enum=farm.nurture.core.contracts.common.ResponseOrderType" json:"responseOrderType,omitempty"`
}

func (x *MessageAcknowledgementRequest) Reset() {
	*x = MessageAcknowledgementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAcknowledgementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAcknowledgementRequest) ProtoMessage() {}

func (x *MessageAcknowledgementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAcknowledgementRequest.ProtoReflect.Descriptor instead.
func (*MessageAcknowledgementRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{12}
}

func (x *MessageAcknowledgementRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *MessageAcknowledgementRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MessageAcknowledgementRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *MessageAcknowledgementRequest) GetChannels() []GoCommon.CommunicationChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *MessageAcknowledgementRequest) GetTemplateNameLike() string {
	if x != nil {
		return x.TemplateNameLike
	}
	return ""
}

func (x *MessageAcknowledgementRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *MessageAcknowledgementRequest) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *MessageAcknowledgementRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MessageAcknowledgementRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageAcknowledgementRequest) GetResponseOrderType() GoCommon.ResponseOrderType {
	if x != nil {
		return x.ResponseOrderType
	}
	return GoCommon.ResponseOrderType_NO_RESPONSE_ORDER
}

type MessageAcknowledgementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode              GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
	Attribs                 []*GoCommon.Attribs         `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	MessageAcknowledgements []*MessageAcknowledgement   `protobuf:"bytes,4,rep,name=message_acknowledgements,json=messageAcknowledgements,proto3" json:"message_acknowledgements,omitempty"`
}

func (x *MessageAcknowledgementResponse) Reset() {
	*x = MessageAcknowledgementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAcknowledgementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAcknowledgementResponse) ProtoMessage() {}

func (x *MessageAcknowledgementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAcknowledgementResponse.ProtoReflect.Descriptor instead.
func (*MessageAcknowledgementResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{13}
}

func (x *MessageAcknowledgementResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *MessageAcknowledgementResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *MessageAcknowledgementResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *MessageAcknowledgementResponse) GetMessageAcknowledgements() []*MessageAcknowledgement {
	if x != nil {
		return x.MessageAcknowledgements
	}
	return nil
}

type MessageAcknowledgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Actor              *GoCommon.ActorID             `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	MobileNumber       string                        `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	Channel            GoCommon.CommunicationChannel `protobuf:"varint,4,opt,name=channel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"channel,omitempty"`
	ReferenceId        string                        `protobuf:"bytes,5,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	TemplateName       string                        `protobuf:"bytes,6,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	Language           GoCommon.Language             `protobuf:"varint,7,opt,name=language,proto3,enum=farm.nurture.core.contracts.common.Language" json:"language,omitempty"`
	MessageContent     string                        `protobuf:"bytes,8,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"`
	IsUnicode          bool                          `protobuf:"varint,9,opt,name=is_unicode,json=isUnicode,proto3" json:"is_unicode,omitempty"`
	VendorName         string                        `protobuf:"bytes,10,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	VendorMessageId    string                        `protobuf:"bytes,11,opt,name=vendor_message_id,json=vendorMessageId,proto3" json:"vendor_message_id,omitempty"`
	State              GoCommon.CommunicationState   `protobuf:"varint,12,opt,name=state,proto3,enum=farm.nurture.core.contracts.common.CommunicationState" json:"state,omitempty"`
	RetryCount         int32                         `protobuf:"varint,13,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Placeholders       []*Placeholder                `protobuf:"bytes,14,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
	Attributes         []*GoCommon.Attribs           `protobuf:"bytes,15,rep,name=attributes,proto3" json:"attributes,omitempty"`
	VendorDeliveryTime *timestamppb.Timestamp        `protobuf:"bytes,16,opt,name=vendor_delivery_time,json=vendorDeliveryTime,proto3" json:"vendor_delivery_time,omitempty"`
	ActorDeliveryTime  *timestamppb.Timestamp        `protobuf:"bytes,17,opt,name=actor_delivery_time,json=actorDeliveryTime,proto3" json:"actor_delivery_time,omitempty"`
	ContactType        GoCommon.ContactType          `protobuf:"varint,18,opt,name=contact_type,json=contactType,proto3,enum=farm.nurture.core.contracts.common.ContactType" json:"contact_type,omitempty"`
	ActorContactId     string                        `protobuf:"bytes,19,opt,name=actor_contact_id,json=actorContactId,proto3" json:"actor_contact_id,omitempty"`
	ParentReferenceId  string                        `protobuf:"bytes,20,opt,name=parent_reference_id,json=parentReferenceId,proto3" json:"parent_reference_id,omitempty"`
	CampaignName       string                        `protobuf:"bytes,21,opt,name=campaign_name,json=campaignName,proto3" json:"campaign_name,omitempty"`
	CreatedAt          *timestamppb.Timestamp        `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp        `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MessageAcknowledgement) Reset() {
	*x = MessageAcknowledgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAcknowledgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAcknowledgement) ProtoMessage() {}

func (x *MessageAcknowledgement) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAcknowledgement.ProtoReflect.Descriptor instead.
func (*MessageAcknowledgement) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{14}
}

func (x *MessageAcknowledgement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageAcknowledgement) GetActor() *GoCommon.ActorID {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MessageAcknowledgement) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *MessageAcknowledgement) GetChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.Channel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *MessageAcknowledgement) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *MessageAcknowledgement) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *MessageAcknowledgement) GetLanguage() GoCommon.Language {
	if x != nil {
		return x.Language
	}
	return GoCommon.Language_NO_LANGUAGE
}

func (x *MessageAcknowledgement) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *MessageAcknowledgement) GetIsUnicode() bool {
	if x != nil {
		return x.IsUnicode
	}
	return false
}

func (x *MessageAcknowledgement) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *MessageAcknowledgement) GetVendorMessageId() string {
	if x != nil {
		return x.VendorMessageId
	}
	return ""
}

func (x *MessageAcknowledgement) GetState() GoCommon.CommunicationState {
	if x != nil {
		return x.State
	}
	return GoCommon.CommunicationState_NO_COMMUNICATION_STATE
}

func (x *MessageAcknowledgement) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *MessageAcknowledgement) GetPlaceholders() []*Placeholder {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

func (x *MessageAcknowledgement) GetAttributes() []*GoCommon.Attribs {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MessageAcknowledgement) GetVendorDeliveryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VendorDeliveryTime
	}
	return nil
}

func (x *MessageAcknowledgement) GetActorDeliveryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActorDeliveryTime
	}
	return nil
}

func (x *MessageAcknowledgement) GetContactType() GoCommon.ContactType {
	if x != nil {
		return x.ContactType
	}
	return GoCommon.ContactType_NO_CONTACT_TYPE
}

func (x *MessageAcknowledgement) GetActorContactId() string {
	if x != nil {
		return x.ActorContactId
	}
	return ""
}

func (x *MessageAcknowledgement) GetParentReferenceId() string {
	if x != nil {
		return x.ParentReferenceId
	}
	return ""
}

func (x *MessageAcknowledgement) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *MessageAcknowledgement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MessageAcknowledgement) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Language    GoCommon.Language            `protobuf:"varint,3,opt,name=language,proto3,enum=farm.nurture.core.contracts.common.Language" json:"language,omitempty"`
	ContentType GoCommon.TemplateContentType `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3,enum=farm.nurture.core.contracts.common.TemplateContentType" json:"content_type,omitempty"`
	Content     string                       `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Title       string                       `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Active      bool                         `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	CreatedAt   *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp       `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Attributes  []*GoCommon.Attribs          `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty"`
	OwnerEmail  string                       `protobuf:"bytes,12,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	Vertical    string                       `protobuf:"bytes,13,opt,name=vertical,proto3" json:"vertical,omitempty"`
	MetaData    []*GoCommon.Attribs          `protobuf:"bytes,14,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{15}
}

func (x *Template) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetLanguage() GoCommon.Language {
	if x != nil {
		return x.Language
	}
	return GoCommon.Language_NO_LANGUAGE
}

func (x *Template) GetContentType() GoCommon.TemplateContentType {
	if x != nil {
		return x.ContentType
	}
	return GoCommon.TemplateContentType_NO_TEMPLATE_CONTENT_TYPE
}

func (x *Template) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Template) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Template) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Template) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Template) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Template) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Template) GetAttributes() []*GoCommon.Attribs {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Template) GetOwnerEmail() string {
	if x != nil {
		return x.OwnerEmail
	}
	return ""
}

func (x *Template) GetVertical() string {
	if x != nil {
		return x.Vertical
	}
	return ""
}

func (x *Template) GetMetaData() []*GoCommon.Attribs {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type AddTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LanguageCode        GoCommon.LanguageCode         `protobuf:"varint,2,opt,name=language_code,json=languageCode,proto3,enum=farm.nurture.core.contracts.common.LanguageCode" json:"language_code,omitempty"`
	Channel             GoCommon.CommunicationChannel `protobuf:"varint,3,opt,name=channel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"channel,omitempty"`
	TemplateContentType GoCommon.TemplateContentType  `protobuf:"varint,4,opt,name=templateContentType,proto3,enum=farm.nurture.core.contracts.common.TemplateContentType" json:"templateContentType,omitempty"`
	Content             string                        `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Attribs             []*GoCommon.Attribs           `protobuf:"bytes,6,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Owner               string                        `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Vertical            string                        `protobuf:"bytes,8,opt,name=vertical,proto3" json:"vertical,omitempty"`
	Title               string                        `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	MetaData            []*GoCommon.Attribs           `protobuf:"bytes,10,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *AddTemplateRequest) Reset() {
	*x = AddTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTemplateRequest) ProtoMessage() {}

func (x *AddTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTemplateRequest.ProtoReflect.Descriptor instead.
func (*AddTemplateRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{16}
}

func (x *AddTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTemplateRequest) GetLanguageCode() GoCommon.LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return GoCommon.LanguageCode_NO_LANGUAGE_CODE
}

func (x *AddTemplateRequest) GetChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.Channel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *AddTemplateRequest) GetTemplateContentType() GoCommon.TemplateContentType {
	if x != nil {
		return x.TemplateContentType
	}
	return GoCommon.TemplateContentType_NO_TEMPLATE_CONTENT_TYPE
}

func (x *AddTemplateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddTemplateRequest) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *AddTemplateRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AddTemplateRequest) GetVertical() string {
	if x != nil {
		return x.Vertical
	}
	return ""
}

func (x *AddTemplateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddTemplateRequest) GetMetaData() []*GoCommon.Attribs {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type AddTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode      GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
	Attribs         []*GoCommon.Attribs         `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Id              int64                       `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	VendorsResponse []*VendorResponse           `protobuf:"bytes,5,rep,name=vendors_response,json=vendorsResponse,proto3" json:"vendors_response,omitempty"`
}

func (x *AddTemplateResponse) Reset() {
	*x = AddTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTemplateResponse) ProtoMessage() {}

func (x *AddTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTemplateResponse.ProtoReflect.Descriptor instead.
func (*AddTemplateResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{17}
}

func (x *AddTemplateResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *AddTemplateResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *AddTemplateResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *AddTemplateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddTemplateResponse) GetVendorsResponse() []*VendorResponse {
	if x != nil {
		return x.VendorsResponse
	}
	return nil
}

type TemplateUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string                `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Attribs      []*GoCommon.Attribs   `protobuf:"bytes,2,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Title        string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Owner        string                `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Vertical     string                `protobuf:"bytes,5,opt,name=vertical,proto3" json:"vertical,omitempty"`
	Name         string                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	LanguageCode GoCommon.LanguageCode `protobuf:"varint,7,opt,name=language_code,json=languageCode,proto3,enum=farm.nurture.core.contracts.common.LanguageCode" json:"language_code,omitempty"`
	MetaData     []*GoCommon.Attribs   `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *TemplateUpdateRequest) Reset() {
	*x = TemplateUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateUpdateRequest) ProtoMessage() {}

func (x *TemplateUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateUpdateRequest.ProtoReflect.Descriptor instead.
func (*TemplateUpdateRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{18}
}

func (x *TemplateUpdateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TemplateUpdateRequest) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *TemplateUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TemplateUpdateRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TemplateUpdateRequest) GetVertical() string {
	if x != nil {
		return x.Vertical
	}
	return ""
}

func (x *TemplateUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateUpdateRequest) GetLanguageCode() GoCommon.LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return GoCommon.LanguageCode_NO_LANGUAGE_CODE
}

func (x *TemplateUpdateRequest) GetMetaData() []*GoCommon.Attribs {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type GetAllTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GoCommon.ResponseStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
	Templates  []*Template                 `protobuf:"bytes,3,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *GetAllTemplateResponse) Reset() {
	*x = GetAllTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTemplateResponse) ProtoMessage() {}

func (x *GetAllTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetAllTemplateResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllTemplateResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *GetAllTemplateResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *GetAllTemplateResponse) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

type GetAllTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int64                    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int64                    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,3,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	SearchQuery    string                   `protobuf:"bytes,4,opt,name=searchQuery,proto3" json:"searchQuery,omitempty"`
	Namespace      GoCommon.NameSpace       `protobuf:"varint,5,opt,name=namespace,proto3,enum=farm.nurture.core.contracts.common.NameSpace" json:"namespace,omitempty"`
	Status         GoCommon.Status          `protobuf:"varint,6,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.Status" json:"status,omitempty"`
	TemplateNames  []string                 `protobuf:"bytes,7,rep,name=templateNames,proto3" json:"templateNames,omitempty"`
}

func (x *GetAllTemplateRequest) Reset() {
	*x = GetAllTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTemplateRequest) ProtoMessage() {}

func (x *GetAllTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetAllTemplateRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllTemplateRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllTemplateRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllTemplateRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetAllTemplateRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetAllTemplateRequest) GetNamespace() GoCommon.NameSpace {
	if x != nil {
		return x.Namespace
	}
	return GoCommon.NameSpace_NO_NAMESPACE
}

func (x *GetAllTemplateRequest) GetStatus() GoCommon.Status {
	if x != nil {
		return x.Status
	}
	return GoCommon.Status_NO_KNOWN_STATUS
}

func (x *GetAllTemplateRequest) GetTemplateNames() []string {
	if x != nil {
		return x.TemplateNames
	}
	return nil
}

type VendorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName string                      `protobuf:"bytes,1,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	Status     GoCommon.ResponseStatus     `protobuf:"varint,2,opt,name=status,proto3,enum=farm.nurture.core.contracts.common.ResponseStatus" json:"status,omitempty"`
	StatusCode GoCommon.ResponseStatusCode `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3,enum=farm.nurture.core.contracts.common.ResponseStatusCode" json:"status_code,omitempty"`
	ErrorMsg   string                      `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *VendorResponse) Reset() {
	*x = VendorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorResponse) ProtoMessage() {}

func (x *VendorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorResponse.ProtoReflect.Descriptor instead.
func (*VendorResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{21}
}

func (x *VendorResponse) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *VendorResponse) GetStatus() GoCommon.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return GoCommon.ResponseStatus_NO_RESPONSE_STATUS
}

func (x *VendorResponse) GetStatusCode() GoCommon.ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GoCommon.ResponseStatusCode_NO_RESPONSE_STATUS_CODE
}

func (x *VendorResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ActivationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorsResponse []*VendorResponse `protobuf:"bytes,1,rep,name=vendors_response,json=vendorsResponse,proto3" json:"vendors_response,omitempty"`
	ActiveTemplate  bool              `protobuf:"varint,2,opt,name=active_template,json=activeTemplate,proto3" json:"active_template,omitempty"`
}

func (x *ActivationResponse) Reset() {
	*x = ActivationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationResponse) ProtoMessage() {}

func (x *ActivationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationResponse.ProtoReflect.Descriptor instead.
func (*ActivationResponse) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{22}
}

func (x *ActivationResponse) GetVendorsResponse() []*VendorResponse {
	if x != nil {
		return x.VendorsResponse
	}
	return nil
}

func (x *ActivationResponse) GetActiveTemplate() bool {
	if x != nil {
		return x.ActiveTemplate
	}
	return false
}

type ActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateName string                        `protobuf:"bytes,1,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	Channel      GoCommon.CommunicationChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=farm.nurture.core.contracts.common.CommunicationChannel" json:"channel,omitempty"`
	Media        *Media                        `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Placeholders []*Placeholder                `protobuf:"bytes,4,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
	Actor        *GoCommon.ActorID             `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	MobileNumber string                        `protobuf:"bytes,6,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	LanguageCode GoCommon.LanguageCode         `protobuf:"varint,7,opt,name=language_code,json=languageCode,proto3,enum=farm.nurture.core.contracts.common.LanguageCode" json:"language_code,omitempty"`
}

func (x *ActivationRequest) Reset() {
	*x = ActivationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationRequest) ProtoMessage() {}

func (x *ActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CommunicationEngine_communication_engine_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationRequest.ProtoReflect.Descriptor instead.
func (*ActivationRequest) Descriptor() ([]byte, []int) {
	return file_CommunicationEngine_communication_engine_proto_rawDescGZIP(), []int{23}
}

func (x *ActivationRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ActivationRequest) GetChannel() GoCommon.CommunicationChannel {
	if x != nil {
		return x.Channel
	}
	return GoCommon.CommunicationChannel_NO_CHANNEL
}

func (x *ActivationRequest) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ActivationRequest) GetPlaceholders() []*Placeholder {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

func (x *ActivationRequest) GetActor() *GoCommon.ActorID {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ActivationRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *ActivationRequest) GetLanguageCode() GoCommon.LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return GoCommon.LanguageCode_NO_LANGUAGE_CODE
}

var File_CommunicationEngine_communication_engine_proto protoreflect.FileDescriptor

var file_CommunicationEngine_communication_engine_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65,
	0x1a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb,
	0x08, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x62, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x8c, 0x02, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x7f, 0x0a, 0x16, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a,
	0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x16, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70, 0x75, 0x73, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x35, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xa6, 0x04, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x63, 0x6d, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x63, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x67, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x63, 0x63, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd, 0x04, 0x0a,
	0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xff, 0x02, 0x0a,
	0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x71, 0x0a, 0x18, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfb,
	0x09, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x05, 0x0a,
	0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xb1, 0x04, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x69, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x02, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x10, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4f,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xa2,
	0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x86, 0x07, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x67, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x1d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x79, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6a, 0x0a, 0x30,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x50, 0x01, 0x5a, 0x34, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_CommunicationEngine_communication_engine_proto_rawDescOnce sync.Once
	file_CommunicationEngine_communication_engine_proto_rawDescData = file_CommunicationEngine_communication_engine_proto_rawDesc
)

func file_CommunicationEngine_communication_engine_proto_rawDescGZIP() []byte {
	file_CommunicationEngine_communication_engine_proto_rawDescOnce.Do(func() {
		file_CommunicationEngine_communication_engine_proto_rawDescData = protoimpl.X.CompressGZIP(file_CommunicationEngine_communication_engine_proto_rawDescData)
	})
	return file_CommunicationEngine_communication_engine_proto_rawDescData
}

var file_CommunicationEngine_communication_engine_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_CommunicationEngine_communication_engine_proto_goTypes = []interface{}{
	(*CommunicationEvent)(nil),             // 0: farm.nurture.core.contracts.ce.CommunicationEvent
	(*Media)(nil),                          // 1: farm.nurture.core.contracts.ce.Media
	(*BulkCommunicationEvent)(nil),         // 2: farm.nurture.core.contracts.ce.BulkCommunicationEvent
	(*CommunicationChannelAttributes)(nil), // 3: farm.nurture.core.contracts.ce.CommunicationChannelAttributes
	(*Placeholder)(nil),                    // 4: farm.nurture.core.contracts.ce.Placeholder
	(*BulkCommunicationResponse)(nil),      // 5: farm.nurture.core.contracts.ce.BulkCommunicationResponse
	(*CommunicationResponse)(nil),          // 6: farm.nurture.core.contracts.ce.CommunicationResponse
	(*ActorDetails)(nil),                   // 7: farm.nurture.core.contracts.ce.ActorDetails
	(*OptInRequest)(nil),                   // 8: farm.nurture.core.contracts.ce.OptInRequest
	(*OptInRespone)(nil),                   // 9: farm.nurture.core.contracts.ce.OptInRespone
	(*OptOutRequest)(nil),                  // 10: farm.nurture.core.contracts.ce.OptOutRequest
	(*OptOutResponse)(nil),                 // 11: farm.nurture.core.contracts.ce.OptOutResponse
	(*MessageAcknowledgementRequest)(nil),  // 12: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest
	(*MessageAcknowledgementResponse)(nil), // 13: farm.nurture.core.contracts.ce.MessageAcknowledgementResponse
	(*MessageAcknowledgement)(nil),         // 14: farm.nurture.core.contracts.ce.MessageAcknowledgement
	(*Template)(nil),                       // 15: farm.nurture.core.contracts.ce.Template
	(*AddTemplateRequest)(nil),             // 16: farm.nurture.core.contracts.ce.AddTemplateRequest
	(*AddTemplateResponse)(nil),            // 17: farm.nurture.core.contracts.ce.AddTemplateResponse
	(*TemplateUpdateRequest)(nil),          // 18: farm.nurture.core.contracts.ce.TemplateUpdateRequest
	(*GetAllTemplateResponse)(nil),         // 19: farm.nurture.core.contracts.ce.GetAllTemplateResponse
	(*GetAllTemplateRequest)(nil),          // 20: farm.nurture.core.contracts.ce.GetAllTemplateRequest
	(*VendorResponse)(nil),                 // 21: farm.nurture.core.contracts.ce.VendorResponse
	(*ActivationResponse)(nil),             // 22: farm.nurture.core.contracts.ce.ActivationResponse
	(*ActivationRequest)(nil),              // 23: farm.nurture.core.contracts.ce.ActivationRequest
	(*GoCommon.ActorID)(nil),               // 24: farm.nurture.core.contracts.common.ActorID
	(*timestamppb.Timestamp)(nil),          // 25: google.protobuf.Timestamp
	(GoCommon.CommunicationChannel)(0),     // 26: farm.nurture.core.contracts.common.CommunicationChannel
	(GoCommon.Tenant)(0),                   // 27: farm.nurture.core.contracts.common.Tenant
	(GoCommon.CommunicationVendor)(0),      // 28: farm.nurture.core.contracts.common.CommunicationVendor
	(GoCommon.MediaType)(0),                // 29: farm.nurture.core.contracts.common.MediaType
	(GoCommon.MediaAccessType)(0),          // 30: farm.nurture.core.contracts.common.MediaAccessType
	(GoCommon.PushNotificationType)(0),     // 31: farm.nurture.core.contracts.common.PushNotificationType
	(GoCommon.LanguageCode)(0),             // 32: farm.nurture.core.contracts.common.LanguageCode
	(GoCommon.AppID)(0),                    // 33: farm.nurture.core.contracts.common.AppID
	(GoCommon.AppType)(0),                  // 34: farm.nurture.core.contracts.common.AppType
	(*GoCommon.RequestHeaders)(nil),        // 35: farm.nurture.core.contracts.common.RequestHeaders
	(GoCommon.SourceSystem)(0),             // 36: farm.nurture.core.contracts.common.SourceSystem
	(GoCommon.NameSpace)(0),                // 37: farm.nurture.core.contracts.common.NameSpace
	(GoCommon.ResponseStatus)(0),           // 38: farm.nurture.core.contracts.common.ResponseStatus
	(GoCommon.ResponseStatusCode)(0),       // 39: farm.nurture.core.contracts.common.ResponseStatusCode
	(*GoCommon.Attribs)(nil),               // 40: farm.nurture.core.contracts.common.Attribs
	(GoCommon.ResponseOrderType)(0),        // 41: farm.nurture.core.contracts.common.ResponseOrderType
	(GoCommon.Language)(0),                 // 42: farm.nurture.core.contracts.common.Language
	(GoCommon.CommunicationState)(0),       // 43: farm.nurture.core.contracts.common.CommunicationState
	(GoCommon.ContactType)(0),              // 44: farm.nurture.core.contracts.common.ContactType
	(GoCommon.TemplateContentType)(0),      // 45: farm.nurture.core.contracts.common.TemplateContentType
	(GoCommon.Status)(0),                   // 46: farm.nurture.core.contracts.common.Status
}
var file_CommunicationEngine_communication_engine_proto_depIdxs = []int32{
	4,  // 0: farm.nurture.core.contracts.ce.CommunicationEvent.placeholder:type_name -> farm.nurture.core.contracts.ce.Placeholder
	24, // 1: farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor:type_name -> farm.nurture.core.contracts.common.ActorID
	25, // 2: farm.nurture.core.contracts.ce.CommunicationEvent.expiry:type_name -> google.protobuf.Timestamp
	25, // 3: farm.nurture.core.contracts.ce.CommunicationEvent.send_after:type_name -> google.protobuf.Timestamp
	26, // 4: farm.nurture.core.contracts.ce.CommunicationEvent.channel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	4,  // 5: farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata:type_name -> farm.nurture.core.contracts.ce.Placeholder
	7,  // 6: farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details:type_name -> farm.nurture.core.contracts.ce.ActorDetails
	3,  // 7: farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes:type_name -> farm.nurture.core.contracts.ce.CommunicationChannelAttributes
	27, // 8: farm.nurture.core.contracts.ce.CommunicationEvent.tenant:type_name -> farm.nurture.core.contracts.common.Tenant
	1,  // 9: farm.nurture.core.contracts.ce.CommunicationEvent.media:type_name -> farm.nurture.core.contracts.ce.Media
	28, // 10: farm.nurture.core.contracts.ce.CommunicationEvent.vendor:type_name -> farm.nurture.core.contracts.common.CommunicationVendor
	29, // 11: farm.nurture.core.contracts.ce.Media.media_type:type_name -> farm.nurture.core.contracts.common.MediaType
	30, // 12: farm.nurture.core.contracts.ce.Media.media_access_type:type_name -> farm.nurture.core.contracts.common.MediaAccessType
	0,  // 13: farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events:type_name -> farm.nurture.core.contracts.ce.CommunicationEvent
	31, // 14: farm.nurture.core.contracts.ce.CommunicationChannelAttributes.push_notification_type:type_name -> farm.nurture.core.contracts.common.PushNotificationType
	6,  // 15: farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses:type_name -> farm.nurture.core.contracts.ce.CommunicationResponse
	32, // 16: farm.nurture.core.contracts.ce.ActorDetails.language_code:type_name -> farm.nurture.core.contracts.common.LanguageCode
	33, // 17: farm.nurture.core.contracts.ce.ActorDetails.app_id:type_name -> farm.nurture.core.contracts.common.AppID
	34, // 18: farm.nurture.core.contracts.ce.ActorDetails.app_type:type_name -> farm.nurture.core.contracts.common.AppType
	32, // 19: farm.nurture.core.contracts.ce.ActorDetails.secondaryLanguage_code:type_name -> farm.nurture.core.contracts.common.LanguageCode
	35, // 20: farm.nurture.core.contracts.ce.OptInRequest.request_headers:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	24, // 21: farm.nurture.core.contracts.ce.OptInRequest.actor:type_name -> farm.nurture.core.contracts.common.ActorID
	36, // 22: farm.nurture.core.contracts.ce.OptInRequest.sourceSystem:type_name -> farm.nurture.core.contracts.common.SourceSystem
	37, // 23: farm.nurture.core.contracts.ce.OptInRequest.nameSpace:type_name -> farm.nurture.core.contracts.common.NameSpace
	38, // 24: farm.nurture.core.contracts.ce.OptInRespone.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 25: farm.nurture.core.contracts.ce.OptInRespone.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	40, // 26: farm.nurture.core.contracts.ce.OptInRespone.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	35, // 27: farm.nurture.core.contracts.ce.OptOutRequest.request_headers:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	24, // 28: farm.nurture.core.contracts.ce.OptOutRequest.actor:type_name -> farm.nurture.core.contracts.common.ActorID
	37, // 29: farm.nurture.core.contracts.ce.OptOutRequest.nameSpace:type_name -> farm.nurture.core.contracts.common.NameSpace
	38, // 30: farm.nurture.core.contracts.ce.OptOutResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 31: farm.nurture.core.contracts.ce.OptOutResponse.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	35, // 32: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	25, // 33: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time:type_name -> google.protobuf.Timestamp
	25, // 34: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time:type_name -> google.protobuf.Timestamp
	26, // 35: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	41, // 36: farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.responseOrderType:type_name -> farm.nurture.core.contracts.common.ResponseOrderType
	38, // 37: farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 38: farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	40, // 39: farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	14, // 40: farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements:type_name -> farm.nurture.core.contracts.ce.MessageAcknowledgement
	24, // 41: farm.nurture.core.contracts.ce.MessageAcknowledgement.actor:type_name -> farm.nurture.core.contracts.common.ActorID
	26, // 42: farm.nurture.core.contracts.ce.MessageAcknowledgement.channel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	42, // 43: farm.nurture.core.contracts.ce.MessageAcknowledgement.language:type_name -> farm.nurture.core.contracts.common.Language
	43, // 44: farm.nurture.core.contracts.ce.MessageAcknowledgement.state:type_name -> farm.nurture.core.contracts.common.CommunicationState
	4,  // 45: farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders:type_name -> farm.nurture.core.contracts.ce.Placeholder
	40, // 46: farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes:type_name -> farm.nurture.core.contracts.common.Attribs
	25, // 47: farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time:type_name -> google.protobuf.Timestamp
	25, // 48: farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time:type_name -> google.protobuf.Timestamp
	44, // 49: farm.nurture.core.contracts.ce.MessageAcknowledgement.contact_type:type_name -> farm.nurture.core.contracts.common.ContactType
	25, // 50: farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at:type_name -> google.protobuf.Timestamp
	25, // 51: farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at:type_name -> google.protobuf.Timestamp
	42, // 52: farm.nurture.core.contracts.ce.Template.language:type_name -> farm.nurture.core.contracts.common.Language
	45, // 53: farm.nurture.core.contracts.ce.Template.content_type:type_name -> farm.nurture.core.contracts.common.TemplateContentType
	25, // 54: farm.nurture.core.contracts.ce.Template.created_at:type_name -> google.protobuf.Timestamp
	25, // 55: farm.nurture.core.contracts.ce.Template.updated_at:type_name -> google.protobuf.Timestamp
	25, // 56: farm.nurture.core.contracts.ce.Template.deleted_at:type_name -> google.protobuf.Timestamp
	40, // 57: farm.nurture.core.contracts.ce.Template.attributes:type_name -> farm.nurture.core.contracts.common.Attribs
	40, // 58: farm.nurture.core.contracts.ce.Template.meta_data:type_name -> farm.nurture.core.contracts.common.Attribs
	32, // 59: farm.nurture.core.contracts.ce.AddTemplateRequest.language_code:type_name -> farm.nurture.core.contracts.common.LanguageCode
	26, // 60: farm.nurture.core.contracts.ce.AddTemplateRequest.channel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	45, // 61: farm.nurture.core.contracts.ce.AddTemplateRequest.templateContentType:type_name -> farm.nurture.core.contracts.common.TemplateContentType
	40, // 62: farm.nurture.core.contracts.ce.AddTemplateRequest.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	40, // 63: farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data:type_name -> farm.nurture.core.contracts.common.Attribs
	38, // 64: farm.nurture.core.contracts.ce.AddTemplateResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 65: farm.nurture.core.contracts.ce.AddTemplateResponse.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	40, // 66: farm.nurture.core.contracts.ce.AddTemplateResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	21, // 67: farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response:type_name -> farm.nurture.core.contracts.ce.VendorResponse
	40, // 68: farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	32, // 69: farm.nurture.core.contracts.ce.TemplateUpdateRequest.language_code:type_name -> farm.nurture.core.contracts.common.LanguageCode
	40, // 70: farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data:type_name -> farm.nurture.core.contracts.common.Attribs
	38, // 71: farm.nurture.core.contracts.ce.GetAllTemplateResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 72: farm.nurture.core.contracts.ce.GetAllTemplateResponse.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	15, // 73: farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates:type_name -> farm.nurture.core.contracts.ce.Template
	35, // 74: farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	37, // 75: farm.nurture.core.contracts.ce.GetAllTemplateRequest.namespace:type_name -> farm.nurture.core.contracts.common.NameSpace
	46, // 76: farm.nurture.core.contracts.ce.GetAllTemplateRequest.status:type_name -> farm.nurture.core.contracts.common.Status
	38, // 77: farm.nurture.core.contracts.ce.VendorResponse.status:type_name -> farm.nurture.core.contracts.common.ResponseStatus
	39, // 78: farm.nurture.core.contracts.ce.VendorResponse.status_code:type_name -> farm.nurture.core.contracts.common.ResponseStatusCode
	21, // 79: farm.nurture.core.contracts.ce.ActivationResponse.vendors_response:type_name -> farm.nurture.core.contracts.ce.VendorResponse
	26, // 80: farm.nurture.core.contracts.ce.ActivationRequest.channel:type_name -> farm.nurture.core.contracts.common.CommunicationChannel
	1,  // 81: farm.nurture.core.contracts.ce.ActivationRequest.media:type_name -> farm.nurture.core.contracts.ce.Media
	4,  // 82: farm.nurture.core.contracts.ce.ActivationRequest.placeholders:type_name -> farm.nurture.core.contracts.ce.Placeholder
	24, // 83: farm.nurture.core.contracts.ce.ActivationRequest.actor:type_name -> farm.nurture.core.contracts.common.ActorID
	32, // 84: farm.nurture.core.contracts.ce.ActivationRequest.language_code:type_name -> farm.nurture.core.contracts.common.LanguageCode
	0,  // 85: farm.nurture.core.contracts.ce.CommunicationEngine.sendCommunication:input_type -> farm.nurture.core.contracts.ce.CommunicationEvent
	2,  // 86: farm.nurture.core.contracts.ce.CommunicationEngine.sendBulkCommunication:input_type -> farm.nurture.core.contracts.ce.BulkCommunicationEvent
	8,  // 87: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.optInUser:input_type -> farm.nurture.core.contracts.ce.OptInRequest
	12, // 88: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.searchMessageAcknowledgements:input_type -> farm.nurture.core.contracts.ce.MessageAcknowledgementRequest
	16, // 89: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.addTemplate:input_type -> farm.nurture.core.contracts.ce.AddTemplateRequest
	10, // 90: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.optOutUser:input_type -> farm.nurture.core.contracts.ce.OptOutRequest
	20, // 91: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.getAllTemplate:input_type -> farm.nurture.core.contracts.ce.GetAllTemplateRequest
	18, // 92: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.updateTemplate:input_type -> farm.nurture.core.contracts.ce.TemplateUpdateRequest
	23, // 93: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.activateTemplate:input_type -> farm.nurture.core.contracts.ce.ActivationRequest
	6,  // 94: farm.nurture.core.contracts.ce.CommunicationEngine.sendCommunication:output_type -> farm.nurture.core.contracts.ce.CommunicationResponse
	5,  // 95: farm.nurture.core.contracts.ce.CommunicationEngine.sendBulkCommunication:output_type -> farm.nurture.core.contracts.ce.BulkCommunicationResponse
	9,  // 96: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.optInUser:output_type -> farm.nurture.core.contracts.ce.OptInRespone
	13, // 97: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.searchMessageAcknowledgements:output_type -> farm.nurture.core.contracts.ce.MessageAcknowledgementResponse
	17, // 98: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.addTemplate:output_type -> farm.nurture.core.contracts.ce.AddTemplateResponse
	11, // 99: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.optOutUser:output_type -> farm.nurture.core.contracts.ce.OptOutResponse
	19, // 100: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.getAllTemplate:output_type -> farm.nurture.core.contracts.ce.GetAllTemplateResponse
	17, // 101: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.updateTemplate:output_type -> farm.nurture.core.contracts.ce.AddTemplateResponse
	22, // 102: farm.nurture.core.contracts.ce.CommunicationEnginePlatform.activateTemplate:output_type -> farm.nurture.core.contracts.ce.ActivationResponse
	94, // [94:103] is the sub-list for method output_type
	85, // [85:94] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_CommunicationEngine_communication_engine_proto_init() }
func file_CommunicationEngine_communication_engine_proto_init() {
	if File_CommunicationEngine_communication_engine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_CommunicationEngine_communication_engine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCommunicationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationChannelAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Placeholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCommunicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptInRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAcknowledgementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAcknowledgementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAcknowledgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommunicationEngine_communication_engine_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CommunicationEngine_communication_engine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_CommunicationEngine_communication_engine_proto_goTypes,
		DependencyIndexes: file_CommunicationEngine_communication_engine_proto_depIdxs,
		MessageInfos:      file_CommunicationEngine_communication_engine_proto_msgTypes,
	}.Build()
	File_CommunicationEngine_communication_engine_proto = out.File
	file_CommunicationEngine_communication_engine_proto_rawDesc = nil
	file_CommunicationEngine_communication_engine_proto_goTypes = nil
	file_CommunicationEngine_communication_engine_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommunicationEngineClient is the client API for CommunicationEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommunicationEngineClient interface {
	SendCommunication(ctx context.Context, in *CommunicationEvent, opts ...grpc.CallOption) (*CommunicationResponse, error)
	SendBulkCommunication(ctx context.Context, in *BulkCommunicationEvent, opts ...grpc.CallOption) (*BulkCommunicationResponse, error)
}

type communicationEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationEngineClient(cc grpc.ClientConnInterface) CommunicationEngineClient {
	return &communicationEngineClient{cc}
}

func (c *communicationEngineClient) SendCommunication(ctx context.Context, in *CommunicationEvent, opts ...grpc.CallOption) (*CommunicationResponse, error) {
	out := new(CommunicationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEngine/sendCommunication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEngineClient) SendBulkCommunication(ctx context.Context, in *BulkCommunicationEvent, opts ...grpc.CallOption) (*BulkCommunicationResponse, error) {
	out := new(BulkCommunicationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEngine/sendBulkCommunication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationEngineServer is the server API for CommunicationEngine service.
type CommunicationEngineServer interface {
	SendCommunication(context.Context, *CommunicationEvent) (*CommunicationResponse, error)
	SendBulkCommunication(context.Context, *BulkCommunicationEvent) (*BulkCommunicationResponse, error)
}

// UnimplementedCommunicationEngineServer can be embedded to have forward compatible implementations.
type UnimplementedCommunicationEngineServer struct {
}

func (*UnimplementedCommunicationEngineServer) SendCommunication(context.Context, *CommunicationEvent) (*CommunicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommunication not implemented")
}
func (*UnimplementedCommunicationEngineServer) SendBulkCommunication(context.Context, *BulkCommunicationEvent) (*BulkCommunicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkCommunication not implemented")
}

func RegisterCommunicationEngineServer(s *grpc.Server, srv CommunicationEngineServer) {
	s.RegisterService(&_CommunicationEngine_serviceDesc, srv)
}

func _CommunicationEngine_SendCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunicationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEngineServer).SendCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEngine/SendCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEngineServer).SendCommunication(ctx, req.(*CommunicationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEngine_SendBulkCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCommunicationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEngineServer).SendBulkCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEngine/SendBulkCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEngineServer).SendBulkCommunication(ctx, req.(*BulkCommunicationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommunicationEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.core.contracts.ce.CommunicationEngine",
	HandlerType: (*CommunicationEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendCommunication",
			Handler:    _CommunicationEngine_SendCommunication_Handler,
		},
		{
			MethodName: "sendBulkCommunication",
			Handler:    _CommunicationEngine_SendBulkCommunication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CommunicationEngine/communication_engine.proto",
}

// CommunicationEnginePlatformClient is the client API for CommunicationEnginePlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommunicationEnginePlatformClient interface {
	OptInUser(ctx context.Context, in *OptInRequest, opts ...grpc.CallOption) (*OptInRespone, error)
	SearchMessageAcknowledgements(ctx context.Context, in *MessageAcknowledgementRequest, opts ...grpc.CallOption) (*MessageAcknowledgementResponse, error)
	AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*AddTemplateResponse, error)
	OptOutUser(ctx context.Context, in *OptOutRequest, opts ...grpc.CallOption) (*OptOutResponse, error)
	GetAllTemplate(ctx context.Context, in *GetAllTemplateRequest, opts ...grpc.CallOption) (*GetAllTemplateResponse, error)
	UpdateTemplate(ctx context.Context, in *TemplateUpdateRequest, opts ...grpc.CallOption) (*AddTemplateResponse, error)
	ActivateTemplate(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationResponse, error)
}

type communicationEnginePlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationEnginePlatformClient(cc grpc.ClientConnInterface) CommunicationEnginePlatformClient {
	return &communicationEnginePlatformClient{cc}
}

func (c *communicationEnginePlatformClient) OptInUser(ctx context.Context, in *OptInRequest, opts ...grpc.CallOption) (*OptInRespone, error) {
	out := new(OptInRespone)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/optInUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) SearchMessageAcknowledgements(ctx context.Context, in *MessageAcknowledgementRequest, opts ...grpc.CallOption) (*MessageAcknowledgementResponse, error) {
	out := new(MessageAcknowledgementResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/searchMessageAcknowledgements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*AddTemplateResponse, error) {
	out := new(AddTemplateResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/addTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) OptOutUser(ctx context.Context, in *OptOutRequest, opts ...grpc.CallOption) (*OptOutResponse, error) {
	out := new(OptOutResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/optOutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) GetAllTemplate(ctx context.Context, in *GetAllTemplateRequest, opts ...grpc.CallOption) (*GetAllTemplateResponse, error) {
	out := new(GetAllTemplateResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/getAllTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) UpdateTemplate(ctx context.Context, in *TemplateUpdateRequest, opts ...grpc.CallOption) (*AddTemplateResponse, error) {
	out := new(AddTemplateResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/updateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationEnginePlatformClient) ActivateTemplate(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationResponse, error) {
	out := new(ActivationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/activateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationEnginePlatformServer is the server API for CommunicationEnginePlatform service.
type CommunicationEnginePlatformServer interface {
	OptInUser(context.Context, *OptInRequest) (*OptInRespone, error)
	SearchMessageAcknowledgements(context.Context, *MessageAcknowledgementRequest) (*MessageAcknowledgementResponse, error)
	AddTemplate(context.Context, *AddTemplateRequest) (*AddTemplateResponse, error)
	OptOutUser(context.Context, *OptOutRequest) (*OptOutResponse, error)
	GetAllTemplate(context.Context, *GetAllTemplateRequest) (*GetAllTemplateResponse, error)
	UpdateTemplate(context.Context, *TemplateUpdateRequest) (*AddTemplateResponse, error)
	ActivateTemplate(context.Context, *ActivationRequest) (*ActivationResponse, error)
}

// UnimplementedCommunicationEnginePlatformServer can be embedded to have forward compatible implementations.
type UnimplementedCommunicationEnginePlatformServer struct {
}

func (*UnimplementedCommunicationEnginePlatformServer) OptInUser(context.Context, *OptInRequest) (*OptInRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInUser not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) SearchMessageAcknowledgements(context.Context, *MessageAcknowledgementRequest) (*MessageAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessageAcknowledgements not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) AddTemplate(context.Context, *AddTemplateRequest) (*AddTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplate not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) OptOutUser(context.Context, *OptOutRequest) (*OptOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptOutUser not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) GetAllTemplate(context.Context, *GetAllTemplateRequest) (*GetAllTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTemplate not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) UpdateTemplate(context.Context, *TemplateUpdateRequest) (*AddTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedCommunicationEnginePlatformServer) ActivateTemplate(context.Context, *ActivationRequest) (*ActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateTemplate not implemented")
}

func RegisterCommunicationEnginePlatformServer(s *grpc.Server, srv CommunicationEnginePlatformServer) {
	s.RegisterService(&_CommunicationEnginePlatform_serviceDesc, srv)
}

func _CommunicationEnginePlatform_OptInUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).OptInUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/OptInUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).OptInUser(ctx, req.(*OptInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_SearchMessageAcknowledgements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).SearchMessageAcknowledgements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/SearchMessageAcknowledgements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).SearchMessageAcknowledgements(ctx, req.(*MessageAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_AddTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).AddTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/AddTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).AddTemplate(ctx, req.(*AddTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_OptOutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).OptOutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/OptOutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).OptOutUser(ctx, req.(*OptOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_GetAllTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).GetAllTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/GetAllTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).GetAllTemplate(ctx, req.(*GetAllTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).UpdateTemplate(ctx, req.(*TemplateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationEnginePlatform_ActivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationEnginePlatformServer).ActivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.ce.CommunicationEnginePlatform/ActivateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationEnginePlatformServer).ActivateTemplate(ctx, req.(*ActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommunicationEnginePlatform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.core.contracts.ce.CommunicationEnginePlatform",
	HandlerType: (*CommunicationEnginePlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "optInUser",
			Handler:    _CommunicationEnginePlatform_OptInUser_Handler,
		},
		{
			MethodName: "searchMessageAcknowledgements",
			Handler:    _CommunicationEnginePlatform_SearchMessageAcknowledgements_Handler,
		},
		{
			MethodName: "addTemplate",
			Handler:    _CommunicationEnginePlatform_AddTemplate_Handler,
		},
		{
			MethodName: "optOutUser",
			Handler:    _CommunicationEnginePlatform_OptOutUser_Handler,
		},
		{
			MethodName: "getAllTemplate",
			Handler:    _CommunicationEnginePlatform_GetAllTemplate_Handler,
		},
		{
			MethodName: "updateTemplate",
			Handler:    _CommunicationEnginePlatform_UpdateTemplate_Handler,
		},
		{
			MethodName: "activateTemplate",
			Handler:    _CommunicationEnginePlatform_ActivateTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CommunicationEngine/communication_engine.proto",
}
