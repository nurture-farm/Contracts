// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommunicationEngine/communication_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommunicationEngine_2fcommunication_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommunicationEngine_2fcommunication_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/enums.pb.h"
#include "Common/entities.pb.h"
#include "Common/headers.pb.h"
#include "Common/loyalty_enums.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace ce {
class ActivationRequest;
class ActivationRequestDefaultTypeInternal;
extern ActivationRequestDefaultTypeInternal _ActivationRequest_default_instance_;
class ActivationResponse;
class ActivationResponseDefaultTypeInternal;
extern ActivationResponseDefaultTypeInternal _ActivationResponse_default_instance_;
class ActorDetails;
class ActorDetailsDefaultTypeInternal;
extern ActorDetailsDefaultTypeInternal _ActorDetails_default_instance_;
class AddTemplateRequest;
class AddTemplateRequestDefaultTypeInternal;
extern AddTemplateRequestDefaultTypeInternal _AddTemplateRequest_default_instance_;
class AddTemplateResponse;
class AddTemplateResponseDefaultTypeInternal;
extern AddTemplateResponseDefaultTypeInternal _AddTemplateResponse_default_instance_;
class BulkCommunicationEvent;
class BulkCommunicationEventDefaultTypeInternal;
extern BulkCommunicationEventDefaultTypeInternal _BulkCommunicationEvent_default_instance_;
class BulkCommunicationResponse;
class BulkCommunicationResponseDefaultTypeInternal;
extern BulkCommunicationResponseDefaultTypeInternal _BulkCommunicationResponse_default_instance_;
class CommunicationChannelAttributes;
class CommunicationChannelAttributesDefaultTypeInternal;
extern CommunicationChannelAttributesDefaultTypeInternal _CommunicationChannelAttributes_default_instance_;
class CommunicationEvent;
class CommunicationEventDefaultTypeInternal;
extern CommunicationEventDefaultTypeInternal _CommunicationEvent_default_instance_;
class CommunicationResponse;
class CommunicationResponseDefaultTypeInternal;
extern CommunicationResponseDefaultTypeInternal _CommunicationResponse_default_instance_;
class GetAllTemplateRequest;
class GetAllTemplateRequestDefaultTypeInternal;
extern GetAllTemplateRequestDefaultTypeInternal _GetAllTemplateRequest_default_instance_;
class GetAllTemplateResponse;
class GetAllTemplateResponseDefaultTypeInternal;
extern GetAllTemplateResponseDefaultTypeInternal _GetAllTemplateResponse_default_instance_;
class Media;
class MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
class MessageAcknowledgement;
class MessageAcknowledgementDefaultTypeInternal;
extern MessageAcknowledgementDefaultTypeInternal _MessageAcknowledgement_default_instance_;
class MessageAcknowledgementRequest;
class MessageAcknowledgementRequestDefaultTypeInternal;
extern MessageAcknowledgementRequestDefaultTypeInternal _MessageAcknowledgementRequest_default_instance_;
class MessageAcknowledgementResponse;
class MessageAcknowledgementResponseDefaultTypeInternal;
extern MessageAcknowledgementResponseDefaultTypeInternal _MessageAcknowledgementResponse_default_instance_;
class OptInRequest;
class OptInRequestDefaultTypeInternal;
extern OptInRequestDefaultTypeInternal _OptInRequest_default_instance_;
class OptInRespone;
class OptInResponeDefaultTypeInternal;
extern OptInResponeDefaultTypeInternal _OptInRespone_default_instance_;
class OptOutRequest;
class OptOutRequestDefaultTypeInternal;
extern OptOutRequestDefaultTypeInternal _OptOutRequest_default_instance_;
class OptOutResponse;
class OptOutResponseDefaultTypeInternal;
extern OptOutResponseDefaultTypeInternal _OptOutResponse_default_instance_;
class Placeholder;
class PlaceholderDefaultTypeInternal;
extern PlaceholderDefaultTypeInternal _Placeholder_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
class TemplateUpdateRequest;
class TemplateUpdateRequestDefaultTypeInternal;
extern TemplateUpdateRequestDefaultTypeInternal _TemplateUpdateRequest_default_instance_;
class VendorResponse;
class VendorResponseDefaultTypeInternal;
extern VendorResponseDefaultTypeInternal _VendorResponse_default_instance_;
}  // namespace ce
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::core::contracts::ce::ActivationRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::ActivationRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::ActivationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::ActivationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::ActorDetails* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::ActorDetails>(Arena*);
template<> ::farm::nurture::core::contracts::ce::AddTemplateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::AddTemplateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::AddTemplateResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::AddTemplateResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::BulkCommunicationEvent* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::BulkCommunicationEvent>(Arena*);
template<> ::farm::nurture::core::contracts::ce::BulkCommunicationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::BulkCommunicationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationChannelAttributes>(Arena*);
template<> ::farm::nurture::core::contracts::ce::CommunicationEvent* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationEvent>(Arena*);
template<> ::farm::nurture::core::contracts::ce::CommunicationResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::GetAllTemplateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::GetAllTemplateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::GetAllTemplateResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::GetAllTemplateResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::Media* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::Media>(Arena*);
template<> ::farm::nurture::core::contracts::ce::MessageAcknowledgement* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::MessageAcknowledgement>(Arena*);
template<> ::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::OptInRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::OptInRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::OptInRespone* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::OptInRespone>(Arena*);
template<> ::farm::nurture::core::contracts::ce::OptOutRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::OptOutRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::OptOutResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::OptOutResponse>(Arena*);
template<> ::farm::nurture::core::contracts::ce::Placeholder* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::Placeholder>(Arena*);
template<> ::farm::nurture::core::contracts::ce::Template* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::Template>(Arena*);
template<> ::farm::nurture::core::contracts::ce::TemplateUpdateRequest* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::TemplateUpdateRequest>(Arena*);
template<> ::farm::nurture::core::contracts::ce::VendorResponse* Arena::CreateMaybeMessage<::farm::nurture::core::contracts::ce::VendorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace ce {

// ===================================================================

class CommunicationEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.CommunicationEvent) */ {
 public:
  inline CommunicationEvent() : CommunicationEvent(nullptr) {}
  virtual ~CommunicationEvent();

  CommunicationEvent(const CommunicationEvent& from);
  CommunicationEvent(CommunicationEvent&& from) noexcept
    : CommunicationEvent() {
    *this = ::std::move(from);
  }

  inline CommunicationEvent& operator=(const CommunicationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationEvent& operator=(CommunicationEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationEvent& default_instance();

  static inline const CommunicationEvent* internal_default_instance() {
    return reinterpret_cast<const CommunicationEvent*>(
               &_CommunicationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommunicationEvent& a, CommunicationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationEvent* New() const final {
    return CreateMaybeMessage<CommunicationEvent>(nullptr);
  }

  CommunicationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationEvent& from);
  void MergeFrom(const CommunicationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.CommunicationEvent";
  }
  protected:
  explicit CommunicationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholderFieldNumber = 3,
    kChannelFieldNumber = 9,
    kContentMetadataFieldNumber = 11,
    kContentTitleFieldNumber = 1,
    kTemplateNameFieldNumber = 2,
    kClientIdFieldNumber = 5,
    kBusinessFlowFieldNumber = 6,
    kReferenceIdFieldNumber = 10,
    kParentReferenceIdFieldNumber = 16,
    kCampaignNameFieldNumber = 17,
    kReceiverActorFieldNumber = 4,
    kExpiryFieldNumber = 7,
    kSendAfterFieldNumber = 8,
    kReceiverActorDetailsFieldNumber = 12,
    kChannelAttributesFieldNumber = 13,
    kMediaFieldNumber = 15,
    kTenantFieldNumber = 14,
    kVendorFieldNumber = 18,
  };
  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholder = 3;
  int placeholder_size() const;
  private:
  int _internal_placeholder_size() const;
  public:
  void clear_placeholder();
  ::farm::nurture::core::contracts::ce::Placeholder* mutable_placeholder(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
      mutable_placeholder();
  private:
  const ::farm::nurture::core::contracts::ce::Placeholder& _internal_placeholder(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* _internal_add_placeholder();
  public:
  const ::farm::nurture::core::contracts::ce::Placeholder& placeholder(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* add_placeholder();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
      placeholder() const;

  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channel = 9;
  int channel_size() const;
  private:
  int _internal_channel_size() const;
  public:
  void clear_channel();
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_channel(int index) const;
  void _internal_add_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_channel();
  public:
  ::farm::nurture::core::contracts::common::CommunicationChannel channel(int index) const;
  void set_channel(int index, ::farm::nurture::core::contracts::common::CommunicationChannel value);
  void add_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& channel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_channel();

  // repeated .farm.nurture.core.contracts.ce.Placeholder content_metadata = 11;
  int content_metadata_size() const;
  private:
  int _internal_content_metadata_size() const;
  public:
  void clear_content_metadata();
  ::farm::nurture::core::contracts::ce::Placeholder* mutable_content_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
      mutable_content_metadata();
  private:
  const ::farm::nurture::core::contracts::ce::Placeholder& _internal_content_metadata(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* _internal_add_content_metadata();
  public:
  const ::farm::nurture::core::contracts::ce::Placeholder& content_metadata(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* add_content_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
      content_metadata() const;

  // string content_title = 1;
  void clear_content_title();
  const std::string& content_title() const;
  void set_content_title(const std::string& value);
  void set_content_title(std::string&& value);
  void set_content_title(const char* value);
  void set_content_title(const char* value, size_t size);
  std::string* mutable_content_title();
  std::string* release_content_title();
  void set_allocated_content_title(std::string* content_title);
  private:
  const std::string& _internal_content_title() const;
  void _internal_set_content_title(const std::string& value);
  std::string* _internal_mutable_content_title();
  public:

  // string template_name = 2;
  void clear_template_name();
  const std::string& template_name() const;
  void set_template_name(const std::string& value);
  void set_template_name(std::string&& value);
  void set_template_name(const char* value);
  void set_template_name(const char* value, size_t size);
  std::string* mutable_template_name();
  std::string* release_template_name();
  void set_allocated_template_name(std::string* template_name);
  private:
  const std::string& _internal_template_name() const;
  void _internal_set_template_name(const std::string& value);
  std::string* _internal_mutable_template_name();
  public:

  // string client_id = 5;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string business_flow = 6;
  void clear_business_flow();
  const std::string& business_flow() const;
  void set_business_flow(const std::string& value);
  void set_business_flow(std::string&& value);
  void set_business_flow(const char* value);
  void set_business_flow(const char* value, size_t size);
  std::string* mutable_business_flow();
  std::string* release_business_flow();
  void set_allocated_business_flow(std::string* business_flow);
  private:
  const std::string& _internal_business_flow() const;
  void _internal_set_business_flow(const std::string& value);
  std::string* _internal_mutable_business_flow();
  public:

  // string reference_id = 10;
  void clear_reference_id();
  const std::string& reference_id() const;
  void set_reference_id(const std::string& value);
  void set_reference_id(std::string&& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  std::string* mutable_reference_id();
  std::string* release_reference_id();
  void set_allocated_reference_id(std::string* reference_id);
  private:
  const std::string& _internal_reference_id() const;
  void _internal_set_reference_id(const std::string& value);
  std::string* _internal_mutable_reference_id();
  public:

  // string parent_reference_id = 16;
  void clear_parent_reference_id();
  const std::string& parent_reference_id() const;
  void set_parent_reference_id(const std::string& value);
  void set_parent_reference_id(std::string&& value);
  void set_parent_reference_id(const char* value);
  void set_parent_reference_id(const char* value, size_t size);
  std::string* mutable_parent_reference_id();
  std::string* release_parent_reference_id();
  void set_allocated_parent_reference_id(std::string* parent_reference_id);
  private:
  const std::string& _internal_parent_reference_id() const;
  void _internal_set_parent_reference_id(const std::string& value);
  std::string* _internal_mutable_parent_reference_id();
  public:

  // string campaign_name = 17;
  void clear_campaign_name();
  const std::string& campaign_name() const;
  void set_campaign_name(const std::string& value);
  void set_campaign_name(std::string&& value);
  void set_campaign_name(const char* value);
  void set_campaign_name(const char* value, size_t size);
  std::string* mutable_campaign_name();
  std::string* release_campaign_name();
  void set_allocated_campaign_name(std::string* campaign_name);
  private:
  const std::string& _internal_campaign_name() const;
  void _internal_set_campaign_name(const std::string& value);
  std::string* _internal_mutable_campaign_name();
  public:

  // .farm.nurture.core.contracts.common.ActorID receiver_actor = 4;
  bool has_receiver_actor() const;
  private:
  bool _internal_has_receiver_actor() const;
  public:
  void clear_receiver_actor();
  const ::farm::nurture::core::contracts::common::ActorID& receiver_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_receiver_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_receiver_actor();
  void set_allocated_receiver_actor(::farm::nurture::core::contracts::common::ActorID* receiver_actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_receiver_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_receiver_actor();
  public:
  void unsafe_arena_set_allocated_receiver_actor(
      ::farm::nurture::core::contracts::common::ActorID* receiver_actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_receiver_actor();

  // .google.protobuf.Timestamp expiry = 7;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiry() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry();

  // .google.protobuf.Timestamp send_after = 8;
  bool has_send_after() const;
  private:
  bool _internal_has_send_after() const;
  public:
  void clear_send_after();
  const PROTOBUF_NAMESPACE_ID::Timestamp& send_after() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_send_after();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_send_after();
  void set_allocated_send_after(PROTOBUF_NAMESPACE_ID::Timestamp* send_after);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_send_after() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_send_after();
  public:
  void unsafe_arena_set_allocated_send_after(
      PROTOBUF_NAMESPACE_ID::Timestamp* send_after);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_send_after();

  // .farm.nurture.core.contracts.ce.ActorDetails receiver_actor_details = 12;
  bool has_receiver_actor_details() const;
  private:
  bool _internal_has_receiver_actor_details() const;
  public:
  void clear_receiver_actor_details();
  const ::farm::nurture::core::contracts::ce::ActorDetails& receiver_actor_details() const;
  ::farm::nurture::core::contracts::ce::ActorDetails* release_receiver_actor_details();
  ::farm::nurture::core::contracts::ce::ActorDetails* mutable_receiver_actor_details();
  void set_allocated_receiver_actor_details(::farm::nurture::core::contracts::ce::ActorDetails* receiver_actor_details);
  private:
  const ::farm::nurture::core::contracts::ce::ActorDetails& _internal_receiver_actor_details() const;
  ::farm::nurture::core::contracts::ce::ActorDetails* _internal_mutable_receiver_actor_details();
  public:
  void unsafe_arena_set_allocated_receiver_actor_details(
      ::farm::nurture::core::contracts::ce::ActorDetails* receiver_actor_details);
  ::farm::nurture::core::contracts::ce::ActorDetails* unsafe_arena_release_receiver_actor_details();

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 13;
  bool has_channel_attributes() const;
  private:
  bool _internal_has_channel_attributes() const;
  public:
  void clear_channel_attributes();
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* release_channel_attributes();
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* mutable_channel_attributes();
  void set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  private:
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& _internal_channel_attributes() const;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* _internal_mutable_channel_attributes();
  public:
  void unsafe_arena_set_allocated_channel_attributes(
      ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes);
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* unsafe_arena_release_channel_attributes();

  // .farm.nurture.core.contracts.ce.Media media = 15;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::farm::nurture::core::contracts::ce::Media& media() const;
  ::farm::nurture::core::contracts::ce::Media* release_media();
  ::farm::nurture::core::contracts::ce::Media* mutable_media();
  void set_allocated_media(::farm::nurture::core::contracts::ce::Media* media);
  private:
  const ::farm::nurture::core::contracts::ce::Media& _internal_media() const;
  ::farm::nurture::core::contracts::ce::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::farm::nurture::core::contracts::ce::Media* media);
  ::farm::nurture::core::contracts::ce::Media* unsafe_arena_release_media();

  // .farm.nurture.core.contracts.common.Tenant tenant = 14;
  void clear_tenant();
  ::farm::nurture::core::contracts::common::Tenant tenant() const;
  void set_tenant(::farm::nurture::core::contracts::common::Tenant value);
  private:
  ::farm::nurture::core::contracts::common::Tenant _internal_tenant() const;
  void _internal_set_tenant(::farm::nurture::core::contracts::common::Tenant value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationVendor vendor = 18;
  void clear_vendor();
  ::farm::nurture::core::contracts::common::CommunicationVendor vendor() const;
  void set_vendor(::farm::nurture::core::contracts::common::CommunicationVendor value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationVendor _internal_vendor() const;
  void _internal_set_vendor(::farm::nurture::core::contracts::common::CommunicationVendor value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.CommunicationEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder > placeholder_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> channel_;
  mutable std::atomic<int> _channel_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder > content_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_flow_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_reference_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaign_name_;
  ::farm::nurture::core::contracts::common::ActorID* receiver_actor_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiry_;
  PROTOBUF_NAMESPACE_ID::Timestamp* send_after_;
  ::farm::nurture::core::contracts::ce::ActorDetails* receiver_actor_details_;
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes_;
  ::farm::nurture::core::contracts::ce::Media* media_;
  int tenant_;
  int vendor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Media PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  virtual ~Media();

  Media(const Media& from);
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Media& default_instance();

  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }
  inline void Swap(Media* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Media* New() const final {
    return CreateMaybeMessage<Media>(nullptr);
  }

  Media* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Media& from);
  void MergeFrom(const Media& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.Media";
  }
  protected:
  explicit Media(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaInfoFieldNumber = 3,
    kDocumentNameFieldNumber = 4,
    kMsgFieldNumber = 5,
    kMediaTypeFieldNumber = 1,
    kMediaAccessTypeFieldNumber = 2,
  };
  // string media_info = 3;
  void clear_media_info();
  const std::string& media_info() const;
  void set_media_info(const std::string& value);
  void set_media_info(std::string&& value);
  void set_media_info(const char* value);
  void set_media_info(const char* value, size_t size);
  std::string* mutable_media_info();
  std::string* release_media_info();
  void set_allocated_media_info(std::string* media_info);
  private:
  const std::string& _internal_media_info() const;
  void _internal_set_media_info(const std::string& value);
  std::string* _internal_mutable_media_info();
  public:

  // string document_name = 4;
  void clear_document_name();
  const std::string& document_name() const;
  void set_document_name(const std::string& value);
  void set_document_name(std::string&& value);
  void set_document_name(const char* value);
  void set_document_name(const char* value, size_t size);
  std::string* mutable_document_name();
  std::string* release_document_name();
  void set_allocated_document_name(std::string* document_name);
  private:
  const std::string& _internal_document_name() const;
  void _internal_set_document_name(const std::string& value);
  std::string* _internal_mutable_document_name();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .farm.nurture.core.contracts.common.MediaType media_type = 1;
  void clear_media_type();
  ::farm::nurture::core::contracts::common::MediaType media_type() const;
  void set_media_type(::farm::nurture::core::contracts::common::MediaType value);
  private:
  ::farm::nurture::core::contracts::common::MediaType _internal_media_type() const;
  void _internal_set_media_type(::farm::nurture::core::contracts::common::MediaType value);
  public:

  // .farm.nurture.core.contracts.common.MediaAccessType media_access_type = 2;
  void clear_media_access_type();
  ::farm::nurture::core::contracts::common::MediaAccessType media_access_type() const;
  void set_media_access_type(::farm::nurture::core::contracts::common::MediaAccessType value);
  private:
  ::farm::nurture::core::contracts::common::MediaAccessType _internal_media_access_type() const;
  void _internal_set_media_access_type(::farm::nurture::core::contracts::common::MediaAccessType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.Media)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int media_type_;
  int media_access_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class BulkCommunicationEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.BulkCommunicationEvent) */ {
 public:
  inline BulkCommunicationEvent() : BulkCommunicationEvent(nullptr) {}
  virtual ~BulkCommunicationEvent();

  BulkCommunicationEvent(const BulkCommunicationEvent& from);
  BulkCommunicationEvent(BulkCommunicationEvent&& from) noexcept
    : BulkCommunicationEvent() {
    *this = ::std::move(from);
  }

  inline BulkCommunicationEvent& operator=(const BulkCommunicationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkCommunicationEvent& operator=(BulkCommunicationEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkCommunicationEvent& default_instance();

  static inline const BulkCommunicationEvent* internal_default_instance() {
    return reinterpret_cast<const BulkCommunicationEvent*>(
               &_BulkCommunicationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BulkCommunicationEvent& a, BulkCommunicationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkCommunicationEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkCommunicationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkCommunicationEvent* New() const final {
    return CreateMaybeMessage<BulkCommunicationEvent>(nullptr);
  }

  BulkCommunicationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkCommunicationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkCommunicationEvent& from);
  void MergeFrom(const BulkCommunicationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkCommunicationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.BulkCommunicationEvent";
  }
  protected:
  explicit BulkCommunicationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunicationEventsFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.ce.CommunicationEvent communication_events = 1;
  int communication_events_size() const;
  private:
  int _internal_communication_events_size() const;
  public:
  void clear_communication_events();
  ::farm::nurture::core::contracts::ce::CommunicationEvent* mutable_communication_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationEvent >*
      mutable_communication_events();
  private:
  const ::farm::nurture::core::contracts::ce::CommunicationEvent& _internal_communication_events(int index) const;
  ::farm::nurture::core::contracts::ce::CommunicationEvent* _internal_add_communication_events();
  public:
  const ::farm::nurture::core::contracts::ce::CommunicationEvent& communication_events(int index) const;
  ::farm::nurture::core::contracts::ce::CommunicationEvent* add_communication_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationEvent >&
      communication_events() const;

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationEvent > communication_events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class CommunicationChannelAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.CommunicationChannelAttributes) */ {
 public:
  inline CommunicationChannelAttributes() : CommunicationChannelAttributes(nullptr) {}
  virtual ~CommunicationChannelAttributes();

  CommunicationChannelAttributes(const CommunicationChannelAttributes& from);
  CommunicationChannelAttributes(CommunicationChannelAttributes&& from) noexcept
    : CommunicationChannelAttributes() {
    *this = ::std::move(from);
  }

  inline CommunicationChannelAttributes& operator=(const CommunicationChannelAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationChannelAttributes& operator=(CommunicationChannelAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationChannelAttributes& default_instance();

  static inline const CommunicationChannelAttributes* internal_default_instance() {
    return reinterpret_cast<const CommunicationChannelAttributes*>(
               &_CommunicationChannelAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommunicationChannelAttributes& a, CommunicationChannelAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationChannelAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationChannelAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationChannelAttributes* New() const final {
    return CreateMaybeMessage<CommunicationChannelAttributes>(nullptr);
  }

  CommunicationChannelAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationChannelAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationChannelAttributes& from);
  void MergeFrom(const CommunicationChannelAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationChannelAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.CommunicationChannelAttributes";
  }
  protected:
  explicit CommunicationChannelAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushNotificationTypeFieldNumber = 1,
  };
  // .farm.nurture.core.contracts.common.PushNotificationType push_notification_type = 1;
  void clear_push_notification_type();
  ::farm::nurture::core::contracts::common::PushNotificationType push_notification_type() const;
  void set_push_notification_type(::farm::nurture::core::contracts::common::PushNotificationType value);
  private:
  ::farm::nurture::core::contracts::common::PushNotificationType _internal_push_notification_type() const;
  void _internal_set_push_notification_type(::farm::nurture::core::contracts::common::PushNotificationType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int push_notification_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Placeholder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.Placeholder) */ {
 public:
  inline Placeholder() : Placeholder(nullptr) {}
  virtual ~Placeholder();

  Placeholder(const Placeholder& from);
  Placeholder(Placeholder&& from) noexcept
    : Placeholder() {
    *this = ::std::move(from);
  }

  inline Placeholder& operator=(const Placeholder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Placeholder& operator=(Placeholder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Placeholder& default_instance();

  static inline const Placeholder* internal_default_instance() {
    return reinterpret_cast<const Placeholder*>(
               &_Placeholder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Placeholder& a, Placeholder& b) {
    a.Swap(&b);
  }
  inline void Swap(Placeholder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Placeholder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Placeholder* New() const final {
    return CreateMaybeMessage<Placeholder>(nullptr);
  }

  Placeholder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Placeholder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Placeholder& from);
  void MergeFrom(const Placeholder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Placeholder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.Placeholder";
  }
  protected:
  explicit Placeholder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.Placeholder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class BulkCommunicationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.BulkCommunicationResponse) */ {
 public:
  inline BulkCommunicationResponse() : BulkCommunicationResponse(nullptr) {}
  virtual ~BulkCommunicationResponse();

  BulkCommunicationResponse(const BulkCommunicationResponse& from);
  BulkCommunicationResponse(BulkCommunicationResponse&& from) noexcept
    : BulkCommunicationResponse() {
    *this = ::std::move(from);
  }

  inline BulkCommunicationResponse& operator=(const BulkCommunicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkCommunicationResponse& operator=(BulkCommunicationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkCommunicationResponse& default_instance();

  static inline const BulkCommunicationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkCommunicationResponse*>(
               &_BulkCommunicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BulkCommunicationResponse& a, BulkCommunicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkCommunicationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkCommunicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkCommunicationResponse* New() const final {
    return CreateMaybeMessage<BulkCommunicationResponse>(nullptr);
  }

  BulkCommunicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkCommunicationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkCommunicationResponse& from);
  void MergeFrom(const BulkCommunicationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkCommunicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.BulkCommunicationResponse";
  }
  protected:
  explicit BulkCommunicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunicationResponsesFieldNumber = 1,
  };
  // repeated .farm.nurture.core.contracts.ce.CommunicationResponse communication_responses = 1;
  int communication_responses_size() const;
  private:
  int _internal_communication_responses_size() const;
  public:
  void clear_communication_responses();
  ::farm::nurture::core::contracts::ce::CommunicationResponse* mutable_communication_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationResponse >*
      mutable_communication_responses();
  private:
  const ::farm::nurture::core::contracts::ce::CommunicationResponse& _internal_communication_responses(int index) const;
  ::farm::nurture::core::contracts::ce::CommunicationResponse* _internal_add_communication_responses();
  public:
  const ::farm::nurture::core::contracts::ce::CommunicationResponse& communication_responses(int index) const;
  ::farm::nurture::core::contracts::ce::CommunicationResponse* add_communication_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationResponse >&
      communication_responses() const;

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationResponse > communication_responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class CommunicationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.CommunicationResponse) */ {
 public:
  inline CommunicationResponse() : CommunicationResponse(nullptr) {}
  virtual ~CommunicationResponse();

  CommunicationResponse(const CommunicationResponse& from);
  CommunicationResponse(CommunicationResponse&& from) noexcept
    : CommunicationResponse() {
    *this = ::std::move(from);
  }

  inline CommunicationResponse& operator=(const CommunicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationResponse& operator=(CommunicationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationResponse& default_instance();

  static inline const CommunicationResponse* internal_default_instance() {
    return reinterpret_cast<const CommunicationResponse*>(
               &_CommunicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommunicationResponse& a, CommunicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationResponse* New() const final {
    return CreateMaybeMessage<CommunicationResponse>(nullptr);
  }

  CommunicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationResponse& from);
  void MergeFrom(const CommunicationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.CommunicationResponse";
  }
  protected:
  explicit CommunicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceIdFieldNumber = 1,
  };
  // string reference_id = 1;
  void clear_reference_id();
  const std::string& reference_id() const;
  void set_reference_id(const std::string& value);
  void set_reference_id(std::string&& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  std::string* mutable_reference_id();
  std::string* release_reference_id();
  void set_allocated_reference_id(std::string* reference_id);
  private:
  const std::string& _internal_reference_id() const;
  void _internal_set_reference_id(const std::string& value);
  std::string* _internal_mutable_reference_id();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.CommunicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class ActorDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.ActorDetails) */ {
 public:
  inline ActorDetails() : ActorDetails(nullptr) {}
  virtual ~ActorDetails();

  ActorDetails(const ActorDetails& from);
  ActorDetails(ActorDetails&& from) noexcept
    : ActorDetails() {
    *this = ::std::move(from);
  }

  inline ActorDetails& operator=(const ActorDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorDetails& operator=(ActorDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorDetails& default_instance();

  static inline const ActorDetails* internal_default_instance() {
    return reinterpret_cast<const ActorDetails*>(
               &_ActorDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ActorDetails& a, ActorDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorDetails* New() const final {
    return CreateMaybeMessage<ActorDetails>(nullptr);
  }

  ActorDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorDetails& from);
  void MergeFrom(const ActorDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.ActorDetails";
  }
  protected:
  explicit ActorDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailIdFieldNumber = 1,
    kMobileNumberFieldNumber = 2,
    kFcmTokenFieldNumber = 4,
    kLanguageCodeFieldNumber = 3,
    kAppIdFieldNumber = 5,
    kAppTypeFieldNumber = 6,
    kSecondaryLanguageCodeFieldNumber = 7,
  };
  // string email_id = 1;
  void clear_email_id();
  const std::string& email_id() const;
  void set_email_id(const std::string& value);
  void set_email_id(std::string&& value);
  void set_email_id(const char* value);
  void set_email_id(const char* value, size_t size);
  std::string* mutable_email_id();
  std::string* release_email_id();
  void set_allocated_email_id(std::string* email_id);
  private:
  const std::string& _internal_email_id() const;
  void _internal_set_email_id(const std::string& value);
  std::string* _internal_mutable_email_id();
  public:

  // string mobile_number = 2;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // string fcm_token = 4;
  void clear_fcm_token();
  const std::string& fcm_token() const;
  void set_fcm_token(const std::string& value);
  void set_fcm_token(std::string&& value);
  void set_fcm_token(const char* value);
  void set_fcm_token(const char* value, size_t size);
  std::string* mutable_fcm_token();
  std::string* release_fcm_token();
  void set_allocated_fcm_token(std::string* fcm_token);
  private:
  const std::string& _internal_fcm_token() const;
  void _internal_set_fcm_token(const std::string& value);
  std::string* _internal_mutable_fcm_token();
  public:

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 3;
  void clear_language_code();
  ::farm::nurture::core::contracts::common::LanguageCode language_code() const;
  void set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // .farm.nurture.core.contracts.common.AppID app_id = 5;
  void clear_app_id();
  ::farm::nurture::core::contracts::common::AppID app_id() const;
  void set_app_id(::farm::nurture::core::contracts::common::AppID value);
  private:
  ::farm::nurture::core::contracts::common::AppID _internal_app_id() const;
  void _internal_set_app_id(::farm::nurture::core::contracts::common::AppID value);
  public:

  // .farm.nurture.core.contracts.common.AppType app_type = 6;
  void clear_app_type();
  ::farm::nurture::core::contracts::common::AppType app_type() const;
  void set_app_type(::farm::nurture::core::contracts::common::AppType value);
  private:
  ::farm::nurture::core::contracts::common::AppType _internal_app_type() const;
  void _internal_set_app_type(::farm::nurture::core::contracts::common::AppType value);
  public:

  // .farm.nurture.core.contracts.common.LanguageCode secondaryLanguage_code = 7;
  void clear_secondarylanguage_code();
  ::farm::nurture::core::contracts::common::LanguageCode secondarylanguage_code() const;
  void set_secondarylanguage_code(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_secondarylanguage_code() const;
  void _internal_set_secondarylanguage_code(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.ActorDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fcm_token_;
  int language_code_;
  int app_id_;
  int app_type_;
  int secondarylanguage_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OptInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.OptInRequest) */ {
 public:
  inline OptInRequest() : OptInRequest(nullptr) {}
  virtual ~OptInRequest();

  OptInRequest(const OptInRequest& from);
  OptInRequest(OptInRequest&& from) noexcept
    : OptInRequest() {
    *this = ::std::move(from);
  }

  inline OptInRequest& operator=(const OptInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptInRequest& operator=(OptInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptInRequest& default_instance();

  static inline const OptInRequest* internal_default_instance() {
    return reinterpret_cast<const OptInRequest*>(
               &_OptInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OptInRequest& a, OptInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptInRequest* New() const final {
    return CreateMaybeMessage<OptInRequest>(nullptr);
  }

  OptInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptInRequest& from);
  void MergeFrom(const OptInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.OptInRequest";
  }
  protected:
  explicit OptInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileNumberFieldNumber = 3,
    kFarmerNameFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kActorFieldNumber = 2,
    kSourceSystemFieldNumber = 5,
    kNameSpaceFieldNumber = 6,
  };
  // string mobile_number = 3;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // string farmer_name = 4;
  void clear_farmer_name();
  const std::string& farmer_name() const;
  void set_farmer_name(const std::string& value);
  void set_farmer_name(std::string&& value);
  void set_farmer_name(const char* value);
  void set_farmer_name(const char* value, size_t size);
  std::string* mutable_farmer_name();
  std::string* release_farmer_name();
  void set_allocated_farmer_name(std::string* farmer_name);
  private:
  const std::string& _internal_farmer_name() const;
  void _internal_set_farmer_name(const std::string& value);
  std::string* _internal_mutable_farmer_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  bool has_request_headers() const;
  private:
  bool _internal_has_request_headers() const;
  public:
  void clear_request_headers();
  const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_request_headers();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_request_headers();
  void set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_request_headers();
  public:
  void unsafe_arena_set_allocated_request_headers(
      ::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_request_headers();

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.SourceSystem sourceSystem = 5;
  void clear_sourcesystem();
  ::farm::nurture::core::contracts::common::SourceSystem sourcesystem() const;
  void set_sourcesystem(::farm::nurture::core::contracts::common::SourceSystem value);
  private:
  ::farm::nurture::core::contracts::common::SourceSystem _internal_sourcesystem() const;
  void _internal_set_sourcesystem(::farm::nurture::core::contracts::common::SourceSystem value);
  public:

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 6;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.OptInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr farmer_name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* request_headers_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int sourcesystem_;
  int namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OptInRespone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.OptInRespone) */ {
 public:
  inline OptInRespone() : OptInRespone(nullptr) {}
  virtual ~OptInRespone();

  OptInRespone(const OptInRespone& from);
  OptInRespone(OptInRespone&& from) noexcept
    : OptInRespone() {
    *this = ::std::move(from);
  }

  inline OptInRespone& operator=(const OptInRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptInRespone& operator=(OptInRespone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptInRespone& default_instance();

  static inline const OptInRespone* internal_default_instance() {
    return reinterpret_cast<const OptInRespone*>(
               &_OptInRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OptInRespone& a, OptInRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(OptInRespone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptInRespone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptInRespone* New() const final {
    return CreateMaybeMessage<OptInRespone>(nullptr);
  }

  OptInRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptInRespone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptInRespone& from);
  void MergeFrom(const OptInRespone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptInRespone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.OptInRespone";
  }
  protected:
  explicit OptInRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kIdFieldNumber = 4,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.OptInRespone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  int status_;
  int status_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OptOutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.OptOutRequest) */ {
 public:
  inline OptOutRequest() : OptOutRequest(nullptr) {}
  virtual ~OptOutRequest();

  OptOutRequest(const OptOutRequest& from);
  OptOutRequest(OptOutRequest&& from) noexcept
    : OptOutRequest() {
    *this = ::std::move(from);
  }

  inline OptOutRequest& operator=(const OptOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptOutRequest& operator=(OptOutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptOutRequest& default_instance();

  static inline const OptOutRequest* internal_default_instance() {
    return reinterpret_cast<const OptOutRequest*>(
               &_OptOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OptOutRequest& a, OptOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptOutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptOutRequest* New() const final {
    return CreateMaybeMessage<OptOutRequest>(nullptr);
  }

  OptOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptOutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptOutRequest& from);
  void MergeFrom(const OptOutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptOutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.OptOutRequest";
  }
  protected:
  explicit OptOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileNumberFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kActorFieldNumber = 2,
    kNameSpaceFieldNumber = 4,
  };
  // string mobile_number = 3;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  bool has_request_headers() const;
  private:
  bool _internal_has_request_headers() const;
  public:
  void clear_request_headers();
  const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_request_headers();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_request_headers();
  void set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_request_headers();
  public:
  void unsafe_arena_set_allocated_request_headers(
      ::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_request_headers();

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 4;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.OptOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::farm::nurture::core::contracts::common::RequestHeaders* request_headers_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OptOutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.OptOutResponse) */ {
 public:
  inline OptOutResponse() : OptOutResponse(nullptr) {}
  virtual ~OptOutResponse();

  OptOutResponse(const OptOutResponse& from);
  OptOutResponse(OptOutResponse&& from) noexcept
    : OptOutResponse() {
    *this = ::std::move(from);
  }

  inline OptOutResponse& operator=(const OptOutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptOutResponse& operator=(OptOutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptOutResponse& default_instance();

  static inline const OptOutResponse* internal_default_instance() {
    return reinterpret_cast<const OptOutResponse*>(
               &_OptOutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OptOutResponse& a, OptOutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptOutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptOutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptOutResponse* New() const final {
    return CreateMaybeMessage<OptOutResponse>(nullptr);
  }

  OptOutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptOutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptOutResponse& from);
  void MergeFrom(const OptOutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptOutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.OptOutResponse";
  }
  protected:
  explicit OptOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.OptOutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class MessageAcknowledgementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest) */ {
 public:
  inline MessageAcknowledgementRequest() : MessageAcknowledgementRequest(nullptr) {}
  virtual ~MessageAcknowledgementRequest();

  MessageAcknowledgementRequest(const MessageAcknowledgementRequest& from);
  MessageAcknowledgementRequest(MessageAcknowledgementRequest&& from) noexcept
    : MessageAcknowledgementRequest() {
    *this = ::std::move(from);
  }

  inline MessageAcknowledgementRequest& operator=(const MessageAcknowledgementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAcknowledgementRequest& operator=(MessageAcknowledgementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAcknowledgementRequest& default_instance();

  static inline const MessageAcknowledgementRequest* internal_default_instance() {
    return reinterpret_cast<const MessageAcknowledgementRequest*>(
               &_MessageAcknowledgementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MessageAcknowledgementRequest& a, MessageAcknowledgementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAcknowledgementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAcknowledgementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAcknowledgementRequest* New() const final {
    return CreateMaybeMessage<MessageAcknowledgementRequest>(nullptr);
  }

  MessageAcknowledgementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAcknowledgementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAcknowledgementRequest& from);
  void MergeFrom(const MessageAcknowledgementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAcknowledgementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest";
  }
  protected:
  explicit MessageAcknowledgementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 4,
    kTemplateNameLikeFieldNumber = 5,
    kMobileNumberFieldNumber = 6,
    kReferenceIdFieldNumber = 7,
    kRequestHeadersFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kLimitFieldNumber = 8,
    kOffsetFieldNumber = 9,
    kResponseOrderTypeFieldNumber = 10,
  };
  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channels = 4;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_channels(int index) const;
  void _internal_add_channels(::farm::nurture::core::contracts::common::CommunicationChannel value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_channels();
  public:
  ::farm::nurture::core::contracts::common::CommunicationChannel channels(int index) const;
  void set_channels(int index, ::farm::nurture::core::contracts::common::CommunicationChannel value);
  void add_channels(::farm::nurture::core::contracts::common::CommunicationChannel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_channels();

  // string template_name_like = 5;
  void clear_template_name_like();
  const std::string& template_name_like() const;
  void set_template_name_like(const std::string& value);
  void set_template_name_like(std::string&& value);
  void set_template_name_like(const char* value);
  void set_template_name_like(const char* value, size_t size);
  std::string* mutable_template_name_like();
  std::string* release_template_name_like();
  void set_allocated_template_name_like(std::string* template_name_like);
  private:
  const std::string& _internal_template_name_like() const;
  void _internal_set_template_name_like(const std::string& value);
  std::string* _internal_mutable_template_name_like();
  public:

  // string mobile_number = 6;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // string reference_id = 7;
  void clear_reference_id();
  const std::string& reference_id() const;
  void set_reference_id(const std::string& value);
  void set_reference_id(std::string&& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  std::string* mutable_reference_id();
  std::string* release_reference_id();
  void set_allocated_reference_id(std::string* reference_id);
  private:
  const std::string& _internal_reference_id() const;
  void _internal_set_reference_id(const std::string& value);
  std::string* _internal_mutable_reference_id();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  bool has_request_headers() const;
  private:
  bool _internal_has_request_headers() const;
  public:
  void clear_request_headers();
  const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_request_headers();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_request_headers();
  void set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_request_headers();
  public:
  void unsafe_arena_set_allocated_request_headers(
      ::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_request_headers();

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // int32 limit = 8;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 9;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.ResponseOrderType responseOrderType = 10;
  void clear_responseordertype();
  ::farm::nurture::core::contracts::common::ResponseOrderType responseordertype() const;
  void set_responseordertype(::farm::nurture::core::contracts::common::ResponseOrderType value);
  private:
  ::farm::nurture::core::contracts::common::ResponseOrderType _internal_responseordertype() const;
  void _internal_set_responseordertype(::farm::nurture::core::contracts::common::ResponseOrderType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_like_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_id_;
  ::farm::nurture::core::contracts::common::RequestHeaders* request_headers_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  int responseordertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class MessageAcknowledgementResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse) */ {
 public:
  inline MessageAcknowledgementResponse() : MessageAcknowledgementResponse(nullptr) {}
  virtual ~MessageAcknowledgementResponse();

  MessageAcknowledgementResponse(const MessageAcknowledgementResponse& from);
  MessageAcknowledgementResponse(MessageAcknowledgementResponse&& from) noexcept
    : MessageAcknowledgementResponse() {
    *this = ::std::move(from);
  }

  inline MessageAcknowledgementResponse& operator=(const MessageAcknowledgementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAcknowledgementResponse& operator=(MessageAcknowledgementResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAcknowledgementResponse& default_instance();

  static inline const MessageAcknowledgementResponse* internal_default_instance() {
    return reinterpret_cast<const MessageAcknowledgementResponse*>(
               &_MessageAcknowledgementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MessageAcknowledgementResponse& a, MessageAcknowledgementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAcknowledgementResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAcknowledgementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAcknowledgementResponse* New() const final {
    return CreateMaybeMessage<MessageAcknowledgementResponse>(nullptr);
  }

  MessageAcknowledgementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAcknowledgementResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAcknowledgementResponse& from);
  void MergeFrom(const MessageAcknowledgementResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAcknowledgementResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.MessageAcknowledgementResponse";
  }
  protected:
  explicit MessageAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kMessageAcknowledgementsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.ce.MessageAcknowledgement message_acknowledgements = 4;
  int message_acknowledgements_size() const;
  private:
  int _internal_message_acknowledgements_size() const;
  public:
  void clear_message_acknowledgements();
  ::farm::nurture::core::contracts::ce::MessageAcknowledgement* mutable_message_acknowledgements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >*
      mutable_message_acknowledgements();
  private:
  const ::farm::nurture::core::contracts::ce::MessageAcknowledgement& _internal_message_acknowledgements(int index) const;
  ::farm::nurture::core::contracts::ce::MessageAcknowledgement* _internal_add_message_acknowledgements();
  public:
  const ::farm::nurture::core::contracts::ce::MessageAcknowledgement& message_acknowledgements(int index) const;
  ::farm::nurture::core::contracts::ce::MessageAcknowledgement* add_message_acknowledgements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >&
      message_acknowledgements() const;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::MessageAcknowledgement > message_acknowledgements_;
  int status_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class MessageAcknowledgement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.MessageAcknowledgement) */ {
 public:
  inline MessageAcknowledgement() : MessageAcknowledgement(nullptr) {}
  virtual ~MessageAcknowledgement();

  MessageAcknowledgement(const MessageAcknowledgement& from);
  MessageAcknowledgement(MessageAcknowledgement&& from) noexcept
    : MessageAcknowledgement() {
    *this = ::std::move(from);
  }

  inline MessageAcknowledgement& operator=(const MessageAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAcknowledgement& operator=(MessageAcknowledgement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAcknowledgement& default_instance();

  static inline const MessageAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const MessageAcknowledgement*>(
               &_MessageAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MessageAcknowledgement& a, MessageAcknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAcknowledgement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAcknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAcknowledgement* New() const final {
    return CreateMaybeMessage<MessageAcknowledgement>(nullptr);
  }

  MessageAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAcknowledgement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAcknowledgement& from);
  void MergeFrom(const MessageAcknowledgement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAcknowledgement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.MessageAcknowledgement";
  }
  protected:
  explicit MessageAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 14,
    kAttributesFieldNumber = 15,
    kMobileNumberFieldNumber = 3,
    kReferenceIdFieldNumber = 5,
    kTemplateNameFieldNumber = 6,
    kMessageContentFieldNumber = 8,
    kVendorNameFieldNumber = 10,
    kVendorMessageIdFieldNumber = 11,
    kActorContactIdFieldNumber = 19,
    kParentReferenceIdFieldNumber = 20,
    kCampaignNameFieldNumber = 21,
    kActorFieldNumber = 2,
    kVendorDeliveryTimeFieldNumber = 16,
    kActorDeliveryTimeFieldNumber = 17,
    kCreatedAtFieldNumber = 22,
    kUpdatedAtFieldNumber = 23,
    kIdFieldNumber = 1,
    kChannelFieldNumber = 4,
    kLanguageFieldNumber = 7,
    kIsUnicodeFieldNumber = 9,
    kStateFieldNumber = 12,
    kRetryCountFieldNumber = 13,
    kContactTypeFieldNumber = 18,
  };
  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 14;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;
  public:
  void clear_placeholders();
  ::farm::nurture::core::contracts::ce::Placeholder* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
      mutable_placeholders();
  private:
  const ::farm::nurture::core::contracts::ce::Placeholder& _internal_placeholders(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* _internal_add_placeholders();
  public:
  const ::farm::nurture::core::contracts::ce::Placeholder& placeholders(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
      placeholders() const;

  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 15;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attributes();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attributes();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attributes() const;

  // string mobile_number = 3;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // string reference_id = 5;
  void clear_reference_id();
  const std::string& reference_id() const;
  void set_reference_id(const std::string& value);
  void set_reference_id(std::string&& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  std::string* mutable_reference_id();
  std::string* release_reference_id();
  void set_allocated_reference_id(std::string* reference_id);
  private:
  const std::string& _internal_reference_id() const;
  void _internal_set_reference_id(const std::string& value);
  std::string* _internal_mutable_reference_id();
  public:

  // string template_name = 6;
  void clear_template_name();
  const std::string& template_name() const;
  void set_template_name(const std::string& value);
  void set_template_name(std::string&& value);
  void set_template_name(const char* value);
  void set_template_name(const char* value, size_t size);
  std::string* mutable_template_name();
  std::string* release_template_name();
  void set_allocated_template_name(std::string* template_name);
  private:
  const std::string& _internal_template_name() const;
  void _internal_set_template_name(const std::string& value);
  std::string* _internal_mutable_template_name();
  public:

  // string message_content = 8;
  void clear_message_content();
  const std::string& message_content() const;
  void set_message_content(const std::string& value);
  void set_message_content(std::string&& value);
  void set_message_content(const char* value);
  void set_message_content(const char* value, size_t size);
  std::string* mutable_message_content();
  std::string* release_message_content();
  void set_allocated_message_content(std::string* message_content);
  private:
  const std::string& _internal_message_content() const;
  void _internal_set_message_content(const std::string& value);
  std::string* _internal_mutable_message_content();
  public:

  // string vendor_name = 10;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  void set_vendor_name(const std::string& value);
  void set_vendor_name(std::string&& value);
  void set_vendor_name(const char* value);
  void set_vendor_name(const char* value, size_t size);
  std::string* mutable_vendor_name();
  std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string vendor_message_id = 11;
  void clear_vendor_message_id();
  const std::string& vendor_message_id() const;
  void set_vendor_message_id(const std::string& value);
  void set_vendor_message_id(std::string&& value);
  void set_vendor_message_id(const char* value);
  void set_vendor_message_id(const char* value, size_t size);
  std::string* mutable_vendor_message_id();
  std::string* release_vendor_message_id();
  void set_allocated_vendor_message_id(std::string* vendor_message_id);
  private:
  const std::string& _internal_vendor_message_id() const;
  void _internal_set_vendor_message_id(const std::string& value);
  std::string* _internal_mutable_vendor_message_id();
  public:

  // string actor_contact_id = 19;
  void clear_actor_contact_id();
  const std::string& actor_contact_id() const;
  void set_actor_contact_id(const std::string& value);
  void set_actor_contact_id(std::string&& value);
  void set_actor_contact_id(const char* value);
  void set_actor_contact_id(const char* value, size_t size);
  std::string* mutable_actor_contact_id();
  std::string* release_actor_contact_id();
  void set_allocated_actor_contact_id(std::string* actor_contact_id);
  private:
  const std::string& _internal_actor_contact_id() const;
  void _internal_set_actor_contact_id(const std::string& value);
  std::string* _internal_mutable_actor_contact_id();
  public:

  // string parent_reference_id = 20;
  void clear_parent_reference_id();
  const std::string& parent_reference_id() const;
  void set_parent_reference_id(const std::string& value);
  void set_parent_reference_id(std::string&& value);
  void set_parent_reference_id(const char* value);
  void set_parent_reference_id(const char* value, size_t size);
  std::string* mutable_parent_reference_id();
  std::string* release_parent_reference_id();
  void set_allocated_parent_reference_id(std::string* parent_reference_id);
  private:
  const std::string& _internal_parent_reference_id() const;
  void _internal_set_parent_reference_id(const std::string& value);
  std::string* _internal_mutable_parent_reference_id();
  public:

  // string campaign_name = 21;
  void clear_campaign_name();
  const std::string& campaign_name() const;
  void set_campaign_name(const std::string& value);
  void set_campaign_name(std::string&& value);
  void set_campaign_name(const char* value);
  void set_campaign_name(const char* value, size_t size);
  std::string* mutable_campaign_name();
  std::string* release_campaign_name();
  void set_allocated_campaign_name(std::string* campaign_name);
  private:
  const std::string& _internal_campaign_name() const;
  void _internal_set_campaign_name(const std::string& value);
  std::string* _internal_mutable_campaign_name();
  public:

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .google.protobuf.Timestamp vendor_delivery_time = 16;
  bool has_vendor_delivery_time() const;
  private:
  bool _internal_has_vendor_delivery_time() const;
  public:
  void clear_vendor_delivery_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& vendor_delivery_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_vendor_delivery_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_vendor_delivery_time();
  void set_allocated_vendor_delivery_time(PROTOBUF_NAMESPACE_ID::Timestamp* vendor_delivery_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_vendor_delivery_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_vendor_delivery_time();
  public:
  void unsafe_arena_set_allocated_vendor_delivery_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* vendor_delivery_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_vendor_delivery_time();

  // .google.protobuf.Timestamp actor_delivery_time = 17;
  bool has_actor_delivery_time() const;
  private:
  bool _internal_has_actor_delivery_time() const;
  public:
  void clear_actor_delivery_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& actor_delivery_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_actor_delivery_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_actor_delivery_time();
  void set_allocated_actor_delivery_time(PROTOBUF_NAMESPACE_ID::Timestamp* actor_delivery_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_actor_delivery_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_actor_delivery_time();
  public:
  void unsafe_arena_set_allocated_actor_delivery_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* actor_delivery_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_actor_delivery_time();

  // .google.protobuf.Timestamp created_at = 22;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 23;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 4;
  void clear_channel();
  ::farm::nurture::core::contracts::common::CommunicationChannel channel() const;
  void set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_channel() const;
  void _internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // .farm.nurture.core.contracts.common.Language language = 7;
  void clear_language();
  ::farm::nurture::core::contracts::common::Language language() const;
  void set_language(::farm::nurture::core::contracts::common::Language value);
  private:
  ::farm::nurture::core::contracts::common::Language _internal_language() const;
  void _internal_set_language(::farm::nurture::core::contracts::common::Language value);
  public:

  // bool is_unicode = 9;
  void clear_is_unicode();
  bool is_unicode() const;
  void set_is_unicode(bool value);
  private:
  bool _internal_is_unicode() const;
  void _internal_set_is_unicode(bool value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationState state = 12;
  void clear_state();
  ::farm::nurture::core::contracts::common::CommunicationState state() const;
  void set_state(::farm::nurture::core::contracts::common::CommunicationState value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationState _internal_state() const;
  void _internal_set_state(::farm::nurture::core::contracts::common::CommunicationState value);
  public:

  // int32 retry_count = 13;
  void clear_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 retry_count() const;
  void set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retry_count() const;
  void _internal_set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .farm.nurture.core.contracts.common.ContactType contact_type = 18;
  void clear_contact_type();
  ::farm::nurture::core::contracts::common::ContactType contact_type() const;
  void set_contact_type(::farm::nurture::core::contracts::common::ContactType value);
  private:
  ::farm::nurture::core::contracts::common::ContactType _internal_contact_type() const;
  void _internal_set_contact_type(::farm::nurture::core::contracts::common::ContactType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.MessageAcknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder > placeholders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_contact_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_reference_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaign_name_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  PROTOBUF_NAMESPACE_ID::Timestamp* vendor_delivery_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* actor_delivery_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int channel_;
  int language_;
  bool is_unicode_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 retry_count_;
  int contact_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Template PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.Template) */ {
 public:
  inline Template() : Template(nullptr) {}
  virtual ~Template();

  Template(const Template& from);
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  inline Template& operator=(Template&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Template& default_instance();

  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }
  inline void Swap(Template* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Template* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const final {
    return CreateMaybeMessage<Template>(nullptr);
  }

  Template* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Template>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Template* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.Template";
  }
  protected:
  explicit Template(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 11,
    kMetaDataFieldNumber = 14,
    kNameFieldNumber = 2,
    kContentFieldNumber = 5,
    kTitleFieldNumber = 6,
    kOwnerEmailFieldNumber = 12,
    kVerticalFieldNumber = 13,
    kCreatedAtFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kDeletedAtFieldNumber = 10,
    kIdFieldNumber = 1,
    kLanguageFieldNumber = 3,
    kContentTypeFieldNumber = 4,
    kActiveFieldNumber = 7,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 11;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attributes();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attributes();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attributes(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attributes() const;

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 14;
  int meta_data_size() const;
  private:
  int _internal_meta_data_size() const;
  public:
  void clear_meta_data();
  ::farm::nurture::core::contracts::common::Attribs* mutable_meta_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_meta_data();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_meta_data();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_meta_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      meta_data() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string title = 6;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string owner_email = 12;
  void clear_owner_email();
  const std::string& owner_email() const;
  void set_owner_email(const std::string& value);
  void set_owner_email(std::string&& value);
  void set_owner_email(const char* value);
  void set_owner_email(const char* value, size_t size);
  std::string* mutable_owner_email();
  std::string* release_owner_email();
  void set_allocated_owner_email(std::string* owner_email);
  private:
  const std::string& _internal_owner_email() const;
  void _internal_set_owner_email(const std::string& value);
  std::string* _internal_mutable_owner_email();
  public:

  // string vertical = 13;
  void clear_vertical();
  const std::string& vertical() const;
  void set_vertical(const std::string& value);
  void set_vertical(std::string&& value);
  void set_vertical(const char* value);
  void set_vertical(const char* value, size_t size);
  std::string* mutable_vertical();
  std::string* release_vertical();
  void set_allocated_vertical(std::string* vertical);
  private:
  const std::string& _internal_vertical() const;
  void _internal_set_vertical(const std::string& value);
  std::string* _internal_mutable_vertical();
  public:

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Timestamp deleted_at = 10;
  bool has_deleted_at() const;
  private:
  bool _internal_has_deleted_at() const;
  public:
  void clear_deleted_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_deleted_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deleted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deleted_at();
  public:
  void unsafe_arena_set_allocated_deleted_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deleted_at();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.Language language = 3;
  void clear_language();
  ::farm::nurture::core::contracts::common::Language language() const;
  void set_language(::farm::nurture::core::contracts::common::Language value);
  private:
  ::farm::nurture::core::contracts::common::Language _internal_language() const;
  void _internal_set_language(::farm::nurture::core::contracts::common::Language value);
  public:

  // .farm.nurture.core.contracts.common.TemplateContentType content_type = 4;
  void clear_content_type();
  ::farm::nurture::core::contracts::common::TemplateContentType content_type() const;
  void set_content_type(::farm::nurture::core::contracts::common::TemplateContentType value);
  private:
  ::farm::nurture::core::contracts::common::TemplateContentType _internal_content_type() const;
  void _internal_set_content_type(::farm::nurture::core::contracts::common::TemplateContentType value);
  public:

  // bool active = 7;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.Template)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > meta_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertical_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int language_;
  int content_type_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class AddTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.AddTemplateRequest) */ {
 public:
  inline AddTemplateRequest() : AddTemplateRequest(nullptr) {}
  virtual ~AddTemplateRequest();

  AddTemplateRequest(const AddTemplateRequest& from);
  AddTemplateRequest(AddTemplateRequest&& from) noexcept
    : AddTemplateRequest() {
    *this = ::std::move(from);
  }

  inline AddTemplateRequest& operator=(const AddTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTemplateRequest& operator=(AddTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTemplateRequest& default_instance();

  static inline const AddTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const AddTemplateRequest*>(
               &_AddTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddTemplateRequest& a, AddTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTemplateRequest* New() const final {
    return CreateMaybeMessage<AddTemplateRequest>(nullptr);
  }

  AddTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTemplateRequest& from);
  void MergeFrom(const AddTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.AddTemplateRequest";
  }
  protected:
  explicit AddTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 6,
    kMetaDataFieldNumber = 10,
    kNameFieldNumber = 1,
    kContentFieldNumber = 5,
    kOwnerFieldNumber = 7,
    kVerticalFieldNumber = 8,
    kTitleFieldNumber = 9,
    kLanguageCodeFieldNumber = 2,
    kChannelFieldNumber = 3,
    kTemplateContentTypeFieldNumber = 4,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 6;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 10;
  int meta_data_size() const;
  private:
  int _internal_meta_data_size() const;
  public:
  void clear_meta_data();
  ::farm::nurture::core::contracts::common::Attribs* mutable_meta_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_meta_data();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_meta_data();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_meta_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      meta_data() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string owner = 7;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string vertical = 8;
  void clear_vertical();
  const std::string& vertical() const;
  void set_vertical(const std::string& value);
  void set_vertical(std::string&& value);
  void set_vertical(const char* value);
  void set_vertical(const char* value, size_t size);
  std::string* mutable_vertical();
  std::string* release_vertical();
  void set_allocated_vertical(std::string* vertical);
  private:
  const std::string& _internal_vertical() const;
  void _internal_set_vertical(const std::string& value);
  std::string* _internal_mutable_vertical();
  public:

  // string title = 9;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 2;
  void clear_language_code();
  ::farm::nurture::core::contracts::common::LanguageCode language_code() const;
  void set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 3;
  void clear_channel();
  ::farm::nurture::core::contracts::common::CommunicationChannel channel() const;
  void set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_channel() const;
  void _internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // .farm.nurture.core.contracts.common.TemplateContentType templateContentType = 4;
  void clear_templatecontenttype();
  ::farm::nurture::core::contracts::common::TemplateContentType templatecontenttype() const;
  void set_templatecontenttype(::farm::nurture::core::contracts::common::TemplateContentType value);
  private:
  ::farm::nurture::core::contracts::common::TemplateContentType _internal_templatecontenttype() const;
  void _internal_set_templatecontenttype(::farm::nurture::core::contracts::common::TemplateContentType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.AddTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > meta_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertical_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int language_code_;
  int channel_;
  int templatecontenttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class AddTemplateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.AddTemplateResponse) */ {
 public:
  inline AddTemplateResponse() : AddTemplateResponse(nullptr) {}
  virtual ~AddTemplateResponse();

  AddTemplateResponse(const AddTemplateResponse& from);
  AddTemplateResponse(AddTemplateResponse&& from) noexcept
    : AddTemplateResponse() {
    *this = ::std::move(from);
  }

  inline AddTemplateResponse& operator=(const AddTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTemplateResponse& operator=(AddTemplateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTemplateResponse& default_instance();

  static inline const AddTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const AddTemplateResponse*>(
               &_AddTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddTemplateResponse& a, AddTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTemplateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTemplateResponse* New() const final {
    return CreateMaybeMessage<AddTemplateResponse>(nullptr);
  }

  AddTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTemplateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTemplateResponse& from);
  void MergeFrom(const AddTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTemplateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.AddTemplateResponse";
  }
  protected:
  explicit AddTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kVendorsResponseFieldNumber = 5,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kIdFieldNumber = 4,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 5;
  int vendors_response_size() const;
  private:
  int _internal_vendors_response_size() const;
  public:
  void clear_vendors_response();
  ::farm::nurture::core::contracts::ce::VendorResponse* mutable_vendors_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >*
      mutable_vendors_response();
  private:
  const ::farm::nurture::core::contracts::ce::VendorResponse& _internal_vendors_response(int index) const;
  ::farm::nurture::core::contracts::ce::VendorResponse* _internal_add_vendors_response();
  public:
  const ::farm::nurture::core::contracts::ce::VendorResponse& vendors_response(int index) const;
  ::farm::nurture::core::contracts::ce::VendorResponse* add_vendors_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >&
      vendors_response() const;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // int64 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.AddTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse > vendors_response_;
  int status_;
  int status_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class TemplateUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.TemplateUpdateRequest) */ {
 public:
  inline TemplateUpdateRequest() : TemplateUpdateRequest(nullptr) {}
  virtual ~TemplateUpdateRequest();

  TemplateUpdateRequest(const TemplateUpdateRequest& from);
  TemplateUpdateRequest(TemplateUpdateRequest&& from) noexcept
    : TemplateUpdateRequest() {
    *this = ::std::move(from);
  }

  inline TemplateUpdateRequest& operator=(const TemplateUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemplateUpdateRequest& operator=(TemplateUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TemplateUpdateRequest& default_instance();

  static inline const TemplateUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const TemplateUpdateRequest*>(
               &_TemplateUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TemplateUpdateRequest& a, TemplateUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TemplateUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemplateUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TemplateUpdateRequest* New() const final {
    return CreateMaybeMessage<TemplateUpdateRequest>(nullptr);
  }

  TemplateUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemplateUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemplateUpdateRequest& from);
  void MergeFrom(const TemplateUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemplateUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.TemplateUpdateRequest";
  }
  protected:
  explicit TemplateUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 2,
    kMetaDataFieldNumber = 8,
    kContentFieldNumber = 1,
    kTitleFieldNumber = 3,
    kOwnerFieldNumber = 4,
    kVerticalFieldNumber = 5,
    kNameFieldNumber = 6,
    kLanguageCodeFieldNumber = 7,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 2;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 8;
  int meta_data_size() const;
  private:
  int _internal_meta_data_size() const;
  public:
  void clear_meta_data();
  ::farm::nurture::core::contracts::common::Attribs* mutable_meta_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_meta_data();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_meta_data();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& meta_data(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_meta_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      meta_data() const;

  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string owner = 4;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string vertical = 5;
  void clear_vertical();
  const std::string& vertical() const;
  void set_vertical(const std::string& value);
  void set_vertical(std::string&& value);
  void set_vertical(const char* value);
  void set_vertical(const char* value, size_t size);
  std::string* mutable_vertical();
  std::string* release_vertical();
  void set_allocated_vertical(std::string* vertical);
  private:
  const std::string& _internal_vertical() const;
  void _internal_set_vertical(const std::string& value);
  std::string* _internal_mutable_vertical();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  void clear_language_code();
  ::farm::nurture::core::contracts::common::LanguageCode language_code() const;
  void set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > meta_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertical_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class GetAllTemplateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.GetAllTemplateResponse) */ {
 public:
  inline GetAllTemplateResponse() : GetAllTemplateResponse(nullptr) {}
  virtual ~GetAllTemplateResponse();

  GetAllTemplateResponse(const GetAllTemplateResponse& from);
  GetAllTemplateResponse(GetAllTemplateResponse&& from) noexcept
    : GetAllTemplateResponse() {
    *this = ::std::move(from);
  }

  inline GetAllTemplateResponse& operator=(const GetAllTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllTemplateResponse& operator=(GetAllTemplateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllTemplateResponse& default_instance();

  static inline const GetAllTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllTemplateResponse*>(
               &_GetAllTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetAllTemplateResponse& a, GetAllTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllTemplateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllTemplateResponse* New() const final {
    return CreateMaybeMessage<GetAllTemplateResponse>(nullptr);
  }

  GetAllTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllTemplateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllTemplateResponse& from);
  void MergeFrom(const GetAllTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllTemplateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.GetAllTemplateResponse";
  }
  protected:
  explicit GetAllTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.ce.Template templates = 3;
  int templates_size() const;
  private:
  int _internal_templates_size() const;
  public:
  void clear_templates();
  ::farm::nurture::core::contracts::ce::Template* mutable_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Template >*
      mutable_templates();
  private:
  const ::farm::nurture::core::contracts::ce::Template& _internal_templates(int index) const;
  ::farm::nurture::core::contracts::ce::Template* _internal_add_templates();
  public:
  const ::farm::nurture::core::contracts::ce::Template& templates(int index) const;
  ::farm::nurture::core::contracts::ce::Template* add_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Template >&
      templates() const;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Template > templates_;
  int status_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class GetAllTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.GetAllTemplateRequest) */ {
 public:
  inline GetAllTemplateRequest() : GetAllTemplateRequest(nullptr) {}
  virtual ~GetAllTemplateRequest();

  GetAllTemplateRequest(const GetAllTemplateRequest& from);
  GetAllTemplateRequest(GetAllTemplateRequest&& from) noexcept
    : GetAllTemplateRequest() {
    *this = ::std::move(from);
  }

  inline GetAllTemplateRequest& operator=(const GetAllTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllTemplateRequest& operator=(GetAllTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllTemplateRequest& default_instance();

  static inline const GetAllTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllTemplateRequest*>(
               &_GetAllTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetAllTemplateRequest& a, GetAllTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllTemplateRequest* New() const final {
    return CreateMaybeMessage<GetAllTemplateRequest>(nullptr);
  }

  GetAllTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllTemplateRequest& from);
  void MergeFrom(const GetAllTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.GetAllTemplateRequest";
  }
  protected:
  explicit GetAllTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNamesFieldNumber = 7,
    kSearchQueryFieldNumber = 4,
    kRequestHeadersFieldNumber = 3,
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kNamespaceFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // repeated string templateNames = 7;
  int templatenames_size() const;
  private:
  int _internal_templatenames_size() const;
  public:
  void clear_templatenames();
  const std::string& templatenames(int index) const;
  std::string* mutable_templatenames(int index);
  void set_templatenames(int index, const std::string& value);
  void set_templatenames(int index, std::string&& value);
  void set_templatenames(int index, const char* value);
  void set_templatenames(int index, const char* value, size_t size);
  std::string* add_templatenames();
  void add_templatenames(const std::string& value);
  void add_templatenames(std::string&& value);
  void add_templatenames(const char* value);
  void add_templatenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& templatenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_templatenames();
  private:
  const std::string& _internal_templatenames(int index) const;
  std::string* _internal_add_templatenames();
  public:

  // string searchQuery = 4;
  void clear_searchquery();
  const std::string& searchquery() const;
  void set_searchquery(const std::string& value);
  void set_searchquery(std::string&& value);
  void set_searchquery(const char* value);
  void set_searchquery(const char* value, size_t size);
  std::string* mutable_searchquery();
  std::string* release_searchquery();
  void set_allocated_searchquery(std::string* searchquery);
  private:
  const std::string& _internal_searchquery() const;
  void _internal_set_searchquery(const std::string& value);
  std::string* _internal_mutable_searchquery();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 3;
  bool has_request_headers() const;
  private:
  bool _internal_has_request_headers() const;
  public:
  void clear_request_headers();
  const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_request_headers();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_request_headers();
  void set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_request_headers() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_request_headers();
  public:
  void unsafe_arena_set_allocated_request_headers(
      ::farm::nurture::core::contracts::common::RequestHeaders* request_headers);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_request_headers();

  // int64 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.core.contracts.common.NameSpace namespace = 5;
  void clear_namespace_();
  ::farm::nurture::core::contracts::common::NameSpace namespace_() const;
  void set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  private:
  ::farm::nurture::core::contracts::common::NameSpace _internal_namespace_() const;
  void _internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value);
  public:

  // .farm.nurture.core.contracts.common.Status status = 6;
  void clear_status();
  ::farm::nurture::core::contracts::common::Status status() const;
  void set_status(::farm::nurture::core::contracts::common::Status value);
  private:
  ::farm::nurture::core::contracts::common::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::Status value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> templatenames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr searchquery_;
  ::farm::nurture::core::contracts::common::RequestHeaders* request_headers_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  int namespace__;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class VendorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.VendorResponse) */ {
 public:
  inline VendorResponse() : VendorResponse(nullptr) {}
  virtual ~VendorResponse();

  VendorResponse(const VendorResponse& from);
  VendorResponse(VendorResponse&& from) noexcept
    : VendorResponse() {
    *this = ::std::move(from);
  }

  inline VendorResponse& operator=(const VendorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VendorResponse& operator=(VendorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VendorResponse& default_instance();

  static inline const VendorResponse* internal_default_instance() {
    return reinterpret_cast<const VendorResponse*>(
               &_VendorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VendorResponse& a, VendorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VendorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VendorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VendorResponse* New() const final {
    return CreateMaybeMessage<VendorResponse>(nullptr);
  }

  VendorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VendorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VendorResponse& from);
  void MergeFrom(const VendorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VendorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.VendorResponse";
  }
  protected:
  explicit VendorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 1,
    kErrorMsgFieldNumber = 4,
    kStatusFieldNumber = 2,
    kStatusCodeFieldNumber = 3,
  };
  // string vendor_name = 1;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  void set_vendor_name(const std::string& value);
  void set_vendor_name(std::string&& value);
  void set_vendor_name(const char* value);
  void set_vendor_name(const char* value, size_t size);
  std::string* mutable_vendor_name();
  std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // .farm.nurture.core.contracts.common.ResponseStatus status = 2;
  void clear_status();
  ::farm::nurture::core::contracts::common::ResponseStatus status() const;
  void set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatus _internal_status() const;
  void _internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value);
  public:

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 3;
  void clear_status_code();
  ::farm::nurture::core::contracts::common::ResponseStatusCode status_code() const;
  void set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  private:
  ::farm::nurture::core::contracts::common::ResponseStatusCode _internal_status_code() const;
  void _internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.VendorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  int status_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class ActivationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.ActivationResponse) */ {
 public:
  inline ActivationResponse() : ActivationResponse(nullptr) {}
  virtual ~ActivationResponse();

  ActivationResponse(const ActivationResponse& from);
  ActivationResponse(ActivationResponse&& from) noexcept
    : ActivationResponse() {
    *this = ::std::move(from);
  }

  inline ActivationResponse& operator=(const ActivationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationResponse& operator=(ActivationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationResponse& default_instance();

  static inline const ActivationResponse* internal_default_instance() {
    return reinterpret_cast<const ActivationResponse*>(
               &_ActivationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ActivationResponse& a, ActivationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationResponse* New() const final {
    return CreateMaybeMessage<ActivationResponse>(nullptr);
  }

  ActivationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationResponse& from);
  void MergeFrom(const ActivationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.ActivationResponse";
  }
  protected:
  explicit ActivationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorsResponseFieldNumber = 1,
    kActiveTemplateFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 1;
  int vendors_response_size() const;
  private:
  int _internal_vendors_response_size() const;
  public:
  void clear_vendors_response();
  ::farm::nurture::core::contracts::ce::VendorResponse* mutable_vendors_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >*
      mutable_vendors_response();
  private:
  const ::farm::nurture::core::contracts::ce::VendorResponse& _internal_vendors_response(int index) const;
  ::farm::nurture::core::contracts::ce::VendorResponse* _internal_add_vendors_response();
  public:
  const ::farm::nurture::core::contracts::ce::VendorResponse& vendors_response(int index) const;
  ::farm::nurture::core::contracts::ce::VendorResponse* add_vendors_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >&
      vendors_response() const;

  // bool active_template = 2;
  void clear_active_template();
  bool active_template() const;
  void set_active_template(bool value);
  private:
  bool _internal_active_template() const;
  void _internal_set_active_template(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.ActivationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse > vendors_response_;
  bool active_template_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// -------------------------------------------------------------------

class ActivationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.core.contracts.ce.ActivationRequest) */ {
 public:
  inline ActivationRequest() : ActivationRequest(nullptr) {}
  virtual ~ActivationRequest();

  ActivationRequest(const ActivationRequest& from);
  ActivationRequest(ActivationRequest&& from) noexcept
    : ActivationRequest() {
    *this = ::std::move(from);
  }

  inline ActivationRequest& operator=(const ActivationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationRequest& operator=(ActivationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationRequest& default_instance();

  static inline const ActivationRequest* internal_default_instance() {
    return reinterpret_cast<const ActivationRequest*>(
               &_ActivationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ActivationRequest& a, ActivationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationRequest* New() const final {
    return CreateMaybeMessage<ActivationRequest>(nullptr);
  }

  ActivationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationRequest& from);
  void MergeFrom(const ActivationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.core.contracts.ce.ActivationRequest";
  }
  protected:
  explicit ActivationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto);
    return ::descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 4,
    kTemplateNameFieldNumber = 1,
    kMobileNumberFieldNumber = 6,
    kMediaFieldNumber = 3,
    kActorFieldNumber = 5,
    kChannelFieldNumber = 2,
    kLanguageCodeFieldNumber = 7,
  };
  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 4;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;
  public:
  void clear_placeholders();
  ::farm::nurture::core::contracts::ce::Placeholder* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
      mutable_placeholders();
  private:
  const ::farm::nurture::core::contracts::ce::Placeholder& _internal_placeholders(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* _internal_add_placeholders();
  public:
  const ::farm::nurture::core::contracts::ce::Placeholder& placeholders(int index) const;
  ::farm::nurture::core::contracts::ce::Placeholder* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
      placeholders() const;

  // string template_name = 1;
  void clear_template_name();
  const std::string& template_name() const;
  void set_template_name(const std::string& value);
  void set_template_name(std::string&& value);
  void set_template_name(const char* value);
  void set_template_name(const char* value, size_t size);
  std::string* mutable_template_name();
  std::string* release_template_name();
  void set_allocated_template_name(std::string* template_name);
  private:
  const std::string& _internal_template_name() const;
  void _internal_set_template_name(const std::string& value);
  std::string* _internal_mutable_template_name();
  public:

  // string mobile_number = 6;
  void clear_mobile_number();
  const std::string& mobile_number() const;
  void set_mobile_number(const std::string& value);
  void set_mobile_number(std::string&& value);
  void set_mobile_number(const char* value);
  void set_mobile_number(const char* value, size_t size);
  std::string* mutable_mobile_number();
  std::string* release_mobile_number();
  void set_allocated_mobile_number(std::string* mobile_number);
  private:
  const std::string& _internal_mobile_number() const;
  void _internal_set_mobile_number(const std::string& value);
  std::string* _internal_mutable_mobile_number();
  public:

  // .farm.nurture.core.contracts.ce.Media media = 3;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::farm::nurture::core::contracts::ce::Media& media() const;
  ::farm::nurture::core::contracts::ce::Media* release_media();
  ::farm::nurture::core::contracts::ce::Media* mutable_media();
  void set_allocated_media(::farm::nurture::core::contracts::ce::Media* media);
  private:
  const ::farm::nurture::core::contracts::ce::Media& _internal_media() const;
  ::farm::nurture::core::contracts::ce::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::farm::nurture::core::contracts::ce::Media* media);
  ::farm::nurture::core::contracts::ce::Media* unsafe_arena_release_media();

  // .farm.nurture.core.contracts.common.ActorID actor = 5;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::farm::nurture::core::contracts::common::ActorID& actor() const;
  ::farm::nurture::core::contracts::common::ActorID* release_actor();
  ::farm::nurture::core::contracts::common::ActorID* mutable_actor();
  void set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor);
  private:
  const ::farm::nurture::core::contracts::common::ActorID& _internal_actor() const;
  ::farm::nurture::core::contracts::common::ActorID* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::farm::nurture::core::contracts::common::ActorID* actor);
  ::farm::nurture::core::contracts::common::ActorID* unsafe_arena_release_actor();

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 2;
  void clear_channel();
  ::farm::nurture::core::contracts::common::CommunicationChannel channel() const;
  void set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  private:
  ::farm::nurture::core::contracts::common::CommunicationChannel _internal_channel() const;
  void _internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value);
  public:

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  void clear_language_code();
  ::farm::nurture::core::contracts::common::LanguageCode language_code() const;
  void set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  private:
  ::farm::nurture::core::contracts::common::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.core.contracts.ce.ActivationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder > placeholders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_number_;
  ::farm::nurture::core::contracts::ce::Media* media_;
  ::farm::nurture::core::contracts::common::ActorID* actor_;
  int channel_;
  int language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommunicationEvent

// string content_title = 1;
inline void CommunicationEvent::clear_content_title() {
  content_title_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::content_title() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
  return _internal_content_title();
}
inline void CommunicationEvent::set_content_title(const std::string& value) {
  _internal_set_content_title(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
}
inline std::string* CommunicationEvent::mutable_content_title() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
  return _internal_mutable_content_title();
}
inline const std::string& CommunicationEvent::_internal_content_title() const {
  return content_title_.Get();
}
inline void CommunicationEvent::_internal_set_content_title(const std::string& value) {
  
  content_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_content_title(std::string&& value) {
  
  content_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
}
inline void CommunicationEvent::set_content_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
}
inline void CommunicationEvent::set_content_title(const char* value,
    size_t size) {
  
  content_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
}
inline std::string* CommunicationEvent::_internal_mutable_content_title() {
  
  return content_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_content_title() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
  return content_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_content_title(std::string* content_title) {
  if (content_title != nullptr) {
    
  } else {
    
  }
  content_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.content_title)
}

// string template_name = 2;
inline void CommunicationEvent::clear_template_name() {
  template_name_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::template_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
  return _internal_template_name();
}
inline void CommunicationEvent::set_template_name(const std::string& value) {
  _internal_set_template_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
}
inline std::string* CommunicationEvent::mutable_template_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
  return _internal_mutable_template_name();
}
inline const std::string& CommunicationEvent::_internal_template_name() const {
  return template_name_.Get();
}
inline void CommunicationEvent::_internal_set_template_name(const std::string& value) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_template_name(std::string&& value) {
  
  template_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
}
inline void CommunicationEvent::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
}
inline void CommunicationEvent::set_template_name(const char* value,
    size_t size) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
}
inline std::string* CommunicationEvent::_internal_mutable_template_name() {
  
  return template_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_template_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
  return template_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_template_name(std::string* template_name) {
  if (template_name != nullptr) {
    
  } else {
    
  }
  template_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.template_name)
}

// repeated .farm.nurture.core.contracts.ce.Placeholder placeholder = 3;
inline int CommunicationEvent::_internal_placeholder_size() const {
  return placeholder_.size();
}
inline int CommunicationEvent::placeholder_size() const {
  return _internal_placeholder_size();
}
inline void CommunicationEvent::clear_placeholder() {
  placeholder_.Clear();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::mutable_placeholder(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.placeholder)
  return placeholder_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
CommunicationEvent::mutable_placeholder() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.CommunicationEvent.placeholder)
  return &placeholder_;
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& CommunicationEvent::_internal_placeholder(int index) const {
  return placeholder_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& CommunicationEvent::placeholder(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.placeholder)
  return _internal_placeholder(index);
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::_internal_add_placeholder() {
  return placeholder_.Add();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::add_placeholder() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.CommunicationEvent.placeholder)
  return _internal_add_placeholder();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
CommunicationEvent::placeholder() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.CommunicationEvent.placeholder)
  return placeholder_;
}

// .farm.nurture.core.contracts.common.ActorID receiver_actor = 4;
inline bool CommunicationEvent::_internal_has_receiver_actor() const {
  return this != internal_default_instance() && receiver_actor_ != nullptr;
}
inline bool CommunicationEvent::has_receiver_actor() const {
  return _internal_has_receiver_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& CommunicationEvent::_internal_receiver_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = receiver_actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& CommunicationEvent::receiver_actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor)
  return _internal_receiver_actor();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_receiver_actor(
    ::farm::nurture::core::contracts::common::ActorID* receiver_actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_actor_);
  }
  receiver_actor_ = receiver_actor;
  if (receiver_actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* CommunicationEvent::release_receiver_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = receiver_actor_;
  receiver_actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* CommunicationEvent::unsafe_arena_release_receiver_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = receiver_actor_;
  receiver_actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* CommunicationEvent::_internal_mutable_receiver_actor() {
  
  if (receiver_actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    receiver_actor_ = p;
  }
  return receiver_actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* CommunicationEvent::mutable_receiver_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor)
  return _internal_mutable_receiver_actor();
}
inline void CommunicationEvent::set_allocated_receiver_actor(::farm::nurture::core::contracts::common::ActorID* receiver_actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_actor_);
  }
  if (receiver_actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_actor)->GetArena();
    if (message_arena != submessage_arena) {
      receiver_actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_actor, submessage_arena);
    }
    
  } else {
    
  }
  receiver_actor_ = receiver_actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor)
}

// string client_id = 5;
inline void CommunicationEvent::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::client_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
  return _internal_client_id();
}
inline void CommunicationEvent::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
}
inline std::string* CommunicationEvent::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CommunicationEvent::_internal_client_id() const {
  return client_id_.Get();
}
inline void CommunicationEvent::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
}
inline void CommunicationEvent::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
}
inline void CommunicationEvent::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
}
inline std::string* CommunicationEvent::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_client_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.client_id)
}

// string business_flow = 6;
inline void CommunicationEvent::clear_business_flow() {
  business_flow_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::business_flow() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
  return _internal_business_flow();
}
inline void CommunicationEvent::set_business_flow(const std::string& value) {
  _internal_set_business_flow(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
}
inline std::string* CommunicationEvent::mutable_business_flow() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
  return _internal_mutable_business_flow();
}
inline const std::string& CommunicationEvent::_internal_business_flow() const {
  return business_flow_.Get();
}
inline void CommunicationEvent::_internal_set_business_flow(const std::string& value) {
  
  business_flow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_business_flow(std::string&& value) {
  
  business_flow_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
}
inline void CommunicationEvent::set_business_flow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  business_flow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
}
inline void CommunicationEvent::set_business_flow(const char* value,
    size_t size) {
  
  business_flow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
}
inline std::string* CommunicationEvent::_internal_mutable_business_flow() {
  
  return business_flow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_business_flow() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
  return business_flow_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_business_flow(std::string* business_flow) {
  if (business_flow != nullptr) {
    
  } else {
    
  }
  business_flow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_flow,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.business_flow)
}

// .google.protobuf.Timestamp expiry = 7;
inline bool CommunicationEvent::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool CommunicationEvent::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommunicationEvent::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommunicationEvent::expiry() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.expiry)
  return _internal_expiry();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::release_expiry() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_;
  expiry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.expiry)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.expiry)
  return _internal_mutable_expiry();
}
inline void CommunicationEvent::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.expiry)
}

// .google.protobuf.Timestamp send_after = 8;
inline bool CommunicationEvent::_internal_has_send_after() const {
  return this != internal_default_instance() && send_after_ != nullptr;
}
inline bool CommunicationEvent::has_send_after() const {
  return _internal_has_send_after();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommunicationEvent::_internal_send_after() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = send_after_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommunicationEvent::send_after() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.send_after)
  return _internal_send_after();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_send_after(
    PROTOBUF_NAMESPACE_ID::Timestamp* send_after) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_after_);
  }
  send_after_ = send_after;
  if (send_after) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.send_after)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::release_send_after() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = send_after_;
  send_after_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::unsafe_arena_release_send_after() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.send_after)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = send_after_;
  send_after_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::_internal_mutable_send_after() {
  
  if (send_after_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    send_after_ = p;
  }
  return send_after_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommunicationEvent::mutable_send_after() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.send_after)
  return _internal_mutable_send_after();
}
inline void CommunicationEvent::set_allocated_send_after(PROTOBUF_NAMESPACE_ID::Timestamp* send_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_after_);
  }
  if (send_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_after)->GetArena();
    if (message_arena != submessage_arena) {
      send_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_after, submessage_arena);
    }
    
  } else {
    
  }
  send_after_ = send_after;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.send_after)
}

// repeated .farm.nurture.core.contracts.common.CommunicationChannel channel = 9;
inline int CommunicationEvent::_internal_channel_size() const {
  return channel_.size();
}
inline int CommunicationEvent::channel_size() const {
  return _internal_channel_size();
}
inline void CommunicationEvent::clear_channel() {
  channel_.Clear();
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel CommunicationEvent::_internal_channel(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(channel_.Get(index));
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel CommunicationEvent::channel(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.channel)
  return _internal_channel(index);
}
inline void CommunicationEvent::set_channel(int index, ::farm::nurture::core::contracts::common::CommunicationChannel value) {
  channel_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.channel)
}
inline void CommunicationEvent::_internal_add_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  channel_.Add(value);
}
inline void CommunicationEvent::add_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.CommunicationEvent.channel)
  _internal_add_channel(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CommunicationEvent::channel() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.CommunicationEvent.channel)
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CommunicationEvent::_internal_mutable_channel() {
  return &channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CommunicationEvent::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.CommunicationEvent.channel)
  return _internal_mutable_channel();
}

// string reference_id = 10;
inline void CommunicationEvent::clear_reference_id() {
  reference_id_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
  return _internal_reference_id();
}
inline void CommunicationEvent::set_reference_id(const std::string& value) {
  _internal_set_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
}
inline std::string* CommunicationEvent::mutable_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
  return _internal_mutable_reference_id();
}
inline const std::string& CommunicationEvent::_internal_reference_id() const {
  return reference_id_.Get();
}
inline void CommunicationEvent::_internal_set_reference_id(const std::string& value) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_reference_id(std::string&& value) {
  
  reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
}
inline void CommunicationEvent::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
}
inline void CommunicationEvent::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
}
inline std::string* CommunicationEvent::_internal_mutable_reference_id() {
  
  return reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
  return reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_reference_id(std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.reference_id)
}

// repeated .farm.nurture.core.contracts.ce.Placeholder content_metadata = 11;
inline int CommunicationEvent::_internal_content_metadata_size() const {
  return content_metadata_.size();
}
inline int CommunicationEvent::content_metadata_size() const {
  return _internal_content_metadata_size();
}
inline void CommunicationEvent::clear_content_metadata() {
  content_metadata_.Clear();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::mutable_content_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata)
  return content_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
CommunicationEvent::mutable_content_metadata() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata)
  return &content_metadata_;
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& CommunicationEvent::_internal_content_metadata(int index) const {
  return content_metadata_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& CommunicationEvent::content_metadata(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata)
  return _internal_content_metadata(index);
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::_internal_add_content_metadata() {
  return content_metadata_.Add();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* CommunicationEvent::add_content_metadata() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata)
  return _internal_add_content_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
CommunicationEvent::content_metadata() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.CommunicationEvent.content_metadata)
  return content_metadata_;
}

// .farm.nurture.core.contracts.ce.ActorDetails receiver_actor_details = 12;
inline bool CommunicationEvent::_internal_has_receiver_actor_details() const {
  return this != internal_default_instance() && receiver_actor_details_ != nullptr;
}
inline bool CommunicationEvent::has_receiver_actor_details() const {
  return _internal_has_receiver_actor_details();
}
inline void CommunicationEvent::clear_receiver_actor_details() {
  if (GetArena() == nullptr && receiver_actor_details_ != nullptr) {
    delete receiver_actor_details_;
  }
  receiver_actor_details_ = nullptr;
}
inline const ::farm::nurture::core::contracts::ce::ActorDetails& CommunicationEvent::_internal_receiver_actor_details() const {
  const ::farm::nurture::core::contracts::ce::ActorDetails* p = receiver_actor_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::ActorDetails&>(
      ::farm::nurture::core::contracts::ce::_ActorDetails_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::ActorDetails& CommunicationEvent::receiver_actor_details() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details)
  return _internal_receiver_actor_details();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_receiver_actor_details(
    ::farm::nurture::core::contracts::ce::ActorDetails* receiver_actor_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_actor_details_);
  }
  receiver_actor_details_ = receiver_actor_details;
  if (receiver_actor_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details)
}
inline ::farm::nurture::core::contracts::ce::ActorDetails* CommunicationEvent::release_receiver_actor_details() {
  
  ::farm::nurture::core::contracts::ce::ActorDetails* temp = receiver_actor_details_;
  receiver_actor_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::ActorDetails* CommunicationEvent::unsafe_arena_release_receiver_actor_details() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details)
  
  ::farm::nurture::core::contracts::ce::ActorDetails* temp = receiver_actor_details_;
  receiver_actor_details_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::ActorDetails* CommunicationEvent::_internal_mutable_receiver_actor_details() {
  
  if (receiver_actor_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::ActorDetails>(GetArena());
    receiver_actor_details_ = p;
  }
  return receiver_actor_details_;
}
inline ::farm::nurture::core::contracts::ce::ActorDetails* CommunicationEvent::mutable_receiver_actor_details() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details)
  return _internal_mutable_receiver_actor_details();
}
inline void CommunicationEvent::set_allocated_receiver_actor_details(::farm::nurture::core::contracts::ce::ActorDetails* receiver_actor_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete receiver_actor_details_;
  }
  if (receiver_actor_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(receiver_actor_details);
    if (message_arena != submessage_arena) {
      receiver_actor_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_actor_details, submessage_arena);
    }
    
  } else {
    
  }
  receiver_actor_details_ = receiver_actor_details;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.receiver_actor_details)
}

// .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 13;
inline bool CommunicationEvent::_internal_has_channel_attributes() const {
  return this != internal_default_instance() && channel_attributes_ != nullptr;
}
inline bool CommunicationEvent::has_channel_attributes() const {
  return _internal_has_channel_attributes();
}
inline void CommunicationEvent::clear_channel_attributes() {
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& CommunicationEvent::_internal_channel_attributes() const {
  const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* p = channel_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&>(
      ::farm::nurture::core::contracts::ce::_CommunicationChannelAttributes_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& CommunicationEvent::channel_attributes() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes)
  return _internal_channel_attributes();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_channel_attributes(
    ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_attributes_);
  }
  channel_attributes_ = channel_attributes;
  if (channel_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes)
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* CommunicationEvent::release_channel_attributes() {
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* CommunicationEvent::unsafe_arena_release_channel_attributes() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes)
  
  ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* temp = channel_attributes_;
  channel_attributes_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* CommunicationEvent::_internal_mutable_channel_attributes() {
  
  if (channel_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::CommunicationChannelAttributes>(GetArena());
    channel_attributes_ = p;
  }
  return channel_attributes_;
}
inline ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* CommunicationEvent::mutable_channel_attributes() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes)
  return _internal_mutable_channel_attributes();
}
inline void CommunicationEvent::set_allocated_channel_attributes(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* channel_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_attributes_;
  }
  if (channel_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_attributes);
    if (message_arena != submessage_arena) {
      channel_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_attributes, submessage_arena);
    }
    
  } else {
    
  }
  channel_attributes_ = channel_attributes;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.channel_attributes)
}

// .farm.nurture.core.contracts.common.Tenant tenant = 14;
inline void CommunicationEvent::clear_tenant() {
  tenant_ = 0;
}
inline ::farm::nurture::core::contracts::common::Tenant CommunicationEvent::_internal_tenant() const {
  return static_cast< ::farm::nurture::core::contracts::common::Tenant >(tenant_);
}
inline ::farm::nurture::core::contracts::common::Tenant CommunicationEvent::tenant() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.tenant)
  return _internal_tenant();
}
inline void CommunicationEvent::_internal_set_tenant(::farm::nurture::core::contracts::common::Tenant value) {
  
  tenant_ = value;
}
inline void CommunicationEvent::set_tenant(::farm::nurture::core::contracts::common::Tenant value) {
  _internal_set_tenant(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.tenant)
}

// .farm.nurture.core.contracts.ce.Media media = 15;
inline bool CommunicationEvent::_internal_has_media() const {
  return this != internal_default_instance() && media_ != nullptr;
}
inline bool CommunicationEvent::has_media() const {
  return _internal_has_media();
}
inline void CommunicationEvent::clear_media() {
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
}
inline const ::farm::nurture::core::contracts::ce::Media& CommunicationEvent::_internal_media() const {
  const ::farm::nurture::core::contracts::ce::Media* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::Media&>(
      ::farm::nurture::core::contracts::ce::_Media_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::Media& CommunicationEvent::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.media)
  return _internal_media();
}
inline void CommunicationEvent::unsafe_arena_set_allocated_media(
    ::farm::nurture::core::contracts::ce::Media* media) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.media)
}
inline ::farm::nurture::core::contracts::ce::Media* CommunicationEvent::release_media() {
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* CommunicationEvent::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.media)
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* CommunicationEvent::_internal_mutable_media() {
  
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::Media>(GetArena());
    media_ = p;
  }
  return media_;
}
inline ::farm::nurture::core::contracts::ce::Media* CommunicationEvent::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.media)
  return _internal_mutable_media();
}
inline void CommunicationEvent::set_allocated_media(::farm::nurture::core::contracts::ce::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete media_;
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(media);
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    
  } else {
    
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.media)
}

// string parent_reference_id = 16;
inline void CommunicationEvent::clear_parent_reference_id() {
  parent_reference_id_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::parent_reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
  return _internal_parent_reference_id();
}
inline void CommunicationEvent::set_parent_reference_id(const std::string& value) {
  _internal_set_parent_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
}
inline std::string* CommunicationEvent::mutable_parent_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
  return _internal_mutable_parent_reference_id();
}
inline const std::string& CommunicationEvent::_internal_parent_reference_id() const {
  return parent_reference_id_.Get();
}
inline void CommunicationEvent::_internal_set_parent_reference_id(const std::string& value) {
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_parent_reference_id(std::string&& value) {
  
  parent_reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
}
inline void CommunicationEvent::set_parent_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
}
inline void CommunicationEvent::set_parent_reference_id(const char* value,
    size_t size) {
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
}
inline std::string* CommunicationEvent::_internal_mutable_parent_reference_id() {
  
  return parent_reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_parent_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
  return parent_reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_parent_reference_id(std::string* parent_reference_id) {
  if (parent_reference_id != nullptr) {
    
  } else {
    
  }
  parent_reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id)
}

// string campaign_name = 17;
inline void CommunicationEvent::clear_campaign_name() {
  campaign_name_.ClearToEmpty();
}
inline const std::string& CommunicationEvent::campaign_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
  return _internal_campaign_name();
}
inline void CommunicationEvent::set_campaign_name(const std::string& value) {
  _internal_set_campaign_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
}
inline std::string* CommunicationEvent::mutable_campaign_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
  return _internal_mutable_campaign_name();
}
inline const std::string& CommunicationEvent::_internal_campaign_name() const {
  return campaign_name_.Get();
}
inline void CommunicationEvent::_internal_set_campaign_name(const std::string& value) {
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationEvent::set_campaign_name(std::string&& value) {
  
  campaign_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
}
inline void CommunicationEvent::set_campaign_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
}
inline void CommunicationEvent::set_campaign_name(const char* value,
    size_t size) {
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
}
inline std::string* CommunicationEvent::_internal_mutable_campaign_name() {
  
  return campaign_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationEvent::release_campaign_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
  return campaign_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationEvent::set_allocated_campaign_name(std::string* campaign_name) {
  if (campaign_name != nullptr) {
    
  } else {
    
  }
  campaign_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), campaign_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name)
}

// .farm.nurture.core.contracts.common.CommunicationVendor vendor = 18;
inline void CommunicationEvent::clear_vendor() {
  vendor_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationVendor CommunicationEvent::_internal_vendor() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationVendor >(vendor_);
}
inline ::farm::nurture::core::contracts::common::CommunicationVendor CommunicationEvent::vendor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationEvent.vendor)
  return _internal_vendor();
}
inline void CommunicationEvent::_internal_set_vendor(::farm::nurture::core::contracts::common::CommunicationVendor value) {
  
  vendor_ = value;
}
inline void CommunicationEvent::set_vendor(::farm::nurture::core::contracts::common::CommunicationVendor value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationEvent.vendor)
}

// -------------------------------------------------------------------

// Media

// .farm.nurture.core.contracts.common.MediaType media_type = 1;
inline void Media::clear_media_type() {
  media_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::MediaType Media::_internal_media_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::MediaType >(media_type_);
}
inline ::farm::nurture::core::contracts::common::MediaType Media::media_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Media.media_type)
  return _internal_media_type();
}
inline void Media::_internal_set_media_type(::farm::nurture::core::contracts::common::MediaType value) {
  
  media_type_ = value;
}
inline void Media::set_media_type(::farm::nurture::core::contracts::common::MediaType value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Media.media_type)
}

// .farm.nurture.core.contracts.common.MediaAccessType media_access_type = 2;
inline void Media::clear_media_access_type() {
  media_access_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::MediaAccessType Media::_internal_media_access_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::MediaAccessType >(media_access_type_);
}
inline ::farm::nurture::core::contracts::common::MediaAccessType Media::media_access_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Media.media_access_type)
  return _internal_media_access_type();
}
inline void Media::_internal_set_media_access_type(::farm::nurture::core::contracts::common::MediaAccessType value) {
  
  media_access_type_ = value;
}
inline void Media::set_media_access_type(::farm::nurture::core::contracts::common::MediaAccessType value) {
  _internal_set_media_access_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Media.media_access_type)
}

// string media_info = 3;
inline void Media::clear_media_info() {
  media_info_.ClearToEmpty();
}
inline const std::string& Media::media_info() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Media.media_info)
  return _internal_media_info();
}
inline void Media::set_media_info(const std::string& value) {
  _internal_set_media_info(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Media.media_info)
}
inline std::string* Media::mutable_media_info() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Media.media_info)
  return _internal_mutable_media_info();
}
inline const std::string& Media::_internal_media_info() const {
  return media_info_.Get();
}
inline void Media::_internal_set_media_info(const std::string& value) {
  
  media_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Media::set_media_info(std::string&& value) {
  
  media_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Media.media_info)
}
inline void Media::set_media_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Media.media_info)
}
inline void Media::set_media_info(const char* value,
    size_t size) {
  
  media_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Media.media_info)
}
inline std::string* Media::_internal_mutable_media_info() {
  
  return media_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Media::release_media_info() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Media.media_info)
  return media_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Media::set_allocated_media_info(std::string* media_info) {
  if (media_info != nullptr) {
    
  } else {
    
  }
  media_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Media.media_info)
}

// string document_name = 4;
inline void Media::clear_document_name() {
  document_name_.ClearToEmpty();
}
inline const std::string& Media::document_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Media.document_name)
  return _internal_document_name();
}
inline void Media::set_document_name(const std::string& value) {
  _internal_set_document_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Media.document_name)
}
inline std::string* Media::mutable_document_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Media.document_name)
  return _internal_mutable_document_name();
}
inline const std::string& Media::_internal_document_name() const {
  return document_name_.Get();
}
inline void Media::_internal_set_document_name(const std::string& value) {
  
  document_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Media::set_document_name(std::string&& value) {
  
  document_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Media.document_name)
}
inline void Media::set_document_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Media.document_name)
}
inline void Media::set_document_name(const char* value,
    size_t size) {
  
  document_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Media.document_name)
}
inline std::string* Media::_internal_mutable_document_name() {
  
  return document_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Media::release_document_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Media.document_name)
  return document_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Media::set_allocated_document_name(std::string* document_name) {
  if (document_name != nullptr) {
    
  } else {
    
  }
  document_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Media.document_name)
}

// string msg = 5;
inline void Media::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Media::msg() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Media.msg)
  return _internal_msg();
}
inline void Media::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Media.msg)
}
inline std::string* Media::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Media.msg)
  return _internal_mutable_msg();
}
inline const std::string& Media::_internal_msg() const {
  return msg_.Get();
}
inline void Media::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Media::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Media.msg)
}
inline void Media::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Media.msg)
}
inline void Media::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Media.msg)
}
inline std::string* Media::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Media::release_msg() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Media.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Media::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Media.msg)
}

// -------------------------------------------------------------------

// BulkCommunicationEvent

// repeated .farm.nurture.core.contracts.ce.CommunicationEvent communication_events = 1;
inline int BulkCommunicationEvent::_internal_communication_events_size() const {
  return communication_events_.size();
}
inline int BulkCommunicationEvent::communication_events_size() const {
  return _internal_communication_events_size();
}
inline void BulkCommunicationEvent::clear_communication_events() {
  communication_events_.Clear();
}
inline ::farm::nurture::core::contracts::ce::CommunicationEvent* BulkCommunicationEvent::mutable_communication_events(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events)
  return communication_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationEvent >*
BulkCommunicationEvent::mutable_communication_events() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events)
  return &communication_events_;
}
inline const ::farm::nurture::core::contracts::ce::CommunicationEvent& BulkCommunicationEvent::_internal_communication_events(int index) const {
  return communication_events_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::CommunicationEvent& BulkCommunicationEvent::communication_events(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events)
  return _internal_communication_events(index);
}
inline ::farm::nurture::core::contracts::ce::CommunicationEvent* BulkCommunicationEvent::_internal_add_communication_events() {
  return communication_events_.Add();
}
inline ::farm::nurture::core::contracts::ce::CommunicationEvent* BulkCommunicationEvent::add_communication_events() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events)
  return _internal_add_communication_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationEvent >&
BulkCommunicationEvent::communication_events() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.BulkCommunicationEvent.communication_events)
  return communication_events_;
}

// -------------------------------------------------------------------

// CommunicationChannelAttributes

// .farm.nurture.core.contracts.common.PushNotificationType push_notification_type = 1;
inline void CommunicationChannelAttributes::clear_push_notification_type() {
  push_notification_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::PushNotificationType CommunicationChannelAttributes::_internal_push_notification_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::PushNotificationType >(push_notification_type_);
}
inline ::farm::nurture::core::contracts::common::PushNotificationType CommunicationChannelAttributes::push_notification_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationChannelAttributes.push_notification_type)
  return _internal_push_notification_type();
}
inline void CommunicationChannelAttributes::_internal_set_push_notification_type(::farm::nurture::core::contracts::common::PushNotificationType value) {
  
  push_notification_type_ = value;
}
inline void CommunicationChannelAttributes::set_push_notification_type(::farm::nurture::core::contracts::common::PushNotificationType value) {
  _internal_set_push_notification_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationChannelAttributes.push_notification_type)
}

// -------------------------------------------------------------------

// Placeholder

// string key = 1;
inline void Placeholder::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Placeholder::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Placeholder.key)
  return _internal_key();
}
inline void Placeholder::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Placeholder.key)
}
inline std::string* Placeholder::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Placeholder.key)
  return _internal_mutable_key();
}
inline const std::string& Placeholder::_internal_key() const {
  return key_.Get();
}
inline void Placeholder::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Placeholder::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Placeholder.key)
}
inline void Placeholder::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Placeholder.key)
}
inline void Placeholder::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Placeholder.key)
}
inline std::string* Placeholder::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Placeholder::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Placeholder.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Placeholder::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Placeholder.key)
}

// string value = 2;
inline void Placeholder::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Placeholder::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Placeholder.value)
  return _internal_value();
}
inline void Placeholder::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Placeholder.value)
}
inline std::string* Placeholder::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Placeholder.value)
  return _internal_mutable_value();
}
inline const std::string& Placeholder::_internal_value() const {
  return value_.Get();
}
inline void Placeholder::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Placeholder::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Placeholder.value)
}
inline void Placeholder::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Placeholder.value)
}
inline void Placeholder::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Placeholder.value)
}
inline std::string* Placeholder::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Placeholder::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Placeholder.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Placeholder::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Placeholder.value)
}

// -------------------------------------------------------------------

// BulkCommunicationResponse

// repeated .farm.nurture.core.contracts.ce.CommunicationResponse communication_responses = 1;
inline int BulkCommunicationResponse::_internal_communication_responses_size() const {
  return communication_responses_.size();
}
inline int BulkCommunicationResponse::communication_responses_size() const {
  return _internal_communication_responses_size();
}
inline void BulkCommunicationResponse::clear_communication_responses() {
  communication_responses_.Clear();
}
inline ::farm::nurture::core::contracts::ce::CommunicationResponse* BulkCommunicationResponse::mutable_communication_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses)
  return communication_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationResponse >*
BulkCommunicationResponse::mutable_communication_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses)
  return &communication_responses_;
}
inline const ::farm::nurture::core::contracts::ce::CommunicationResponse& BulkCommunicationResponse::_internal_communication_responses(int index) const {
  return communication_responses_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::CommunicationResponse& BulkCommunicationResponse::communication_responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses)
  return _internal_communication_responses(index);
}
inline ::farm::nurture::core::contracts::ce::CommunicationResponse* BulkCommunicationResponse::_internal_add_communication_responses() {
  return communication_responses_.Add();
}
inline ::farm::nurture::core::contracts::ce::CommunicationResponse* BulkCommunicationResponse::add_communication_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses)
  return _internal_add_communication_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::CommunicationResponse >&
BulkCommunicationResponse::communication_responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.BulkCommunicationResponse.communication_responses)
  return communication_responses_;
}

// -------------------------------------------------------------------

// CommunicationResponse

// string reference_id = 1;
inline void CommunicationResponse::clear_reference_id() {
  reference_id_.ClearToEmpty();
}
inline const std::string& CommunicationResponse::reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
  return _internal_reference_id();
}
inline void CommunicationResponse::set_reference_id(const std::string& value) {
  _internal_set_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
}
inline std::string* CommunicationResponse::mutable_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
  return _internal_mutable_reference_id();
}
inline const std::string& CommunicationResponse::_internal_reference_id() const {
  return reference_id_.Get();
}
inline void CommunicationResponse::_internal_set_reference_id(const std::string& value) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommunicationResponse::set_reference_id(std::string&& value) {
  
  reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
}
inline void CommunicationResponse::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
}
inline void CommunicationResponse::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
}
inline std::string* CommunicationResponse::_internal_mutable_reference_id() {
  
  return reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommunicationResponse::release_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
  return reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationResponse::set_allocated_reference_id(std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.CommunicationResponse.reference_id)
}

// -------------------------------------------------------------------

// ActorDetails

// string email_id = 1;
inline void ActorDetails::clear_email_id() {
  email_id_.ClearToEmpty();
}
inline const std::string& ActorDetails::email_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.email_id)
  return _internal_email_id();
}
inline void ActorDetails::set_email_id(const std::string& value) {
  _internal_set_email_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.email_id)
}
inline std::string* ActorDetails::mutable_email_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActorDetails.email_id)
  return _internal_mutable_email_id();
}
inline const std::string& ActorDetails::_internal_email_id() const {
  return email_id_.Get();
}
inline void ActorDetails::_internal_set_email_id(const std::string& value) {
  
  email_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorDetails::set_email_id(std::string&& value) {
  
  email_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.ActorDetails.email_id)
}
inline void ActorDetails::set_email_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.ActorDetails.email_id)
}
inline void ActorDetails::set_email_id(const char* value,
    size_t size) {
  
  email_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.ActorDetails.email_id)
}
inline std::string* ActorDetails::_internal_mutable_email_id() {
  
  return email_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorDetails::release_email_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActorDetails.email_id)
  return email_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorDetails::set_allocated_email_id(std::string* email_id) {
  if (email_id != nullptr) {
    
  } else {
    
  }
  email_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActorDetails.email_id)
}

// string mobile_number = 2;
inline void ActorDetails::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& ActorDetails::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
  return _internal_mobile_number();
}
inline void ActorDetails::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
}
inline std::string* ActorDetails::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& ActorDetails::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void ActorDetails::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorDetails::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
}
inline void ActorDetails::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
}
inline void ActorDetails::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
}
inline std::string* ActorDetails::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorDetails::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorDetails::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActorDetails.mobile_number)
}

// .farm.nurture.core.contracts.common.LanguageCode language_code = 3;
inline void ActorDetails::clear_language_code() {
  language_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActorDetails::_internal_language_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(language_code_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActorDetails::language_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.language_code)
  return _internal_language_code();
}
inline void ActorDetails::_internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  language_code_ = value;
}
inline void ActorDetails::set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.language_code)
}

// string fcm_token = 4;
inline void ActorDetails::clear_fcm_token() {
  fcm_token_.ClearToEmpty();
}
inline const std::string& ActorDetails::fcm_token() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
  return _internal_fcm_token();
}
inline void ActorDetails::set_fcm_token(const std::string& value) {
  _internal_set_fcm_token(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
}
inline std::string* ActorDetails::mutable_fcm_token() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
  return _internal_mutable_fcm_token();
}
inline const std::string& ActorDetails::_internal_fcm_token() const {
  return fcm_token_.Get();
}
inline void ActorDetails::_internal_set_fcm_token(const std::string& value) {
  
  fcm_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorDetails::set_fcm_token(std::string&& value) {
  
  fcm_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
}
inline void ActorDetails::set_fcm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fcm_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
}
inline void ActorDetails::set_fcm_token(const char* value,
    size_t size) {
  
  fcm_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
}
inline std::string* ActorDetails::_internal_mutable_fcm_token() {
  
  return fcm_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorDetails::release_fcm_token() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
  return fcm_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorDetails::set_allocated_fcm_token(std::string* fcm_token) {
  if (fcm_token != nullptr) {
    
  } else {
    
  }
  fcm_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fcm_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActorDetails.fcm_token)
}

// .farm.nurture.core.contracts.common.AppID app_id = 5;
inline void ActorDetails::clear_app_id() {
  app_id_ = 0;
}
inline ::farm::nurture::core::contracts::common::AppID ActorDetails::_internal_app_id() const {
  return static_cast< ::farm::nurture::core::contracts::common::AppID >(app_id_);
}
inline ::farm::nurture::core::contracts::common::AppID ActorDetails::app_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.app_id)
  return _internal_app_id();
}
inline void ActorDetails::_internal_set_app_id(::farm::nurture::core::contracts::common::AppID value) {
  
  app_id_ = value;
}
inline void ActorDetails::set_app_id(::farm::nurture::core::contracts::common::AppID value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.app_id)
}

// .farm.nurture.core.contracts.common.AppType app_type = 6;
inline void ActorDetails::clear_app_type() {
  app_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::AppType ActorDetails::_internal_app_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::AppType >(app_type_);
}
inline ::farm::nurture::core::contracts::common::AppType ActorDetails::app_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.app_type)
  return _internal_app_type();
}
inline void ActorDetails::_internal_set_app_type(::farm::nurture::core::contracts::common::AppType value) {
  
  app_type_ = value;
}
inline void ActorDetails::set_app_type(::farm::nurture::core::contracts::common::AppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.app_type)
}

// .farm.nurture.core.contracts.common.LanguageCode secondaryLanguage_code = 7;
inline void ActorDetails::clear_secondarylanguage_code() {
  secondarylanguage_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActorDetails::_internal_secondarylanguage_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(secondarylanguage_code_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActorDetails::secondarylanguage_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActorDetails.secondaryLanguage_code)
  return _internal_secondarylanguage_code();
}
inline void ActorDetails::_internal_set_secondarylanguage_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  secondarylanguage_code_ = value;
}
inline void ActorDetails::set_secondarylanguage_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_secondarylanguage_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActorDetails.secondaryLanguage_code)
}

// -------------------------------------------------------------------

// OptInRequest

// .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
inline bool OptInRequest::_internal_has_request_headers() const {
  return this != internal_default_instance() && request_headers_ != nullptr;
}
inline bool OptInRequest::has_request_headers() const {
  return _internal_has_request_headers();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OptInRequest::_internal_request_headers() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = request_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OptInRequest::request_headers() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.request_headers)
  return _internal_request_headers();
}
inline void OptInRequest::unsafe_arena_set_allocated_request_headers(
    ::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  request_headers_ = request_headers;
  if (request_headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.request_headers)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptInRequest::release_request_headers() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptInRequest::unsafe_arena_release_request_headers() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptInRequest.request_headers)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptInRequest::_internal_mutable_request_headers() {
  
  if (request_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    request_headers_ = p;
  }
  return request_headers_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptInRequest::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptInRequest.request_headers)
  return _internal_mutable_request_headers();
}
inline void OptInRequest::set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  if (request_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers)->GetArena();
    if (message_arena != submessage_arena) {
      request_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_headers, submessage_arena);
    }
    
  } else {
    
  }
  request_headers_ = request_headers;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.request_headers)
}

// .farm.nurture.core.contracts.common.ActorID actor = 2;
inline bool OptInRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool OptInRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& OptInRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& OptInRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.actor)
  return _internal_actor();
}
inline void OptInRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* OptInRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptInRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptInRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptInRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptInRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptInRequest.actor)
  return _internal_mutable_actor();
}
inline void OptInRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.actor)
}

// string mobile_number = 3;
inline void OptInRequest::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& OptInRequest::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
  return _internal_mobile_number();
}
inline void OptInRequest::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
}
inline std::string* OptInRequest::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& OptInRequest::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void OptInRequest::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OptInRequest::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
}
inline void OptInRequest::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
}
inline void OptInRequest::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
}
inline std::string* OptInRequest::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OptInRequest::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptInRequest::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.mobile_number)
}

// string farmer_name = 4;
inline void OptInRequest::clear_farmer_name() {
  farmer_name_.ClearToEmpty();
}
inline const std::string& OptInRequest::farmer_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
  return _internal_farmer_name();
}
inline void OptInRequest::set_farmer_name(const std::string& value) {
  _internal_set_farmer_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
}
inline std::string* OptInRequest::mutable_farmer_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
  return _internal_mutable_farmer_name();
}
inline const std::string& OptInRequest::_internal_farmer_name() const {
  return farmer_name_.Get();
}
inline void OptInRequest::_internal_set_farmer_name(const std::string& value) {
  
  farmer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OptInRequest::set_farmer_name(std::string&& value) {
  
  farmer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
}
inline void OptInRequest::set_farmer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  farmer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
}
inline void OptInRequest::set_farmer_name(const char* value,
    size_t size) {
  
  farmer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
}
inline std::string* OptInRequest::_internal_mutable_farmer_name() {
  
  return farmer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OptInRequest::release_farmer_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
  return farmer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptInRequest::set_allocated_farmer_name(std::string* farmer_name) {
  if (farmer_name != nullptr) {
    
  } else {
    
  }
  farmer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), farmer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptInRequest.farmer_name)
}

// .farm.nurture.core.contracts.common.SourceSystem sourceSystem = 5;
inline void OptInRequest::clear_sourcesystem() {
  sourcesystem_ = 0;
}
inline ::farm::nurture::core::contracts::common::SourceSystem OptInRequest::_internal_sourcesystem() const {
  return static_cast< ::farm::nurture::core::contracts::common::SourceSystem >(sourcesystem_);
}
inline ::farm::nurture::core::contracts::common::SourceSystem OptInRequest::sourcesystem() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.sourceSystem)
  return _internal_sourcesystem();
}
inline void OptInRequest::_internal_set_sourcesystem(::farm::nurture::core::contracts::common::SourceSystem value) {
  
  sourcesystem_ = value;
}
inline void OptInRequest::set_sourcesystem(::farm::nurture::core::contracts::common::SourceSystem value) {
  _internal_set_sourcesystem(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRequest.sourceSystem)
}

// .farm.nurture.core.contracts.common.NameSpace nameSpace = 6;
inline void OptInRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace OptInRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace OptInRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRequest.nameSpace)
  return _internal_namespace_();
}
inline void OptInRequest::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void OptInRequest::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRequest.nameSpace)
}

// -------------------------------------------------------------------

// OptInRespone

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void OptInRespone::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OptInRespone::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OptInRespone::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRespone.status)
  return _internal_status();
}
inline void OptInRespone::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void OptInRespone::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRespone.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
inline void OptInRespone::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OptInRespone::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OptInRespone::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRespone.status_code)
  return _internal_status_code();
}
inline void OptInRespone::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void OptInRespone::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRespone.status_code)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int OptInRespone::_internal_attribs_size() const {
  return attribs_.size();
}
inline int OptInRespone::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* OptInRespone::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptInRespone.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
OptInRespone::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.OptInRespone.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& OptInRespone::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& OptInRespone::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRespone.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* OptInRespone::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* OptInRespone::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.OptInRespone.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
OptInRespone::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.OptInRespone.attribs)
  return attribs_;
}

// int64 id = 4;
inline void OptInRespone::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OptInRespone::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OptInRespone::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptInRespone.id)
  return _internal_id();
}
inline void OptInRespone::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void OptInRespone::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptInRespone.id)
}

// -------------------------------------------------------------------

// OptOutRequest

// .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
inline bool OptOutRequest::_internal_has_request_headers() const {
  return this != internal_default_instance() && request_headers_ != nullptr;
}
inline bool OptOutRequest::has_request_headers() const {
  return _internal_has_request_headers();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OptOutRequest::_internal_request_headers() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = request_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& OptOutRequest::request_headers() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutRequest.request_headers)
  return _internal_request_headers();
}
inline void OptOutRequest::unsafe_arena_set_allocated_request_headers(
    ::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  request_headers_ = request_headers;
  if (request_headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.OptOutRequest.request_headers)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptOutRequest::release_request_headers() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptOutRequest::unsafe_arena_release_request_headers() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptOutRequest.request_headers)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptOutRequest::_internal_mutable_request_headers() {
  
  if (request_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    request_headers_ = p;
  }
  return request_headers_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* OptOutRequest::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptOutRequest.request_headers)
  return _internal_mutable_request_headers();
}
inline void OptOutRequest::set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  if (request_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers)->GetArena();
    if (message_arena != submessage_arena) {
      request_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_headers, submessage_arena);
    }
    
  } else {
    
  }
  request_headers_ = request_headers;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptOutRequest.request_headers)
}

// .farm.nurture.core.contracts.common.ActorID actor = 2;
inline bool OptOutRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool OptOutRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& OptOutRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& OptOutRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutRequest.actor)
  return _internal_actor();
}
inline void OptOutRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.OptOutRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* OptOutRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptOutRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptOutRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptOutRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* OptOutRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptOutRequest.actor)
  return _internal_mutable_actor();
}
inline void OptOutRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptOutRequest.actor)
}

// string mobile_number = 3;
inline void OptOutRequest::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& OptOutRequest::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
  return _internal_mobile_number();
}
inline void OptOutRequest::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
}
inline std::string* OptOutRequest::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& OptOutRequest::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void OptOutRequest::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OptOutRequest::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
}
inline void OptOutRequest::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
}
inline void OptOutRequest::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
}
inline std::string* OptOutRequest::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OptOutRequest::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptOutRequest::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.OptOutRequest.mobile_number)
}

// .farm.nurture.core.contracts.common.NameSpace nameSpace = 4;
inline void OptOutRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace OptOutRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace OptOutRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutRequest.nameSpace)
  return _internal_namespace_();
}
inline void OptOutRequest::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void OptOutRequest::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptOutRequest.nameSpace)
}

// -------------------------------------------------------------------

// OptOutResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void OptOutResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OptOutResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus OptOutResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutResponse.status)
  return _internal_status();
}
inline void OptOutResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void OptOutResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptOutResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
inline void OptOutResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OptOutResponse::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode OptOutResponse::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.OptOutResponse.status_code)
  return _internal_status_code();
}
inline void OptOutResponse::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void OptOutResponse::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.OptOutResponse.status_code)
}

// -------------------------------------------------------------------

// MessageAcknowledgementRequest

// .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
inline bool MessageAcknowledgementRequest::_internal_has_request_headers() const {
  return this != internal_default_instance() && request_headers_ != nullptr;
}
inline bool MessageAcknowledgementRequest::has_request_headers() const {
  return _internal_has_request_headers();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& MessageAcknowledgementRequest::_internal_request_headers() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = request_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& MessageAcknowledgementRequest::request_headers() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers)
  return _internal_request_headers();
}
inline void MessageAcknowledgementRequest::unsafe_arena_set_allocated_request_headers(
    ::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  request_headers_ = request_headers;
  if (request_headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* MessageAcknowledgementRequest::release_request_headers() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* MessageAcknowledgementRequest::unsafe_arena_release_request_headers() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* MessageAcknowledgementRequest::_internal_mutable_request_headers() {
  
  if (request_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    request_headers_ = p;
  }
  return request_headers_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* MessageAcknowledgementRequest::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers)
  return _internal_mutable_request_headers();
}
inline void MessageAcknowledgementRequest::set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  if (request_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers)->GetArena();
    if (message_arena != submessage_arena) {
      request_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_headers, submessage_arena);
    }
    
  } else {
    
  }
  request_headers_ = request_headers;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.request_headers)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool MessageAcknowledgementRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool MessageAcknowledgementRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgementRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgementRequest::start_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time)
  return _internal_start_time();
}
inline void MessageAcknowledgementRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time)
  return _internal_mutable_start_time();
}
inline void MessageAcknowledgementRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool MessageAcknowledgementRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool MessageAcknowledgementRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgementRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgementRequest::end_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time)
  return _internal_end_time();
}
inline void MessageAcknowledgementRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgementRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time)
  return _internal_mutable_end_time();
}
inline void MessageAcknowledgementRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.end_time)
}

// repeated .farm.nurture.core.contracts.common.CommunicationChannel channels = 4;
inline int MessageAcknowledgementRequest::_internal_channels_size() const {
  return channels_.size();
}
inline int MessageAcknowledgementRequest::channels_size() const {
  return _internal_channels_size();
}
inline void MessageAcknowledgementRequest::clear_channels() {
  channels_.Clear();
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel MessageAcknowledgementRequest::_internal_channels(int index) const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(channels_.Get(index));
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel MessageAcknowledgementRequest::channels(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels)
  return _internal_channels(index);
}
inline void MessageAcknowledgementRequest::set_channels(int index, ::farm::nurture::core::contracts::common::CommunicationChannel value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels)
}
inline void MessageAcknowledgementRequest::_internal_add_channels(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  channels_.Add(value);
}
inline void MessageAcknowledgementRequest::add_channels(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels)
  _internal_add_channels(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
MessageAcknowledgementRequest::channels() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels)
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MessageAcknowledgementRequest::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MessageAcknowledgementRequest::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.channels)
  return _internal_mutable_channels();
}

// string template_name_like = 5;
inline void MessageAcknowledgementRequest::clear_template_name_like() {
  template_name_like_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgementRequest::template_name_like() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
  return _internal_template_name_like();
}
inline void MessageAcknowledgementRequest::set_template_name_like(const std::string& value) {
  _internal_set_template_name_like(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
}
inline std::string* MessageAcknowledgementRequest::mutable_template_name_like() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
  return _internal_mutable_template_name_like();
}
inline const std::string& MessageAcknowledgementRequest::_internal_template_name_like() const {
  return template_name_like_.Get();
}
inline void MessageAcknowledgementRequest::_internal_set_template_name_like(const std::string& value) {
  
  template_name_like_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgementRequest::set_template_name_like(std::string&& value) {
  
  template_name_like_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
}
inline void MessageAcknowledgementRequest::set_template_name_like(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_like_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
}
inline void MessageAcknowledgementRequest::set_template_name_like(const char* value,
    size_t size) {
  
  template_name_like_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
}
inline std::string* MessageAcknowledgementRequest::_internal_mutable_template_name_like() {
  
  return template_name_like_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgementRequest::release_template_name_like() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
  return template_name_like_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgementRequest::set_allocated_template_name_like(std::string* template_name_like) {
  if (template_name_like != nullptr) {
    
  } else {
    
  }
  template_name_like_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name_like,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like)
}

// string mobile_number = 6;
inline void MessageAcknowledgementRequest::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgementRequest::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
  return _internal_mobile_number();
}
inline void MessageAcknowledgementRequest::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
}
inline std::string* MessageAcknowledgementRequest::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& MessageAcknowledgementRequest::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void MessageAcknowledgementRequest::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgementRequest::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
}
inline void MessageAcknowledgementRequest::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
}
inline void MessageAcknowledgementRequest::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
}
inline std::string* MessageAcknowledgementRequest::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgementRequest::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgementRequest::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number)
}

// string reference_id = 7;
inline void MessageAcknowledgementRequest::clear_reference_id() {
  reference_id_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgementRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
  return _internal_reference_id();
}
inline void MessageAcknowledgementRequest::set_reference_id(const std::string& value) {
  _internal_set_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
}
inline std::string* MessageAcknowledgementRequest::mutable_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
  return _internal_mutable_reference_id();
}
inline const std::string& MessageAcknowledgementRequest::_internal_reference_id() const {
  return reference_id_.Get();
}
inline void MessageAcknowledgementRequest::_internal_set_reference_id(const std::string& value) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgementRequest::set_reference_id(std::string&& value) {
  
  reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
}
inline void MessageAcknowledgementRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
}
inline void MessageAcknowledgementRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
}
inline std::string* MessageAcknowledgementRequest::_internal_mutable_reference_id() {
  
  return reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgementRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
  return reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgementRequest::set_allocated_reference_id(std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id)
}

// int32 limit = 8;
inline void MessageAcknowledgementRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgementRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgementRequest::limit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.limit)
  return _internal_limit();
}
inline void MessageAcknowledgementRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void MessageAcknowledgementRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.limit)
}

// int32 offset = 9;
inline void MessageAcknowledgementRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgementRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgementRequest::offset() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.offset)
  return _internal_offset();
}
inline void MessageAcknowledgementRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void MessageAcknowledgementRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.offset)
}

// .farm.nurture.core.contracts.common.ResponseOrderType responseOrderType = 10;
inline void MessageAcknowledgementRequest::clear_responseordertype() {
  responseordertype_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseOrderType MessageAcknowledgementRequest::_internal_responseordertype() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseOrderType >(responseordertype_);
}
inline ::farm::nurture::core::contracts::common::ResponseOrderType MessageAcknowledgementRequest::responseordertype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.responseOrderType)
  return _internal_responseordertype();
}
inline void MessageAcknowledgementRequest::_internal_set_responseordertype(::farm::nurture::core::contracts::common::ResponseOrderType value) {
  
  responseordertype_ = value;
}
inline void MessageAcknowledgementRequest::set_responseordertype(::farm::nurture::core::contracts::common::ResponseOrderType value) {
  _internal_set_responseordertype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.responseOrderType)
}

// -------------------------------------------------------------------

// MessageAcknowledgementResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void MessageAcknowledgementResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus MessageAcknowledgementResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus MessageAcknowledgementResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status)
  return _internal_status();
}
inline void MessageAcknowledgementResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void MessageAcknowledgementResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
inline void MessageAcknowledgementResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode MessageAcknowledgementResponse::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode MessageAcknowledgementResponse::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status_code)
  return _internal_status_code();
}
inline void MessageAcknowledgementResponse::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void MessageAcknowledgementResponse::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.status_code)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int MessageAcknowledgementResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int MessageAcknowledgementResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgementResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
MessageAcknowledgementResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& MessageAcknowledgementResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& MessageAcknowledgementResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgementResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgementResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
MessageAcknowledgementResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.core.contracts.ce.MessageAcknowledgement message_acknowledgements = 4;
inline int MessageAcknowledgementResponse::_internal_message_acknowledgements_size() const {
  return message_acknowledgements_.size();
}
inline int MessageAcknowledgementResponse::message_acknowledgements_size() const {
  return _internal_message_acknowledgements_size();
}
inline void MessageAcknowledgementResponse::clear_message_acknowledgements() {
  message_acknowledgements_.Clear();
}
inline ::farm::nurture::core::contracts::ce::MessageAcknowledgement* MessageAcknowledgementResponse::mutable_message_acknowledgements(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements)
  return message_acknowledgements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >*
MessageAcknowledgementResponse::mutable_message_acknowledgements() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements)
  return &message_acknowledgements_;
}
inline const ::farm::nurture::core::contracts::ce::MessageAcknowledgement& MessageAcknowledgementResponse::_internal_message_acknowledgements(int index) const {
  return message_acknowledgements_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::MessageAcknowledgement& MessageAcknowledgementResponse::message_acknowledgements(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements)
  return _internal_message_acknowledgements(index);
}
inline ::farm::nurture::core::contracts::ce::MessageAcknowledgement* MessageAcknowledgementResponse::_internal_add_message_acknowledgements() {
  return message_acknowledgements_.Add();
}
inline ::farm::nurture::core::contracts::ce::MessageAcknowledgement* MessageAcknowledgementResponse::add_message_acknowledgements() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements)
  return _internal_add_message_acknowledgements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >&
MessageAcknowledgementResponse::message_acknowledgements() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse.message_acknowledgements)
  return message_acknowledgements_;
}

// -------------------------------------------------------------------

// MessageAcknowledgement

// int64 id = 1;
inline void MessageAcknowledgement::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageAcknowledgement::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageAcknowledgement::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.id)
  return _internal_id();
}
inline void MessageAcknowledgement::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void MessageAcknowledgement::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.id)
}

// .farm.nurture.core.contracts.common.ActorID actor = 2;
inline bool MessageAcknowledgement::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool MessageAcknowledgement::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& MessageAcknowledgement::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& MessageAcknowledgement::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor)
  return _internal_actor();
}
inline void MessageAcknowledgement::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* MessageAcknowledgement::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* MessageAcknowledgement::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* MessageAcknowledgement::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* MessageAcknowledgement::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor)
  return _internal_mutable_actor();
}
inline void MessageAcknowledgement::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor)
}

// string mobile_number = 3;
inline void MessageAcknowledgement::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
  return _internal_mobile_number();
}
inline void MessageAcknowledgement::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
}
inline std::string* MessageAcknowledgement::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& MessageAcknowledgement::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void MessageAcknowledgement::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
}
inline void MessageAcknowledgement::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
}
inline void MessageAcknowledgement::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
}
inline std::string* MessageAcknowledgement::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number)
}

// .farm.nurture.core.contracts.common.CommunicationChannel channel = 4;
inline void MessageAcknowledgement::clear_channel() {
  channel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel MessageAcknowledgement::_internal_channel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(channel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel MessageAcknowledgement::channel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.channel)
  return _internal_channel();
}
inline void MessageAcknowledgement::_internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  channel_ = value;
}
inline void MessageAcknowledgement::set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.channel)
}

// string reference_id = 5;
inline void MessageAcknowledgement::clear_reference_id() {
  reference_id_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
  return _internal_reference_id();
}
inline void MessageAcknowledgement::set_reference_id(const std::string& value) {
  _internal_set_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
}
inline std::string* MessageAcknowledgement::mutable_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
  return _internal_mutable_reference_id();
}
inline const std::string& MessageAcknowledgement::_internal_reference_id() const {
  return reference_id_.Get();
}
inline void MessageAcknowledgement::_internal_set_reference_id(const std::string& value) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_reference_id(std::string&& value) {
  
  reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
}
inline void MessageAcknowledgement::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
}
inline void MessageAcknowledgement::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
}
inline std::string* MessageAcknowledgement::_internal_mutable_reference_id() {
  
  return reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
  return reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_reference_id(std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id)
}

// string template_name = 6;
inline void MessageAcknowledgement::clear_template_name() {
  template_name_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::template_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
  return _internal_template_name();
}
inline void MessageAcknowledgement::set_template_name(const std::string& value) {
  _internal_set_template_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
}
inline std::string* MessageAcknowledgement::mutable_template_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
  return _internal_mutable_template_name();
}
inline const std::string& MessageAcknowledgement::_internal_template_name() const {
  return template_name_.Get();
}
inline void MessageAcknowledgement::_internal_set_template_name(const std::string& value) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_template_name(std::string&& value) {
  
  template_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
}
inline void MessageAcknowledgement::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
}
inline void MessageAcknowledgement::set_template_name(const char* value,
    size_t size) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
}
inline std::string* MessageAcknowledgement::_internal_mutable_template_name() {
  
  return template_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_template_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
  return template_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_template_name(std::string* template_name) {
  if (template_name != nullptr) {
    
  } else {
    
  }
  template_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name)
}

// .farm.nurture.core.contracts.common.Language language = 7;
inline void MessageAcknowledgement::clear_language() {
  language_ = 0;
}
inline ::farm::nurture::core::contracts::common::Language MessageAcknowledgement::_internal_language() const {
  return static_cast< ::farm::nurture::core::contracts::common::Language >(language_);
}
inline ::farm::nurture::core::contracts::common::Language MessageAcknowledgement::language() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.language)
  return _internal_language();
}
inline void MessageAcknowledgement::_internal_set_language(::farm::nurture::core::contracts::common::Language value) {
  
  language_ = value;
}
inline void MessageAcknowledgement::set_language(::farm::nurture::core::contracts::common::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.language)
}

// string message_content = 8;
inline void MessageAcknowledgement::clear_message_content() {
  message_content_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::message_content() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
  return _internal_message_content();
}
inline void MessageAcknowledgement::set_message_content(const std::string& value) {
  _internal_set_message_content(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
}
inline std::string* MessageAcknowledgement::mutable_message_content() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
  return _internal_mutable_message_content();
}
inline const std::string& MessageAcknowledgement::_internal_message_content() const {
  return message_content_.Get();
}
inline void MessageAcknowledgement::_internal_set_message_content(const std::string& value) {
  
  message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_message_content(std::string&& value) {
  
  message_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
}
inline void MessageAcknowledgement::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
}
inline void MessageAcknowledgement::set_message_content(const char* value,
    size_t size) {
  
  message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
}
inline std::string* MessageAcknowledgement::_internal_mutable_message_content() {
  
  return message_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_message_content() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
  return message_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_message_content(std::string* message_content) {
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content)
}

// bool is_unicode = 9;
inline void MessageAcknowledgement::clear_is_unicode() {
  is_unicode_ = false;
}
inline bool MessageAcknowledgement::_internal_is_unicode() const {
  return is_unicode_;
}
inline bool MessageAcknowledgement::is_unicode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.is_unicode)
  return _internal_is_unicode();
}
inline void MessageAcknowledgement::_internal_set_is_unicode(bool value) {
  
  is_unicode_ = value;
}
inline void MessageAcknowledgement::set_is_unicode(bool value) {
  _internal_set_is_unicode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.is_unicode)
}

// string vendor_name = 10;
inline void MessageAcknowledgement::clear_vendor_name() {
  vendor_name_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::vendor_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
  return _internal_vendor_name();
}
inline void MessageAcknowledgement::set_vendor_name(const std::string& value) {
  _internal_set_vendor_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
}
inline std::string* MessageAcknowledgement::mutable_vendor_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
  return _internal_mutable_vendor_name();
}
inline const std::string& MessageAcknowledgement::_internal_vendor_name() const {
  return vendor_name_.Get();
}
inline void MessageAcknowledgement::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_vendor_name(std::string&& value) {
  
  vendor_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
}
inline void MessageAcknowledgement::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
}
inline void MessageAcknowledgement::set_vendor_name(const char* value,
    size_t size) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
}
inline std::string* MessageAcknowledgement::_internal_mutable_vendor_name() {
  
  return vendor_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_vendor_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
  return vendor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name)
}

// string vendor_message_id = 11;
inline void MessageAcknowledgement::clear_vendor_message_id() {
  vendor_message_id_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::vendor_message_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
  return _internal_vendor_message_id();
}
inline void MessageAcknowledgement::set_vendor_message_id(const std::string& value) {
  _internal_set_vendor_message_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
}
inline std::string* MessageAcknowledgement::mutable_vendor_message_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
  return _internal_mutable_vendor_message_id();
}
inline const std::string& MessageAcknowledgement::_internal_vendor_message_id() const {
  return vendor_message_id_.Get();
}
inline void MessageAcknowledgement::_internal_set_vendor_message_id(const std::string& value) {
  
  vendor_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_vendor_message_id(std::string&& value) {
  
  vendor_message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
}
inline void MessageAcknowledgement::set_vendor_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
}
inline void MessageAcknowledgement::set_vendor_message_id(const char* value,
    size_t size) {
  
  vendor_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
}
inline std::string* MessageAcknowledgement::_internal_mutable_vendor_message_id() {
  
  return vendor_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_vendor_message_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
  return vendor_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_vendor_message_id(std::string* vendor_message_id) {
  if (vendor_message_id != nullptr) {
    
  } else {
    
  }
  vendor_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id)
}

// .farm.nurture.core.contracts.common.CommunicationState state = 12;
inline void MessageAcknowledgement::clear_state() {
  state_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationState MessageAcknowledgement::_internal_state() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationState >(state_);
}
inline ::farm::nurture::core::contracts::common::CommunicationState MessageAcknowledgement::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.state)
  return _internal_state();
}
inline void MessageAcknowledgement::_internal_set_state(::farm::nurture::core::contracts::common::CommunicationState value) {
  
  state_ = value;
}
inline void MessageAcknowledgement::set_state(::farm::nurture::core::contracts::common::CommunicationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.state)
}

// int32 retry_count = 13;
inline void MessageAcknowledgement::clear_retry_count() {
  retry_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgement::_internal_retry_count() const {
  return retry_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageAcknowledgement::retry_count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.retry_count)
  return _internal_retry_count();
}
inline void MessageAcknowledgement::_internal_set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retry_count_ = value;
}
inline void MessageAcknowledgement::set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retry_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.retry_count)
}

// repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 14;
inline int MessageAcknowledgement::_internal_placeholders_size() const {
  return placeholders_.size();
}
inline int MessageAcknowledgement::placeholders_size() const {
  return _internal_placeholders_size();
}
inline void MessageAcknowledgement::clear_placeholders() {
  placeholders_.Clear();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* MessageAcknowledgement::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
MessageAcknowledgement::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders)
  return &placeholders_;
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& MessageAcknowledgement::_internal_placeholders(int index) const {
  return placeholders_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& MessageAcknowledgement::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders)
  return _internal_placeholders(index);
}
inline ::farm::nurture::core::contracts::ce::Placeholder* MessageAcknowledgement::_internal_add_placeholders() {
  return placeholders_.Add();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* MessageAcknowledgement::add_placeholders() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders)
  return _internal_add_placeholders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
MessageAcknowledgement::placeholders() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.MessageAcknowledgement.placeholders)
  return placeholders_;
}

// repeated .farm.nurture.core.contracts.common.Attribs attributes = 15;
inline int MessageAcknowledgement::_internal_attributes_size() const {
  return attributes_.size();
}
inline int MessageAcknowledgement::attributes_size() const {
  return _internal_attributes_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgement::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
MessageAcknowledgement::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes)
  return &attributes_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& MessageAcknowledgement::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& MessageAcknowledgement::attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes)
  return _internal_attributes(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgement::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* MessageAcknowledgement::add_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
MessageAcknowledgement::attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.MessageAcknowledgement.attributes)
  return attributes_;
}

// .google.protobuf.Timestamp vendor_delivery_time = 16;
inline bool MessageAcknowledgement::_internal_has_vendor_delivery_time() const {
  return this != internal_default_instance() && vendor_delivery_time_ != nullptr;
}
inline bool MessageAcknowledgement::has_vendor_delivery_time() const {
  return _internal_has_vendor_delivery_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::_internal_vendor_delivery_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = vendor_delivery_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::vendor_delivery_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time)
  return _internal_vendor_delivery_time();
}
inline void MessageAcknowledgement::unsafe_arena_set_allocated_vendor_delivery_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* vendor_delivery_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_delivery_time_);
  }
  vendor_delivery_time_ = vendor_delivery_time;
  if (vendor_delivery_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::release_vendor_delivery_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = vendor_delivery_time_;
  vendor_delivery_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::unsafe_arena_release_vendor_delivery_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = vendor_delivery_time_;
  vendor_delivery_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::_internal_mutable_vendor_delivery_time() {
  
  if (vendor_delivery_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    vendor_delivery_time_ = p;
  }
  return vendor_delivery_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::mutable_vendor_delivery_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time)
  return _internal_mutable_vendor_delivery_time();
}
inline void MessageAcknowledgement::set_allocated_vendor_delivery_time(PROTOBUF_NAMESPACE_ID::Timestamp* vendor_delivery_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_delivery_time_);
  }
  if (vendor_delivery_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_delivery_time)->GetArena();
    if (message_arena != submessage_arena) {
      vendor_delivery_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vendor_delivery_time, submessage_arena);
    }
    
  } else {
    
  }
  vendor_delivery_time_ = vendor_delivery_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_delivery_time)
}

// .google.protobuf.Timestamp actor_delivery_time = 17;
inline bool MessageAcknowledgement::_internal_has_actor_delivery_time() const {
  return this != internal_default_instance() && actor_delivery_time_ != nullptr;
}
inline bool MessageAcknowledgement::has_actor_delivery_time() const {
  return _internal_has_actor_delivery_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::_internal_actor_delivery_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = actor_delivery_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::actor_delivery_time() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time)
  return _internal_actor_delivery_time();
}
inline void MessageAcknowledgement::unsafe_arena_set_allocated_actor_delivery_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* actor_delivery_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_delivery_time_);
  }
  actor_delivery_time_ = actor_delivery_time;
  if (actor_delivery_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::release_actor_delivery_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = actor_delivery_time_;
  actor_delivery_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::unsafe_arena_release_actor_delivery_time() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = actor_delivery_time_;
  actor_delivery_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::_internal_mutable_actor_delivery_time() {
  
  if (actor_delivery_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    actor_delivery_time_ = p;
  }
  return actor_delivery_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::mutable_actor_delivery_time() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time)
  return _internal_mutable_actor_delivery_time();
}
inline void MessageAcknowledgement::set_allocated_actor_delivery_time(PROTOBUF_NAMESPACE_ID::Timestamp* actor_delivery_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_delivery_time_);
  }
  if (actor_delivery_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_delivery_time)->GetArena();
    if (message_arena != submessage_arena) {
      actor_delivery_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_delivery_time, submessage_arena);
    }
    
  } else {
    
  }
  actor_delivery_time_ = actor_delivery_time;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_delivery_time)
}

// .farm.nurture.core.contracts.common.ContactType contact_type = 18;
inline void MessageAcknowledgement::clear_contact_type() {
  contact_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::ContactType MessageAcknowledgement::_internal_contact_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::ContactType >(contact_type_);
}
inline ::farm::nurture::core::contracts::common::ContactType MessageAcknowledgement::contact_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.contact_type)
  return _internal_contact_type();
}
inline void MessageAcknowledgement::_internal_set_contact_type(::farm::nurture::core::contracts::common::ContactType value) {
  
  contact_type_ = value;
}
inline void MessageAcknowledgement::set_contact_type(::farm::nurture::core::contracts::common::ContactType value) {
  _internal_set_contact_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.contact_type)
}

// string actor_contact_id = 19;
inline void MessageAcknowledgement::clear_actor_contact_id() {
  actor_contact_id_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::actor_contact_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
  return _internal_actor_contact_id();
}
inline void MessageAcknowledgement::set_actor_contact_id(const std::string& value) {
  _internal_set_actor_contact_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
}
inline std::string* MessageAcknowledgement::mutable_actor_contact_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
  return _internal_mutable_actor_contact_id();
}
inline const std::string& MessageAcknowledgement::_internal_actor_contact_id() const {
  return actor_contact_id_.Get();
}
inline void MessageAcknowledgement::_internal_set_actor_contact_id(const std::string& value) {
  
  actor_contact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_actor_contact_id(std::string&& value) {
  
  actor_contact_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
}
inline void MessageAcknowledgement::set_actor_contact_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_contact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
}
inline void MessageAcknowledgement::set_actor_contact_id(const char* value,
    size_t size) {
  
  actor_contact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
}
inline std::string* MessageAcknowledgement::_internal_mutable_actor_contact_id() {
  
  return actor_contact_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_actor_contact_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
  return actor_contact_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_actor_contact_id(std::string* actor_contact_id) {
  if (actor_contact_id != nullptr) {
    
  } else {
    
  }
  actor_contact_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_contact_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id)
}

// string parent_reference_id = 20;
inline void MessageAcknowledgement::clear_parent_reference_id() {
  parent_reference_id_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::parent_reference_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
  return _internal_parent_reference_id();
}
inline void MessageAcknowledgement::set_parent_reference_id(const std::string& value) {
  _internal_set_parent_reference_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
}
inline std::string* MessageAcknowledgement::mutable_parent_reference_id() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
  return _internal_mutable_parent_reference_id();
}
inline const std::string& MessageAcknowledgement::_internal_parent_reference_id() const {
  return parent_reference_id_.Get();
}
inline void MessageAcknowledgement::_internal_set_parent_reference_id(const std::string& value) {
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_parent_reference_id(std::string&& value) {
  
  parent_reference_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
}
inline void MessageAcknowledgement::set_parent_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
}
inline void MessageAcknowledgement::set_parent_reference_id(const char* value,
    size_t size) {
  
  parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
}
inline std::string* MessageAcknowledgement::_internal_mutable_parent_reference_id() {
  
  return parent_reference_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_parent_reference_id() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
  return parent_reference_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_parent_reference_id(std::string* parent_reference_id) {
  if (parent_reference_id != nullptr) {
    
  } else {
    
  }
  parent_reference_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_reference_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id)
}

// string campaign_name = 21;
inline void MessageAcknowledgement::clear_campaign_name() {
  campaign_name_.ClearToEmpty();
}
inline const std::string& MessageAcknowledgement::campaign_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
  return _internal_campaign_name();
}
inline void MessageAcknowledgement::set_campaign_name(const std::string& value) {
  _internal_set_campaign_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
}
inline std::string* MessageAcknowledgement::mutable_campaign_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
  return _internal_mutable_campaign_name();
}
inline const std::string& MessageAcknowledgement::_internal_campaign_name() const {
  return campaign_name_.Get();
}
inline void MessageAcknowledgement::_internal_set_campaign_name(const std::string& value) {
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageAcknowledgement::set_campaign_name(std::string&& value) {
  
  campaign_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
}
inline void MessageAcknowledgement::set_campaign_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
}
inline void MessageAcknowledgement::set_campaign_name(const char* value,
    size_t size) {
  
  campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
}
inline std::string* MessageAcknowledgement::_internal_mutable_campaign_name() {
  
  return campaign_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageAcknowledgement::release_campaign_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
  return campaign_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAcknowledgement::set_allocated_campaign_name(std::string* campaign_name) {
  if (campaign_name != nullptr) {
    
  } else {
    
  }
  campaign_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), campaign_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name)
}

// .google.protobuf.Timestamp created_at = 22;
inline bool MessageAcknowledgement::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool MessageAcknowledgement::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::created_at() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at)
  return _internal_created_at();
}
inline void MessageAcknowledgement::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at)
  return _internal_mutable_created_at();
}
inline void MessageAcknowledgement::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.created_at)
}

// .google.protobuf.Timestamp updated_at = 23;
inline bool MessageAcknowledgement::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool MessageAcknowledgement::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageAcknowledgement::updated_at() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at)
  return _internal_updated_at();
}
inline void MessageAcknowledgement::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageAcknowledgement::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at)
  return _internal_mutable_updated_at();
}
inline void MessageAcknowledgement::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.MessageAcknowledgement.updated_at)
}

// -------------------------------------------------------------------

// Template

// int64 id = 1;
inline void Template::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Template::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Template::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.id)
  return _internal_id();
}
inline void Template::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Template::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.id)
}

// string name = 2;
inline void Template::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.name)
  return _internal_name();
}
inline void Template::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.name)
}
inline std::string* Template::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.name)
  return _internal_mutable_name();
}
inline const std::string& Template::_internal_name() const {
  return name_.Get();
}
inline void Template::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Template::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Template.name)
}
inline void Template::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Template.name)
}
inline void Template::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Template.name)
}
inline std::string* Template::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Template::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Template::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.name)
}

// .farm.nurture.core.contracts.common.Language language = 3;
inline void Template::clear_language() {
  language_ = 0;
}
inline ::farm::nurture::core::contracts::common::Language Template::_internal_language() const {
  return static_cast< ::farm::nurture::core::contracts::common::Language >(language_);
}
inline ::farm::nurture::core::contracts::common::Language Template::language() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.language)
  return _internal_language();
}
inline void Template::_internal_set_language(::farm::nurture::core::contracts::common::Language value) {
  
  language_ = value;
}
inline void Template::set_language(::farm::nurture::core::contracts::common::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.language)
}

// .farm.nurture.core.contracts.common.TemplateContentType content_type = 4;
inline void Template::clear_content_type() {
  content_type_ = 0;
}
inline ::farm::nurture::core::contracts::common::TemplateContentType Template::_internal_content_type() const {
  return static_cast< ::farm::nurture::core::contracts::common::TemplateContentType >(content_type_);
}
inline ::farm::nurture::core::contracts::common::TemplateContentType Template::content_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.content_type)
  return _internal_content_type();
}
inline void Template::_internal_set_content_type(::farm::nurture::core::contracts::common::TemplateContentType value) {
  
  content_type_ = value;
}
inline void Template::set_content_type(::farm::nurture::core::contracts::common::TemplateContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.content_type)
}

// string content = 5;
inline void Template::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Template::content() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.content)
  return _internal_content();
}
inline void Template::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.content)
}
inline std::string* Template::mutable_content() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.content)
  return _internal_mutable_content();
}
inline const std::string& Template::_internal_content() const {
  return content_.Get();
}
inline void Template::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Template::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Template.content)
}
inline void Template::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Template.content)
}
inline void Template::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Template.content)
}
inline std::string* Template::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Template::release_content() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Template::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.content)
}

// string title = 6;
inline void Template::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Template::title() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.title)
  return _internal_title();
}
inline void Template::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.title)
}
inline std::string* Template::mutable_title() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.title)
  return _internal_mutable_title();
}
inline const std::string& Template::_internal_title() const {
  return title_.Get();
}
inline void Template::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Template::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Template.title)
}
inline void Template::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Template.title)
}
inline void Template::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Template.title)
}
inline std::string* Template::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Template::release_title() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Template::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.title)
}

// bool active = 7;
inline void Template::clear_active() {
  active_ = false;
}
inline bool Template::_internal_active() const {
  return active_;
}
inline bool Template::active() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.active)
  return _internal_active();
}
inline void Template::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Template::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.active)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool Template::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Template::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::created_at() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.created_at)
  return _internal_created_at();
}
inline void Template::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.Template.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.created_at)
  return _internal_mutable_created_at();
}
inline void Template::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.created_at)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool Template::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Template::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::updated_at() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.updated_at)
  return _internal_updated_at();
}
inline void Template::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.Template.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.updated_at)
  return _internal_mutable_updated_at();
}
inline void Template::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.updated_at)
}

// .google.protobuf.Timestamp deleted_at = 10;
inline bool Template::_internal_has_deleted_at() const {
  return this != internal_default_instance() && deleted_at_ != nullptr;
}
inline bool Template::has_deleted_at() const {
  return _internal_has_deleted_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::_internal_deleted_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = deleted_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Template::deleted_at() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.deleted_at)
  return _internal_deleted_at();
}
inline void Template::unsafe_arena_set_allocated_deleted_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at_);
  }
  deleted_at_ = deleted_at;
  if (deleted_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.Template.deleted_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::release_deleted_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deleted_at_;
  deleted_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::unsafe_arena_release_deleted_at() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.deleted_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deleted_at_;
  deleted_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::_internal_mutable_deleted_at() {
  
  if (deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    deleted_at_ = p;
  }
  return deleted_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Template::mutable_deleted_at() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.deleted_at)
  return _internal_mutable_deleted_at();
}
inline void Template::set_allocated_deleted_at(PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at_);
  }
  if (deleted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at)->GetArena();
    if (message_arena != submessage_arena) {
      deleted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_at, submessage_arena);
    }
    
  } else {
    
  }
  deleted_at_ = deleted_at;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.deleted_at)
}

// repeated .farm.nurture.core.contracts.common.Attribs attributes = 11;
inline int Template::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Template::attributes_size() const {
  return _internal_attributes_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
Template::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.Template.attributes)
  return &attributes_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& Template::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& Template::attributes(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.attributes)
  return _internal_attributes(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::add_attributes() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.Template.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
Template::attributes() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.Template.attributes)
  return attributes_;
}

// string owner_email = 12;
inline void Template::clear_owner_email() {
  owner_email_.ClearToEmpty();
}
inline const std::string& Template::owner_email() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.owner_email)
  return _internal_owner_email();
}
inline void Template::set_owner_email(const std::string& value) {
  _internal_set_owner_email(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.owner_email)
}
inline std::string* Template::mutable_owner_email() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.owner_email)
  return _internal_mutable_owner_email();
}
inline const std::string& Template::_internal_owner_email() const {
  return owner_email_.Get();
}
inline void Template::_internal_set_owner_email(const std::string& value) {
  
  owner_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Template::set_owner_email(std::string&& value) {
  
  owner_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Template.owner_email)
}
inline void Template::set_owner_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Template.owner_email)
}
inline void Template::set_owner_email(const char* value,
    size_t size) {
  
  owner_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Template.owner_email)
}
inline std::string* Template::_internal_mutable_owner_email() {
  
  return owner_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Template::release_owner_email() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.owner_email)
  return owner_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Template::set_allocated_owner_email(std::string* owner_email) {
  if (owner_email != nullptr) {
    
  } else {
    
  }
  owner_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.owner_email)
}

// string vertical = 13;
inline void Template::clear_vertical() {
  vertical_.ClearToEmpty();
}
inline const std::string& Template::vertical() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.vertical)
  return _internal_vertical();
}
inline void Template::set_vertical(const std::string& value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.Template.vertical)
}
inline std::string* Template::mutable_vertical() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.vertical)
  return _internal_mutable_vertical();
}
inline const std::string& Template::_internal_vertical() const {
  return vertical_.Get();
}
inline void Template::_internal_set_vertical(const std::string& value) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Template::set_vertical(std::string&& value) {
  
  vertical_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.Template.vertical)
}
inline void Template::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.Template.vertical)
}
inline void Template::set_vertical(const char* value,
    size_t size) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.Template.vertical)
}
inline std::string* Template::_internal_mutable_vertical() {
  
  return vertical_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Template::release_vertical() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.Template.vertical)
  return vertical_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Template::set_allocated_vertical(std::string* vertical) {
  if (vertical != nullptr) {
    
  } else {
    
  }
  vertical_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertical,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.Template.vertical)
}

// repeated .farm.nurture.core.contracts.common.Attribs meta_data = 14;
inline int Template::_internal_meta_data_size() const {
  return meta_data_.size();
}
inline int Template::meta_data_size() const {
  return _internal_meta_data_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::mutable_meta_data(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.Template.meta_data)
  return meta_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
Template::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.Template.meta_data)
  return &meta_data_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& Template::_internal_meta_data(int index) const {
  return meta_data_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& Template::meta_data(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.Template.meta_data)
  return _internal_meta_data(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::_internal_add_meta_data() {
  return meta_data_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* Template::add_meta_data() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.Template.meta_data)
  return _internal_add_meta_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
Template::meta_data() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.Template.meta_data)
  return meta_data_;
}

// -------------------------------------------------------------------

// AddTemplateRequest

// string name = 1;
inline void AddTemplateRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AddTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
  return _internal_name();
}
inline void AddTemplateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
}
inline std::string* AddTemplateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddTemplateRequest::_internal_name() const {
  return name_.Get();
}
inline void AddTemplateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTemplateRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
}
inline void AddTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
}
inline void AddTemplateRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
}
inline std::string* AddTemplateRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTemplateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.AddTemplateRequest.name)
}

// .farm.nurture.core.contracts.common.LanguageCode language_code = 2;
inline void AddTemplateRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode AddTemplateRequest::_internal_language_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(language_code_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode AddTemplateRequest::language_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.language_code)
  return _internal_language_code();
}
inline void AddTemplateRequest::_internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  language_code_ = value;
}
inline void AddTemplateRequest::set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.language_code)
}

// .farm.nurture.core.contracts.common.CommunicationChannel channel = 3;
inline void AddTemplateRequest::clear_channel() {
  channel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel AddTemplateRequest::_internal_channel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(channel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel AddTemplateRequest::channel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.channel)
  return _internal_channel();
}
inline void AddTemplateRequest::_internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  channel_ = value;
}
inline void AddTemplateRequest::set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.channel)
}

// .farm.nurture.core.contracts.common.TemplateContentType templateContentType = 4;
inline void AddTemplateRequest::clear_templatecontenttype() {
  templatecontenttype_ = 0;
}
inline ::farm::nurture::core::contracts::common::TemplateContentType AddTemplateRequest::_internal_templatecontenttype() const {
  return static_cast< ::farm::nurture::core::contracts::common::TemplateContentType >(templatecontenttype_);
}
inline ::farm::nurture::core::contracts::common::TemplateContentType AddTemplateRequest::templatecontenttype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.templateContentType)
  return _internal_templatecontenttype();
}
inline void AddTemplateRequest::_internal_set_templatecontenttype(::farm::nurture::core::contracts::common::TemplateContentType value) {
  
  templatecontenttype_ = value;
}
inline void AddTemplateRequest::set_templatecontenttype(::farm::nurture::core::contracts::common::TemplateContentType value) {
  _internal_set_templatecontenttype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.templateContentType)
}

// string content = 5;
inline void AddTemplateRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& AddTemplateRequest::content() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
  return _internal_content();
}
inline void AddTemplateRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
}
inline std::string* AddTemplateRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
  return _internal_mutable_content();
}
inline const std::string& AddTemplateRequest::_internal_content() const {
  return content_.Get();
}
inline void AddTemplateRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTemplateRequest::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
}
inline void AddTemplateRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
}
inline void AddTemplateRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
}
inline std::string* AddTemplateRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTemplateRequest::release_content() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTemplateRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.AddTemplateRequest.content)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 6;
inline int AddTemplateRequest::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddTemplateRequest::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddTemplateRequest::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.AddTemplateRequest.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateRequest::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateRequest::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.AddTemplateRequest.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddTemplateRequest::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.AddTemplateRequest.attribs)
  return attribs_;
}

// string owner = 7;
inline void AddTemplateRequest::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& AddTemplateRequest::owner() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
  return _internal_owner();
}
inline void AddTemplateRequest::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
}
inline std::string* AddTemplateRequest::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
  return _internal_mutable_owner();
}
inline const std::string& AddTemplateRequest::_internal_owner() const {
  return owner_.Get();
}
inline void AddTemplateRequest::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTemplateRequest::set_owner(std::string&& value) {
  
  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
}
inline void AddTemplateRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
}
inline void AddTemplateRequest::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
}
inline std::string* AddTemplateRequest::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTemplateRequest::release_owner() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTemplateRequest::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.AddTemplateRequest.owner)
}

// string vertical = 8;
inline void AddTemplateRequest::clear_vertical() {
  vertical_.ClearToEmpty();
}
inline const std::string& AddTemplateRequest::vertical() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
  return _internal_vertical();
}
inline void AddTemplateRequest::set_vertical(const std::string& value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
}
inline std::string* AddTemplateRequest::mutable_vertical() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
  return _internal_mutable_vertical();
}
inline const std::string& AddTemplateRequest::_internal_vertical() const {
  return vertical_.Get();
}
inline void AddTemplateRequest::_internal_set_vertical(const std::string& value) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTemplateRequest::set_vertical(std::string&& value) {
  
  vertical_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
}
inline void AddTemplateRequest::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
}
inline void AddTemplateRequest::set_vertical(const char* value,
    size_t size) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
}
inline std::string* AddTemplateRequest::_internal_mutable_vertical() {
  
  return vertical_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTemplateRequest::release_vertical() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
  return vertical_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTemplateRequest::set_allocated_vertical(std::string* vertical) {
  if (vertical != nullptr) {
    
  } else {
    
  }
  vertical_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertical,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.AddTemplateRequest.vertical)
}

// string title = 9;
inline void AddTemplateRequest::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& AddTemplateRequest::title() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
  return _internal_title();
}
inline void AddTemplateRequest::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
}
inline std::string* AddTemplateRequest::mutable_title() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
  return _internal_mutable_title();
}
inline const std::string& AddTemplateRequest::_internal_title() const {
  return title_.Get();
}
inline void AddTemplateRequest::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddTemplateRequest::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
}
inline void AddTemplateRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
}
inline void AddTemplateRequest::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
}
inline std::string* AddTemplateRequest::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddTemplateRequest::release_title() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddTemplateRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.AddTemplateRequest.title)
}

// repeated .farm.nurture.core.contracts.common.Attribs meta_data = 10;
inline int AddTemplateRequest::_internal_meta_data_size() const {
  return meta_data_.size();
}
inline int AddTemplateRequest::meta_data_size() const {
  return _internal_meta_data_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::mutable_meta_data(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data)
  return meta_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddTemplateRequest::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data)
  return &meta_data_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateRequest::_internal_meta_data(int index) const {
  return meta_data_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateRequest::meta_data(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data)
  return _internal_meta_data(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::_internal_add_meta_data() {
  return meta_data_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateRequest::add_meta_data() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data)
  return _internal_add_meta_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddTemplateRequest::meta_data() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.AddTemplateRequest.meta_data)
  return meta_data_;
}

// -------------------------------------------------------------------

// AddTemplateResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void AddTemplateResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus AddTemplateResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus AddTemplateResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateResponse.status)
  return _internal_status();
}
inline void AddTemplateResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void AddTemplateResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
inline void AddTemplateResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode AddTemplateResponse::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode AddTemplateResponse::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateResponse.status_code)
  return _internal_status_code();
}
inline void AddTemplateResponse::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void AddTemplateResponse::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateResponse.status_code)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int AddTemplateResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddTemplateResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddTemplateResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.AddTemplateResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddTemplateResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddTemplateResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.AddTemplateResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddTemplateResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.AddTemplateResponse.attribs)
  return attribs_;
}

// int64 id = 4;
inline void AddTemplateResponse::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddTemplateResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddTemplateResponse::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateResponse.id)
  return _internal_id();
}
inline void AddTemplateResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void AddTemplateResponse::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.AddTemplateResponse.id)
}

// repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 5;
inline int AddTemplateResponse::_internal_vendors_response_size() const {
  return vendors_response_.size();
}
inline int AddTemplateResponse::vendors_response_size() const {
  return _internal_vendors_response_size();
}
inline void AddTemplateResponse::clear_vendors_response() {
  vendors_response_.Clear();
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* AddTemplateResponse::mutable_vendors_response(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response)
  return vendors_response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >*
AddTemplateResponse::mutable_vendors_response() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response)
  return &vendors_response_;
}
inline const ::farm::nurture::core::contracts::ce::VendorResponse& AddTemplateResponse::_internal_vendors_response(int index) const {
  return vendors_response_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::VendorResponse& AddTemplateResponse::vendors_response(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response)
  return _internal_vendors_response(index);
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* AddTemplateResponse::_internal_add_vendors_response() {
  return vendors_response_.Add();
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* AddTemplateResponse::add_vendors_response() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response)
  return _internal_add_vendors_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >&
AddTemplateResponse::vendors_response() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.AddTemplateResponse.vendors_response)
  return vendors_response_;
}

// -------------------------------------------------------------------

// TemplateUpdateRequest

// string content = 1;
inline void TemplateUpdateRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TemplateUpdateRequest::content() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
  return _internal_content();
}
inline void TemplateUpdateRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
}
inline std::string* TemplateUpdateRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
  return _internal_mutable_content();
}
inline const std::string& TemplateUpdateRequest::_internal_content() const {
  return content_.Get();
}
inline void TemplateUpdateRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TemplateUpdateRequest::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
}
inline void TemplateUpdateRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
}
inline void TemplateUpdateRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
}
inline std::string* TemplateUpdateRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TemplateUpdateRequest::release_content() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemplateUpdateRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.TemplateUpdateRequest.content)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 2;
inline int TemplateUpdateRequest::_internal_attribs_size() const {
  return attribs_.size();
}
inline int TemplateUpdateRequest::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
TemplateUpdateRequest::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& TemplateUpdateRequest::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& TemplateUpdateRequest::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
TemplateUpdateRequest::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.TemplateUpdateRequest.attribs)
  return attribs_;
}

// string title = 3;
inline void TemplateUpdateRequest::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& TemplateUpdateRequest::title() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
  return _internal_title();
}
inline void TemplateUpdateRequest::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
}
inline std::string* TemplateUpdateRequest::mutable_title() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
  return _internal_mutable_title();
}
inline const std::string& TemplateUpdateRequest::_internal_title() const {
  return title_.Get();
}
inline void TemplateUpdateRequest::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TemplateUpdateRequest::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
}
inline void TemplateUpdateRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
}
inline void TemplateUpdateRequest::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
}
inline std::string* TemplateUpdateRequest::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TemplateUpdateRequest::release_title() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemplateUpdateRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.TemplateUpdateRequest.title)
}

// string owner = 4;
inline void TemplateUpdateRequest::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& TemplateUpdateRequest::owner() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
  return _internal_owner();
}
inline void TemplateUpdateRequest::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
}
inline std::string* TemplateUpdateRequest::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
  return _internal_mutable_owner();
}
inline const std::string& TemplateUpdateRequest::_internal_owner() const {
  return owner_.Get();
}
inline void TemplateUpdateRequest::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TemplateUpdateRequest::set_owner(std::string&& value) {
  
  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
}
inline void TemplateUpdateRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
}
inline void TemplateUpdateRequest::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
}
inline std::string* TemplateUpdateRequest::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TemplateUpdateRequest::release_owner() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemplateUpdateRequest::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner)
}

// string vertical = 5;
inline void TemplateUpdateRequest::clear_vertical() {
  vertical_.ClearToEmpty();
}
inline const std::string& TemplateUpdateRequest::vertical() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
  return _internal_vertical();
}
inline void TemplateUpdateRequest::set_vertical(const std::string& value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
}
inline std::string* TemplateUpdateRequest::mutable_vertical() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
  return _internal_mutable_vertical();
}
inline const std::string& TemplateUpdateRequest::_internal_vertical() const {
  return vertical_.Get();
}
inline void TemplateUpdateRequest::_internal_set_vertical(const std::string& value) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TemplateUpdateRequest::set_vertical(std::string&& value) {
  
  vertical_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
}
inline void TemplateUpdateRequest::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
}
inline void TemplateUpdateRequest::set_vertical(const char* value,
    size_t size) {
  
  vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
}
inline std::string* TemplateUpdateRequest::_internal_mutable_vertical() {
  
  return vertical_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TemplateUpdateRequest::release_vertical() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
  return vertical_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemplateUpdateRequest::set_allocated_vertical(std::string* vertical) {
  if (vertical != nullptr) {
    
  } else {
    
  }
  vertical_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertical,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical)
}

// string name = 6;
inline void TemplateUpdateRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TemplateUpdateRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
  return _internal_name();
}
inline void TemplateUpdateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
}
inline std::string* TemplateUpdateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& TemplateUpdateRequest::_internal_name() const {
  return name_.Get();
}
inline void TemplateUpdateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TemplateUpdateRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
}
inline void TemplateUpdateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
}
inline void TemplateUpdateRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
}
inline std::string* TemplateUpdateRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TemplateUpdateRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemplateUpdateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.TemplateUpdateRequest.name)
}

// .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
inline void TemplateUpdateRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode TemplateUpdateRequest::_internal_language_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(language_code_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode TemplateUpdateRequest::language_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.language_code)
  return _internal_language_code();
}
inline void TemplateUpdateRequest::_internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  language_code_ = value;
}
inline void TemplateUpdateRequest::set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.TemplateUpdateRequest.language_code)
}

// repeated .farm.nurture.core.contracts.common.Attribs meta_data = 8;
inline int TemplateUpdateRequest::_internal_meta_data_size() const {
  return meta_data_.size();
}
inline int TemplateUpdateRequest::meta_data_size() const {
  return _internal_meta_data_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::mutable_meta_data(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data)
  return meta_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
TemplateUpdateRequest::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data)
  return &meta_data_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& TemplateUpdateRequest::_internal_meta_data(int index) const {
  return meta_data_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& TemplateUpdateRequest::meta_data(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data)
  return _internal_meta_data(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::_internal_add_meta_data() {
  return meta_data_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* TemplateUpdateRequest::add_meta_data() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data)
  return _internal_add_meta_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
TemplateUpdateRequest::meta_data() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.TemplateUpdateRequest.meta_data)
  return meta_data_;
}

// -------------------------------------------------------------------

// GetAllTemplateResponse

// .farm.nurture.core.contracts.common.ResponseStatus status = 1;
inline void GetAllTemplateResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetAllTemplateResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus GetAllTemplateResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateResponse.status)
  return _internal_status();
}
inline void GetAllTemplateResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void GetAllTemplateResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
inline void GetAllTemplateResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetAllTemplateResponse::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode GetAllTemplateResponse::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateResponse.status_code)
  return _internal_status_code();
}
inline void GetAllTemplateResponse::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void GetAllTemplateResponse::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateResponse.status_code)
}

// repeated .farm.nurture.core.contracts.ce.Template templates = 3;
inline int GetAllTemplateResponse::_internal_templates_size() const {
  return templates_.size();
}
inline int GetAllTemplateResponse::templates_size() const {
  return _internal_templates_size();
}
inline void GetAllTemplateResponse::clear_templates() {
  templates_.Clear();
}
inline ::farm::nurture::core::contracts::ce::Template* GetAllTemplateResponse::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates)
  return templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Template >*
GetAllTemplateResponse::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates)
  return &templates_;
}
inline const ::farm::nurture::core::contracts::ce::Template& GetAllTemplateResponse::_internal_templates(int index) const {
  return templates_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::Template& GetAllTemplateResponse::templates(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates)
  return _internal_templates(index);
}
inline ::farm::nurture::core::contracts::ce::Template* GetAllTemplateResponse::_internal_add_templates() {
  return templates_.Add();
}
inline ::farm::nurture::core::contracts::ce::Template* GetAllTemplateResponse::add_templates() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates)
  return _internal_add_templates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Template >&
GetAllTemplateResponse::templates() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.GetAllTemplateResponse.templates)
  return templates_;
}

// -------------------------------------------------------------------

// GetAllTemplateRequest

// int64 limit = 1;
inline void GetAllTemplateRequest::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllTemplateRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllTemplateRequest::limit() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.limit)
  return _internal_limit();
}
inline void GetAllTemplateRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetAllTemplateRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.limit)
}

// int64 offset = 2;
inline void GetAllTemplateRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllTemplateRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllTemplateRequest::offset() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.offset)
  return _internal_offset();
}
inline void GetAllTemplateRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetAllTemplateRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.offset)
}

// .farm.nurture.core.contracts.common.RequestHeaders request_headers = 3;
inline bool GetAllTemplateRequest::_internal_has_request_headers() const {
  return this != internal_default_instance() && request_headers_ != nullptr;
}
inline bool GetAllTemplateRequest::has_request_headers() const {
  return _internal_has_request_headers();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetAllTemplateRequest::_internal_request_headers() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = request_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetAllTemplateRequest::request_headers() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers)
  return _internal_request_headers();
}
inline void GetAllTemplateRequest::unsafe_arena_set_allocated_request_headers(
    ::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  request_headers_ = request_headers;
  if (request_headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAllTemplateRequest::release_request_headers() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAllTemplateRequest::unsafe_arena_release_request_headers() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = request_headers_;
  request_headers_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAllTemplateRequest::_internal_mutable_request_headers() {
  
  if (request_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    request_headers_ = p;
  }
  return request_headers_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetAllTemplateRequest::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers)
  return _internal_mutable_request_headers();
}
inline void GetAllTemplateRequest::set_allocated_request_headers(::farm::nurture::core::contracts::common::RequestHeaders* request_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers_);
  }
  if (request_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_headers)->GetArena();
    if (message_arena != submessage_arena) {
      request_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_headers, submessage_arena);
    }
    
  } else {
    
  }
  request_headers_ = request_headers;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.GetAllTemplateRequest.request_headers)
}

// string searchQuery = 4;
inline void GetAllTemplateRequest::clear_searchquery() {
  searchquery_.ClearToEmpty();
}
inline const std::string& GetAllTemplateRequest::searchquery() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
  return _internal_searchquery();
}
inline void GetAllTemplateRequest::set_searchquery(const std::string& value) {
  _internal_set_searchquery(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
}
inline std::string* GetAllTemplateRequest::mutable_searchquery() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
  return _internal_mutable_searchquery();
}
inline const std::string& GetAllTemplateRequest::_internal_searchquery() const {
  return searchquery_.Get();
}
inline void GetAllTemplateRequest::_internal_set_searchquery(const std::string& value) {
  
  searchquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAllTemplateRequest::set_searchquery(std::string&& value) {
  
  searchquery_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
}
inline void GetAllTemplateRequest::set_searchquery(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  searchquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
}
inline void GetAllTemplateRequest::set_searchquery(const char* value,
    size_t size) {
  
  searchquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
}
inline std::string* GetAllTemplateRequest::_internal_mutable_searchquery() {
  
  return searchquery_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAllTemplateRequest::release_searchquery() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
  return searchquery_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllTemplateRequest::set_allocated_searchquery(std::string* searchquery) {
  if (searchquery != nullptr) {
    
  } else {
    
  }
  searchquery_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), searchquery,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery)
}

// .farm.nurture.core.contracts.common.NameSpace namespace = 5;
inline void GetAllTemplateRequest::clear_namespace_() {
  namespace__ = 0;
}
inline ::farm::nurture::core::contracts::common::NameSpace GetAllTemplateRequest::_internal_namespace_() const {
  return static_cast< ::farm::nurture::core::contracts::common::NameSpace >(namespace__);
}
inline ::farm::nurture::core::contracts::common::NameSpace GetAllTemplateRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.namespace)
  return _internal_namespace_();
}
inline void GetAllTemplateRequest::_internal_set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  
  namespace__ = value;
}
inline void GetAllTemplateRequest::set_namespace_(::farm::nurture::core::contracts::common::NameSpace value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.namespace)
}

// .farm.nurture.core.contracts.common.Status status = 6;
inline void GetAllTemplateRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::Status GetAllTemplateRequest::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::Status >(status_);
}
inline ::farm::nurture::core::contracts::common::Status GetAllTemplateRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.status)
  return _internal_status();
}
inline void GetAllTemplateRequest::_internal_set_status(::farm::nurture::core::contracts::common::Status value) {
  
  status_ = value;
}
inline void GetAllTemplateRequest::set_status(::farm::nurture::core::contracts::common::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.status)
}

// repeated string templateNames = 7;
inline int GetAllTemplateRequest::_internal_templatenames_size() const {
  return templatenames_.size();
}
inline int GetAllTemplateRequest::templatenames_size() const {
  return _internal_templatenames_size();
}
inline void GetAllTemplateRequest::clear_templatenames() {
  templatenames_.Clear();
}
inline std::string* GetAllTemplateRequest::add_templatenames() {
  // @@protoc_insertion_point(field_add_mutable:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  return _internal_add_templatenames();
}
inline const std::string& GetAllTemplateRequest::_internal_templatenames(int index) const {
  return templatenames_.Get(index);
}
inline const std::string& GetAllTemplateRequest::templatenames(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  return _internal_templatenames(index);
}
inline std::string* GetAllTemplateRequest::mutable_templatenames(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  return templatenames_.Mutable(index);
}
inline void GetAllTemplateRequest::set_templatenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  templatenames_.Mutable(index)->assign(value);
}
inline void GetAllTemplateRequest::set_templatenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  templatenames_.Mutable(index)->assign(std::move(value));
}
inline void GetAllTemplateRequest::set_templatenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  templatenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline void GetAllTemplateRequest::set_templatenames(int index, const char* value, size_t size) {
  templatenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline std::string* GetAllTemplateRequest::_internal_add_templatenames() {
  return templatenames_.Add();
}
inline void GetAllTemplateRequest::add_templatenames(const std::string& value) {
  templatenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline void GetAllTemplateRequest::add_templatenames(std::string&& value) {
  templatenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline void GetAllTemplateRequest::add_templatenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  templatenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline void GetAllTemplateRequest::add_templatenames(const char* value, size_t size) {
  templatenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllTemplateRequest::templatenames() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  return templatenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllTemplateRequest::mutable_templatenames() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames)
  return &templatenames_;
}

// -------------------------------------------------------------------

// VendorResponse

// string vendor_name = 1;
inline void VendorResponse::clear_vendor_name() {
  vendor_name_.ClearToEmpty();
}
inline const std::string& VendorResponse::vendor_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
  return _internal_vendor_name();
}
inline void VendorResponse::set_vendor_name(const std::string& value) {
  _internal_set_vendor_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
}
inline std::string* VendorResponse::mutable_vendor_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
  return _internal_mutable_vendor_name();
}
inline const std::string& VendorResponse::_internal_vendor_name() const {
  return vendor_name_.Get();
}
inline void VendorResponse::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VendorResponse::set_vendor_name(std::string&& value) {
  
  vendor_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
}
inline void VendorResponse::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
}
inline void VendorResponse::set_vendor_name(const char* value,
    size_t size) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
}
inline std::string* VendorResponse::_internal_mutable_vendor_name() {
  
  return vendor_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VendorResponse::release_vendor_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
  return vendor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VendorResponse::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.VendorResponse.vendor_name)
}

// .farm.nurture.core.contracts.common.ResponseStatus status = 2;
inline void VendorResponse::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatus VendorResponse::_internal_status() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatus >(status_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatus VendorResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.VendorResponse.status)
  return _internal_status();
}
inline void VendorResponse::_internal_set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  
  status_ = value;
}
inline void VendorResponse::set_status(::farm::nurture::core::contracts::common::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.VendorResponse.status)
}

// .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 3;
inline void VendorResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode VendorResponse::_internal_status_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::ResponseStatusCode >(status_code_);
}
inline ::farm::nurture::core::contracts::common::ResponseStatusCode VendorResponse::status_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.VendorResponse.status_code)
  return _internal_status_code();
}
inline void VendorResponse::_internal_set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  
  status_code_ = value;
}
inline void VendorResponse::set_status_code(::farm::nurture::core::contracts::common::ResponseStatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.VendorResponse.status_code)
}

// string error_msg = 4;
inline void VendorResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& VendorResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
  return _internal_error_msg();
}
inline void VendorResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
}
inline std::string* VendorResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& VendorResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void VendorResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VendorResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
}
inline void VendorResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
}
inline void VendorResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
}
inline std::string* VendorResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VendorResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VendorResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.VendorResponse.error_msg)
}

// -------------------------------------------------------------------

// ActivationResponse

// repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 1;
inline int ActivationResponse::_internal_vendors_response_size() const {
  return vendors_response_.size();
}
inline int ActivationResponse::vendors_response_size() const {
  return _internal_vendors_response_size();
}
inline void ActivationResponse::clear_vendors_response() {
  vendors_response_.Clear();
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* ActivationResponse::mutable_vendors_response(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationResponse.vendors_response)
  return vendors_response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >*
ActivationResponse::mutable_vendors_response() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.ActivationResponse.vendors_response)
  return &vendors_response_;
}
inline const ::farm::nurture::core::contracts::ce::VendorResponse& ActivationResponse::_internal_vendors_response(int index) const {
  return vendors_response_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::VendorResponse& ActivationResponse::vendors_response(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationResponse.vendors_response)
  return _internal_vendors_response(index);
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* ActivationResponse::_internal_add_vendors_response() {
  return vendors_response_.Add();
}
inline ::farm::nurture::core::contracts::ce::VendorResponse* ActivationResponse::add_vendors_response() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.ActivationResponse.vendors_response)
  return _internal_add_vendors_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::VendorResponse >&
ActivationResponse::vendors_response() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.ActivationResponse.vendors_response)
  return vendors_response_;
}

// bool active_template = 2;
inline void ActivationResponse::clear_active_template() {
  active_template_ = false;
}
inline bool ActivationResponse::_internal_active_template() const {
  return active_template_;
}
inline bool ActivationResponse::active_template() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationResponse.active_template)
  return _internal_active_template();
}
inline void ActivationResponse::_internal_set_active_template(bool value) {
  
  active_template_ = value;
}
inline void ActivationResponse::set_active_template(bool value) {
  _internal_set_active_template(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActivationResponse.active_template)
}

// -------------------------------------------------------------------

// ActivationRequest

// string template_name = 1;
inline void ActivationRequest::clear_template_name() {
  template_name_.ClearToEmpty();
}
inline const std::string& ActivationRequest::template_name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
  return _internal_template_name();
}
inline void ActivationRequest::set_template_name(const std::string& value) {
  _internal_set_template_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
}
inline std::string* ActivationRequest::mutable_template_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
  return _internal_mutable_template_name();
}
inline const std::string& ActivationRequest::_internal_template_name() const {
  return template_name_.Get();
}
inline void ActivationRequest::_internal_set_template_name(const std::string& value) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActivationRequest::set_template_name(std::string&& value) {
  
  template_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
}
inline void ActivationRequest::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
}
inline void ActivationRequest::set_template_name(const char* value,
    size_t size) {
  
  template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
}
inline std::string* ActivationRequest::_internal_mutable_template_name() {
  
  return template_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivationRequest::release_template_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
  return template_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationRequest::set_allocated_template_name(std::string* template_name) {
  if (template_name != nullptr) {
    
  } else {
    
  }
  template_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.template_name)
}

// .farm.nurture.core.contracts.common.CommunicationChannel channel = 2;
inline void ActivationRequest::clear_channel() {
  channel_ = 0;
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel ActivationRequest::_internal_channel() const {
  return static_cast< ::farm::nurture::core::contracts::common::CommunicationChannel >(channel_);
}
inline ::farm::nurture::core::contracts::common::CommunicationChannel ActivationRequest::channel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.channel)
  return _internal_channel();
}
inline void ActivationRequest::_internal_set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  
  channel_ = value;
}
inline void ActivationRequest::set_channel(::farm::nurture::core::contracts::common::CommunicationChannel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActivationRequest.channel)
}

// .farm.nurture.core.contracts.ce.Media media = 3;
inline bool ActivationRequest::_internal_has_media() const {
  return this != internal_default_instance() && media_ != nullptr;
}
inline bool ActivationRequest::has_media() const {
  return _internal_has_media();
}
inline void ActivationRequest::clear_media() {
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
}
inline const ::farm::nurture::core::contracts::ce::Media& ActivationRequest::_internal_media() const {
  const ::farm::nurture::core::contracts::ce::Media* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::ce::Media&>(
      ::farm::nurture::core::contracts::ce::_Media_default_instance_);
}
inline const ::farm::nurture::core::contracts::ce::Media& ActivationRequest::media() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.media)
  return _internal_media();
}
inline void ActivationRequest::unsafe_arena_set_allocated_media(
    ::farm::nurture::core::contracts::ce::Media* media) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.media)
}
inline ::farm::nurture::core::contracts::ce::Media* ActivationRequest::release_media() {
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* ActivationRequest::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActivationRequest.media)
  
  ::farm::nurture::core::contracts::ce::Media* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::ce::Media* ActivationRequest::_internal_mutable_media() {
  
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::ce::Media>(GetArena());
    media_ = p;
  }
  return media_;
}
inline ::farm::nurture::core::contracts::ce::Media* ActivationRequest::mutable_media() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationRequest.media)
  return _internal_mutable_media();
}
inline void ActivationRequest::set_allocated_media(::farm::nurture::core::contracts::ce::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete media_;
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(media);
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    
  } else {
    
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.media)
}

// repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 4;
inline int ActivationRequest::_internal_placeholders_size() const {
  return placeholders_.size();
}
inline int ActivationRequest::placeholders_size() const {
  return _internal_placeholders_size();
}
inline void ActivationRequest::clear_placeholders() {
  placeholders_.Clear();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* ActivationRequest::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationRequest.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >*
ActivationRequest::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.core.contracts.ce.ActivationRequest.placeholders)
  return &placeholders_;
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& ActivationRequest::_internal_placeholders(int index) const {
  return placeholders_.Get(index);
}
inline const ::farm::nurture::core::contracts::ce::Placeholder& ActivationRequest::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.placeholders)
  return _internal_placeholders(index);
}
inline ::farm::nurture::core::contracts::ce::Placeholder* ActivationRequest::_internal_add_placeholders() {
  return placeholders_.Add();
}
inline ::farm::nurture::core::contracts::ce::Placeholder* ActivationRequest::add_placeholders() {
  // @@protoc_insertion_point(field_add:farm.nurture.core.contracts.ce.ActivationRequest.placeholders)
  return _internal_add_placeholders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::ce::Placeholder >&
ActivationRequest::placeholders() const {
  // @@protoc_insertion_point(field_list:farm.nurture.core.contracts.ce.ActivationRequest.placeholders)
  return placeholders_;
}

// .farm.nurture.core.contracts.common.ActorID actor = 5;
inline bool ActivationRequest::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool ActivationRequest::has_actor() const {
  return _internal_has_actor();
}
inline const ::farm::nurture::core::contracts::common::ActorID& ActivationRequest::_internal_actor() const {
  const ::farm::nurture::core::contracts::common::ActorID* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::ActorID&>(
      ::farm::nurture::core::contracts::common::_ActorID_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::ActorID& ActivationRequest::actor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.actor)
  return _internal_actor();
}
inline void ActivationRequest::unsafe_arena_set_allocated_actor(
    ::farm::nurture::core::contracts::common::ActorID* actor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.actor)
}
inline ::farm::nurture::core::contracts::common::ActorID* ActivationRequest::release_actor() {
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActivationRequest::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActivationRequest.actor)
  
  ::farm::nurture::core::contracts::common::ActorID* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActivationRequest::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::ActorID>(GetArena());
    actor_ = p;
  }
  return actor_;
}
inline ::farm::nurture::core::contracts::common::ActorID* ActivationRequest::mutable_actor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationRequest.actor)
  return _internal_mutable_actor();
}
inline void ActivationRequest::set_allocated_actor(::farm::nurture::core::contracts::common::ActorID* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor)->GetArena();
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.actor)
}

// string mobile_number = 6;
inline void ActivationRequest::clear_mobile_number() {
  mobile_number_.ClearToEmpty();
}
inline const std::string& ActivationRequest::mobile_number() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
  return _internal_mobile_number();
}
inline void ActivationRequest::set_mobile_number(const std::string& value) {
  _internal_set_mobile_number(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
}
inline std::string* ActivationRequest::mutable_mobile_number() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
  return _internal_mutable_mobile_number();
}
inline const std::string& ActivationRequest::_internal_mobile_number() const {
  return mobile_number_.Get();
}
inline void ActivationRequest::_internal_set_mobile_number(const std::string& value) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActivationRequest::set_mobile_number(std::string&& value) {
  
  mobile_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
}
inline void ActivationRequest::set_mobile_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
}
inline void ActivationRequest::set_mobile_number(const char* value,
    size_t size) {
  
  mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
}
inline std::string* ActivationRequest::_internal_mutable_mobile_number() {
  
  return mobile_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivationRequest::release_mobile_number() {
  // @@protoc_insertion_point(field_release:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
  return mobile_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationRequest::set_allocated_mobile_number(std::string* mobile_number) {
  if (mobile_number != nullptr) {
    
  } else {
    
  }
  mobile_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.core.contracts.ce.ActivationRequest.mobile_number)
}

// .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
inline void ActivationRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActivationRequest::_internal_language_code() const {
  return static_cast< ::farm::nurture::core::contracts::common::LanguageCode >(language_code_);
}
inline ::farm::nurture::core::contracts::common::LanguageCode ActivationRequest::language_code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.core.contracts.ce.ActivationRequest.language_code)
  return _internal_language_code();
}
inline void ActivationRequest::_internal_set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  
  language_code_ = value;
}
inline void ActivationRequest::set_language_code(::farm::nurture::core::contracts::common::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.core.contracts.ce.ActivationRequest.language_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ce
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommunicationEngine_2fcommunication_5fengine_2eproto
