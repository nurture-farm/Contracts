// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommunicationEngine/communication_engine.proto

#include "CommunicationEngine/communication_engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommunicationEngine_2fcommunication_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fentities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorID_Common_2fentities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribs_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Common_2fheaders_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeaders_Common_2fheaders_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace ce {
class CommunicationEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationEvent> _instance;
} _CommunicationEvent_default_instance_;
class MediaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Media> _instance;
} _Media_default_instance_;
class BulkCommunicationEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkCommunicationEvent> _instance;
} _BulkCommunicationEvent_default_instance_;
class CommunicationChannelAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationChannelAttributes> _instance;
} _CommunicationChannelAttributes_default_instance_;
class PlaceholderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Placeholder> _instance;
} _Placeholder_default_instance_;
class BulkCommunicationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkCommunicationResponse> _instance;
} _BulkCommunicationResponse_default_instance_;
class CommunicationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationResponse> _instance;
} _CommunicationResponse_default_instance_;
class ActorDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorDetails> _instance;
} _ActorDetails_default_instance_;
class OptInRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptInRequest> _instance;
} _OptInRequest_default_instance_;
class OptInResponeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptInRespone> _instance;
} _OptInRespone_default_instance_;
class OptOutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptOutRequest> _instance;
} _OptOutRequest_default_instance_;
class OptOutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptOutResponse> _instance;
} _OptOutResponse_default_instance_;
class MessageAcknowledgementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAcknowledgementRequest> _instance;
} _MessageAcknowledgementRequest_default_instance_;
class MessageAcknowledgementResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAcknowledgementResponse> _instance;
} _MessageAcknowledgementResponse_default_instance_;
class MessageAcknowledgementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAcknowledgement> _instance;
} _MessageAcknowledgement_default_instance_;
class TemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Template> _instance;
} _Template_default_instance_;
class AddTemplateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTemplateRequest> _instance;
} _AddTemplateRequest_default_instance_;
class AddTemplateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTemplateResponse> _instance;
} _AddTemplateResponse_default_instance_;
class TemplateUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemplateUpdateRequest> _instance;
} _TemplateUpdateRequest_default_instance_;
class GetAllTemplateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllTemplateResponse> _instance;
} _GetAllTemplateResponse_default_instance_;
class GetAllTemplateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllTemplateRequest> _instance;
} _GetAllTemplateRequest_default_instance_;
class VendorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VendorResponse> _instance;
} _VendorResponse_default_instance_;
class ActivationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationResponse> _instance;
} _ActivationResponse_default_instance_;
class ActivationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationRequest> _instance;
} _ActivationRequest_default_instance_;
}  // namespace ce
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
static void InitDefaultsscc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_ActivationRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::ActivationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_ActivationResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::ActivationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_ActorDetails_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::ActorDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_AddTemplateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::AddTemplateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_AddTemplateResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::AddTemplateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_BulkCommunicationEvent_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::BulkCommunicationEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_BulkCommunicationResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::BulkCommunicationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_CommunicationChannelAttributes_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_CommunicationEvent_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::CommunicationEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_CommunicationResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::CommunicationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_GetAllTemplateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::GetAllTemplateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_GetAllTemplateResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::GetAllTemplateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_Media_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::Media();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_MessageAcknowledgement_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::MessageAcknowledgement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_ActorID_Common_2fentities_2eproto.base,
      &scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_MessageAcknowledgementRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_MessageAcknowledgementResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,
      &scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_OptInRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::OptInRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_OptInRespone_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::OptInRespone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_OptOutRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::OptOutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_RequestHeaders_Common_2fheaders_2eproto.base,
      &scc_info_ActorID_Common_2fentities_2eproto.base,}};

static void InitDefaultsscc_info_OptOutResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_OptOutResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::OptOutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptOutResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptOutResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_Placeholder_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::Placeholder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_Template_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::Template();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_TemplateUpdateRequest_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::TemplateUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto}, {
      &scc_info_Attribs_Common_2fheaders_2eproto.base,}};

static void InitDefaultsscc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::farm::nurture::core::contracts::ce::_VendorResponse_default_instance_;
    new (ptr) ::farm::nurture::core::contracts::ce::VendorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommunicationEngine_2fcommunication_5fengine_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CommunicationEngine_2fcommunication_5fengine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommunicationEngine_2fcommunication_5fengine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, content_title_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, template_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, placeholder_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, receiver_actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, client_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, business_flow_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, expiry_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, send_after_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, channel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, content_metadata_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, receiver_actor_details_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, channel_attributes_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, tenant_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, media_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, parent_reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, campaign_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationEvent, vendor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, media_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, media_access_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, media_info_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, document_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Media, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::BulkCommunicationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::BulkCommunicationEvent, communication_events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes, push_notification_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Placeholder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Placeholder, key_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Placeholder, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::BulkCommunicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::BulkCommunicationResponse, communication_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::CommunicationResponse, reference_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, email_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, language_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, fcm_token_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, app_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, app_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActorDetails, secondarylanguage_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, request_headers_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, farmer_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, sourcesystem_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRespone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRespone, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRespone, status_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRespone, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptInRespone, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutRequest, request_headers_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutRequest, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutRequest, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::OptOutResponse, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, request_headers_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, channels_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, template_name_like_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest, responseordertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse, message_acknowledgements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, channel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, template_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, language_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, message_content_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, is_unicode_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, vendor_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, vendor_message_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, state_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, retry_count_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, placeholders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, attributes_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, vendor_delivery_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, actor_delivery_time_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, contact_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, actor_contact_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, parent_reference_id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, campaign_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, created_at_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::MessageAcknowledgement, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, language_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, content_type_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, content_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, title_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, active_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, created_at_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, updated_at_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, deleted_at_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, attributes_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, owner_email_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, vertical_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::Template, meta_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, templatecontenttype_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, content_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, vertical_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, title_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateRequest, meta_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, id_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::AddTemplateResponse, vendors_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, content_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, attribs_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, title_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, vertical_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::TemplateUpdateRequest, meta_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateResponse, templates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, request_headers_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, searchquery_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::GetAllTemplateRequest, templatenames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::VendorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::VendorResponse, vendor_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::VendorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::VendorResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::VendorResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationResponse, vendors_response_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationResponse, active_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, template_name_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, media_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, placeholders_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, actor_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, mobile_number_),
  PROTOBUF_FIELD_OFFSET(::farm::nurture::core::contracts::ce::ActivationRequest, language_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::farm::nurture::core::contracts::ce::CommunicationEvent)},
  { 23, -1, sizeof(::farm::nurture::core::contracts::ce::Media)},
  { 33, -1, sizeof(::farm::nurture::core::contracts::ce::BulkCommunicationEvent)},
  { 39, -1, sizeof(::farm::nurture::core::contracts::ce::CommunicationChannelAttributes)},
  { 45, -1, sizeof(::farm::nurture::core::contracts::ce::Placeholder)},
  { 52, -1, sizeof(::farm::nurture::core::contracts::ce::BulkCommunicationResponse)},
  { 58, -1, sizeof(::farm::nurture::core::contracts::ce::CommunicationResponse)},
  { 64, -1, sizeof(::farm::nurture::core::contracts::ce::ActorDetails)},
  { 76, -1, sizeof(::farm::nurture::core::contracts::ce::OptInRequest)},
  { 87, -1, sizeof(::farm::nurture::core::contracts::ce::OptInRespone)},
  { 96, -1, sizeof(::farm::nurture::core::contracts::ce::OptOutRequest)},
  { 105, -1, sizeof(::farm::nurture::core::contracts::ce::OptOutResponse)},
  { 112, -1, sizeof(::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest)},
  { 127, -1, sizeof(::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse)},
  { 136, -1, sizeof(::farm::nurture::core::contracts::ce::MessageAcknowledgement)},
  { 164, -1, sizeof(::farm::nurture::core::contracts::ce::Template)},
  { 183, -1, sizeof(::farm::nurture::core::contracts::ce::AddTemplateRequest)},
  { 198, -1, sizeof(::farm::nurture::core::contracts::ce::AddTemplateResponse)},
  { 208, -1, sizeof(::farm::nurture::core::contracts::ce::TemplateUpdateRequest)},
  { 221, -1, sizeof(::farm::nurture::core::contracts::ce::GetAllTemplateResponse)},
  { 229, -1, sizeof(::farm::nurture::core::contracts::ce::GetAllTemplateRequest)},
  { 241, -1, sizeof(::farm::nurture::core::contracts::ce::VendorResponse)},
  { 250, -1, sizeof(::farm::nurture::core::contracts::ce::ActivationResponse)},
  { 257, -1, sizeof(::farm::nurture::core::contracts::ce::ActivationRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_CommunicationEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_Media_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_BulkCommunicationEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_CommunicationChannelAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_Placeholder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_BulkCommunicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_CommunicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_ActorDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_OptInRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_OptInRespone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_OptOutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_OptOutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_MessageAcknowledgementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_MessageAcknowledgementResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_MessageAcknowledgement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_Template_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_AddTemplateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_AddTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_TemplateUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_GetAllTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_GetAllTemplateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_VendorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_ActivationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::farm::nurture::core::contracts::ce::_ActivationRequest_default_instance_),
};

const char descriptor_table_protodef_CommunicationEngine_2fcommunication_5fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.CommunicationEngine/communication_engi"
  "ne.proto\022\036farm.nurture.core.contracts.ce"
  "\032\022Common/enums.proto\032\025Common/entities.pr"
  "oto\032\024Common/headers.proto\032\032Common/loyalt"
  "y_enums.proto\032\037google/protobuf/timestamp"
  ".proto\"\220\007\n\022CommunicationEvent\022\025\n\rcontent"
  "_title\030\001 \001(\t\022\025\n\rtemplate_name\030\002 \001(\t\022@\n\013p"
  "laceholder\030\003 \003(\0132+.farm.nurture.core.con"
  "tracts.ce.Placeholder\022C\n\016receiver_actor\030"
  "\004 \001(\0132+.farm.nurture.core.contracts.comm"
  "on.ActorID\022\021\n\tclient_id\030\005 \001(\t\022\025\n\rbusines"
  "s_flow\030\006 \001(\t\022*\n\006expiry\030\007 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022.\n\nsend_after\030\010 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022I\n\007channel\030\t \003("
  "\01628.farm.nurture.core.contracts.common.C"
  "ommunicationChannel\022\024\n\014reference_id\030\n \001("
  "\t\022E\n\020content_metadata\030\013 \003(\0132+.farm.nurtu"
  "re.core.contracts.ce.Placeholder\022L\n\026rece"
  "iver_actor_details\030\014 \001(\0132,.farm.nurture."
  "core.contracts.ce.ActorDetails\022Z\n\022channe"
  "l_attributes\030\r \001(\0132>.farm.nurture.core.c"
  "ontracts.ce.CommunicationChannelAttribut"
  "es\022:\n\006tenant\030\016 \001(\0162*.farm.nurture.core.c"
  "ontracts.common.Tenant\0224\n\005media\030\017 \001(\0132%."
  "farm.nurture.core.contracts.ce.Media\022\033\n\023"
  "parent_reference_id\030\020 \001(\t\022\025\n\rcampaign_na"
  "me\030\021 \001(\t\022G\n\006vendor\030\022 \001(\01627.farm.nurture."
  "core.contracts.common.CommunicationVendo"
  "r\"\322\001\n\005Media\022A\n\nmedia_type\030\001 \001(\0162-.farm.n"
  "urture.core.contracts.common.MediaType\022N"
  "\n\021media_access_type\030\002 \001(\01623.farm.nurture"
  ".core.contracts.common.MediaAccessType\022\022"
  "\n\nmedia_info\030\003 \001(\t\022\025\n\rdocument_name\030\004 \001("
  "\t\022\013\n\003msg\030\005 \001(\t\"j\n\026BulkCommunicationEvent"
  "\022P\n\024communication_events\030\001 \003(\01322.farm.nu"
  "rture.core.contracts.ce.CommunicationEve"
  "nt\"z\n\036CommunicationChannelAttributes\022X\n\026"
  "push_notification_type\030\001 \001(\01628.farm.nurt"
  "ure.core.contracts.common.PushNotificati"
  "onType\")\n\013Placeholder\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t\"s\n\031BulkCommunicationResponse\022V"
  "\n\027communication_responses\030\001 \003(\01325.farm.n"
  "urture.core.contracts.ce.CommunicationRe"
  "sponse\"-\n\025CommunicationResponse\022\024\n\014refer"
  "ence_id\030\001 \001(\t\"\337\002\n\014ActorDetails\022\020\n\010email_"
  "id\030\001 \001(\t\022\025\n\rmobile_number\030\002 \001(\t\022G\n\rlangu"
  "age_code\030\003 \001(\01620.farm.nurture.core.contr"
  "acts.common.LanguageCode\022\021\n\tfcm_token\030\004 "
  "\001(\t\0229\n\006app_id\030\005 \001(\0162).farm.nurture.core."
  "contracts.common.AppID\022=\n\010app_type\030\006 \001(\016"
  "2+.farm.nurture.core.contracts.common.Ap"
  "pType\022P\n\026secondaryLanguage_code\030\007 \001(\01620."
  "farm.nurture.core.contracts.common.Langu"
  "ageCode\"\315\002\n\014OptInRequest\022K\n\017request_head"
  "ers\030\001 \001(\01322.farm.nurture.core.contracts."
  "common.RequestHeaders\022:\n\005actor\030\002 \001(\0132+.f"
  "arm.nurture.core.contracts.common.ActorI"
  "D\022\025\n\rmobile_number\030\003 \001(\t\022\023\n\013farmer_name\030"
  "\004 \001(\t\022F\n\014sourceSystem\030\005 \001(\01620.farm.nurtu"
  "re.core.contracts.common.SourceSystem\022@\n"
  "\tnameSpace\030\006 \001(\0162-.farm.nurture.core.con"
  "tracts.common.NameSpace\"\351\001\n\014OptInRespone"
  "\022B\n\006status\030\001 \001(\01622.farm.nurture.core.con"
  "tracts.common.ResponseStatus\022K\n\013status_c"
  "ode\030\002 \001(\01626.farm.nurture.core.contracts."
  "common.ResponseStatusCode\022<\n\007attribs\030\003 \003"
  "(\0132+.farm.nurture.core.contracts.common."
  "Attribs\022\n\n\002id\030\004 \001(\003\"\361\001\n\rOptOutRequest\022K\n"
  "\017request_headers\030\001 \001(\01322.farm.nurture.co"
  "re.contracts.common.RequestHeaders\022:\n\005ac"
  "tor\030\002 \001(\0132+.farm.nurture.core.contracts."
  "common.ActorID\022\025\n\rmobile_number\030\003 \001(\t\022@\n"
  "\tnameSpace\030\004 \001(\0162-.farm.nurture.core.con"
  "tracts.common.NameSpace\"\241\001\n\016OptOutRespon"
  "se\022B\n\006status\030\001 \001(\01622.farm.nurture.core.c"
  "ontracts.common.ResponseStatus\022K\n\013status"
  "_code\030\002 \001(\01626.farm.nurture.core.contract"
  "s.common.ResponseStatusCode\"\320\003\n\035MessageA"
  "cknowledgementRequest\022K\n\017request_headers"
  "\030\001 \001(\01322.farm.nurture.core.contracts.com"
  "mon.RequestHeaders\022.\n\nstart_time\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\022,\n\010end_time\030\003"
  " \001(\0132\032.google.protobuf.Timestamp\022J\n\010chan"
  "nels\030\004 \003(\01628.farm.nurture.core.contracts"
  ".common.CommunicationChannel\022\032\n\022template"
  "_name_like\030\005 \001(\t\022\025\n\rmobile_number\030\006 \001(\t\022"
  "\024\n\014reference_id\030\007 \001(\t\022\r\n\005limit\030\010 \001(\005\022\016\n\006"
  "offset\030\t \001(\005\022P\n\021responseOrderType\030\n \001(\0162"
  "5.farm.nurture.core.contracts.common.Res"
  "ponseOrderType\"\311\002\n\036MessageAcknowledgemen"
  "tResponse\022B\n\006status\030\001 \001(\01622.farm.nurture"
  ".core.contracts.common.ResponseStatus\022K\n"
  "\013status_code\030\002 \001(\01626.farm.nurture.core.c"
  "ontracts.common.ResponseStatusCode\022<\n\007at"
  "tribs\030\003 \003(\0132+.farm.nurture.core.contract"
  "s.common.Attribs\022X\n\030message_acknowledgem"
  "ents\030\004 \003(\01326.farm.nurture.core.contracts"
  ".ce.MessageAcknowledgement\"\324\007\n\026MessageAc"
  "knowledgement\022\n\n\002id\030\001 \001(\003\022:\n\005actor\030\002 \001(\013"
  "2+.farm.nurture.core.contracts.common.Ac"
  "torID\022\025\n\rmobile_number\030\003 \001(\t\022I\n\007channel\030"
  "\004 \001(\01628.farm.nurture.core.contracts.comm"
  "on.CommunicationChannel\022\024\n\014reference_id\030"
  "\005 \001(\t\022\025\n\rtemplate_name\030\006 \001(\t\022>\n\010language"
  "\030\007 \001(\0162,.farm.nurture.core.contracts.com"
  "mon.Language\022\027\n\017message_content\030\010 \001(\t\022\022\n"
  "\nis_unicode\030\t \001(\010\022\023\n\013vendor_name\030\n \001(\t\022\031"
  "\n\021vendor_message_id\030\013 \001(\t\022E\n\005state\030\014 \001(\016"
  "26.farm.nurture.core.contracts.common.Co"
  "mmunicationState\022\023\n\013retry_count\030\r \001(\005\022A\n"
  "\014placeholders\030\016 \003(\0132+.farm.nurture.core."
  "contracts.ce.Placeholder\022\?\n\nattributes\030\017"
  " \003(\0132+.farm.nurture.core.contracts.commo"
  "n.Attribs\0228\n\024vendor_delivery_time\030\020 \001(\0132"
  "\032.google.protobuf.Timestamp\0227\n\023actor_del"
  "ivery_time\030\021 \001(\0132\032.google.protobuf.Times"
  "tamp\022E\n\014contact_type\030\022 \001(\0162/.farm.nurtur"
  "e.core.contracts.common.ContactType\022\030\n\020a"
  "ctor_contact_id\030\023 \001(\t\022\033\n\023parent_referenc"
  "e_id\030\024 \001(\t\022\025\n\rcampaign_name\030\025 \001(\t\022.\n\ncre"
  "ated_at\030\026 \001(\0132\032.google.protobuf.Timestam"
  "p\022.\n\nupdated_at\030\027 \001(\0132\032.google.protobuf."
  "Timestamp\"\233\004\n\010Template\022\n\n\002id\030\001 \001(\003\022\014\n\004na"
  "me\030\002 \001(\t\022>\n\010language\030\003 \001(\0162,.farm.nurtur"
  "e.core.contracts.common.Language\022M\n\014cont"
  "ent_type\030\004 \001(\01627.farm.nurture.core.contr"
  "acts.common.TemplateContentType\022\017\n\007conte"
  "nt\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\016\n\006active\030\007 \001(\010\022"
  ".\n\ncreated_at\030\010 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022.\n\nupdated_at\030\t \001(\0132\032.google.pro"
  "tobuf.Timestamp\022.\n\ndeleted_at\030\n \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\?\n\nattributes\030\013 "
  "\003(\0132+.farm.nurture.core.contracts.common"
  ".Attribs\022\023\n\013owner_email\030\014 \001(\t\022\020\n\010vertica"
  "l\030\r \001(\t\022>\n\tmeta_data\030\016 \003(\0132+.farm.nurtur"
  "e.core.contracts.common.Attribs\"\313\003\n\022AddT"
  "emplateRequest\022\014\n\004name\030\001 \001(\t\022G\n\rlanguage"
  "_code\030\002 \001(\01620.farm.nurture.core.contract"
  "s.common.LanguageCode\022I\n\007channel\030\003 \001(\01628"
  ".farm.nurture.core.contracts.common.Comm"
  "unicationChannel\022T\n\023templateContentType\030"
  "\004 \001(\01627.farm.nurture.core.contracts.comm"
  "on.TemplateContentType\022\017\n\007content\030\005 \001(\t\022"
  "<\n\007attribs\030\006 \003(\0132+.farm.nurture.core.con"
  "tracts.common.Attribs\022\r\n\005owner\030\007 \001(\t\022\020\n\010"
  "vertical\030\010 \001(\t\022\r\n\005title\030\t \001(\t\022>\n\tmeta_da"
  "ta\030\n \003(\0132+.farm.nurture.core.contracts.c"
  "ommon.Attribs\"\272\002\n\023AddTemplateResponse\022B\n"
  "\006status\030\001 \001(\01622.farm.nurture.core.contra"
  "cts.common.ResponseStatus\022K\n\013status_code"
  "\030\002 \001(\01626.farm.nurture.core.contracts.com"
  "mon.ResponseStatusCode\022<\n\007attribs\030\003 \003(\0132"
  "+.farm.nurture.core.contracts.common.Att"
  "ribs\022\n\n\002id\030\004 \001(\003\022H\n\020vendors_response\030\005 \003"
  "(\0132..farm.nurture.core.contracts.ce.Vend"
  "orResponse\"\255\002\n\025TemplateUpdateRequest\022\017\n\007"
  "content\030\001 \001(\t\022<\n\007attribs\030\002 \003(\0132+.farm.nu"
  "rture.core.contracts.common.Attribs\022\r\n\005t"
  "itle\030\003 \001(\t\022\r\n\005owner\030\004 \001(\t\022\020\n\010vertical\030\005 "
  "\001(\t\022\014\n\004name\030\006 \001(\t\022G\n\rlanguage_code\030\007 \001(\016"
  "20.farm.nurture.core.contracts.common.La"
  "nguageCode\022>\n\tmeta_data\030\010 \003(\0132+.farm.nur"
  "ture.core.contracts.common.Attribs\"\346\001\n\026G"
  "etAllTemplateResponse\022B\n\006status\030\001 \001(\01622."
  "farm.nurture.core.contracts.common.Respo"
  "nseStatus\022K\n\013status_code\030\002 \001(\01626.farm.nu"
  "rture.core.contracts.common.ResponseStat"
  "usCode\022;\n\ttemplates\030\003 \003(\0132(.farm.nurture"
  ".core.contracts.ce.Template\"\255\002\n\025GetAllTe"
  "mplateRequest\022\r\n\005limit\030\001 \001(\003\022\016\n\006offset\030\002"
  " \001(\003\022K\n\017request_headers\030\003 \001(\01322.farm.nur"
  "ture.core.contracts.common.RequestHeader"
  "s\022\023\n\013searchQuery\030\004 \001(\t\022@\n\tnamespace\030\005 \001("
  "\0162-.farm.nurture.core.contracts.common.N"
  "ameSpace\022:\n\006status\030\006 \001(\0162*.farm.nurture."
  "core.contracts.common.Status\022\025\n\rtemplate"
  "Names\030\007 \003(\t\"\311\001\n\016VendorResponse\022\023\n\013vendor"
  "_name\030\001 \001(\t\022B\n\006status\030\002 \001(\01622.farm.nurtu"
  "re.core.contracts.common.ResponseStatus\022"
  "K\n\013status_code\030\003 \001(\01626.farm.nurture.core"
  ".contracts.common.ResponseStatusCode\022\021\n\t"
  "error_msg\030\004 \001(\t\"w\n\022ActivationResponse\022H\n"
  "\020vendors_response\030\001 \003(\0132..farm.nurture.c"
  "ore.contracts.ce.VendorResponse\022\027\n\017activ"
  "e_template\030\002 \001(\010\"\212\003\n\021ActivationRequest\022\025"
  "\n\rtemplate_name\030\001 \001(\t\022I\n\007channel\030\002 \001(\01628"
  ".farm.nurture.core.contracts.common.Comm"
  "unicationChannel\0224\n\005media\030\003 \001(\0132%.farm.n"
  "urture.core.contracts.ce.Media\022A\n\014placeh"
  "olders\030\004 \003(\0132+.farm.nurture.core.contrac"
  "ts.ce.Placeholder\022:\n\005actor\030\005 \001(\0132+.farm."
  "nurture.core.contracts.common.ActorID\022\025\n"
  "\rmobile_number\030\006 \001(\t\022G\n\rlanguage_code\030\007 "
  "\001(\01620.farm.nurture.core.contracts.common"
  ".LanguageCode2\242\002\n\023CommunicationEngine\022~\n"
  "\021sendCommunication\0222.farm.nurture.core.c"
  "ontracts.ce.CommunicationEvent\0325.farm.nu"
  "rture.core.contracts.ce.CommunicationRes"
  "ponse\022\212\001\n\025sendBulkCommunication\0226.farm.n"
  "urture.core.contracts.ce.BulkCommunicati"
  "onEvent\0329.farm.nurture.core.contracts.ce"
  ".BulkCommunicationResponse2\206\007\n\033Communica"
  "tionEnginePlatform\022g\n\toptInUser\022,.farm.n"
  "urture.core.contracts.ce.OptInRequest\032,."
  "farm.nurture.core.contracts.ce.OptInResp"
  "one\022\236\001\n\035searchMessageAcknowledgements\022=."
  "farm.nurture.core.contracts.ce.MessageAc"
  "knowledgementRequest\032>.farm.nurture.core"
  ".contracts.ce.MessageAcknowledgementResp"
  "onse\022v\n\013addTemplate\0222.farm.nurture.core."
  "contracts.ce.AddTemplateRequest\0323.farm.n"
  "urture.core.contracts.ce.AddTemplateResp"
  "onse\022k\n\noptOutUser\022-.farm.nurture.core.c"
  "ontracts.ce.OptOutRequest\032..farm.nurture"
  ".core.contracts.ce.OptOutResponse\022\177\n\016get"
  "AllTemplate\0225.farm.nurture.core.contract"
  "s.ce.GetAllTemplateRequest\0326.farm.nurtur"
  "e.core.contracts.ce.GetAllTemplateRespon"
  "se\022|\n\016updateTemplate\0225.farm.nurture.core"
  ".contracts.ce.TemplateUpdateRequest\0323.fa"
  "rm.nurture.core.contracts.ce.AddTemplate"
  "Response\022y\n\020activateTemplate\0221.farm.nurt"
  "ure.core.contracts.ce.ActivationRequest\032"
  "2.farm.nurture.core.contracts.ce.Activat"
  "ionResponseBj\n0farm.nurture.core.contrac"
  "ts.communication.engineP\001Z4code.nurture."
  "farm/Core/Contracts/CommunicationEngineb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_deps[5] = {
  &::descriptor_table_Common_2fentities_2eproto,
  &::descriptor_table_Common_2fenums_2eproto,
  &::descriptor_table_Common_2fheaders_2eproto,
  &::descriptor_table_Common_2floyalty_5fenums_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_sccs[24] = {
  &scc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_OptOutResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
  &scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto = {
  false, false, descriptor_table_protodef_CommunicationEngine_2fcommunication_5fengine_2eproto, "CommunicationEngine/communication_engine.proto", 9087,
  &descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_once, descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_sccs, descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto_deps, 24, 5,
  schemas, file_default_instances, TableStruct_CommunicationEngine_2fcommunication_5fengine_2eproto::offsets,
  file_level_metadata_CommunicationEngine_2fcommunication_5fengine_2eproto, 24, file_level_enum_descriptors_CommunicationEngine_2fcommunication_5fengine_2eproto, file_level_service_descriptors_CommunicationEngine_2fcommunication_5fengine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CommunicationEngine_2fcommunication_5fengine_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CommunicationEngine_2fcommunication_5fengine_2eproto)), true);
namespace farm {
namespace nurture {
namespace core {
namespace contracts {
namespace ce {

// ===================================================================

class CommunicationEvent::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorID& receiver_actor(const CommunicationEvent* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const CommunicationEvent* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& send_after(const CommunicationEvent* msg);
  static const ::farm::nurture::core::contracts::ce::ActorDetails& receiver_actor_details(const CommunicationEvent* msg);
  static const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes& channel_attributes(const CommunicationEvent* msg);
  static const ::farm::nurture::core::contracts::ce::Media& media(const CommunicationEvent* msg);
};

const ::farm::nurture::core::contracts::common::ActorID&
CommunicationEvent::_Internal::receiver_actor(const CommunicationEvent* msg) {
  return *msg->receiver_actor_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CommunicationEvent::_Internal::expiry(const CommunicationEvent* msg) {
  return *msg->expiry_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CommunicationEvent::_Internal::send_after(const CommunicationEvent* msg) {
  return *msg->send_after_;
}
const ::farm::nurture::core::contracts::ce::ActorDetails&
CommunicationEvent::_Internal::receiver_actor_details(const CommunicationEvent* msg) {
  return *msg->receiver_actor_details_;
}
const ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes&
CommunicationEvent::_Internal::channel_attributes(const CommunicationEvent* msg) {
  return *msg->channel_attributes_;
}
const ::farm::nurture::core::contracts::ce::Media&
CommunicationEvent::_Internal::media(const CommunicationEvent* msg) {
  return *msg->media_;
}
void CommunicationEvent::clear_receiver_actor() {
  if (GetArena() == nullptr && receiver_actor_ != nullptr) {
    delete receiver_actor_;
  }
  receiver_actor_ = nullptr;
}
void CommunicationEvent::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
void CommunicationEvent::clear_send_after() {
  if (GetArena() == nullptr && send_after_ != nullptr) {
    delete send_after_;
  }
  send_after_ = nullptr;
}
CommunicationEvent::CommunicationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placeholder_(arena),
  channel_(arena),
  content_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.CommunicationEvent)
}
CommunicationEvent::CommunicationEvent(const CommunicationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placeholder_(from.placeholder_),
      channel_(from.channel_),
      content_metadata_(from.content_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_title().empty()) {
    content_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_title(), 
      GetArena());
  }
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_template_name().empty()) {
    template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_name(), 
      GetArena());
  }
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArena());
  }
  business_flow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_business_flow().empty()) {
    business_flow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_business_flow(), 
      GetArena());
  }
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_id(), 
      GetArena());
  }
  parent_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_reference_id().empty()) {
    parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_reference_id(), 
      GetArena());
  }
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_campaign_name().empty()) {
    campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_campaign_name(), 
      GetArena());
  }
  if (from._internal_has_receiver_actor()) {
    receiver_actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.receiver_actor_);
  } else {
    receiver_actor_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  if (from._internal_has_send_after()) {
    send_after_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.send_after_);
  } else {
    send_after_ = nullptr;
  }
  if (from._internal_has_receiver_actor_details()) {
    receiver_actor_details_ = new ::farm::nurture::core::contracts::ce::ActorDetails(*from.receiver_actor_details_);
  } else {
    receiver_actor_details_ = nullptr;
  }
  if (from._internal_has_channel_attributes()) {
    channel_attributes_ = new ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes(*from.channel_attributes_);
  } else {
    channel_attributes_ = nullptr;
  }
  if (from._internal_has_media()) {
    media_ = new ::farm::nurture::core::contracts::ce::Media(*from.media_);
  } else {
    media_ = nullptr;
  }
  ::memcpy(&tenant_, &from.tenant_,
    static_cast<size_t>(reinterpret_cast<char*>(&vendor_) -
    reinterpret_cast<char*>(&tenant_)) + sizeof(vendor_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.CommunicationEvent)
}

void CommunicationEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  content_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_flow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_actor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vendor_) -
      reinterpret_cast<char*>(&receiver_actor_)) + sizeof(vendor_));
}

CommunicationEvent::~CommunicationEvent() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.CommunicationEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_flow_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete receiver_actor_;
  if (this != internal_default_instance()) delete expiry_;
  if (this != internal_default_instance()) delete send_after_;
  if (this != internal_default_instance()) delete receiver_actor_details_;
  if (this != internal_default_instance()) delete channel_attributes_;
  if (this != internal_default_instance()) delete media_;
}

void CommunicationEvent::ArenaDtor(void* object) {
  CommunicationEvent* _this = reinterpret_cast< CommunicationEvent* >(object);
  (void)_this;
}
void CommunicationEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunicationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationEvent& CommunicationEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void CommunicationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholder_.Clear();
  channel_.Clear();
  content_metadata_.Clear();
  content_title_.ClearToEmpty();
  template_name_.ClearToEmpty();
  client_id_.ClearToEmpty();
  business_flow_.ClearToEmpty();
  reference_id_.ClearToEmpty();
  parent_reference_id_.ClearToEmpty();
  campaign_name_.ClearToEmpty();
  if (GetArena() == nullptr && receiver_actor_ != nullptr) {
    delete receiver_actor_;
  }
  receiver_actor_ = nullptr;
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  if (GetArena() == nullptr && send_after_ != nullptr) {
    delete send_after_;
  }
  send_after_ = nullptr;
  if (GetArena() == nullptr && receiver_actor_details_ != nullptr) {
    delete receiver_actor_details_;
  }
  receiver_actor_details_ = nullptr;
  if (GetArena() == nullptr && channel_attributes_ != nullptr) {
    delete channel_attributes_;
  }
  channel_attributes_ = nullptr;
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
  ::memset(&tenant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vendor_) -
      reinterpret_cast<char*>(&tenant_)) + sizeof(vendor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.content_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string template_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_template_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.template_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.Placeholder placeholder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholder(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID receiver_actor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string business_flow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_business_flow();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.business_flow"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp send_after = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.CommunicationChannel channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_channel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_channel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // string reference_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.Placeholder content_metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.ActorDetails receiver_actor_details = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_actor_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Tenant tenant = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tenant(static_cast<::farm::nurture::core::contracts::common::Tenant>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.Media media = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parent_reference_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_parent_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string campaign_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_campaign_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationVendor vendor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vendor(static_cast<::farm::nurture::core::contracts::common::CommunicationVendor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_title = 1;
  if (this->content_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_title().data(), static_cast<int>(this->_internal_content_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.content_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_title(), target);
  }

  // string template_name = 2;
  if (this->template_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_template_name().data(), static_cast<int>(this->_internal_template_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.template_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_template_name(), target);
  }

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholder = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholder_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_placeholder(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID receiver_actor = 4;
  if (this->has_receiver_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receiver_actor(this), target, stream);
  }

  // string client_id = 5;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.client_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_id(), target);
  }

  // string business_flow = 6;
  if (this->business_flow().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_business_flow().data(), static_cast<int>(this->_internal_business_flow().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.business_flow");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_business_flow(), target);
  }

  // .google.protobuf.Timestamp expiry = 7;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::expiry(this), target, stream);
  }

  // .google.protobuf.Timestamp send_after = 8;
  if (this->has_send_after()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::send_after(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channel = 9;
  {
    int byte_size = _channel_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, channel_, byte_size, target);
    }
  }

  // string reference_id = 10;
  if (this->reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.reference_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reference_id(), target);
  }

  // repeated .farm.nurture.core.contracts.ce.Placeholder content_metadata = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_content_metadata(i), target, stream);
  }

  // .farm.nurture.core.contracts.ce.ActorDetails receiver_actor_details = 12;
  if (this->has_receiver_actor_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::receiver_actor_details(this), target, stream);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 13;
  if (this->has_channel_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::channel_attributes(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.Tenant tenant = 14;
  if (this->tenant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_tenant(), target);
  }

  // .farm.nurture.core.contracts.ce.Media media = 15;
  if (this->has_media()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::media(this), target, stream);
  }

  // string parent_reference_id = 16;
  if (this->parent_reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_reference_id().data(), static_cast<int>(this->_internal_parent_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.parent_reference_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_parent_reference_id(), target);
  }

  // string campaign_name = 17;
  if (this->campaign_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaign_name().data(), static_cast<int>(this->_internal_campaign_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationEvent.campaign_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_campaign_name(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationVendor vendor = 18;
  if (this->vendor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_vendor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.CommunicationEvent)
  return target;
}

size_t CommunicationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholder = 3;
  total_size += 1UL * this->_internal_placeholder_size();
  for (const auto& msg : this->placeholder_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channel = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_channel_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_channel(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .farm.nurture.core.contracts.ce.Placeholder content_metadata = 11;
  total_size += 1UL * this->_internal_content_metadata_size();
  for (const auto& msg : this->content_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string content_title = 1;
  if (this->content_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_title());
  }

  // string template_name = 2;
  if (this->template_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_template_name());
  }

  // string client_id = 5;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string business_flow = 6;
  if (this->business_flow().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_business_flow());
  }

  // string reference_id = 10;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  // string parent_reference_id = 16;
  if (this->parent_reference_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_reference_id());
  }

  // string campaign_name = 17;
  if (this->campaign_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaign_name());
  }

  // .farm.nurture.core.contracts.common.ActorID receiver_actor = 4;
  if (this->has_receiver_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_actor_);
  }

  // .google.protobuf.Timestamp expiry = 7;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  // .google.protobuf.Timestamp send_after = 8;
  if (this->has_send_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_after_);
  }

  // .farm.nurture.core.contracts.ce.ActorDetails receiver_actor_details = 12;
  if (this->has_receiver_actor_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_actor_details_);
  }

  // .farm.nurture.core.contracts.ce.CommunicationChannelAttributes channel_attributes = 13;
  if (this->has_channel_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_attributes_);
  }

  // .farm.nurture.core.contracts.ce.Media media = 15;
  if (this->has_media()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *media_);
  }

  // .farm.nurture.core.contracts.common.Tenant tenant = 14;
  if (this->tenant() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tenant());
  }

  // .farm.nurture.core.contracts.common.CommunicationVendor vendor = 18;
  if (this->vendor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vendor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.CommunicationEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.CommunicationEvent)
    MergeFrom(*source);
  }
}

void CommunicationEvent::MergeFrom(const CommunicationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeholder_.MergeFrom(from.placeholder_);
  channel_.MergeFrom(from.channel_);
  content_metadata_.MergeFrom(from.content_metadata_);
  if (from.content_title().size() > 0) {
    _internal_set_content_title(from._internal_content_title());
  }
  if (from.template_name().size() > 0) {
    _internal_set_template_name(from._internal_template_name());
  }
  if (from.client_id().size() > 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.business_flow().size() > 0) {
    _internal_set_business_flow(from._internal_business_flow());
  }
  if (from.reference_id().size() > 0) {
    _internal_set_reference_id(from._internal_reference_id());
  }
  if (from.parent_reference_id().size() > 0) {
    _internal_set_parent_reference_id(from._internal_parent_reference_id());
  }
  if (from.campaign_name().size() > 0) {
    _internal_set_campaign_name(from._internal_campaign_name());
  }
  if (from.has_receiver_actor()) {
    _internal_mutable_receiver_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_receiver_actor());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry());
  }
  if (from.has_send_after()) {
    _internal_mutable_send_after()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_send_after());
  }
  if (from.has_receiver_actor_details()) {
    _internal_mutable_receiver_actor_details()->::farm::nurture::core::contracts::ce::ActorDetails::MergeFrom(from._internal_receiver_actor_details());
  }
  if (from.has_channel_attributes()) {
    _internal_mutable_channel_attributes()->::farm::nurture::core::contracts::ce::CommunicationChannelAttributes::MergeFrom(from._internal_channel_attributes());
  }
  if (from.has_media()) {
    _internal_mutable_media()->::farm::nurture::core::contracts::ce::Media::MergeFrom(from._internal_media());
  }
  if (from.tenant() != 0) {
    _internal_set_tenant(from._internal_tenant());
  }
  if (from.vendor() != 0) {
    _internal_set_vendor(from._internal_vendor());
  }
}

void CommunicationEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationEvent::CopyFrom(const CommunicationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.CommunicationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationEvent::IsInitialized() const {
  return true;
}

void CommunicationEvent::InternalSwap(CommunicationEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placeholder_.InternalSwap(&other->placeholder_);
  channel_.InternalSwap(&other->channel_);
  content_metadata_.InternalSwap(&other->content_metadata_);
  content_title_.Swap(&other->content_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  template_name_.Swap(&other->template_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  business_flow_.Swap(&other->business_flow_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_id_.Swap(&other->reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_reference_id_.Swap(&other->parent_reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaign_name_.Swap(&other->campaign_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommunicationEvent, vendor_)
      + sizeof(CommunicationEvent::vendor_)
      - PROTOBUF_FIELD_OFFSET(CommunicationEvent, receiver_actor_)>(
          reinterpret_cast<char*>(&receiver_actor_),
          reinterpret_cast<char*>(&other->receiver_actor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Media::_Internal {
 public:
};

Media::Media(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.Media)
}
Media::Media(const Media& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  media_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media_info().empty()) {
    media_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_info(), 
      GetArena());
  }
  document_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_document_name().empty()) {
    document_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_name(), 
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&media_type_, &from.media_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&media_access_type_) -
    reinterpret_cast<char*>(&media_type_)) + sizeof(media_access_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.Media)
}

void Media::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  media_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&media_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&media_access_type_) -
      reinterpret_cast<char*>(&media_type_)) + sizeof(media_access_type_));
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.Media)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Media::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  media_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Media::ArenaDtor(void* object) {
  Media* _this = reinterpret_cast< Media* >(object);
  (void)_this;
}
void Media::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Media::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media& Media::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Media_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.Media)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_info_.ClearToEmpty();
  document_name_.ClearToEmpty();
  msg_.ClearToEmpty();
  ::memset(&media_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_access_type_) -
      reinterpret_cast<char*>(&media_type_)) + sizeof(media_access_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Media::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.MediaType media_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_type(static_cast<::farm::nurture::core::contracts::common::MediaType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.MediaAccessType media_access_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_access_type(static_cast<::farm::nurture::core::contracts::common::MediaAccessType>(val));
        } else goto handle_unusual;
        continue;
      // string media_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_media_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Media.media_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string document_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_document_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Media.document_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Media.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Media::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.Media)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.MediaType media_type = 1;
  if (this->media_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_media_type(), target);
  }

  // .farm.nurture.core.contracts.common.MediaAccessType media_access_type = 2;
  if (this->media_access_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_media_access_type(), target);
  }

  // string media_info = 3;
  if (this->media_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_info().data(), static_cast<int>(this->_internal_media_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Media.media_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_media_info(), target);
  }

  // string document_name = 4;
  if (this->document_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_name().data(), static_cast<int>(this->_internal_document_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Media.document_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_document_name(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Media.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.Media)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_info = 3;
  if (this->media_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_info());
  }

  // string document_name = 4;
  if (this->document_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_name());
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .farm.nurture.core.contracts.common.MediaType media_type = 1;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_type());
  }

  // .farm.nurture.core.contracts.common.MediaAccessType media_access_type = 2;
  if (this->media_access_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_access_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.Media)
  GOOGLE_DCHECK_NE(&from, this);
  const Media* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Media>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.Media)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.Media)
    MergeFrom(*source);
  }
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.Media)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_info().size() > 0) {
    _internal_set_media_info(from._internal_media_info());
  }
  if (from.document_name().size() > 0) {
    _internal_set_document_name(from._internal_document_name());
  }
  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.media_type() != 0) {
    _internal_set_media_type(from._internal_media_type());
  }
  if (from.media_access_type() != 0) {
    _internal_set_media_access_type(from._internal_media_access_type());
  }
}

void Media::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::InternalSwap(Media* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  media_info_.Swap(&other->media_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  document_name_.Swap(&other->document_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Media, media_access_type_)
      + sizeof(Media::media_access_type_)
      - PROTOBUF_FIELD_OFFSET(Media, media_type_)>(
          reinterpret_cast<char*>(&media_type_),
          reinterpret_cast<char*>(&other->media_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Media::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkCommunicationEvent::_Internal {
 public:
};

BulkCommunicationEvent::BulkCommunicationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communication_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
}
BulkCommunicationEvent::BulkCommunicationEvent(const BulkCommunicationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communication_events_(from.communication_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
}

void BulkCommunicationEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
}

BulkCommunicationEvent::~BulkCommunicationEvent() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkCommunicationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BulkCommunicationEvent::ArenaDtor(void* object) {
  BulkCommunicationEvent* _this = reinterpret_cast< BulkCommunicationEvent* >(object);
  (void)_this;
}
void BulkCommunicationEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkCommunicationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkCommunicationEvent& BulkCommunicationEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkCommunicationEvent_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void BulkCommunicationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communication_events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkCommunicationEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .farm.nurture.core.contracts.ce.CommunicationEvent communication_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communication_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkCommunicationEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.CommunicationEvent communication_events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communication_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communication_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  return target;
}

size_t BulkCommunicationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.CommunicationEvent communication_events = 1;
  total_size += 1UL * this->_internal_communication_events_size();
  for (const auto& msg : this->communication_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkCommunicationEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkCommunicationEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkCommunicationEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
    MergeFrom(*source);
  }
}

void BulkCommunicationEvent::MergeFrom(const BulkCommunicationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communication_events_.MergeFrom(from.communication_events_);
}

void BulkCommunicationEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkCommunicationEvent::CopyFrom(const BulkCommunicationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.BulkCommunicationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkCommunicationEvent::IsInitialized() const {
  return true;
}

void BulkCommunicationEvent::InternalSwap(BulkCommunicationEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communication_events_.InternalSwap(&other->communication_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkCommunicationEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommunicationChannelAttributes::_Internal {
 public:
};

CommunicationChannelAttributes::CommunicationChannelAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
}
CommunicationChannelAttributes::CommunicationChannelAttributes(const CommunicationChannelAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  push_notification_type_ = from.push_notification_type_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
}

void CommunicationChannelAttributes::SharedCtor() {
  push_notification_type_ = 0;
}

CommunicationChannelAttributes::~CommunicationChannelAttributes() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationChannelAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommunicationChannelAttributes::ArenaDtor(void* object) {
  CommunicationChannelAttributes* _this = reinterpret_cast< CommunicationChannelAttributes* >(object);
  (void)_this;
}
void CommunicationChannelAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunicationChannelAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationChannelAttributes& CommunicationChannelAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationChannelAttributes_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void CommunicationChannelAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  push_notification_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationChannelAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.PushNotificationType push_notification_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_push_notification_type(static_cast<::farm::nurture::core::contracts::common::PushNotificationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationChannelAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PushNotificationType push_notification_type = 1;
  if (this->push_notification_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_push_notification_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  return target;
}

size_t CommunicationChannelAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.PushNotificationType push_notification_type = 1;
  if (this->push_notification_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_push_notification_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationChannelAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationChannelAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationChannelAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
    MergeFrom(*source);
  }
}

void CommunicationChannelAttributes::MergeFrom(const CommunicationChannelAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.push_notification_type() != 0) {
    _internal_set_push_notification_type(from._internal_push_notification_type());
  }
}

void CommunicationChannelAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationChannelAttributes::CopyFrom(const CommunicationChannelAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.CommunicationChannelAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationChannelAttributes::IsInitialized() const {
  return true;
}

void CommunicationChannelAttributes::InternalSwap(CommunicationChannelAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(push_notification_type_, other->push_notification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationChannelAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Placeholder::_Internal {
 public:
};

Placeholder::Placeholder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.Placeholder)
}
Placeholder::Placeholder(const Placeholder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.Placeholder)
}

void Placeholder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Placeholder::~Placeholder() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.Placeholder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Placeholder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Placeholder::ArenaDtor(void* object) {
  Placeholder* _this = reinterpret_cast< Placeholder* >(object);
  (void)_this;
}
void Placeholder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Placeholder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Placeholder& Placeholder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Placeholder_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void Placeholder::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.Placeholder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Placeholder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Placeholder.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Placeholder.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Placeholder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.Placeholder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Placeholder.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Placeholder.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.Placeholder)
  return target;
}

size_t Placeholder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.Placeholder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Placeholder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.Placeholder)
  GOOGLE_DCHECK_NE(&from, this);
  const Placeholder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Placeholder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.Placeholder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.Placeholder)
    MergeFrom(*source);
  }
}

void Placeholder::MergeFrom(const Placeholder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.Placeholder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Placeholder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.Placeholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Placeholder::CopyFrom(const Placeholder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.Placeholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Placeholder::IsInitialized() const {
  return true;
}

void Placeholder::InternalSwap(Placeholder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Placeholder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulkCommunicationResponse::_Internal {
 public:
};

BulkCommunicationResponse::BulkCommunicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communication_responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
}
BulkCommunicationResponse::BulkCommunicationResponse(const BulkCommunicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communication_responses_(from.communication_responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
}

void BulkCommunicationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
}

BulkCommunicationResponse::~BulkCommunicationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkCommunicationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BulkCommunicationResponse::ArenaDtor(void* object) {
  BulkCommunicationResponse* _this = reinterpret_cast< BulkCommunicationResponse* >(object);
  (void)_this;
}
void BulkCommunicationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkCommunicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkCommunicationResponse& BulkCommunicationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkCommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void BulkCommunicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communication_responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkCommunicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .farm.nurture.core.contracts.ce.CommunicationResponse communication_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communication_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkCommunicationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.CommunicationResponse communication_responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communication_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communication_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  return target;
}

size_t BulkCommunicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.CommunicationResponse communication_responses = 1;
  total_size += 1UL * this->_internal_communication_responses_size();
  for (const auto& msg : this->communication_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkCommunicationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkCommunicationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkCommunicationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
    MergeFrom(*source);
  }
}

void BulkCommunicationResponse::MergeFrom(const BulkCommunicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communication_responses_.MergeFrom(from.communication_responses_);
}

void BulkCommunicationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkCommunicationResponse::CopyFrom(const BulkCommunicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.BulkCommunicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkCommunicationResponse::IsInitialized() const {
  return true;
}

void BulkCommunicationResponse::InternalSwap(BulkCommunicationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communication_responses_.InternalSwap(&other->communication_responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkCommunicationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommunicationResponse::_Internal {
 public:
};

CommunicationResponse::CommunicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.CommunicationResponse)
}
CommunicationResponse::CommunicationResponse(const CommunicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.CommunicationResponse)
}

void CommunicationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommunicationResponse::~CommunicationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.CommunicationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommunicationResponse::ArenaDtor(void* object) {
  CommunicationResponse* _this = reinterpret_cast< CommunicationResponse* >(object);
  (void)_this;
}
void CommunicationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationResponse& CommunicationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void CommunicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.CommunicationResponse.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.CommunicationResponse.reference_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.CommunicationResponse)
  return target;
}

size_t CommunicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.CommunicationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.CommunicationResponse)
    MergeFrom(*source);
  }
}

void CommunicationResponse::MergeFrom(const CommunicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_id().size() > 0) {
    _internal_set_reference_id(from._internal_reference_id());
  }
}

void CommunicationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationResponse::CopyFrom(const CommunicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.CommunicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationResponse::IsInitialized() const {
  return true;
}

void CommunicationResponse::InternalSwap(CommunicationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_id_.Swap(&other->reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActorDetails::_Internal {
 public:
};

ActorDetails::ActorDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.ActorDetails)
}
ActorDetails::ActorDetails(const ActorDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email_id().empty()) {
    email_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_id(), 
      GetArena());
  }
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fcm_token().empty()) {
    fcm_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fcm_token(), 
      GetArena());
  }
  ::memcpy(&language_code_, &from.language_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondarylanguage_code_) -
    reinterpret_cast<char*>(&language_code_)) + sizeof(secondarylanguage_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.ActorDetails)
}

void ActorDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  email_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&language_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&secondarylanguage_code_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(secondarylanguage_code_));
}

ActorDetails::~ActorDetails() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.ActorDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorDetails::ArenaDtor(void* object) {
  ActorDetails* _this = reinterpret_cast< ActorDetails* >(object);
  (void)_this;
}
void ActorDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorDetails& ActorDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorDetails_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void ActorDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.ActorDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_id_.ClearToEmpty();
  mobile_number_.ClearToEmpty();
  fcm_token_.ClearToEmpty();
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondarylanguage_code_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(secondarylanguage_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.ActorDetails.email_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.ActorDetails.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // string fcm_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fcm_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.ActorDetails.fcm_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AppID app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_app_id(static_cast<::farm::nurture::core::contracts::common::AppID>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.AppType app_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_app_type(static_cast<::farm::nurture::core::contracts::common::AppType>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode secondaryLanguage_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secondarylanguage_code(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.ActorDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email_id = 1;
  if (this->email_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email_id().data(), static_cast<int>(this->_internal_email_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.ActorDetails.email_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email_id(), target);
  }

  // string mobile_number = 2;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.ActorDetails.mobile_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mobile_number(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 3;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language_code(), target);
  }

  // string fcm_token = 4;
  if (this->fcm_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fcm_token().data(), static_cast<int>(this->_internal_fcm_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.ActorDetails.fcm_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fcm_token(), target);
  }

  // .farm.nurture.core.contracts.common.AppID app_id = 5;
  if (this->app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_app_id(), target);
  }

  // .farm.nurture.core.contracts.common.AppType app_type = 6;
  if (this->app_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_app_type(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode secondaryLanguage_code = 7;
  if (this->secondarylanguage_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_secondarylanguage_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.ActorDetails)
  return target;
}

size_t ActorDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.ActorDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email_id = 1;
  if (this->email_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email_id());
  }

  // string mobile_number = 2;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // string fcm_token = 4;
  if (this->fcm_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fcm_token());
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 3;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  // .farm.nurture.core.contracts.common.AppID app_id = 5;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_app_id());
  }

  // .farm.nurture.core.contracts.common.AppType app_type = 6;
  if (this->app_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_app_type());
  }

  // .farm.nurture.core.contracts.common.LanguageCode secondaryLanguage_code = 7;
  if (this->secondarylanguage_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_secondarylanguage_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.ActorDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.ActorDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.ActorDetails)
    MergeFrom(*source);
  }
}

void ActorDetails::MergeFrom(const ActorDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.ActorDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email_id().size() > 0) {
    _internal_set_email_id(from._internal_email_id());
  }
  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.fcm_token().size() > 0) {
    _internal_set_fcm_token(from._internal_fcm_token());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.app_type() != 0) {
    _internal_set_app_type(from._internal_app_type());
  }
  if (from.secondarylanguage_code() != 0) {
    _internal_set_secondarylanguage_code(from._internal_secondarylanguage_code());
  }
}

void ActorDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.ActorDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorDetails::CopyFrom(const ActorDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.ActorDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorDetails::IsInitialized() const {
  return true;
}

void ActorDetails::InternalSwap(ActorDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  email_id_.Swap(&other->email_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fcm_token_.Swap(&other->fcm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorDetails, secondarylanguage_code_)
      + sizeof(ActorDetails::secondarylanguage_code_)
      - PROTOBUF_FIELD_OFFSET(ActorDetails, language_code_)>(
          reinterpret_cast<char*>(&language_code_),
          reinterpret_cast<char*>(&other->language_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptInRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers(const OptInRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const OptInRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
OptInRequest::_Internal::request_headers(const OptInRequest* msg) {
  return *msg->request_headers_;
}
const ::farm::nurture::core::contracts::common::ActorID&
OptInRequest::_Internal::actor(const OptInRequest* msg) {
  return *msg->actor_;
}
void OptInRequest::clear_request_headers() {
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
}
void OptInRequest::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
OptInRequest::OptInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.OptInRequest)
}
OptInRequest::OptInRequest(const OptInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  farmer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_farmer_name().empty()) {
    farmer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_farmer_name(), 
      GetArena());
  }
  if (from._internal_has_request_headers()) {
    request_headers_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.request_headers_);
  } else {
    request_headers_ = nullptr;
  }
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  ::memcpy(&sourcesystem_, &from.sourcesystem_,
    static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
    reinterpret_cast<char*>(&sourcesystem_)) + sizeof(namespace__));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.OptInRequest)
}

void OptInRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  farmer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_headers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
      reinterpret_cast<char*>(&request_headers_)) + sizeof(namespace__));
}

OptInRequest::~OptInRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.OptInRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  farmer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_headers_;
  if (this != internal_default_instance()) delete actor_;
}

void OptInRequest::ArenaDtor(void* object) {
  OptInRequest* _this = reinterpret_cast< OptInRequest* >(object);
  (void)_this;
}
void OptInRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptInRequest& OptInRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptInRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void OptInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.OptInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mobile_number_.ClearToEmpty();
  farmer_name_.ClearToEmpty();
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  ::memset(&sourcesystem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&namespace__) -
      reinterpret_cast<char*>(&sourcesystem_)) + sizeof(namespace__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptInRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.OptInRequest.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string farmer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_farmer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.OptInRequest.farmer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.SourceSystem sourceSystem = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcesystem(static_cast<::farm::nurture::core::contracts::common::SourceSystem>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace nameSpace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptInRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.OptInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_headers(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actor(this), target, stream);
  }

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.OptInRequest.mobile_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobile_number(), target);
  }

  // string farmer_name = 4;
  if (this->farmer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_farmer_name().data(), static_cast<int>(this->_internal_farmer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.OptInRequest.farmer_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_farmer_name(), target);
  }

  // .farm.nurture.core.contracts.common.SourceSystem sourceSystem = 5;
  if (this->sourcesystem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sourcesystem(), target);
  }

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 6;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.OptInRequest)
  return target;
}

size_t OptInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.OptInRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // string farmer_name = 4;
  if (this->farmer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_farmer_name());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_headers_);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .farm.nurture.core.contracts.common.SourceSystem sourceSystem = 5;
  if (this->sourcesystem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sourcesystem());
  }

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 6;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptInRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.OptInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OptInRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.OptInRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.OptInRequest)
    MergeFrom(*source);
  }
}

void OptInRequest::MergeFrom(const OptInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.OptInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.farmer_name().size() > 0) {
    _internal_set_farmer_name(from._internal_farmer_name());
  }
  if (from.has_request_headers()) {
    _internal_mutable_request_headers()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_request_headers());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.sourcesystem() != 0) {
    _internal_set_sourcesystem(from._internal_sourcesystem());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void OptInRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.OptInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptInRequest::CopyFrom(const OptInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.OptInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptInRequest::IsInitialized() const {
  return true;
}

void OptInRequest::InternalSwap(OptInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  farmer_name_.Swap(&other->farmer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptInRequest, namespace__)
      + sizeof(OptInRequest::namespace__)
      - PROTOBUF_FIELD_OFFSET(OptInRequest, request_headers_)>(
          reinterpret_cast<char*>(&request_headers_),
          reinterpret_cast<char*>(&other->request_headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptInRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptInRespone::_Internal {
 public:
};

void OptInRespone::clear_attribs() {
  attribs_.Clear();
}
OptInRespone::OptInRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.OptInRespone)
}
OptInRespone::OptInRespone(const OptInRespone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.OptInRespone)
}

void OptInRespone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
}

OptInRespone::~OptInRespone() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.OptInRespone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptInRespone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptInRespone::ArenaDtor(void* object) {
  OptInRespone* _this = reinterpret_cast< OptInRespone* >(object);
  (void)_this;
}
void OptInRespone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptInRespone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptInRespone& OptInRespone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptInRespone_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void OptInRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.OptInRespone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptInRespone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptInRespone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.OptInRespone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.OptInRespone)
  return target;
}

size_t OptInRespone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.OptInRespone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  // int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptInRespone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.OptInRespone)
  GOOGLE_DCHECK_NE(&from, this);
  const OptInRespone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptInRespone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.OptInRespone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.OptInRespone)
    MergeFrom(*source);
  }
}

void OptInRespone::MergeFrom(const OptInRespone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.OptInRespone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OptInRespone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.OptInRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptInRespone::CopyFrom(const OptInRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.OptInRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptInRespone::IsInitialized() const {
  return true;
}

void OptInRespone::InternalSwap(OptInRespone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptInRespone, id_)
      + sizeof(OptInRespone::id_)
      - PROTOBUF_FIELD_OFFSET(OptInRespone, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptInRespone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptOutRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers(const OptOutRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const OptOutRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
OptOutRequest::_Internal::request_headers(const OptOutRequest* msg) {
  return *msg->request_headers_;
}
const ::farm::nurture::core::contracts::common::ActorID&
OptOutRequest::_Internal::actor(const OptOutRequest* msg) {
  return *msg->actor_;
}
void OptOutRequest::clear_request_headers() {
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
}
void OptOutRequest::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
OptOutRequest::OptOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.OptOutRequest)
}
OptOutRequest::OptOutRequest(const OptOutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  if (from._internal_has_request_headers()) {
    request_headers_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.request_headers_);
  } else {
    request_headers_ = nullptr;
  }
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  namespace__ = from.namespace__;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.OptOutRequest)
}

void OptOutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_headers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
      reinterpret_cast<char*>(&request_headers_)) + sizeof(namespace__));
}

OptOutRequest::~OptOutRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.OptOutRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptOutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_headers_;
  if (this != internal_default_instance()) delete actor_;
}

void OptOutRequest::ArenaDtor(void* object) {
  OptOutRequest* _this = reinterpret_cast< OptOutRequest* >(object);
  (void)_this;
}
void OptOutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptOutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptOutRequest& OptOutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptOutRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void OptOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.OptOutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mobile_number_.ClearToEmpty();
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  namespace__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptOutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.OptOutRequest.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace nameSpace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptOutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.OptOutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_headers(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actor(this), target, stream);
  }

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.OptOutRequest.mobile_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobile_number(), target);
  }

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 4;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.OptOutRequest)
  return target;
}

size_t OptOutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.OptOutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_headers_);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .farm.nurture.core.contracts.common.NameSpace nameSpace = 4;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptOutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.OptOutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OptOutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptOutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.OptOutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.OptOutRequest)
    MergeFrom(*source);
  }
}

void OptOutRequest::MergeFrom(const OptOutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.OptOutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.has_request_headers()) {
    _internal_mutable_request_headers()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_request_headers());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void OptOutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.OptOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptOutRequest::CopyFrom(const OptOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.OptOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptOutRequest::IsInitialized() const {
  return true;
}

void OptOutRequest::InternalSwap(OptOutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptOutRequest, namespace__)
      + sizeof(OptOutRequest::namespace__)
      - PROTOBUF_FIELD_OFFSET(OptOutRequest, request_headers_)>(
          reinterpret_cast<char*>(&request_headers_),
          reinterpret_cast<char*>(&other->request_headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptOutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptOutResponse::_Internal {
 public:
};

OptOutResponse::OptOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.OptOutResponse)
}
OptOutResponse::OptOutResponse(const OptOutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.OptOutResponse)
}

void OptOutResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

OptOutResponse::~OptOutResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.OptOutResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptOutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptOutResponse::ArenaDtor(void* object) {
  OptOutResponse* _this = reinterpret_cast< OptOutResponse* >(object);
  (void)_this;
}
void OptOutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptOutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptOutResponse& OptOutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptOutResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void OptOutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.OptOutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptOutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptOutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.OptOutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.OptOutResponse)
  return target;
}

size_t OptOutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.OptOutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptOutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.OptOutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OptOutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptOutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.OptOutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.OptOutResponse)
    MergeFrom(*source);
  }
}

void OptOutResponse::MergeFrom(const OptOutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.OptOutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void OptOutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.OptOutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptOutResponse::CopyFrom(const OptOutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.OptOutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptOutResponse::IsInitialized() const {
  return true;
}

void OptOutResponse::InternalSwap(OptOutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptOutResponse, status_code_)
      + sizeof(OptOutResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(OptOutResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptOutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageAcknowledgementRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers(const MessageAcknowledgementRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const MessageAcknowledgementRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const MessageAcknowledgementRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
MessageAcknowledgementRequest::_Internal::request_headers(const MessageAcknowledgementRequest* msg) {
  return *msg->request_headers_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgementRequest::_Internal::start_time(const MessageAcknowledgementRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgementRequest::_Internal::end_time(const MessageAcknowledgementRequest* msg) {
  return *msg->end_time_;
}
void MessageAcknowledgementRequest::clear_request_headers() {
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
}
void MessageAcknowledgementRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void MessageAcknowledgementRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
MessageAcknowledgementRequest::MessageAcknowledgementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
}
MessageAcknowledgementRequest::MessageAcknowledgementRequest(const MessageAcknowledgementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  template_name_like_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_template_name_like().empty()) {
    template_name_like_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_name_like(), 
      GetArena());
  }
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_id(), 
      GetArena());
  }
  if (from._internal_has_request_headers()) {
    request_headers_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.request_headers_);
  } else {
    request_headers_ = nullptr;
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&responseordertype_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(responseordertype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
}

void MessageAcknowledgementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  template_name_like_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_headers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&responseordertype_) -
      reinterpret_cast<char*>(&request_headers_)) + sizeof(responseordertype_));
}

MessageAcknowledgementRequest::~MessageAcknowledgementRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAcknowledgementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  template_name_like_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_headers_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void MessageAcknowledgementRequest::ArenaDtor(void* object) {
  MessageAcknowledgementRequest* _this = reinterpret_cast< MessageAcknowledgementRequest* >(object);
  (void)_this;
}
void MessageAcknowledgementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAcknowledgementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAcknowledgementRequest& MessageAcknowledgementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAcknowledgementRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void MessageAcknowledgementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  template_name_like_.ClearToEmpty();
  mobile_number_.ClearToEmpty();
  reference_id_.ClearToEmpty();
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responseordertype_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(responseordertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAcknowledgementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.CommunicationChannel channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_channels(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // string template_name_like = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_template_name_like();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseOrderType responseOrderType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_responseordertype(static_cast<::farm::nurture::core::contracts::common::ResponseOrderType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAcknowledgementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_headers(this), target, stream);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channels = 4;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, channels_, byte_size, target);
    }
  }

  // string template_name_like = 5;
  if (this->template_name_like().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_template_name_like().data(), static_cast<int>(this->_internal_template_name_like().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.template_name_like");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_template_name_like(), target);
  }

  // string mobile_number = 6;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.mobile_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobile_number(), target);
  }

  // string reference_id = 7;
  if (this->reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgementRequest.reference_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reference_id(), target);
  }

  // int32 limit = 8;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_limit(), target);
  }

  // int32 offset = 9;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_offset(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseOrderType responseOrderType = 10;
  if (this->responseordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_responseordertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  return target;
}

size_t MessageAcknowledgementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.CommunicationChannel channels = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_channels_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_channels(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string template_name_like = 5;
  if (this->template_name_like().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_template_name_like());
  }

  // string mobile_number = 6;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // string reference_id = 7;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 1;
  if (this->has_request_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_headers_);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // int32 limit = 8;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // int32 offset = 9;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // .farm.nurture.core.contracts.common.ResponseOrderType responseOrderType = 10;
  if (this->responseordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_responseordertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAcknowledgementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAcknowledgementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAcknowledgementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
    MergeFrom(*source);
  }
}

void MessageAcknowledgementRequest::MergeFrom(const MessageAcknowledgementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.template_name_like().size() > 0) {
    _internal_set_template_name_like(from._internal_template_name_like());
  }
  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.reference_id().size() > 0) {
    _internal_set_reference_id(from._internal_reference_id());
  }
  if (from.has_request_headers()) {
    _internal_mutable_request_headers()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_request_headers());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.responseordertype() != 0) {
    _internal_set_responseordertype(from._internal_responseordertype());
  }
}

void MessageAcknowledgementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAcknowledgementRequest::CopyFrom(const MessageAcknowledgementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAcknowledgementRequest::IsInitialized() const {
  return true;
}

void MessageAcknowledgementRequest::InternalSwap(MessageAcknowledgementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  template_name_like_.Swap(&other->template_name_like_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_id_.Swap(&other->reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageAcknowledgementRequest, responseordertype_)
      + sizeof(MessageAcknowledgementRequest::responseordertype_)
      - PROTOBUF_FIELD_OFFSET(MessageAcknowledgementRequest, request_headers_)>(
          reinterpret_cast<char*>(&request_headers_),
          reinterpret_cast<char*>(&other->request_headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAcknowledgementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageAcknowledgementResponse::_Internal {
 public:
};

void MessageAcknowledgementResponse::clear_attribs() {
  attribs_.Clear();
}
MessageAcknowledgementResponse::MessageAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  message_acknowledgements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
}
MessageAcknowledgementResponse::MessageAcknowledgementResponse(const MessageAcknowledgementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      message_acknowledgements_(from.message_acknowledgements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
}

void MessageAcknowledgementResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

MessageAcknowledgementResponse::~MessageAcknowledgementResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAcknowledgementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageAcknowledgementResponse::ArenaDtor(void* object) {
  MessageAcknowledgementResponse* _this = reinterpret_cast< MessageAcknowledgementResponse* >(object);
  (void)_this;
}
void MessageAcknowledgementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAcknowledgementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAcknowledgementResponse& MessageAcknowledgementResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAcknowledgementResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void MessageAcknowledgementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  message_acknowledgements_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAcknowledgementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.MessageAcknowledgement message_acknowledgements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_acknowledgements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAcknowledgementResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.ce.MessageAcknowledgement message_acknowledgements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_acknowledgements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_message_acknowledgements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  return target;
}

size_t MessageAcknowledgementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.ce.MessageAcknowledgement message_acknowledgements = 4;
  total_size += 1UL * this->_internal_message_acknowledgements_size();
  for (const auto& msg : this->message_acknowledgements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAcknowledgementResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAcknowledgementResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAcknowledgementResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
    MergeFrom(*source);
  }
}

void MessageAcknowledgementResponse::MergeFrom(const MessageAcknowledgementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  message_acknowledgements_.MergeFrom(from.message_acknowledgements_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void MessageAcknowledgementResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAcknowledgementResponse::CopyFrom(const MessageAcknowledgementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAcknowledgementResponse::IsInitialized() const {
  return true;
}

void MessageAcknowledgementResponse::InternalSwap(MessageAcknowledgementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  message_acknowledgements_.InternalSwap(&other->message_acknowledgements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageAcknowledgementResponse, status_code_)
      + sizeof(MessageAcknowledgementResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(MessageAcknowledgementResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAcknowledgementResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageAcknowledgement::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const MessageAcknowledgement* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& vendor_delivery_time(const MessageAcknowledgement* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& actor_delivery_time(const MessageAcknowledgement* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const MessageAcknowledgement* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const MessageAcknowledgement* msg);
};

const ::farm::nurture::core::contracts::common::ActorID&
MessageAcknowledgement::_Internal::actor(const MessageAcknowledgement* msg) {
  return *msg->actor_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgement::_Internal::vendor_delivery_time(const MessageAcknowledgement* msg) {
  return *msg->vendor_delivery_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgement::_Internal::actor_delivery_time(const MessageAcknowledgement* msg) {
  return *msg->actor_delivery_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgement::_Internal::created_at(const MessageAcknowledgement* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageAcknowledgement::_Internal::updated_at(const MessageAcknowledgement* msg) {
  return *msg->updated_at_;
}
void MessageAcknowledgement::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
void MessageAcknowledgement::clear_attributes() {
  attributes_.Clear();
}
void MessageAcknowledgement::clear_vendor_delivery_time() {
  if (GetArena() == nullptr && vendor_delivery_time_ != nullptr) {
    delete vendor_delivery_time_;
  }
  vendor_delivery_time_ = nullptr;
}
void MessageAcknowledgement::clear_actor_delivery_time() {
  if (GetArena() == nullptr && actor_delivery_time_ != nullptr) {
    delete actor_delivery_time_;
  }
  actor_delivery_time_ = nullptr;
}
void MessageAcknowledgement::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void MessageAcknowledgement::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
MessageAcknowledgement::MessageAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placeholders_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgement)
}
MessageAcknowledgement::MessageAcknowledgement(const MessageAcknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placeholders_(from.placeholders_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_id(), 
      GetArena());
  }
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_template_name().empty()) {
    template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_name(), 
      GetArena());
  }
  message_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_content().empty()) {
    message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_content(), 
      GetArena());
  }
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_name(), 
      GetArena());
  }
  vendor_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_message_id().empty()) {
    vendor_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_message_id(), 
      GetArena());
  }
  actor_contact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_contact_id().empty()) {
    actor_contact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_contact_id(), 
      GetArena());
  }
  parent_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_reference_id().empty()) {
    parent_reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_reference_id(), 
      GetArena());
  }
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_campaign_name().empty()) {
    campaign_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_campaign_name(), 
      GetArena());
  }
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  if (from._internal_has_vendor_delivery_time()) {
    vendor_delivery_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.vendor_delivery_time_);
  } else {
    vendor_delivery_time_ = nullptr;
  }
  if (from._internal_has_actor_delivery_time()) {
    actor_delivery_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.actor_delivery_time_);
  } else {
    actor_delivery_time_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contact_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(contact_type_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.MessageAcknowledgement)
}

void MessageAcknowledgement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_contact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contact_type_) -
      reinterpret_cast<char*>(&actor_)) + sizeof(contact_type_));
}

MessageAcknowledgement::~MessageAcknowledgement() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAcknowledgement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_contact_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actor_;
  if (this != internal_default_instance()) delete vendor_delivery_time_;
  if (this != internal_default_instance()) delete actor_delivery_time_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void MessageAcknowledgement::ArenaDtor(void* object) {
  MessageAcknowledgement* _this = reinterpret_cast< MessageAcknowledgement* >(object);
  (void)_this;
}
void MessageAcknowledgement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAcknowledgement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAcknowledgement& MessageAcknowledgement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAcknowledgement_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void MessageAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholders_.Clear();
  attributes_.Clear();
  mobile_number_.ClearToEmpty();
  reference_id_.ClearToEmpty();
  template_name_.ClearToEmpty();
  message_content_.ClearToEmpty();
  vendor_name_.ClearToEmpty();
  vendor_message_id_.ClearToEmpty();
  actor_contact_id_.ClearToEmpty();
  parent_reference_id_.ClearToEmpty();
  campaign_name_.ClearToEmpty();
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  if (GetArena() == nullptr && vendor_delivery_time_ != nullptr) {
    delete vendor_delivery_time_;
  }
  vendor_delivery_time_ = nullptr;
  if (GetArena() == nullptr && actor_delivery_time_ != nullptr) {
    delete actor_delivery_time_;
  }
  actor_delivery_time_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contact_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(contact_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAcknowledgement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // string reference_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string template_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_template_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Language language = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::farm::nurture::core::contracts::common::Language>(val));
        } else goto handle_unusual;
        continue;
      // string message_content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_message_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unicode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_unicode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_message_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_vendor_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationState state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::farm::nurture::core::contracts::common::CommunicationState>(val));
        } else goto handle_unusual;
        continue;
      // int32 retry_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attributes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp vendor_delivery_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vendor_delivery_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp actor_delivery_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_delivery_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ContactType contact_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contact_type(static_cast<::farm::nurture::core::contracts::common::ContactType>(val));
        } else goto handle_unusual;
        continue;
      // string actor_contact_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_actor_contact_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parent_reference_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_parent_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string campaign_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_campaign_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAcknowledgement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actor(this), target, stream);
  }

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.mobile_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mobile_number(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 4;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channel(), target);
  }

  // string reference_id = 5;
  if (this->reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.reference_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reference_id(), target);
  }

  // string template_name = 6;
  if (this->template_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_template_name().data(), static_cast<int>(this->_internal_template_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.template_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_template_name(), target);
  }

  // .farm.nurture.core.contracts.common.Language language = 7;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_language(), target);
  }

  // string message_content = 8;
  if (this->message_content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_content().data(), static_cast<int>(this->_internal_message_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.message_content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_content(), target);
  }

  // bool is_unicode = 9;
  if (this->is_unicode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_unicode(), target);
  }

  // string vendor_name = 10;
  if (this->vendor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_vendor_name(), target);
  }

  // string vendor_message_id = 11;
  if (this->vendor_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_message_id().data(), static_cast<int>(this->_internal_vendor_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.vendor_message_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_vendor_message_id(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationState state = 12;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_state(), target);
  }

  // int32 retry_count = 13;
  if (this->retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_retry_count(), target);
  }

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_placeholders(i), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_attributes(i), target, stream);
  }

  // .google.protobuf.Timestamp vendor_delivery_time = 16;
  if (this->has_vendor_delivery_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::vendor_delivery_time(this), target, stream);
  }

  // .google.protobuf.Timestamp actor_delivery_time = 17;
  if (this->has_actor_delivery_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::actor_delivery_time(this), target, stream);
  }

  // .farm.nurture.core.contracts.common.ContactType contact_type = 18;
  if (this->contact_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_contact_type(), target);
  }

  // string actor_contact_id = 19;
  if (this->actor_contact_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_contact_id().data(), static_cast<int>(this->_internal_actor_contact_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.actor_contact_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_actor_contact_id(), target);
  }

  // string parent_reference_id = 20;
  if (this->parent_reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_reference_id().data(), static_cast<int>(this->_internal_parent_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.parent_reference_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_parent_reference_id(), target);
  }

  // string campaign_name = 21;
  if (this->campaign_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaign_name().data(), static_cast<int>(this->_internal_campaign_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.MessageAcknowledgement.campaign_name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_campaign_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 22;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 23;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::updated_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  return target;
}

size_t MessageAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 14;
  total_size += 1UL * this->_internal_placeholders_size();
  for (const auto& msg : this->placeholders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 15;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mobile_number = 3;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // string reference_id = 5;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  // string template_name = 6;
  if (this->template_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_template_name());
  }

  // string message_content = 8;
  if (this->message_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_content());
  }

  // string vendor_name = 10;
  if (this->vendor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // string vendor_message_id = 11;
  if (this->vendor_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_message_id());
  }

  // string actor_contact_id = 19;
  if (this->actor_contact_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_contact_id());
  }

  // string parent_reference_id = 20;
  if (this->parent_reference_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_reference_id());
  }

  // string campaign_name = 21;
  if (this->campaign_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaign_name());
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 2;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .google.protobuf.Timestamp vendor_delivery_time = 16;
  if (this->has_vendor_delivery_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vendor_delivery_time_);
  }

  // .google.protobuf.Timestamp actor_delivery_time = 17;
  if (this->has_actor_delivery_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_delivery_time_);
  }

  // .google.protobuf.Timestamp created_at = 22;
  if (this->has_created_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 23;
  if (this->has_updated_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // .farm.nurture.core.contracts.common.Language language = 7;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // bool is_unicode = 9;
  if (this->is_unicode() != 0) {
    total_size += 1 + 1;
  }

  // .farm.nurture.core.contracts.common.CommunicationState state = 12;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 retry_count = 13;
  if (this->retry_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retry_count());
  }

  // .farm.nurture.core.contracts.common.ContactType contact_type = 18;
  if (this->contact_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contact_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAcknowledgement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAcknowledgement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAcknowledgement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.MessageAcknowledgement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.MessageAcknowledgement)
    MergeFrom(*source);
  }
}

void MessageAcknowledgement::MergeFrom(const MessageAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeholders_.MergeFrom(from.placeholders_);
  attributes_.MergeFrom(from.attributes_);
  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.reference_id().size() > 0) {
    _internal_set_reference_id(from._internal_reference_id());
  }
  if (from.template_name().size() > 0) {
    _internal_set_template_name(from._internal_template_name());
  }
  if (from.message_content().size() > 0) {
    _internal_set_message_content(from._internal_message_content());
  }
  if (from.vendor_name().size() > 0) {
    _internal_set_vendor_name(from._internal_vendor_name());
  }
  if (from.vendor_message_id().size() > 0) {
    _internal_set_vendor_message_id(from._internal_vendor_message_id());
  }
  if (from.actor_contact_id().size() > 0) {
    _internal_set_actor_contact_id(from._internal_actor_contact_id());
  }
  if (from.parent_reference_id().size() > 0) {
    _internal_set_parent_reference_id(from._internal_parent_reference_id());
  }
  if (from.campaign_name().size() > 0) {
    _internal_set_campaign_name(from._internal_campaign_name());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.has_vendor_delivery_time()) {
    _internal_mutable_vendor_delivery_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_vendor_delivery_time());
  }
  if (from.has_actor_delivery_time()) {
    _internal_mutable_actor_delivery_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_actor_delivery_time());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.is_unicode() != 0) {
    _internal_set_is_unicode(from._internal_is_unicode());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.retry_count() != 0) {
    _internal_set_retry_count(from._internal_retry_count());
  }
  if (from.contact_type() != 0) {
    _internal_set_contact_type(from._internal_contact_type());
  }
}

void MessageAcknowledgement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAcknowledgement::CopyFrom(const MessageAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.MessageAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAcknowledgement::IsInitialized() const {
  return true;
}

void MessageAcknowledgement::InternalSwap(MessageAcknowledgement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placeholders_.InternalSwap(&other->placeholders_);
  attributes_.InternalSwap(&other->attributes_);
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_id_.Swap(&other->reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  template_name_.Swap(&other->template_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_content_.Swap(&other->message_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_message_id_.Swap(&other->vendor_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actor_contact_id_.Swap(&other->actor_contact_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_reference_id_.Swap(&other->parent_reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaign_name_.Swap(&other->campaign_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageAcknowledgement, contact_type_)
      + sizeof(MessageAcknowledgement::contact_type_)
      - PROTOBUF_FIELD_OFFSET(MessageAcknowledgement, actor_)>(
          reinterpret_cast<char*>(&actor_),
          reinterpret_cast<char*>(&other->actor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAcknowledgement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Template::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Template* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Template* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const Template* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Template::_Internal::created_at(const Template* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Template::_Internal::updated_at(const Template* msg) {
  return *msg->updated_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Template::_Internal::deleted_at(const Template* msg) {
  return *msg->deleted_at_;
}
void Template::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Template::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void Template::clear_deleted_at() {
  if (GetArena() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
}
void Template::clear_attributes() {
  attributes_.Clear();
}
void Template::clear_meta_data() {
  meta_data_.Clear();
}
Template::Template(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena),
  meta_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.Template)
}
Template::Template(const Template& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  owner_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_email().empty()) {
    owner_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_email(), 
      GetArena());
  }
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vertical().empty()) {
    vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vertical(), 
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_deleted_at()) {
    deleted_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_at_);
  } else {
    deleted_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.Template)
}

void Template::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(active_));
}

Template::~Template() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.Template)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Template::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete deleted_at_;
}

void Template::ArenaDtor(void* object) {
  Template* _this = reinterpret_cast< Template* >(object);
  (void)_this;
}
void Template::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Template::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Template& Template::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Template_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void Template::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.Template)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  meta_data_.Clear();
  name_.ClearToEmpty();
  content_.ClearToEmpty();
  title_.ClearToEmpty();
  owner_email_.ClearToEmpty();
  vertical_.ClearToEmpty();
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Template::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Template.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::farm::nurture::core::contracts::common::Language>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TemplateContentType content_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::farm::nurture::core::contracts::common::TemplateContentType>(val));
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Template.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Template.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attributes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string owner_email = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_owner_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Template.owner_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vertical = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_vertical();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.Template.vertical"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meta_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Template::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.Template)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Template.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .farm.nurture.core.contracts.common.Language language = 3;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  // .farm.nurture.core.contracts.common.TemplateContentType content_type = 4;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_content_type(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Template.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // string title = 6;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Template.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // bool active = 7;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_active(), target);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updated_at(this), target, stream);
  }

  // .google.protobuf.Timestamp deleted_at = 10;
  if (this->has_deleted_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::deleted_at(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_attributes(i), target, stream);
  }

  // string owner_email = 12;
  if (this->owner_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_email().data(), static_cast<int>(this->_internal_owner_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Template.owner_email");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_owner_email(), target);
  }

  // string vertical = 13;
  if (this->vertical().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vertical().data(), static_cast<int>(this->_internal_vertical().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.Template.vertical");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_vertical(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meta_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_meta_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.Template)
  return target;
}

size_t Template::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.Template)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attributes = 11;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 14;
  total_size += 1UL * this->_internal_meta_data_size();
  for (const auto& msg : this->meta_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string title = 6;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string owner_email = 12;
  if (this->owner_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_email());
  }

  // string vertical = 13;
  if (this->vertical().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vertical());
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .google.protobuf.Timestamp deleted_at = 10;
  if (this->has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_at_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .farm.nurture.core.contracts.common.Language language = 3;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // .farm.nurture.core.contracts.common.TemplateContentType content_type = 4;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  // bool active = 7;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Template::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.Template)
  GOOGLE_DCHECK_NE(&from, this);
  const Template* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Template>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.Template)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.Template)
    MergeFrom(*source);
  }
}

void Template::MergeFrom(const Template& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.Template)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  meta_data_.MergeFrom(from.meta_data_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.owner_email().size() > 0) {
    _internal_set_owner_email(from._internal_owner_email());
  }
  if (from.vertical().size() > 0) {
    _internal_set_vertical(from._internal_vertical());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_deleted_at()) {
    _internal_mutable_deleted_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void Template::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.Template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Template::CopyFrom(const Template& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.Template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template::IsInitialized() const {
  return true;
}

void Template::InternalSwap(Template* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  meta_data_.InternalSwap(&other->meta_data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_email_.Swap(&other->owner_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vertical_.Swap(&other->vertical_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Template, active_)
      + sizeof(Template::active_)
      - PROTOBUF_FIELD_OFFSET(Template, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Template::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddTemplateRequest::_Internal {
 public:
};

void AddTemplateRequest::clear_attribs() {
  attribs_.Clear();
}
void AddTemplateRequest::clear_meta_data() {
  meta_data_.Clear();
}
AddTemplateRequest::AddTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  meta_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.AddTemplateRequest)
}
AddTemplateRequest::AddTemplateRequest(const AddTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArena());
  }
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vertical().empty()) {
    vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vertical(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  ::memcpy(&language_code_, &from.language_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&templatecontenttype_) -
    reinterpret_cast<char*>(&language_code_)) + sizeof(templatecontenttype_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.AddTemplateRequest)
}

void AddTemplateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&language_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&templatecontenttype_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(templatecontenttype_));
}

AddTemplateRequest::~AddTemplateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.AddTemplateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddTemplateRequest::ArenaDtor(void* object) {
  AddTemplateRequest* _this = reinterpret_cast< AddTemplateRequest* >(object);
  (void)_this;
}
void AddTemplateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTemplateRequest& AddTemplateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void AddTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  meta_data_.Clear();
  name_.ClearToEmpty();
  content_.ClearToEmpty();
  owner_.ClearToEmpty();
  vertical_.ClearToEmpty();
  title_.ClearToEmpty();
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&templatecontenttype_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(templatecontenttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTemplateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.AddTemplateRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.TemplateContentType templateContentType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_templatecontenttype(static_cast<::farm::nurture::core::contracts::common::TemplateContentType>(val));
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.AddTemplateRequest.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.AddTemplateRequest.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vertical = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vertical();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.AddTemplateRequest.vertical"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.AddTemplateRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meta_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTemplateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.AddTemplateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 2;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_language_code(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 3;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel(), target);
  }

  // .farm.nurture.core.contracts.common.TemplateContentType templateContentType = 4;
  if (this->templatecontenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_templatecontenttype(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.AddTemplateRequest.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_attribs(i), target, stream);
  }

  // string owner = 7;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.AddTemplateRequest.owner");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_owner(), target);
  }

  // string vertical = 8;
  if (this->vertical().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vertical().data(), static_cast<int>(this->_internal_vertical().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.AddTemplateRequest.vertical");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vertical(), target);
  }

  // string title = 9;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.AddTemplateRequest.title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meta_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_meta_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.AddTemplateRequest)
  return target;
}

size_t AddTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 6;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 10;
  total_size += 1UL * this->_internal_meta_data_size();
  for (const auto& msg : this->meta_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string owner = 7;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string vertical = 8;
  if (this->vertical().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vertical());
  }

  // string title = 9;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 2;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // .farm.nurture.core.contracts.common.TemplateContentType templateContentType = 4;
  if (this->templatecontenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_templatecontenttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTemplateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTemplateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.AddTemplateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.AddTemplateRequest)
    MergeFrom(*source);
  }
}

void AddTemplateRequest::MergeFrom(const AddTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  meta_data_.MergeFrom(from.meta_data_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.vertical().size() > 0) {
    _internal_set_vertical(from._internal_vertical());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.templatecontenttype() != 0) {
    _internal_set_templatecontenttype(from._internal_templatecontenttype());
  }
}

void AddTemplateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTemplateRequest::CopyFrom(const AddTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.AddTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTemplateRequest::IsInitialized() const {
  return true;
}

void AddTemplateRequest::InternalSwap(AddTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  meta_data_.InternalSwap(&other->meta_data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vertical_.Swap(&other->vertical_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTemplateRequest, templatecontenttype_)
      + sizeof(AddTemplateRequest::templatecontenttype_)
      - PROTOBUF_FIELD_OFFSET(AddTemplateRequest, language_code_)>(
          reinterpret_cast<char*>(&language_code_),
          reinterpret_cast<char*>(&other->language_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTemplateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddTemplateResponse::_Internal {
 public:
};

void AddTemplateResponse::clear_attribs() {
  attribs_.Clear();
}
AddTemplateResponse::AddTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  vendors_response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.AddTemplateResponse)
}
AddTemplateResponse::AddTemplateResponse(const AddTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      vendors_response_(from.vendors_response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.AddTemplateResponse)
}

void AddTemplateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
}

AddTemplateResponse::~AddTemplateResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.AddTemplateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddTemplateResponse::ArenaDtor(void* object) {
  AddTemplateResponse* _this = reinterpret_cast< AddTemplateResponse* >(object);
  (void)_this;
}
void AddTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTemplateResponse& AddTemplateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void AddTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  vendors_response_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vendors_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTemplateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribs(i), target, stream);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_id(), target);
  }

  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vendors_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vendors_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.AddTemplateResponse)
  return target;
}

size_t AddTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 5;
  total_size += 1UL * this->_internal_vendors_response_size();
  for (const auto& msg : this->vendors_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  // int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTemplateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTemplateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.AddTemplateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.AddTemplateResponse)
    MergeFrom(*source);
  }
}

void AddTemplateResponse::MergeFrom(const AddTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  vendors_response_.MergeFrom(from.vendors_response_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AddTemplateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTemplateResponse::CopyFrom(const AddTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.AddTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTemplateResponse::IsInitialized() const {
  return true;
}

void AddTemplateResponse::InternalSwap(AddTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  vendors_response_.InternalSwap(&other->vendors_response_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTemplateResponse, id_)
      + sizeof(AddTemplateResponse::id_)
      - PROTOBUF_FIELD_OFFSET(AddTemplateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTemplateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TemplateUpdateRequest::_Internal {
 public:
};

void TemplateUpdateRequest::clear_attribs() {
  attribs_.Clear();
}
void TemplateUpdateRequest::clear_meta_data() {
  meta_data_.Clear();
}
TemplateUpdateRequest::TemplateUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribs_(arena),
  meta_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
}
TemplateUpdateRequest::TemplateUpdateRequest(const TemplateUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribs_(from.attribs_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArena());
  }
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vertical().empty()) {
    vertical_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vertical(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  language_code_ = from.language_code_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
}

void TemplateUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_ = 0;
}

TemplateUpdateRequest::~TemplateUpdateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TemplateUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vertical_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TemplateUpdateRequest::ArenaDtor(void* object) {
  TemplateUpdateRequest* _this = reinterpret_cast< TemplateUpdateRequest* >(object);
  (void)_this;
}
void TemplateUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TemplateUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemplateUpdateRequest& TemplateUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemplateUpdateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void TemplateUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribs_.Clear();
  meta_data_.Clear();
  content_.ClearToEmpty();
  title_.ClearToEmpty();
  owner_.ClearToEmpty();
  vertical_.ClearToEmpty();
  name_.ClearToEmpty();
  language_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.TemplateUpdateRequest.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs attribs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.TemplateUpdateRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vertical();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.TemplateUpdateRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meta_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemplateUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.TemplateUpdateRequest.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribs(i), target, stream);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.TemplateUpdateRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.TemplateUpdateRequest.owner");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_owner(), target);
  }

  // string vertical = 5;
  if (this->vertical().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vertical().data(), static_cast<int>(this->_internal_vertical().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.TemplateUpdateRequest.vertical");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vertical(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.TemplateUpdateRequest.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_language_code(), target);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meta_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_meta_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  return target;
}

size_t TemplateUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 2;
  total_size += 1UL * this->_internal_attribs_size();
  for (const auto& msg : this->attribs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .farm.nurture.core.contracts.common.Attribs meta_data = 8;
  total_size += 1UL * this->_internal_meta_data_size();
  for (const auto& msg : this->meta_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string vertical = 5;
  if (this->vertical().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vertical());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemplateUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TemplateUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemplateUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
    MergeFrom(*source);
  }
}

void TemplateUpdateRequest::MergeFrom(const TemplateUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribs_.MergeFrom(from.attribs_);
  meta_data_.MergeFrom(from.meta_data_);
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.vertical().size() > 0) {
    _internal_set_vertical(from._internal_vertical());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
}

void TemplateUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateUpdateRequest::CopyFrom(const TemplateUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.TemplateUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateUpdateRequest::IsInitialized() const {
  return true;
}

void TemplateUpdateRequest::InternalSwap(TemplateUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribs_.InternalSwap(&other->attribs_);
  meta_data_.InternalSwap(&other->meta_data_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vertical_.Swap(&other->vertical_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(language_code_, other->language_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAllTemplateResponse::_Internal {
 public:
};

GetAllTemplateResponse::GetAllTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  templates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
}
GetAllTemplateResponse::GetAllTemplateResponse(const GetAllTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      templates_(from.templates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
}

void GetAllTemplateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

GetAllTemplateResponse::~GetAllTemplateResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAllTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllTemplateResponse::ArenaDtor(void* object) {
  GetAllTemplateResponse* _this = reinterpret_cast< GetAllTemplateResponse* >(object);
  (void)_this;
}
void GetAllTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllTemplateResponse& GetAllTemplateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllTemplateResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GetAllTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAllTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.Template templates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllTemplateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated .farm.nurture.core.contracts.ce.Template templates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_templates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_templates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  return target;
}

size_t GetAllTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.Template templates = 3;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllTemplateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllTemplateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
    MergeFrom(*source);
  }
}

void GetAllTemplateResponse::MergeFrom(const GetAllTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void GetAllTemplateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllTemplateResponse::CopyFrom(const GetAllTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.GetAllTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllTemplateResponse::IsInitialized() const {
  return true;
}

void GetAllTemplateResponse::InternalSwap(GetAllTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templates_.InternalSwap(&other->templates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAllTemplateResponse, status_code_)
      + sizeof(GetAllTemplateResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(GetAllTemplateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllTemplateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAllTemplateRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::common::RequestHeaders& request_headers(const GetAllTemplateRequest* msg);
};

const ::farm::nurture::core::contracts::common::RequestHeaders&
GetAllTemplateRequest::_Internal::request_headers(const GetAllTemplateRequest* msg) {
  return *msg->request_headers_;
}
void GetAllTemplateRequest::clear_request_headers() {
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
}
GetAllTemplateRequest::GetAllTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  templatenames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
}
GetAllTemplateRequest::GetAllTemplateRequest(const GetAllTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      templatenames_(from.templatenames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  searchquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_searchquery().empty()) {
    searchquery_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_searchquery(), 
      GetArena());
  }
  if (from._internal_has_request_headers()) {
    request_headers_ = new ::farm::nurture::core::contracts::common::RequestHeaders(*from.request_headers_);
  } else {
    request_headers_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
}

void GetAllTemplateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  searchquery_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_headers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&request_headers_)) + sizeof(status_));
}

GetAllTemplateRequest::~GetAllTemplateRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAllTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  searchquery_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_headers_;
}

void GetAllTemplateRequest::ArenaDtor(void* object) {
  GetAllTemplateRequest* _this = reinterpret_cast< GetAllTemplateRequest* >(object);
  (void)_this;
}
void GetAllTemplateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllTemplateRequest& GetAllTemplateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllTemplateRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GetAllTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templatenames_.Clear();
  searchquery_.ClearToEmpty();
  if (GetArena() == nullptr && request_headers_ != nullptr) {
    delete request_headers_;
  }
  request_headers_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAllTemplateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string searchQuery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_searchquery();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.NameSpace namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_namespace_(static_cast<::farm::nurture::core::contracts::common::NameSpace>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated string templateNames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templatenames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllTemplateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_limit(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 3;
  if (this->has_request_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request_headers(this), target, stream);
  }

  // string searchQuery = 4;
  if (this->searchquery().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_searchquery().data(), static_cast<int>(this->_internal_searchquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.GetAllTemplateRequest.searchQuery");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_searchquery(), target);
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 5;
  if (this->namespace_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_namespace_(), target);
  }

  // .farm.nurture.core.contracts.common.Status status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // repeated string templateNames = 7;
  for (int i = 0, n = this->_internal_templatenames_size(); i < n; i++) {
    const auto& s = this->_internal_templatenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.GetAllTemplateRequest.templateNames");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  return target;
}

size_t GetAllTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string templateNames = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templatenames_.size());
  for (int i = 0, n = templatenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templatenames_.Get(i));
  }

  // string searchQuery = 4;
  if (this->searchquery().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_searchquery());
  }

  // .farm.nurture.core.contracts.common.RequestHeaders request_headers = 3;
  if (this->has_request_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_headers_);
  }

  // int64 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // .farm.nurture.core.contracts.common.NameSpace namespace = 5;
  if (this->namespace_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_namespace_());
  }

  // .farm.nurture.core.contracts.common.Status status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllTemplateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllTemplateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
    MergeFrom(*source);
  }
}

void GetAllTemplateRequest::MergeFrom(const GetAllTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  templatenames_.MergeFrom(from.templatenames_);
  if (from.searchquery().size() > 0) {
    _internal_set_searchquery(from._internal_searchquery());
  }
  if (from.has_request_headers()) {
    _internal_mutable_request_headers()->::farm::nurture::core::contracts::common::RequestHeaders::MergeFrom(from._internal_request_headers());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.namespace_() != 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetAllTemplateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllTemplateRequest::CopyFrom(const GetAllTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.GetAllTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllTemplateRequest::IsInitialized() const {
  return true;
}

void GetAllTemplateRequest::InternalSwap(GetAllTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  templatenames_.InternalSwap(&other->templatenames_);
  searchquery_.Swap(&other->searchquery_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAllTemplateRequest, status_)
      + sizeof(GetAllTemplateRequest::status_)
      - PROTOBUF_FIELD_OFFSET(GetAllTemplateRequest, request_headers_)>(
          reinterpret_cast<char*>(&request_headers_),
          reinterpret_cast<char*>(&other->request_headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllTemplateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VendorResponse::_Internal {
 public:
};

VendorResponse::VendorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.VendorResponse)
}
VendorResponse::VendorResponse(const VendorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_name(), 
      GetArena());
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.VendorResponse)
}

void VendorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

VendorResponse::~VendorResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.VendorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VendorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VendorResponse::ArenaDtor(void* object) {
  VendorResponse* _this = reinterpret_cast< VendorResponse* >(object);
  (void)_this;
}
void VendorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VendorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VendorResponse& VendorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VendorResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void VendorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.VendorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_name_.ClearToEmpty();
  error_msg_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VendorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vendor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.VendorResponse.vendor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::farm::nurture::core::contracts::common::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::farm::nurture::core::contracts::common::ResponseStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.VendorResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VendorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.VendorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor_name = 1;
  if (this->vendor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.VendorResponse.vendor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor_name(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 3;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.VendorResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.VendorResponse)
  return target;
}

size_t VendorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.VendorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 1;
  if (this->vendor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // .farm.nurture.core.contracts.common.ResponseStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .farm.nurture.core.contracts.common.ResponseStatusCode status_code = 3;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VendorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.VendorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VendorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VendorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.VendorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.VendorResponse)
    MergeFrom(*source);
  }
}

void VendorResponse::MergeFrom(const VendorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.VendorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendor_name().size() > 0) {
    _internal_set_vendor_name(from._internal_vendor_name());
  }
  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void VendorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.VendorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VendorResponse::CopyFrom(const VendorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.VendorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VendorResponse::IsInitialized() const {
  return true;
}

void VendorResponse::InternalSwap(VendorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VendorResponse, status_code_)
      + sizeof(VendorResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(VendorResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VendorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivationResponse::_Internal {
 public:
};

ActivationResponse::ActivationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vendors_response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.ActivationResponse)
}
ActivationResponse::ActivationResponse(const ActivationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vendors_response_(from.vendors_response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_template_ = from.active_template_;
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.ActivationResponse)
}

void ActivationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  active_template_ = false;
}

ActivationResponse::~ActivationResponse() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.ActivationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActivationResponse::ArenaDtor(void* object) {
  ActivationResponse* _this = reinterpret_cast< ActivationResponse* >(object);
  (void)_this;
}
void ActivationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationResponse& ActivationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationResponse_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void ActivationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.ActivationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendors_response_.Clear();
  active_template_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vendors_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool active_template = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_template_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.ActivationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vendors_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vendors_response(i), target, stream);
  }

  // bool active_template = 2;
  if (this->active_template() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_active_template(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.ActivationResponse)
  return target;
}

size_t ActivationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.ActivationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.VendorResponse vendors_response = 1;
  total_size += 1UL * this->_internal_vendors_response_size();
  for (const auto& msg : this->vendors_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool active_template = 2;
  if (this->active_template() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.ActivationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.ActivationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.ActivationResponse)
    MergeFrom(*source);
  }
}

void ActivationResponse::MergeFrom(const ActivationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.ActivationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vendors_response_.MergeFrom(from.vendors_response_);
  if (from.active_template() != 0) {
    _internal_set_active_template(from._internal_active_template());
  }
}

void ActivationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.ActivationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationResponse::CopyFrom(const ActivationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.ActivationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationResponse::IsInitialized() const {
  return true;
}

void ActivationResponse::InternalSwap(ActivationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendors_response_.InternalSwap(&other->vendors_response_);
  swap(active_template_, other->active_template_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivationRequest::_Internal {
 public:
  static const ::farm::nurture::core::contracts::ce::Media& media(const ActivationRequest* msg);
  static const ::farm::nurture::core::contracts::common::ActorID& actor(const ActivationRequest* msg);
};

const ::farm::nurture::core::contracts::ce::Media&
ActivationRequest::_Internal::media(const ActivationRequest* msg) {
  return *msg->media_;
}
const ::farm::nurture::core::contracts::common::ActorID&
ActivationRequest::_Internal::actor(const ActivationRequest* msg) {
  return *msg->actor_;
}
void ActivationRequest::clear_actor() {
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
ActivationRequest::ActivationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placeholders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:farm.nurture.core.contracts.ce.ActivationRequest)
}
ActivationRequest::ActivationRequest(const ActivationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placeholders_(from.placeholders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_template_name().empty()) {
    template_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_name(), 
      GetArena());
  }
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mobile_number().empty()) {
    mobile_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mobile_number(), 
      GetArena());
  }
  if (from._internal_has_media()) {
    media_ = new ::farm::nurture::core::contracts::ce::Media(*from.media_);
  } else {
    media_ = nullptr;
  }
  if (from._internal_has_actor()) {
    actor_ = new ::farm::nurture::core::contracts::common::ActorID(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_code_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(language_code_));
  // @@protoc_insertion_point(copy_constructor:farm.nurture.core.contracts.ce.ActivationRequest)
}

void ActivationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  template_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&media_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&language_code_) -
      reinterpret_cast<char*>(&media_)) + sizeof(language_code_));
}

ActivationRequest::~ActivationRequest() {
  // @@protoc_insertion_point(destructor:farm.nurture.core.contracts.ce.ActivationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  template_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mobile_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete media_;
  if (this != internal_default_instance()) delete actor_;
}

void ActivationRequest::ArenaDtor(void* object) {
  ActivationRequest* _this = reinterpret_cast< ActivationRequest* >(object);
  (void)_this;
}
void ActivationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationRequest& ActivationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationRequest_CommunicationEngine_2fcommunication_5fengine_2eproto.base);
  return *internal_default_instance();
}


void ActivationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:farm.nurture.core.contracts.ce.ActivationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholders_.Clear();
  template_name_.ClearToEmpty();
  mobile_number_.ClearToEmpty();
  if (GetArena() == nullptr && media_ != nullptr) {
    delete media_;
  }
  media_ = nullptr;
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_code_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(language_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string template_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_template_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.ActivationRequest.template_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.CommunicationChannel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::farm::nurture::core::contracts::common::CommunicationChannel>(val));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.ce.Media media = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.ActorID actor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mobile_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mobile_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "farm.nurture.core.contracts.ce.ActivationRequest.mobile_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::farm::nurture::core::contracts::common::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:farm.nurture.core.contracts.ce.ActivationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string template_name = 1;
  if (this->template_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_template_name().data(), static_cast<int>(this->_internal_template_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.ActivationRequest.template_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_template_name(), target);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel(), target);
  }

  // .farm.nurture.core.contracts.ce.Media media = 3;
  if (this->has_media()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::media(this), target, stream);
  }

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_placeholders(i), target, stream);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 5;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::actor(this), target, stream);
  }

  // string mobile_number = 6;
  if (this->mobile_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile_number().data(), static_cast<int>(this->_internal_mobile_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "farm.nurture.core.contracts.ce.ActivationRequest.mobile_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobile_number(), target);
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:farm.nurture.core.contracts.ce.ActivationRequest)
  return target;
}

size_t ActivationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:farm.nurture.core.contracts.ce.ActivationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .farm.nurture.core.contracts.ce.Placeholder placeholders = 4;
  total_size += 1UL * this->_internal_placeholders_size();
  for (const auto& msg : this->placeholders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string template_name = 1;
  if (this->template_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_template_name());
  }

  // string mobile_number = 6;
  if (this->mobile_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile_number());
  }

  // .farm.nurture.core.contracts.ce.Media media = 3;
  if (this->has_media()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *media_);
  }

  // .farm.nurture.core.contracts.common.ActorID actor = 5;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .farm.nurture.core.contracts.common.CommunicationChannel channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // .farm.nurture.core.contracts.common.LanguageCode language_code = 7;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:farm.nurture.core.contracts.ce.ActivationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:farm.nurture.core.contracts.ce.ActivationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:farm.nurture.core.contracts.ce.ActivationRequest)
    MergeFrom(*source);
  }
}

void ActivationRequest::MergeFrom(const ActivationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:farm.nurture.core.contracts.ce.ActivationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeholders_.MergeFrom(from.placeholders_);
  if (from.template_name().size() > 0) {
    _internal_set_template_name(from._internal_template_name());
  }
  if (from.mobile_number().size() > 0) {
    _internal_set_mobile_number(from._internal_mobile_number());
  }
  if (from.has_media()) {
    _internal_mutable_media()->::farm::nurture::core::contracts::ce::Media::MergeFrom(from._internal_media());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::farm::nurture::core::contracts::common::ActorID::MergeFrom(from._internal_actor());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
}

void ActivationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:farm.nurture.core.contracts.ce.ActivationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationRequest::CopyFrom(const ActivationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:farm.nurture.core.contracts.ce.ActivationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationRequest::IsInitialized() const {
  return true;
}

void ActivationRequest::InternalSwap(ActivationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placeholders_.InternalSwap(&other->placeholders_);
  template_name_.Swap(&other->template_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mobile_number_.Swap(&other->mobile_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivationRequest, language_code_)
      + sizeof(ActivationRequest::language_code_)
      - PROTOBUF_FIELD_OFFSET(ActivationRequest, media_)>(
          reinterpret_cast<char*>(&media_),
          reinterpret_cast<char*>(&other->media_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ce
}  // namespace contracts
}  // namespace core
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::CommunicationEvent* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::CommunicationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::CommunicationEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::Media* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::Media >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::Media >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::BulkCommunicationEvent* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::BulkCommunicationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::BulkCommunicationEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::CommunicationChannelAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::Placeholder* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::Placeholder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::Placeholder >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::BulkCommunicationResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::BulkCommunicationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::BulkCommunicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::CommunicationResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::CommunicationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::CommunicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::ActorDetails* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::ActorDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::ActorDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::OptInRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::OptInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::OptInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::OptInRespone* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::OptInRespone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::OptInRespone >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::OptOutRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::OptOutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::OptOutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::OptOutResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::OptOutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::OptOutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::MessageAcknowledgementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::MessageAcknowledgementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::MessageAcknowledgement* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::MessageAcknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::Template* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::Template >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::Template >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::AddTemplateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::AddTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::AddTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::AddTemplateResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::AddTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::AddTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::TemplateUpdateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::TemplateUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::TemplateUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::GetAllTemplateResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::GetAllTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::GetAllTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::GetAllTemplateRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::GetAllTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::GetAllTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::VendorResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::VendorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::VendorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::ActivationResponse* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::ActivationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::ActivationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::farm::nurture::core::contracts::ce::ActivationRequest* Arena::CreateMaybeMessage< ::farm::nurture::core::contracts::ce::ActivationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::farm::nurture::core::contracts::ce::ActivationRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
