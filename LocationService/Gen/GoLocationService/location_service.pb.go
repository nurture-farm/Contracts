// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: LocationService/location_service.proto

package LocationService

import (
	GoCommon "code.nurture.farm/Core/Contracts/Common/Gen/GoCommon"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Namespace int32

const (
	Namespace_NO_NAMESPACE    Namespace = 0
	Namespace_NURTURE_FARM    Namespace = 1
	Namespace_NURTURE_SUSTAIN Namespace = 2
	Namespace_MUNICIPALITY    Namespace = 3
	Namespace_NURTURE_TRADE   Namespace = 4
)

// Enum value maps for Namespace.
var (
	Namespace_name = map[int32]string{
		0: "NO_NAMESPACE",
		1: "NURTURE_FARM",
		2: "NURTURE_SUSTAIN",
		3: "MUNICIPALITY",
		4: "NURTURE_TRADE",
	}
	Namespace_value = map[string]int32{
		"NO_NAMESPACE":    0,
		"NURTURE_FARM":    1,
		"NURTURE_SUSTAIN": 2,
		"MUNICIPALITY":    3,
		"NURTURE_TRADE":   4,
	}
)

func (x Namespace) Enum() *Namespace {
	p := new(Namespace)
	*p = x
	return p
}

func (x Namespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Namespace) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[0].Descriptor()
}

func (Namespace) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[0]
}

func (x Namespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Namespace.Descriptor instead.
func (Namespace) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_NO_STATUS Status = 0
	Status_UNCLAIMED Status = 1
	Status_CLAIMED   Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "NO_STATUS",
		1: "UNCLAIMED",
		2: "CLAIMED",
	}
	Status_value = map[string]int32{
		"NO_STATUS": 0,
		"UNCLAIMED": 1,
		"CLAIMED":   2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{1}
}

type Format int32

const (
	Format_NO_FORMAT Format = 0
	Format_KML       Format = 1
	Format_GEOJSON   Format = 2
	Format_TEXT      Format = 3
	Format_SHP       Format = 4
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "NO_FORMAT",
		1: "KML",
		2: "GEOJSON",
		3: "TEXT",
		4: "SHP",
	}
	Format_value = map[string]int32{
		"NO_FORMAT": 0,
		"KML":       1,
		"GEOJSON":   2,
		"TEXT":      3,
		"SHP":       4,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[2].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[2]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{2}
}

type Visibility int32

const (
	Visibility_NO_VISIBILITY Visibility = 0
	Visibility_VISIBLE       Visibility = 1
	Visibility_INVISIBLE     Visibility = 2
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "NO_VISIBILITY",
		1: "VISIBLE",
		2: "INVISIBLE",
	}
	Visibility_value = map[string]int32{
		"NO_VISIBILITY": 0,
		"VISIBLE":       1,
		"INVISIBLE":     2,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[3].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[3]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{3}
}

type GeographyType int32

const (
	GeographyType_NO_GEOGRAPHY_TYPE GeographyType = 0
	GeographyType_VILLAGE           GeographyType = 1
	GeographyType_TEHSIL            GeographyType = 2
	GeographyType_DISTRICT          GeographyType = 3
	GeographyType_STATE             GeographyType = 4
	GeographyType_COUNTRY           GeographyType = 5
)

// Enum value maps for GeographyType.
var (
	GeographyType_name = map[int32]string{
		0: "NO_GEOGRAPHY_TYPE",
		1: "VILLAGE",
		2: "TEHSIL",
		3: "DISTRICT",
		4: "STATE",
		5: "COUNTRY",
	}
	GeographyType_value = map[string]int32{
		"NO_GEOGRAPHY_TYPE": 0,
		"VILLAGE":           1,
		"TEHSIL":            2,
		"DISTRICT":          3,
		"STATE":             4,
		"COUNTRY":           5,
	}
)

func (x GeographyType) Enum() *GeographyType {
	p := new(GeographyType)
	*p = x
	return p
}

func (x GeographyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeographyType) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[4].Descriptor()
}

func (GeographyType) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[4]
}

func (x GeographyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeographyType.Descriptor instead.
func (GeographyType) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{4}
}

type LabelKey int32

const (
	LabelKey_no_label_type LabelKey = 0
	LabelKey_country       LabelKey = 1
	LabelKey_state_id      LabelKey = 2
	LabelKey_state         LabelKey = 3
	LabelKey_district_id   LabelKey = 4
	LabelKey_district      LabelKey = 5
	LabelKey_tehsil_id     LabelKey = 6
	LabelKey_tehsil        LabelKey = 7
	LabelKey_type          LabelKey = 8
)

// Enum value maps for LabelKey.
var (
	LabelKey_name = map[int32]string{
		0: "no_label_type",
		1: "country",
		2: "state_id",
		3: "state",
		4: "district_id",
		5: "district",
		6: "tehsil_id",
		7: "tehsil",
		8: "type",
	}
	LabelKey_value = map[string]int32{
		"no_label_type": 0,
		"country":       1,
		"state_id":      2,
		"state":         3,
		"district_id":   4,
		"district":      5,
		"tehsil_id":     6,
		"tehsil":        7,
		"type":          8,
	}
)

func (x LabelKey) Enum() *LabelKey {
	p := new(LabelKey)
	*p = x
	return p
}

func (x LabelKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelKey) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[5].Descriptor()
}

func (LabelKey) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[5]
}

func (x LabelKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelKey.Descriptor instead.
func (LabelKey) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{5}
}

type InsertLocationRequest_Status int32

const (
	InsertLocationRequest_UNCLAIMED InsertLocationRequest_Status = 0
	InsertLocationRequest_CLAIMED   InsertLocationRequest_Status = 1
)

// Enum value maps for InsertLocationRequest_Status.
var (
	InsertLocationRequest_Status_name = map[int32]string{
		0: "UNCLAIMED",
		1: "CLAIMED",
	}
	InsertLocationRequest_Status_value = map[string]int32{
		"UNCLAIMED": 0,
		"CLAIMED":   1,
	}
)

func (x InsertLocationRequest_Status) Enum() *InsertLocationRequest_Status {
	p := new(InsertLocationRequest_Status)
	*p = x
	return p
}

func (x InsertLocationRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertLocationRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[6].Descriptor()
}

func (InsertLocationRequest_Status) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[6]
}

func (x InsertLocationRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertLocationRequest_Status.Descriptor instead.
func (InsertLocationRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{0, 0}
}

type InsertLocationRequest_Visibility int32

const (
	InsertLocationRequest_VISIBLE   InsertLocationRequest_Visibility = 0
	InsertLocationRequest_INVISIBLE InsertLocationRequest_Visibility = 1
)

// Enum value maps for InsertLocationRequest_Visibility.
var (
	InsertLocationRequest_Visibility_name = map[int32]string{
		0: "VISIBLE",
		1: "INVISIBLE",
	}
	InsertLocationRequest_Visibility_value = map[string]int32{
		"VISIBLE":   0,
		"INVISIBLE": 1,
	}
)

func (x InsertLocationRequest_Visibility) Enum() *InsertLocationRequest_Visibility {
	p := new(InsertLocationRequest_Visibility)
	*p = x
	return p
}

func (x InsertLocationRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertLocationRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[7].Descriptor()
}

func (InsertLocationRequest_Visibility) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[7]
}

func (x InsertLocationRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertLocationRequest_Visibility.Descriptor instead.
func (InsertLocationRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{0, 1}
}

type UpdateLocationByIdRequest_Status int32

const (
	UpdateLocationByIdRequest_UNCLAIMED UpdateLocationByIdRequest_Status = 0
	UpdateLocationByIdRequest_CLAIMED   UpdateLocationByIdRequest_Status = 1
)

// Enum value maps for UpdateLocationByIdRequest_Status.
var (
	UpdateLocationByIdRequest_Status_name = map[int32]string{
		0: "UNCLAIMED",
		1: "CLAIMED",
	}
	UpdateLocationByIdRequest_Status_value = map[string]int32{
		"UNCLAIMED": 0,
		"CLAIMED":   1,
	}
)

func (x UpdateLocationByIdRequest_Status) Enum() *UpdateLocationByIdRequest_Status {
	p := new(UpdateLocationByIdRequest_Status)
	*p = x
	return p
}

func (x UpdateLocationByIdRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateLocationByIdRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[8].Descriptor()
}

func (UpdateLocationByIdRequest_Status) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[8]
}

func (x UpdateLocationByIdRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateLocationByIdRequest_Status.Descriptor instead.
func (UpdateLocationByIdRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{23, 0}
}

type UpdateLocationByIdRequest_Visibility int32

const (
	UpdateLocationByIdRequest_VISIBLE   UpdateLocationByIdRequest_Visibility = 0
	UpdateLocationByIdRequest_INVISIBLE UpdateLocationByIdRequest_Visibility = 1
)

// Enum value maps for UpdateLocationByIdRequest_Visibility.
var (
	UpdateLocationByIdRequest_Visibility_name = map[int32]string{
		0: "VISIBLE",
		1: "INVISIBLE",
	}
	UpdateLocationByIdRequest_Visibility_value = map[string]int32{
		"VISIBLE":   0,
		"INVISIBLE": 1,
	}
)

func (x UpdateLocationByIdRequest_Visibility) Enum() *UpdateLocationByIdRequest_Visibility {
	p := new(UpdateLocationByIdRequest_Visibility)
	*p = x
	return p
}

func (x UpdateLocationByIdRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateLocationByIdRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[9].Descriptor()
}

func (UpdateLocationByIdRequest_Visibility) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[9]
}

func (x UpdateLocationByIdRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateLocationByIdRequest_Visibility.Descriptor instead.
func (UpdateLocationByIdRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{23, 1}
}

type InsertLocationWithoutBoundaryRequest_Status int32

const (
	InsertLocationWithoutBoundaryRequest_UNCLAIMED InsertLocationWithoutBoundaryRequest_Status = 0
	InsertLocationWithoutBoundaryRequest_CLAIMED   InsertLocationWithoutBoundaryRequest_Status = 1
)

// Enum value maps for InsertLocationWithoutBoundaryRequest_Status.
var (
	InsertLocationWithoutBoundaryRequest_Status_name = map[int32]string{
		0: "UNCLAIMED",
		1: "CLAIMED",
	}
	InsertLocationWithoutBoundaryRequest_Status_value = map[string]int32{
		"UNCLAIMED": 0,
		"CLAIMED":   1,
	}
)

func (x InsertLocationWithoutBoundaryRequest_Status) Enum() *InsertLocationWithoutBoundaryRequest_Status {
	p := new(InsertLocationWithoutBoundaryRequest_Status)
	*p = x
	return p
}

func (x InsertLocationWithoutBoundaryRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertLocationWithoutBoundaryRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[10].Descriptor()
}

func (InsertLocationWithoutBoundaryRequest_Status) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[10]
}

func (x InsertLocationWithoutBoundaryRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertLocationWithoutBoundaryRequest_Status.Descriptor instead.
func (InsertLocationWithoutBoundaryRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{64, 0}
}

type InsertLocationWithoutBoundaryRequest_Visibility int32

const (
	InsertLocationWithoutBoundaryRequest_VISIBLE   InsertLocationWithoutBoundaryRequest_Visibility = 0
	InsertLocationWithoutBoundaryRequest_INVISIBLE InsertLocationWithoutBoundaryRequest_Visibility = 1
)

// Enum value maps for InsertLocationWithoutBoundaryRequest_Visibility.
var (
	InsertLocationWithoutBoundaryRequest_Visibility_name = map[int32]string{
		0: "VISIBLE",
		1: "INVISIBLE",
	}
	InsertLocationWithoutBoundaryRequest_Visibility_value = map[string]int32{
		"VISIBLE":   0,
		"INVISIBLE": 1,
	}
)

func (x InsertLocationWithoutBoundaryRequest_Visibility) Enum() *InsertLocationWithoutBoundaryRequest_Visibility {
	p := new(InsertLocationWithoutBoundaryRequest_Visibility)
	*p = x
	return p
}

func (x InsertLocationWithoutBoundaryRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertLocationWithoutBoundaryRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[11].Descriptor()
}

func (InsertLocationWithoutBoundaryRequest_Visibility) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[11]
}

func (x InsertLocationWithoutBoundaryRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertLocationWithoutBoundaryRequest_Visibility.Descriptor instead.
func (InsertLocationWithoutBoundaryRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{64, 1}
}

type UpdateLocationWithoutBoundaryByIdRequest_Status int32

const (
	UpdateLocationWithoutBoundaryByIdRequest_UNCLAIMED UpdateLocationWithoutBoundaryByIdRequest_Status = 0
	UpdateLocationWithoutBoundaryByIdRequest_CLAIMED   UpdateLocationWithoutBoundaryByIdRequest_Status = 1
)

// Enum value maps for UpdateLocationWithoutBoundaryByIdRequest_Status.
var (
	UpdateLocationWithoutBoundaryByIdRequest_Status_name = map[int32]string{
		0: "UNCLAIMED",
		1: "CLAIMED",
	}
	UpdateLocationWithoutBoundaryByIdRequest_Status_value = map[string]int32{
		"UNCLAIMED": 0,
		"CLAIMED":   1,
	}
)

func (x UpdateLocationWithoutBoundaryByIdRequest_Status) Enum() *UpdateLocationWithoutBoundaryByIdRequest_Status {
	p := new(UpdateLocationWithoutBoundaryByIdRequest_Status)
	*p = x
	return p
}

func (x UpdateLocationWithoutBoundaryByIdRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateLocationWithoutBoundaryByIdRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[12].Descriptor()
}

func (UpdateLocationWithoutBoundaryByIdRequest_Status) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[12]
}

func (x UpdateLocationWithoutBoundaryByIdRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateLocationWithoutBoundaryByIdRequest_Status.Descriptor instead.
func (UpdateLocationWithoutBoundaryByIdRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{68, 0}
}

type UpdateLocationWithoutBoundaryByIdRequest_Visibility int32

const (
	UpdateLocationWithoutBoundaryByIdRequest_VISIBLE   UpdateLocationWithoutBoundaryByIdRequest_Visibility = 0
	UpdateLocationWithoutBoundaryByIdRequest_INVISIBLE UpdateLocationWithoutBoundaryByIdRequest_Visibility = 1
)

// Enum value maps for UpdateLocationWithoutBoundaryByIdRequest_Visibility.
var (
	UpdateLocationWithoutBoundaryByIdRequest_Visibility_name = map[int32]string{
		0: "VISIBLE",
		1: "INVISIBLE",
	}
	UpdateLocationWithoutBoundaryByIdRequest_Visibility_value = map[string]int32{
		"VISIBLE":   0,
		"INVISIBLE": 1,
	}
)

func (x UpdateLocationWithoutBoundaryByIdRequest_Visibility) Enum() *UpdateLocationWithoutBoundaryByIdRequest_Visibility {
	p := new(UpdateLocationWithoutBoundaryByIdRequest_Visibility)
	*p = x
	return p
}

func (x UpdateLocationWithoutBoundaryByIdRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateLocationWithoutBoundaryByIdRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_LocationService_location_service_proto_enumTypes[13].Descriptor()
}

func (UpdateLocationWithoutBoundaryByIdRequest_Visibility) Type() protoreflect.EnumType {
	return &file_LocationService_location_service_proto_enumTypes[13]
}

func (x UpdateLocationWithoutBoundaryByIdRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateLocationWithoutBoundaryByIdRequest_Visibility.Descriptor instead.
func (UpdateLocationWithoutBoundaryByIdRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{68, 1}
}

type InsertLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders         `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Id                  int64                            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Boundary            string                           `protobuf:"bytes,4,opt,name=boundary,proto3" json:"boundary,omitempty"`
	CenterLatitude      float64                          `protobuf:"fixed64,5,opt,name=centerLatitude,proto3" json:"centerLatitude,omitempty"`
	CenterLongitude     float64                          `protobuf:"fixed64,6,opt,name=centerLongitude,proto3" json:"centerLongitude,omitempty"`
	Area                float64                          `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	Labels              string                           `protobuf:"bytes,8,opt,name=labels,proto3" json:"labels,omitempty"`
	Namespace           string                           `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code                string                           `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	Status              InsertLocationRequest_Status     `protobuf:"varint,11,opt,name=status,proto3,enum=farm.nurture.location.service.proto.InsertLocationRequest_Status" json:"status,omitempty"`
	Metadata            string                           `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Version             int32                            `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	MinS2Level          int32                            `protobuf:"varint,14,opt,name=minS2Level,proto3" json:"minS2Level,omitempty"`
	MaxS2Level          int32                            `protobuf:"varint,15,opt,name=maxS2Level,proto3" json:"maxS2Level,omitempty"`
	CreatedByActorId    int64                            `protobuf:"varint,16,opt,name=createdByActorId,proto3" json:"createdByActorId,omitempty"`
	CreatedByActorType  string                           `protobuf:"bytes,17,opt,name=createdByActorType,proto3" json:"createdByActorType,omitempty"`
	ModifiedByActorId   int64                            `protobuf:"varint,18,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                           `protobuf:"bytes,19,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Visibility          InsertLocationRequest_Visibility `protobuf:"varint,20,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.InsertLocationRequest_Visibility" json:"visibility,omitempty"`
	GeographyUid        string                           `protobuf:"bytes,21,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	Pincode             string                           `protobuf:"bytes,22,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string                           `protobuf:"bytes,23,opt,name=latLongGeohash,proto3" json:"latLongGeohash,omitempty"`
}

func (x *InsertLocationRequest) Reset() {
	*x = InsertLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationRequest) ProtoMessage() {}

func (x *InsertLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationRequest.ProtoReflect.Descriptor instead.
func (*InsertLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{0}
}

func (x *InsertLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *InsertLocationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InsertLocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InsertLocationRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *InsertLocationRequest) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *InsertLocationRequest) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *InsertLocationRequest) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *InsertLocationRequest) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *InsertLocationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InsertLocationRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InsertLocationRequest) GetStatus() InsertLocationRequest_Status {
	if x != nil {
		return x.Status
	}
	return InsertLocationRequest_UNCLAIMED
}

func (x *InsertLocationRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *InsertLocationRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InsertLocationRequest) GetMinS2Level() int32 {
	if x != nil {
		return x.MinS2Level
	}
	return 0
}

func (x *InsertLocationRequest) GetMaxS2Level() int32 {
	if x != nil {
		return x.MaxS2Level
	}
	return 0
}

func (x *InsertLocationRequest) GetCreatedByActorId() int64 {
	if x != nil {
		return x.CreatedByActorId
	}
	return 0
}

func (x *InsertLocationRequest) GetCreatedByActorType() string {
	if x != nil {
		return x.CreatedByActorType
	}
	return ""
}

func (x *InsertLocationRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *InsertLocationRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *InsertLocationRequest) GetVisibility() InsertLocationRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return InsertLocationRequest_VISIBLE
}

func (x *InsertLocationRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *InsertLocationRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *InsertLocationRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

type BulkInsertLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*InsertLocationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkInsertLocationRequest) Reset() {
	*x = BulkInsertLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationRequest) ProtoMessage() {}

func (x *BulkInsertLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{1}
}

func (x *BulkInsertLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkInsertLocationRequest) GetRequests() []*InsertLocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *InsertLocationResponse) Reset() {
	*x = InsertLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationResponse) ProtoMessage() {}

func (x *InsertLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationResponse.ProtoReflect.Descriptor instead.
func (*InsertLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{2}
}

func (x *InsertLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InsertLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InsertLocationResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *InsertLocationResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkInsertLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*InsertLocationResponse     `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkInsertLocationResponse) Reset() {
	*x = BulkInsertLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationResponse) ProtoMessage() {}

func (x *BulkInsertLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationResponse.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{3}
}

func (x *BulkInsertLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkInsertLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkInsertLocationResponse) GetResponses() []*InsertLocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InsertLocationS2CellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders  *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	LocationId      int64                    `protobuf:"varint,2,opt,name=locationId,proto3" json:"locationId,omitempty"`
	Namespace       string                   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	S2CellId        int64                    `protobuf:"varint,4,opt,name=s2CellId,proto3" json:"s2CellId,omitempty"`
	S2CellLevel     int32                    `protobuf:"varint,5,opt,name=s2CellLevel,proto3" json:"s2CellLevel,omitempty"`
	S27LevelCellId  int64                    `protobuf:"varint,6,opt,name=s27LevelCellId,proto3" json:"s27LevelCellId,omitempty"`
	S28LevelCellId  int64                    `protobuf:"varint,7,opt,name=s28LevelCellId,proto3" json:"s28LevelCellId,omitempty"`
	S29LevelCellId  int64                    `protobuf:"varint,8,opt,name=s29LevelCellId,proto3" json:"s29LevelCellId,omitempty"`
	S210LevelCellId int64                    `protobuf:"varint,9,opt,name=s210LevelCellId,proto3" json:"s210LevelCellId,omitempty"`
	S211LevelCellId int64                    `protobuf:"varint,10,opt,name=s211LevelCellId,proto3" json:"s211LevelCellId,omitempty"`
	S212LevelCellId int64                    `protobuf:"varint,11,opt,name=s212LevelCellId,proto3" json:"s212LevelCellId,omitempty"`
	S213LevelCellId int64                    `protobuf:"varint,12,opt,name=s213LevelCellId,proto3" json:"s213LevelCellId,omitempty"`
	S214LevelCellId int64                    `protobuf:"varint,13,opt,name=s214LevelCellId,proto3" json:"s214LevelCellId,omitempty"`
	S215LevelCellId int64                    `protobuf:"varint,14,opt,name=s215LevelCellId,proto3" json:"s215LevelCellId,omitempty"`
	S216LevelCellId int64                    `protobuf:"varint,15,opt,name=s216LevelCellId,proto3" json:"s216LevelCellId,omitempty"`
	S217LevelCellId int64                    `protobuf:"varint,16,opt,name=s217LevelCellId,proto3" json:"s217LevelCellId,omitempty"`
	S218LevelCellId int64                    `protobuf:"varint,17,opt,name=s218LevelCellId,proto3" json:"s218LevelCellId,omitempty"`
}

func (x *InsertLocationS2CellRequest) Reset() {
	*x = InsertLocationS2CellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationS2CellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationS2CellRequest) ProtoMessage() {}

func (x *InsertLocationS2CellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationS2CellRequest.ProtoReflect.Descriptor instead.
func (*InsertLocationS2CellRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{4}
}

func (x *InsertLocationS2CellRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *InsertLocationS2CellRequest) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InsertLocationS2CellRequest) GetS2CellId() int64 {
	if x != nil {
		return x.S2CellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS2CellLevel() int32 {
	if x != nil {
		return x.S2CellLevel
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS27LevelCellId() int64 {
	if x != nil {
		return x.S27LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS28LevelCellId() int64 {
	if x != nil {
		return x.S28LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS29LevelCellId() int64 {
	if x != nil {
		return x.S29LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS210LevelCellId() int64 {
	if x != nil {
		return x.S210LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS211LevelCellId() int64 {
	if x != nil {
		return x.S211LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS212LevelCellId() int64 {
	if x != nil {
		return x.S212LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS213LevelCellId() int64 {
	if x != nil {
		return x.S213LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS214LevelCellId() int64 {
	if x != nil {
		return x.S214LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS215LevelCellId() int64 {
	if x != nil {
		return x.S215LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS216LevelCellId() int64 {
	if x != nil {
		return x.S216LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS217LevelCellId() int64 {
	if x != nil {
		return x.S217LevelCellId
	}
	return 0
}

func (x *InsertLocationS2CellRequest) GetS218LevelCellId() int64 {
	if x != nil {
		return x.S218LevelCellId
	}
	return 0
}

type BulkInsertLocationS2CellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders       `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*InsertLocationS2CellRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkInsertLocationS2CellRequest) Reset() {
	*x = BulkInsertLocationS2CellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationS2CellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationS2CellRequest) ProtoMessage() {}

func (x *BulkInsertLocationS2CellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationS2CellRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationS2CellRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{5}
}

func (x *BulkInsertLocationS2CellRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkInsertLocationS2CellRequest) GetRequests() []*InsertLocationS2CellRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertLocationS2CellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *InsertLocationS2CellResponse) Reset() {
	*x = InsertLocationS2CellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationS2CellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationS2CellResponse) ProtoMessage() {}

func (x *InsertLocationS2CellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationS2CellResponse.ProtoReflect.Descriptor instead.
func (*InsertLocationS2CellResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{6}
}

func (x *InsertLocationS2CellResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InsertLocationS2CellResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InsertLocationS2CellResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *InsertLocationS2CellResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkInsertLocationS2CellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*InsertLocationS2CellResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkInsertLocationS2CellResponse) Reset() {
	*x = BulkInsertLocationS2CellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationS2CellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationS2CellResponse) ProtoMessage() {}

func (x *BulkInsertLocationS2CellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationS2CellResponse.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationS2CellResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{7}
}

func (x *BulkInsertLocationS2CellResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkInsertLocationS2CellResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkInsertLocationS2CellResponse) GetResponses() []*InsertLocationS2CellResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InsertConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Key            string                   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value          string                   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InsertConfigRequest) Reset() {
	*x = InsertConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigRequest) ProtoMessage() {}

func (x *InsertConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigRequest.ProtoReflect.Descriptor instead.
func (*InsertConfigRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{8}
}

func (x *InsertConfigRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *InsertConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InsertConfigRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BulkInsertConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*InsertConfigRequest   `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkInsertConfigRequest) Reset() {
	*x = BulkInsertConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertConfigRequest) ProtoMessage() {}

func (x *BulkInsertConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertConfigRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertConfigRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{9}
}

func (x *BulkInsertConfigRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkInsertConfigRequest) GetRequests() []*InsertConfigRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *InsertConfigResponse) Reset() {
	*x = InsertConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigResponse) ProtoMessage() {}

func (x *InsertConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigResponse.ProtoReflect.Descriptor instead.
func (*InsertConfigResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{10}
}

func (x *InsertConfigResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InsertConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InsertConfigResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *InsertConfigResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkInsertConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*InsertConfigResponse       `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkInsertConfigResponse) Reset() {
	*x = BulkInsertConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertConfigResponse) ProtoMessage() {}

func (x *BulkInsertConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertConfigResponse.ProtoReflect.Descriptor instead.
func (*BulkInsertConfigResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{11}
}

func (x *BulkInsertConfigResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkInsertConfigResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkInsertConfigResponse) GetResponses() []*InsertConfigResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type FetchLocationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Namespace      string                   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FetchLocationByIdRequest) Reset() {
	*x = FetchLocationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLocationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLocationByIdRequest) ProtoMessage() {}

func (x *FetchLocationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLocationByIdRequest.ProtoReflect.Descriptor instead.
func (*FetchLocationByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{12}
}

func (x *FetchLocationByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchLocationByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchLocationByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FetchLocationByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type LocationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Boundary            string  `protobuf:"bytes,3,opt,name=boundary,proto3" json:"boundary,omitempty"`
	CenterLatitude      float64 `protobuf:"fixed64,4,opt,name=centerLatitude,proto3" json:"centerLatitude,omitempty"`
	CenterLongitude     float64 `protobuf:"fixed64,5,opt,name=centerLongitude,proto3" json:"centerLongitude,omitempty"`
	Area                float64 `protobuf:"fixed64,6,opt,name=area,proto3" json:"area,omitempty"`
	Labels              string  `protobuf:"bytes,7,opt,name=labels,proto3" json:"labels,omitempty"`
	Namespace           string  `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code                string  `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
	Status              string  `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Metadata            string  `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Version             int32   `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	MinS2Level          int32   `protobuf:"varint,13,opt,name=minS2Level,proto3" json:"minS2Level,omitempty"`
	MaxS2Level          int32   `protobuf:"varint,14,opt,name=maxS2Level,proto3" json:"maxS2Level,omitempty"`
	CreatedByActorId    int64   `protobuf:"varint,15,opt,name=createdByActorId,proto3" json:"createdByActorId,omitempty"`
	CreatedByActorType  string  `protobuf:"bytes,16,opt,name=createdByActorType,proto3" json:"createdByActorType,omitempty"`
	ModifiedByActorId   int64   `protobuf:"varint,17,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string  `protobuf:"bytes,18,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	CreatedAt           int64   `protobuf:"varint,19,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           int64   `protobuf:"varint,20,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt           int64   `protobuf:"varint,21,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	Visibility          string  `protobuf:"bytes,22,opt,name=visibility,proto3" json:"visibility,omitempty"`
	GeographyUid        string  `protobuf:"bytes,23,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	Pincode             string  `protobuf:"bytes,24,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string  `protobuf:"bytes,25,opt,name=latLongGeohash,proto3" json:"latLongGeohash,omitempty"`
}

func (x *LocationRecord) Reset() {
	*x = LocationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationRecord) ProtoMessage() {}

func (x *LocationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationRecord.ProtoReflect.Descriptor instead.
func (*LocationRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{13}
}

func (x *LocationRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocationRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationRecord) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *LocationRecord) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *LocationRecord) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *LocationRecord) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *LocationRecord) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *LocationRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LocationRecord) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LocationRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LocationRecord) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *LocationRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LocationRecord) GetMinS2Level() int32 {
	if x != nil {
		return x.MinS2Level
	}
	return 0
}

func (x *LocationRecord) GetMaxS2Level() int32 {
	if x != nil {
		return x.MaxS2Level
	}
	return 0
}

func (x *LocationRecord) GetCreatedByActorId() int64 {
	if x != nil {
		return x.CreatedByActorId
	}
	return 0
}

func (x *LocationRecord) GetCreatedByActorType() string {
	if x != nil {
		return x.CreatedByActorType
	}
	return ""
}

func (x *LocationRecord) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *LocationRecord) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *LocationRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LocationRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LocationRecord) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *LocationRecord) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *LocationRecord) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *LocationRecord) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *LocationRecord) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records *LocationRecord               `protobuf:"bytes,4,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{14}
}

func (x *Location) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Location) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Location) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *Location) GetRecords() *LocationRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchLocationByCodeAndNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Code           string                   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Namespace      string                   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FetchLocationByCodeAndNamespaceRequest) Reset() {
	*x = FetchLocationByCodeAndNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLocationByCodeAndNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLocationByCodeAndNamespaceRequest) ProtoMessage() {}

func (x *FetchLocationByCodeAndNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLocationByCodeAndNamespaceRequest.ProtoReflect.Descriptor instead.
func (*FetchLocationByCodeAndNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{15}
}

func (x *FetchLocationByCodeAndNamespaceRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchLocationByCodeAndNamespaceRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchLocationByCodeAndNamespaceRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FetchLocationByCodeAndNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type FetchS2CellByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchS2CellByIdRequest) Reset() {
	*x = FetchS2CellByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchS2CellByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchS2CellByIdRequest) ProtoMessage() {}

func (x *FetchS2CellByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchS2CellByIdRequest.ProtoReflect.Descriptor instead.
func (*FetchS2CellByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{16}
}

func (x *FetchS2CellByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchS2CellByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchS2CellByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type S2CellRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LocationId      int64 `protobuf:"varint,2,opt,name=locationId,proto3" json:"locationId,omitempty"`
	S2CellId        int64 `protobuf:"varint,3,opt,name=s2CellId,proto3" json:"s2CellId,omitempty"`
	S2CellLevel     int32 `protobuf:"varint,4,opt,name=s2CellLevel,proto3" json:"s2CellLevel,omitempty"`
	S27LevelCellId  int64 `protobuf:"varint,5,opt,name=s27LevelCellId,proto3" json:"s27LevelCellId,omitempty"`
	S28LevelCellId  int64 `protobuf:"varint,6,opt,name=s28LevelCellId,proto3" json:"s28LevelCellId,omitempty"`
	S29LevelCellId  int64 `protobuf:"varint,7,opt,name=s29LevelCellId,proto3" json:"s29LevelCellId,omitempty"`
	S210LevelCellId int64 `protobuf:"varint,8,opt,name=s210LevelCellId,proto3" json:"s210LevelCellId,omitempty"`
	S211LevelCellId int64 `protobuf:"varint,9,opt,name=s211LevelCellId,proto3" json:"s211LevelCellId,omitempty"`
	S212LevelCellId int64 `protobuf:"varint,10,opt,name=s212LevelCellId,proto3" json:"s212LevelCellId,omitempty"`
	S213LevelCellId int64 `protobuf:"varint,11,opt,name=s213LevelCellId,proto3" json:"s213LevelCellId,omitempty"`
	S214LevelCellId int64 `protobuf:"varint,12,opt,name=s214LevelCellId,proto3" json:"s214LevelCellId,omitempty"`
	S215LevelCellId int64 `protobuf:"varint,13,opt,name=s215LevelCellId,proto3" json:"s215LevelCellId,omitempty"`
	S216LevelCellId int64 `protobuf:"varint,14,opt,name=s216LevelCellId,proto3" json:"s216LevelCellId,omitempty"`
	S217LevelCellId int64 `protobuf:"varint,15,opt,name=s217LevelCellId,proto3" json:"s217LevelCellId,omitempty"`
	S218LevelCellId int64 `protobuf:"varint,16,opt,name=s218LevelCellId,proto3" json:"s218LevelCellId,omitempty"`
	CreatedAt       int64 `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64 `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt       int64 `protobuf:"varint,19,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *S2CellRecord) Reset() {
	*x = S2CellRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CellRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CellRecord) ProtoMessage() {}

func (x *S2CellRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CellRecord.ProtoReflect.Descriptor instead.
func (*S2CellRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{17}
}

func (x *S2CellRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *S2CellRecord) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *S2CellRecord) GetS2CellId() int64 {
	if x != nil {
		return x.S2CellId
	}
	return 0
}

func (x *S2CellRecord) GetS2CellLevel() int32 {
	if x != nil {
		return x.S2CellLevel
	}
	return 0
}

func (x *S2CellRecord) GetS27LevelCellId() int64 {
	if x != nil {
		return x.S27LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS28LevelCellId() int64 {
	if x != nil {
		return x.S28LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS29LevelCellId() int64 {
	if x != nil {
		return x.S29LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS210LevelCellId() int64 {
	if x != nil {
		return x.S210LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS211LevelCellId() int64 {
	if x != nil {
		return x.S211LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS212LevelCellId() int64 {
	if x != nil {
		return x.S212LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS213LevelCellId() int64 {
	if x != nil {
		return x.S213LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS214LevelCellId() int64 {
	if x != nil {
		return x.S214LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS215LevelCellId() int64 {
	if x != nil {
		return x.S215LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS216LevelCellId() int64 {
	if x != nil {
		return x.S216LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS217LevelCellId() int64 {
	if x != nil {
		return x.S217LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetS218LevelCellId() int64 {
	if x != nil {
		return x.S218LevelCellId
	}
	return 0
}

func (x *S2CellRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *S2CellRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *S2CellRecord) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type S2Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records *S2CellRecord                 `protobuf:"bytes,4,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *S2Cell) Reset() {
	*x = S2Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2Cell) ProtoMessage() {}

func (x *S2Cell) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2Cell.ProtoReflect.Descriptor instead.
func (*S2Cell) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{18}
}

func (x *S2Cell) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *S2Cell) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *S2Cell) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *S2Cell) GetRecords() *S2CellRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchS2CellByLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	LocationId     int64                    `protobuf:"varint,3,opt,name=locationId,proto3" json:"locationId,omitempty"`
	S2CellId       int64                    `protobuf:"varint,4,opt,name=s2CellId,proto3" json:"s2CellId,omitempty"`
	S2CellLevel    int32                    `protobuf:"varint,5,opt,name=s2CellLevel,proto3" json:"s2CellLevel,omitempty"`
}

func (x *FetchS2CellByLocationRequest) Reset() {
	*x = FetchS2CellByLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchS2CellByLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchS2CellByLocationRequest) ProtoMessage() {}

func (x *FetchS2CellByLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchS2CellByLocationRequest.ProtoReflect.Descriptor instead.
func (*FetchS2CellByLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{19}
}

func (x *FetchS2CellByLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchS2CellByLocationRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchS2CellByLocationRequest) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *FetchS2CellByLocationRequest) GetS2CellId() int64 {
	if x != nil {
		return x.S2CellId
	}
	return 0
}

func (x *FetchS2CellByLocationRequest) GetS2CellLevel() int32 {
	if x != nil {
		return x.S2CellLevel
	}
	return 0
}

type FetchS2CellByLocationIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	LocationId     int64                    `protobuf:"varint,3,opt,name=locationId,proto3" json:"locationId,omitempty"`
}

func (x *FetchS2CellByLocationIdRequest) Reset() {
	*x = FetchS2CellByLocationIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchS2CellByLocationIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchS2CellByLocationIdRequest) ProtoMessage() {}

func (x *FetchS2CellByLocationIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchS2CellByLocationIdRequest.ProtoReflect.Descriptor instead.
func (*FetchS2CellByLocationIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{20}
}

func (x *FetchS2CellByLocationIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchS2CellByLocationIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchS2CellByLocationIdRequest) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type LocationS2CellsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LocationId      int64 `protobuf:"varint,2,opt,name=locationId,proto3" json:"locationId,omitempty"`
	S2CellId        int64 `protobuf:"varint,3,opt,name=s2CellId,proto3" json:"s2CellId,omitempty"`
	S2CellLevel     int32 `protobuf:"varint,4,opt,name=s2CellLevel,proto3" json:"s2CellLevel,omitempty"`
	S27LevelCellId  int64 `protobuf:"varint,5,opt,name=s27LevelCellId,proto3" json:"s27LevelCellId,omitempty"`
	S28LevelCellId  int64 `protobuf:"varint,6,opt,name=s28LevelCellId,proto3" json:"s28LevelCellId,omitempty"`
	S29LevelCellId  int64 `protobuf:"varint,7,opt,name=s29LevelCellId,proto3" json:"s29LevelCellId,omitempty"`
	S210LevelCellId int64 `protobuf:"varint,8,opt,name=s210LevelCellId,proto3" json:"s210LevelCellId,omitempty"`
	S211LevelCellId int64 `protobuf:"varint,9,opt,name=s211LevelCellId,proto3" json:"s211LevelCellId,omitempty"`
	S212LevelCellId int64 `protobuf:"varint,10,opt,name=s212LevelCellId,proto3" json:"s212LevelCellId,omitempty"`
	S213LevelCellId int64 `protobuf:"varint,11,opt,name=s213LevelCellId,proto3" json:"s213LevelCellId,omitempty"`
	S214LevelCellId int64 `protobuf:"varint,12,opt,name=s214LevelCellId,proto3" json:"s214LevelCellId,omitempty"`
	S215LevelCellId int64 `protobuf:"varint,13,opt,name=s215LevelCellId,proto3" json:"s215LevelCellId,omitempty"`
	S216LevelCellId int64 `protobuf:"varint,14,opt,name=s216LevelCellId,proto3" json:"s216LevelCellId,omitempty"`
	S217LevelCellId int64 `protobuf:"varint,15,opt,name=s217LevelCellId,proto3" json:"s217LevelCellId,omitempty"`
	S218LevelCellId int64 `protobuf:"varint,16,opt,name=s218LevelCellId,proto3" json:"s218LevelCellId,omitempty"`
	CreatedAt       int64 `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64 `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt       int64 `protobuf:"varint,19,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *LocationS2CellsRecord) Reset() {
	*x = LocationS2CellsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationS2CellsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationS2CellsRecord) ProtoMessage() {}

func (x *LocationS2CellsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationS2CellsRecord.ProtoReflect.Descriptor instead.
func (*LocationS2CellsRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{21}
}

func (x *LocationS2CellsRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocationS2CellsRecord) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS2CellId() int64 {
	if x != nil {
		return x.S2CellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS2CellLevel() int32 {
	if x != nil {
		return x.S2CellLevel
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS27LevelCellId() int64 {
	if x != nil {
		return x.S27LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS28LevelCellId() int64 {
	if x != nil {
		return x.S28LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS29LevelCellId() int64 {
	if x != nil {
		return x.S29LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS210LevelCellId() int64 {
	if x != nil {
		return x.S210LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS211LevelCellId() int64 {
	if x != nil {
		return x.S211LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS212LevelCellId() int64 {
	if x != nil {
		return x.S212LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS213LevelCellId() int64 {
	if x != nil {
		return x.S213LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS214LevelCellId() int64 {
	if x != nil {
		return x.S214LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS215LevelCellId() int64 {
	if x != nil {
		return x.S215LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS216LevelCellId() int64 {
	if x != nil {
		return x.S216LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS217LevelCellId() int64 {
	if x != nil {
		return x.S217LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetS218LevelCellId() int64 {
	if x != nil {
		return x.S218LevelCellId
	}
	return 0
}

func (x *LocationS2CellsRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LocationS2CellsRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LocationS2CellsRecord) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type LocationS2Cells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*LocationS2CellsRecord      `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *LocationS2Cells) Reset() {
	*x = LocationS2Cells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationS2Cells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationS2Cells) ProtoMessage() {}

func (x *LocationS2Cells) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationS2Cells.ProtoReflect.Descriptor instead.
func (*LocationS2Cells) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{22}
}

func (x *LocationS2Cells) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LocationS2Cells) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LocationS2Cells) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *LocationS2Cells) GetRecords() []*LocationS2CellsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type UpdateLocationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders             `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name                string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Boundary            string                               `protobuf:"bytes,3,opt,name=boundary,proto3" json:"boundary,omitempty"`
	CenterLatitude      float64                              `protobuf:"fixed64,4,opt,name=centerLatitude,proto3" json:"centerLatitude,omitempty"`
	CenterLongitude     float64                              `protobuf:"fixed64,5,opt,name=centerLongitude,proto3" json:"centerLongitude,omitempty"`
	Area                float64                              `protobuf:"fixed64,6,opt,name=area,proto3" json:"area,omitempty"`
	Labels              string                               `protobuf:"bytes,7,opt,name=labels,proto3" json:"labels,omitempty"`
	Namespace           string                               `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code                string                               `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
	Status              UpdateLocationByIdRequest_Status     `protobuf:"varint,10,opt,name=status,proto3,enum=farm.nurture.location.service.proto.UpdateLocationByIdRequest_Status" json:"status,omitempty"`
	Metadata            string                               `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NewVersion          int32                                `protobuf:"varint,12,opt,name=newVersion,proto3" json:"newVersion,omitempty"`
	MinS2Level          int32                                `protobuf:"varint,13,opt,name=minS2Level,proto3" json:"minS2Level,omitempty"`
	MaxS2Level          int32                                `protobuf:"varint,14,opt,name=maxS2Level,proto3" json:"maxS2Level,omitempty"`
	ModifiedByActorId   int64                                `protobuf:"varint,15,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                               `protobuf:"bytes,16,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Visibility          UpdateLocationByIdRequest_Visibility `protobuf:"varint,17,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.UpdateLocationByIdRequest_Visibility" json:"visibility,omitempty"`
	GeographyUid        string                               `protobuf:"bytes,18,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	Pincode             string                               `protobuf:"bytes,19,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string                               `protobuf:"bytes,20,opt,name=latLongGeohash,proto3" json:"latLongGeohash,omitempty"`
	Id                  int64                                `protobuf:"varint,21,opt,name=id,proto3" json:"id,omitempty"`
	OldVersion          int32                                `protobuf:"varint,22,opt,name=oldVersion,proto3" json:"oldVersion,omitempty"`
}

func (x *UpdateLocationByIdRequest) Reset() {
	*x = UpdateLocationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationByIdRequest) ProtoMessage() {}

func (x *UpdateLocationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocationByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateLocationByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateLocationByIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetStatus() UpdateLocationByIdRequest_Status {
	if x != nil {
		return x.Status
	}
	return UpdateLocationByIdRequest_UNCLAIMED
}

func (x *UpdateLocationByIdRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetNewVersion() int32 {
	if x != nil {
		return x.NewVersion
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetMinS2Level() int32 {
	if x != nil {
		return x.MinS2Level
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetMaxS2Level() int32 {
	if x != nil {
		return x.MaxS2Level
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetVisibility() UpdateLocationByIdRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return UpdateLocationByIdRequest_VISIBLE
}

func (x *UpdateLocationByIdRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

func (x *UpdateLocationByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLocationByIdRequest) GetOldVersion() int32 {
	if x != nil {
		return x.OldVersion
	}
	return 0
}

type BulkUpdateLocationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders     `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateLocationByIdRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateLocationByIdRequest) Reset() {
	*x = BulkUpdateLocationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationByIdRequest) ProtoMessage() {}

func (x *BulkUpdateLocationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationByIdRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{24}
}

func (x *BulkUpdateLocationByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateLocationByIdRequest) GetRequests() []*UpdateLocationByIdRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateLocationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateLocationByIdResponse) Reset() {
	*x = UpdateLocationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationByIdResponse) ProtoMessage() {}

func (x *UpdateLocationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocationByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateLocationByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateLocationByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateLocationByIdResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateLocationByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateLocationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateLocationByIdResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateLocationByIdResponse) Reset() {
	*x = BulkUpdateLocationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationByIdResponse) ProtoMessage() {}

func (x *BulkUpdateLocationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationByIdResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{26}
}

func (x *BulkUpdateLocationByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateLocationByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateLocationByIdResponse) GetResponses() []*UpdateLocationByIdResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateLocationLabelByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Labels              string                   `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
	ModifiedByActorId   int64                    `protobuf:"varint,3,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                   `protobuf:"bytes,4,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Id                  int64                    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateLocationLabelByIdRequest) Reset() {
	*x = UpdateLocationLabelByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationLabelByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationLabelByIdRequest) ProtoMessage() {}

func (x *UpdateLocationLabelByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationLabelByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocationLabelByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateLocationLabelByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateLocationLabelByIdRequest) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *UpdateLocationLabelByIdRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *UpdateLocationLabelByIdRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *UpdateLocationLabelByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BulkUpdateLocationLabelByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders          `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateLocationLabelByIdRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateLocationLabelByIdRequest) Reset() {
	*x = BulkUpdateLocationLabelByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationLabelByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationLabelByIdRequest) ProtoMessage() {}

func (x *BulkUpdateLocationLabelByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationLabelByIdRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationLabelByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{28}
}

func (x *BulkUpdateLocationLabelByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateLocationLabelByIdRequest) GetRequests() []*UpdateLocationLabelByIdRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateLocationLabelByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateLocationLabelByIdResponse) Reset() {
	*x = UpdateLocationLabelByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationLabelByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationLabelByIdResponse) ProtoMessage() {}

func (x *UpdateLocationLabelByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationLabelByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocationLabelByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateLocationLabelByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateLocationLabelByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateLocationLabelByIdResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateLocationLabelByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateLocationLabelByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateLocationLabelByIdResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateLocationLabelByIdResponse) Reset() {
	*x = BulkUpdateLocationLabelByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationLabelByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationLabelByIdResponse) ProtoMessage() {}

func (x *BulkUpdateLocationLabelByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationLabelByIdResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationLabelByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{30}
}

func (x *BulkUpdateLocationLabelByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateLocationLabelByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateLocationLabelByIdResponse) GetResponses() []*UpdateLocationLabelByIdResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateDeleteS2CellByLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	DeletedAt      int64                    `protobuf:"varint,2,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	LocationId     int64                    `protobuf:"varint,3,opt,name=locationId,proto3" json:"locationId,omitempty"`
	S2CellId       int64                    `protobuf:"varint,4,opt,name=s2CellId,proto3" json:"s2CellId,omitempty"`
	S2CellLevel    int32                    `protobuf:"varint,5,opt,name=s2CellLevel,proto3" json:"s2CellLevel,omitempty"`
}

func (x *UpdateDeleteS2CellByLocationRequest) Reset() {
	*x = UpdateDeleteS2CellByLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeleteS2CellByLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeleteS2CellByLocationRequest) ProtoMessage() {}

func (x *UpdateDeleteS2CellByLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeleteS2CellByLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeleteS2CellByLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateDeleteS2CellByLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateDeleteS2CellByLocationRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *UpdateDeleteS2CellByLocationRequest) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *UpdateDeleteS2CellByLocationRequest) GetS2CellId() int64 {
	if x != nil {
		return x.S2CellId
	}
	return 0
}

func (x *UpdateDeleteS2CellByLocationRequest) GetS2CellLevel() int32 {
	if x != nil {
		return x.S2CellLevel
	}
	return 0
}

type BulkUpdateDeleteS2CellByLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders               `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateDeleteS2CellByLocationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateDeleteS2CellByLocationRequest) Reset() {
	*x = BulkUpdateDeleteS2CellByLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateDeleteS2CellByLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateDeleteS2CellByLocationRequest) ProtoMessage() {}

func (x *BulkUpdateDeleteS2CellByLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateDeleteS2CellByLocationRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateDeleteS2CellByLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{32}
}

func (x *BulkUpdateDeleteS2CellByLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateDeleteS2CellByLocationRequest) GetRequests() []*UpdateDeleteS2CellByLocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateDeleteS2CellByLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateDeleteS2CellByLocationResponse) Reset() {
	*x = UpdateDeleteS2CellByLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeleteS2CellByLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeleteS2CellByLocationResponse) ProtoMessage() {}

func (x *UpdateDeleteS2CellByLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeleteS2CellByLocationResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeleteS2CellByLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateDeleteS2CellByLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateDeleteS2CellByLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateDeleteS2CellByLocationResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateDeleteS2CellByLocationResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateDeleteS2CellByLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateDeleteS2CellByLocationResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateDeleteS2CellByLocationResponse) Reset() {
	*x = BulkUpdateDeleteS2CellByLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateDeleteS2CellByLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateDeleteS2CellByLocationResponse) ProtoMessage() {}

func (x *BulkUpdateDeleteS2CellByLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateDeleteS2CellByLocationResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateDeleteS2CellByLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{34}
}

func (x *BulkUpdateDeleteS2CellByLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateDeleteS2CellByLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateDeleteS2CellByLocationResponse) GetResponses() []*UpdateDeleteS2CellByLocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type FetchConfigByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchConfigByIdRequest) Reset() {
	*x = FetchConfigByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchConfigByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchConfigByIdRequest) ProtoMessage() {}

func (x *FetchConfigByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchConfigByIdRequest.ProtoReflect.Descriptor instead.
func (*FetchConfigByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{35}
}

func (x *FetchConfigByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchConfigByIdRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchConfigByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ConfigRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt int64  `protobuf:"varint,6,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *ConfigRecord) Reset() {
	*x = ConfigRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRecord) ProtoMessage() {}

func (x *ConfigRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRecord.ProtoReflect.Descriptor instead.
func (*ConfigRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{36}
}

func (x *ConfigRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConfigRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ConfigRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ConfigRecord) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records *ConfigRecord                 `protobuf:"bytes,4,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{37}
}

func (x *Config) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Config) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Config) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *Config) GetRecords() *ConfigRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AddLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders     *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Format             Format                   `protobuf:"varint,2,opt,name=format,proto3,enum=farm.nurture.location.service.proto.Format" json:"format,omitempty"`
	Boundary           string                   `protobuf:"bytes,3,opt,name=boundary,proto3" json:"boundary,omitempty"`
	Labels             []*Label                 `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	CenterLatitude     float64                  `protobuf:"fixed64,5,opt,name=center_latitude,json=centerLatitude,proto3" json:"center_latitude,omitempty"`
	CenterLongitude    float64                  `protobuf:"fixed64,6,opt,name=center_longitude,json=centerLongitude,proto3" json:"center_longitude,omitempty"`
	Area               float64                  `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	Namespace          string                   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status             Status                   `protobuf:"varint,9,opt,name=status,proto3,enum=farm.nurture.location.service.proto.Status" json:"status,omitempty"`
	Name               string                   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Code               string                   `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	Id                 int64                    `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByActorId   int64                    `protobuf:"varint,13,opt,name=created_by_actor_id,json=createdByActorId,proto3" json:"created_by_actor_id,omitempty"`
	CreatedByActorType string                   `protobuf:"bytes,14,opt,name=created_by_actor_type,json=createdByActorType,proto3" json:"created_by_actor_type,omitempty"`
	Visibility         Visibility               `protobuf:"varint,15,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.Visibility" json:"visibility,omitempty"`
	GeographyUid       string                   `protobuf:"bytes,16,opt,name=geography_uid,json=geographyUid,proto3" json:"geography_uid,omitempty"`
	Pincode            string                   `protobuf:"bytes,17,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash     string                   `protobuf:"bytes,18,opt,name=lat_long_geohash,json=latLongGeohash,proto3" json:"lat_long_geohash,omitempty"`
}

func (x *AddLocationRequest) Reset() {
	*x = AddLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocationRequest) ProtoMessage() {}

func (x *AddLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocationRequest.ProtoReflect.Descriptor instead.
func (*AddLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{38}
}

func (x *AddLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddLocationRequest) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *AddLocationRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *AddLocationRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AddLocationRequest) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *AddLocationRequest) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *AddLocationRequest) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *AddLocationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AddLocationRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NO_STATUS
}

func (x *AddLocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddLocationRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddLocationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddLocationRequest) GetCreatedByActorId() int64 {
	if x != nil {
		return x.CreatedByActorId
	}
	return 0
}

func (x *AddLocationRequest) GetCreatedByActorType() string {
	if x != nil {
		return x.CreatedByActorType
	}
	return ""
}

func (x *AddLocationRequest) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_NO_VISIBILITY
}

func (x *AddLocationRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *AddLocationRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *AddLocationRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DeleteKey bool   `protobuf:"varint,3,opt,name=deleteKey,proto3" json:"deleteKey,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{39}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Label) GetDeleteKey() bool {
	if x != nil {
		return x.DeleteKey
	}
	return false
}

type BulkAddLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddLocationRequest    `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddLocationRequest) Reset() {
	*x = BulkAddLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddLocationRequest) ProtoMessage() {}

func (x *BulkAddLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddLocationRequest.ProtoReflect.Descriptor instead.
func (*BulkAddLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{40}
}

func (x *BulkAddLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddLocationRequest) GetRequests() []*AddLocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddLocationResponse) Reset() {
	*x = AddLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocationResponse) ProtoMessage() {}

func (x *AddLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocationResponse.ProtoReflect.Descriptor instead.
func (*AddLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{41}
}

func (x *AddLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddLocationResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddLocationResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddLocationResponse        `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddLocationResponse) Reset() {
	*x = BulkAddLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddLocationResponse) ProtoMessage() {}

func (x *BulkAddLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddLocationResponse.ProtoReflect.Descriptor instead.
func (*BulkAddLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{42}
}

func (x *BulkAddLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddLocationResponse) GetResponses() []*AddLocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Format              Format                   `protobuf:"varint,2,opt,name=format,proto3,enum=farm.nurture.location.service.proto.Format" json:"format,omitempty"`
	Boundary            string                   `protobuf:"bytes,3,opt,name=boundary,proto3" json:"boundary,omitempty"`
	Labels              []*Label                 `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	CenterLatitude      float64                  `protobuf:"fixed64,5,opt,name=center_latitude,json=centerLatitude,proto3" json:"center_latitude,omitempty"`
	CenterLongitude     float64                  `protobuf:"fixed64,6,opt,name=center_longitude,json=centerLongitude,proto3" json:"center_longitude,omitempty"`
	Area                float64                  `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	Namespace           string                   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status              Status                   `protobuf:"varint,9,opt,name=status,proto3,enum=farm.nurture.location.service.proto.Status" json:"status,omitempty"`
	Name                string                   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Id                  int64                    `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	Code                string                   `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	ModifiedByActorId   int64                    `protobuf:"varint,13,opt,name=modified_by_actor_id,json=modifiedByActorId,proto3" json:"modified_by_actor_id,omitempty"`
	ModifiedByActorType string                   `protobuf:"bytes,14,opt,name=modified_by_actor_type,json=modifiedByActorType,proto3" json:"modified_by_actor_type,omitempty"`
	Visibility          Visibility               `protobuf:"varint,15,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.Visibility" json:"visibility,omitempty"`
	GeographyUid        string                   `protobuf:"bytes,16,opt,name=geography_uid,json=geographyUid,proto3" json:"geography_uid,omitempty"`
	Pincode             string                   `protobuf:"bytes,17,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string                   `protobuf:"bytes,18,opt,name=lat_long_geohash,json=latLongGeohash,proto3" json:"lat_long_geohash,omitempty"`
}

func (x *UpdateLocationRequest) Reset() {
	*x = UpdateLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationRequest) ProtoMessage() {}

func (x *UpdateLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateLocationRequest) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *UpdateLocationRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *UpdateLocationRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateLocationRequest) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *UpdateLocationRequest) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *UpdateLocationRequest) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *UpdateLocationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateLocationRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NO_STATUS
}

func (x *UpdateLocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLocationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLocationRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateLocationRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *UpdateLocationRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *UpdateLocationRequest) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_NO_VISIBILITY
}

func (x *UpdateLocationRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *UpdateLocationRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *UpdateLocationRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

type BulkUpdateLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateLocationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateLocationRequest) Reset() {
	*x = BulkUpdateLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationRequest) ProtoMessage() {}

func (x *BulkUpdateLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{44}
}

func (x *BulkUpdateLocationRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateLocationRequest) GetRequests() []*UpdateLocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateLocationResponse) Reset() {
	*x = UpdateLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationResponse) ProtoMessage() {}

func (x *UpdateLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateLocationResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateLocationResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateLocationResponse     `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateLocationResponse) Reset() {
	*x = BulkUpdateLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationResponse) ProtoMessage() {}

func (x *BulkUpdateLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{46}
}

func (x *BulkUpdateLocationResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateLocationResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateLocationResponse) GetResponses() []*UpdateLocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetLocationsWithBoundaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Format         Format                   `protobuf:"varint,3,opt,name=format,proto3,enum=farm.nurture.location.service.proto.Format" json:"format,omitempty"`
	Labels         *LabelGroup              `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
	Latitude       float64                  `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                  `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Radius         float64                  `protobuf:"fixed64,7,opt,name=radius,proto3" json:"radius,omitempty"`
	Namespace      string                   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status         Status                   `protobuf:"varint,9,opt,name=status,proto3,enum=farm.nurture.location.service.proto.Status" json:"status,omitempty"`
	PageSize       int64                    `protobuf:"varint,10,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber     int64                    `protobuf:"varint,11,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Boundary       string                   `protobuf:"bytes,12,opt,name=boundary,proto3" json:"boundary,omitempty"`
	PolygonFormat  Format                   `protobuf:"varint,13,opt,name=polygonFormat,proto3,enum=farm.nurture.location.service.proto.Format" json:"polygonFormat,omitempty"`
}

func (x *GetLocationsWithBoundaryRequest) Reset() {
	*x = GetLocationsWithBoundaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsWithBoundaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsWithBoundaryRequest) ProtoMessage() {}

func (x *GetLocationsWithBoundaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsWithBoundaryRequest.ProtoReflect.Descriptor instead.
func (*GetLocationsWithBoundaryRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetLocationsWithBoundaryRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetLocationsWithBoundaryRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetLocationsWithBoundaryRequest) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *GetLocationsWithBoundaryRequest) GetLabels() *LabelGroup {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetLocationsWithBoundaryRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetLocationsWithBoundaryRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetLocationsWithBoundaryRequest) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *GetLocationsWithBoundaryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetLocationsWithBoundaryRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NO_STATUS
}

func (x *GetLocationsWithBoundaryRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetLocationsWithBoundaryRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetLocationsWithBoundaryRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *GetLocationsWithBoundaryRequest) GetPolygonFormat() Format {
	if x != nil {
		return x.PolygonFormat
	}
	return Format_NO_FORMAT
}

type LabelGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelOpp []*LabelOPP `protobuf:"bytes,1,rep,name=labelOpp,proto3" json:"labelOpp,omitempty"`
}

func (x *LabelGroup) Reset() {
	*x = LabelGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelGroup) ProtoMessage() {}

func (x *LabelGroup) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelGroup.ProtoReflect.Descriptor instead.
func (*LabelGroup) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{48}
}

func (x *LabelGroup) GetLabelOpp() []*LabelOPP {
	if x != nil {
		return x.LabelOpp
	}
	return nil
}

type LabelOPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Label    []*Label `protobuf:"bytes,2,rep,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelOPP) Reset() {
	*x = LabelOPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelOPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelOPP) ProtoMessage() {}

func (x *LabelOPP) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelOPP.ProtoReflect.Descriptor instead.
func (*LabelOPP) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{49}
}

func (x *LabelOPP) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LabelOPP) GetLabel() []*Label {
	if x != nil {
		return x.Label
	}
	return nil
}

type GetLocationsWithBoundaryResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocationsWithBoundaryResponseRecord) Reset() {
	*x = GetLocationsWithBoundaryResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsWithBoundaryResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsWithBoundaryResponseRecord) ProtoMessage() {}

func (x *GetLocationsWithBoundaryResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsWithBoundaryResponseRecord.ProtoReflect.Descriptor instead.
func (*GetLocationsWithBoundaryResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{50}
}

type GetLocationsWithBoundaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs              []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	LocationWithBoundary []*LocationWithBoundary       `protobuf:"bytes,4,rep,name=locationWithBoundary,proto3" json:"locationWithBoundary,omitempty"`
}

func (x *GetLocationsWithBoundaryResponse) Reset() {
	*x = GetLocationsWithBoundaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsWithBoundaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsWithBoundaryResponse) ProtoMessage() {}

func (x *GetLocationsWithBoundaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsWithBoundaryResponse.ProtoReflect.Descriptor instead.
func (*GetLocationsWithBoundaryResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{51}
}

func (x *GetLocationsWithBoundaryResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLocationsWithBoundaryResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLocationsWithBoundaryResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetLocationsWithBoundaryResponse) GetLocationWithBoundary() []*LocationWithBoundary {
	if x != nil {
		return x.LocationWithBoundary
	}
	return nil
}

type LocationWithBoundary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Format          Format   `protobuf:"varint,3,opt,name=format,proto3,enum=farm.nurture.location.service.proto.Format" json:"format,omitempty"`
	Boundary        string   `protobuf:"bytes,4,opt,name=boundary,proto3" json:"boundary,omitempty"`
	Labels          []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	CenterLatitude  float64  `protobuf:"fixed64,6,opt,name=center_latitude,json=centerLatitude,proto3" json:"center_latitude,omitempty"`
	CenterLongitude float64  `protobuf:"fixed64,7,opt,name=center_longitude,json=centerLongitude,proto3" json:"center_longitude,omitempty"`
	Area            float64  `protobuf:"fixed64,8,opt,name=area,proto3" json:"area,omitempty"`
	Namespace       string   `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LocationStatus  Status   `protobuf:"varint,10,opt,name=locationStatus,proto3,enum=farm.nurture.location.service.proto.Status" json:"locationStatus,omitempty"`
}

func (x *LocationWithBoundary) Reset() {
	*x = LocationWithBoundary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationWithBoundary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationWithBoundary) ProtoMessage() {}

func (x *LocationWithBoundary) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationWithBoundary.ProtoReflect.Descriptor instead.
func (*LocationWithBoundary) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{52}
}

func (x *LocationWithBoundary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocationWithBoundary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationWithBoundary) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *LocationWithBoundary) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *LocationWithBoundary) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LocationWithBoundary) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *LocationWithBoundary) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *LocationWithBoundary) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *LocationWithBoundary) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LocationWithBoundary) GetLocationStatus() Status {
	if x != nil {
		return x.LocationStatus
	}
	return Status_NO_STATUS
}

type GetLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Labels         *LabelGroup              `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Latitude       float64                  `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                  `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Radius         float64                  `protobuf:"fixed64,6,opt,name=radius,proto3" json:"radius,omitempty"`
	Namespace      string                   `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status         Status                   `protobuf:"varint,8,opt,name=status,proto3,enum=farm.nurture.location.service.proto.Status" json:"status,omitempty"`
	PageSize       int64                    `protobuf:"varint,9,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber     int64                    `protobuf:"varint,10,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Boundary       string                   `protobuf:"bytes,11,opt,name=boundary,proto3" json:"boundary,omitempty"`
	PolygonFormat  Format                   `protobuf:"varint,12,opt,name=polygonFormat,proto3,enum=farm.nurture.location.service.proto.Format" json:"polygonFormat,omitempty"`
}

func (x *GetLocationsRequest) Reset() {
	*x = GetLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsRequest) ProtoMessage() {}

func (x *GetLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsRequest.ProtoReflect.Descriptor instead.
func (*GetLocationsRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{53}
}

func (x *GetLocationsRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetLocationsRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetLocationsRequest) GetLabels() *LabelGroup {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetLocationsRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetLocationsRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetLocationsRequest) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *GetLocationsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetLocationsRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NO_STATUS
}

func (x *GetLocationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetLocationsRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetLocationsRequest) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *GetLocationsRequest) GetPolygonFormat() Format {
	if x != nil {
		return x.PolygonFormat
	}
	return Format_NO_FORMAT
}

type GetLocationsResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocationsResponseRecord) Reset() {
	*x = GetLocationsResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsResponseRecord) ProtoMessage() {}

func (x *GetLocationsResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsResponseRecord.ProtoReflect.Descriptor instead.
func (*GetLocationsResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{54}
}

type GetLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs                 []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	LocationWithoutBoundary []*LocationWithoutBoundary    `protobuf:"bytes,4,rep,name=locationWithoutBoundary,proto3" json:"locationWithoutBoundary,omitempty"`
}

func (x *GetLocationsResponse) Reset() {
	*x = GetLocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationsResponse) ProtoMessage() {}

func (x *GetLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationsResponse.ProtoReflect.Descriptor instead.
func (*GetLocationsResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{55}
}

func (x *GetLocationsResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLocationsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLocationsResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetLocationsResponse) GetLocationWithoutBoundary() []*LocationWithoutBoundary {
	if x != nil {
		return x.LocationWithoutBoundary
	}
	return nil
}

type LocationWithoutBoundary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels          []*Label `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	CenterLatitude  float64  `protobuf:"fixed64,4,opt,name=center_latitude,json=centerLatitude,proto3" json:"center_latitude,omitempty"`
	CenterLongitude float64  `protobuf:"fixed64,5,opt,name=center_longitude,json=centerLongitude,proto3" json:"center_longitude,omitempty"`
	Area            float64  `protobuf:"fixed64,6,opt,name=area,proto3" json:"area,omitempty"`
	Namespace       string   `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LocationStatus  Status   `protobuf:"varint,8,opt,name=locationStatus,proto3,enum=farm.nurture.location.service.proto.Status" json:"locationStatus,omitempty"`
}

func (x *LocationWithoutBoundary) Reset() {
	*x = LocationWithoutBoundary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationWithoutBoundary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationWithoutBoundary) ProtoMessage() {}

func (x *LocationWithoutBoundary) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationWithoutBoundary.ProtoReflect.Descriptor instead.
func (*LocationWithoutBoundary) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{56}
}

func (x *LocationWithoutBoundary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocationWithoutBoundary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationWithoutBoundary) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LocationWithoutBoundary) GetCenterLatitude() float64 {
	if x != nil {
		return x.CenterLatitude
	}
	return 0
}

func (x *LocationWithoutBoundary) GetCenterLongitude() float64 {
	if x != nil {
		return x.CenterLongitude
	}
	return 0
}

func (x *LocationWithoutBoundary) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *LocationWithoutBoundary) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LocationWithoutBoundary) GetLocationStatus() Status {
	if x != nil {
		return x.LocationStatus
	}
	return Status_NO_STATUS
}

type GeographyDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	GeoType        GeographyType            `protobuf:"varint,2,opt,name=geoType,proto3,enum=farm.nurture.location.service.proto.GeographyType" json:"geoType,omitempty"`
	LabelKey       LabelKey                 `protobuf:"varint,3,opt,name=labelKey,proto3,enum=farm.nurture.location.service.proto.LabelKey" json:"labelKey,omitempty"`
}

func (x *GeographyDataType) Reset() {
	*x = GeographyDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographyDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographyDataType) ProtoMessage() {}

func (x *GeographyDataType) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographyDataType.ProtoReflect.Descriptor instead.
func (*GeographyDataType) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{57}
}

func (x *GeographyDataType) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GeographyDataType) GetGeoType() GeographyType {
	if x != nil {
		return x.GeoType
	}
	return GeographyType_NO_GEOGRAPHY_TYPE
}

func (x *GeographyDataType) GetLabelKey() LabelKey {
	if x != nil {
		return x.LabelKey
	}
	return LabelKey_no_label_type
}

type BulkGeographyDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*GeographyDataType     `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkGeographyDataType) Reset() {
	*x = BulkGeographyDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGeographyDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGeographyDataType) ProtoMessage() {}

func (x *BulkGeographyDataType) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGeographyDataType.ProtoReflect.Descriptor instead.
func (*BulkGeographyDataType) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{58}
}

func (x *BulkGeographyDataType) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkGeographyDataType) GetRequests() []*GeographyDataType {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GeographyTypeMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *GeographyTypeMessageResponse) Reset() {
	*x = GeographyTypeMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographyTypeMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographyTypeMessageResponse) ProtoMessage() {}

func (x *GeographyTypeMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographyTypeMessageResponse.ProtoReflect.Descriptor instead.
func (*GeographyTypeMessageResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{59}
}

func (x *GeographyTypeMessageResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GeographyTypeMessageResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GeographyTypeMessageResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *GeographyTypeMessageResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkGeographyTypeMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*GeographyTypeMessageResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkGeographyTypeMessageResponse) Reset() {
	*x = BulkGeographyTypeMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGeographyTypeMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGeographyTypeMessageResponse) ProtoMessage() {}

func (x *BulkGeographyTypeMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGeographyTypeMessageResponse.ProtoReflect.Descriptor instead.
func (*BulkGeographyTypeMessageResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{60}
}

func (x *BulkGeographyTypeMessageResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkGeographyTypeMessageResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkGeographyTypeMessageResponse) GetResponses() []*GeographyTypeMessageResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetChildGeographiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Namespace      string                   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code           string                   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Format         Format                   `protobuf:"varint,6,opt,name=format,proto3,enum=farm.nurture.location.service.proto.Format" json:"format,omitempty"`
	PageSize       int64                    `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber     int64                    `protobuf:"varint,8,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
}

func (x *GetChildGeographiesRequest) Reset() {
	*x = GetChildGeographiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChildGeographiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildGeographiesRequest) ProtoMessage() {}

func (x *GetChildGeographiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildGeographiesRequest.ProtoReflect.Descriptor instead.
func (*GetChildGeographiesRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{61}
}

func (x *GetChildGeographiesRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetChildGeographiesRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetChildGeographiesRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetChildGeographiesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetChildGeographiesRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetChildGeographiesRequest) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *GetChildGeographiesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChildGeographiesRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetChildGeographiesResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChildGeographiesResponseRecord) Reset() {
	*x = GetChildGeographiesResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChildGeographiesResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildGeographiesResponseRecord) ProtoMessage() {}

func (x *GetChildGeographiesResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildGeographiesResponseRecord.ProtoReflect.Descriptor instead.
func (*GetChildGeographiesResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{62}
}

type GetChildGeographiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count                int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs              []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	LocationWithBoundary []*LocationWithBoundary       `protobuf:"bytes,4,rep,name=locationWithBoundary,proto3" json:"locationWithBoundary,omitempty"`
}

func (x *GetChildGeographiesResponse) Reset() {
	*x = GetChildGeographiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChildGeographiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildGeographiesResponse) ProtoMessage() {}

func (x *GetChildGeographiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildGeographiesResponse.ProtoReflect.Descriptor instead.
func (*GetChildGeographiesResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{63}
}

func (x *GetChildGeographiesResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetChildGeographiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetChildGeographiesResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetChildGeographiesResponse) GetLocationWithBoundary() []*LocationWithBoundary {
	if x != nil {
		return x.LocationWithBoundary
	}
	return nil
}

type InsertLocationWithoutBoundaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders                        `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Id                  int64                                           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Labels              string                                          `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
	Namespace           string                                          `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code                string                                          `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Status              InsertLocationWithoutBoundaryRequest_Status     `protobuf:"varint,7,opt,name=status,proto3,enum=farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest_Status" json:"status,omitempty"`
	Metadata            string                                          `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Version             int32                                           `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	MinS2Level          int32                                           `protobuf:"varint,10,opt,name=minS2Level,proto3" json:"minS2Level,omitempty"`
	MaxS2Level          int32                                           `protobuf:"varint,11,opt,name=maxS2Level,proto3" json:"maxS2Level,omitempty"`
	CreatedByActorId    int64                                           `protobuf:"varint,12,opt,name=createdByActorId,proto3" json:"createdByActorId,omitempty"`
	CreatedByActorType  string                                          `protobuf:"bytes,13,opt,name=createdByActorType,proto3" json:"createdByActorType,omitempty"`
	ModifiedByActorId   int64                                           `protobuf:"varint,14,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                                          `protobuf:"bytes,15,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Visibility          InsertLocationWithoutBoundaryRequest_Visibility `protobuf:"varint,16,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest_Visibility" json:"visibility,omitempty"`
	GeographyUid        string                                          `protobuf:"bytes,17,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	Pincode             string                                          `protobuf:"bytes,18,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string                                          `protobuf:"bytes,19,opt,name=latLongGeohash,proto3" json:"latLongGeohash,omitempty"`
}

func (x *InsertLocationWithoutBoundaryRequest) Reset() {
	*x = InsertLocationWithoutBoundaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationWithoutBoundaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationWithoutBoundaryRequest) ProtoMessage() {}

func (x *InsertLocationWithoutBoundaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationWithoutBoundaryRequest.ProtoReflect.Descriptor instead.
func (*InsertLocationWithoutBoundaryRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{64}
}

func (x *InsertLocationWithoutBoundaryRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *InsertLocationWithoutBoundaryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetStatus() InsertLocationWithoutBoundaryRequest_Status {
	if x != nil {
		return x.Status
	}
	return InsertLocationWithoutBoundaryRequest_UNCLAIMED
}

func (x *InsertLocationWithoutBoundaryRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetMinS2Level() int32 {
	if x != nil {
		return x.MinS2Level
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetMaxS2Level() int32 {
	if x != nil {
		return x.MaxS2Level
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetCreatedByActorId() int64 {
	if x != nil {
		return x.CreatedByActorId
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetCreatedByActorType() string {
	if x != nil {
		return x.CreatedByActorType
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetVisibility() InsertLocationWithoutBoundaryRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return InsertLocationWithoutBoundaryRequest_VISIBLE
}

func (x *InsertLocationWithoutBoundaryRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

type BulkInsertLocationWithoutBoundaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders                `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*InsertLocationWithoutBoundaryRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkInsertLocationWithoutBoundaryRequest) Reset() {
	*x = BulkInsertLocationWithoutBoundaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationWithoutBoundaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationWithoutBoundaryRequest) ProtoMessage() {}

func (x *BulkInsertLocationWithoutBoundaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationWithoutBoundaryRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationWithoutBoundaryRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{65}
}

func (x *BulkInsertLocationWithoutBoundaryRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkInsertLocationWithoutBoundaryRequest) GetRequests() []*InsertLocationWithoutBoundaryRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertLocationWithoutBoundaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *InsertLocationWithoutBoundaryResponse) Reset() {
	*x = InsertLocationWithoutBoundaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLocationWithoutBoundaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLocationWithoutBoundaryResponse) ProtoMessage() {}

func (x *InsertLocationWithoutBoundaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLocationWithoutBoundaryResponse.ProtoReflect.Descriptor instead.
func (*InsertLocationWithoutBoundaryResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{66}
}

func (x *InsertLocationWithoutBoundaryResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InsertLocationWithoutBoundaryResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InsertLocationWithoutBoundaryResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *InsertLocationWithoutBoundaryResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkInsertLocationWithoutBoundaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*InsertLocationWithoutBoundaryResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkInsertLocationWithoutBoundaryResponse) Reset() {
	*x = BulkInsertLocationWithoutBoundaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertLocationWithoutBoundaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertLocationWithoutBoundaryResponse) ProtoMessage() {}

func (x *BulkInsertLocationWithoutBoundaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertLocationWithoutBoundaryResponse.ProtoReflect.Descriptor instead.
func (*BulkInsertLocationWithoutBoundaryResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{67}
}

func (x *BulkInsertLocationWithoutBoundaryResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkInsertLocationWithoutBoundaryResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkInsertLocationWithoutBoundaryResponse) GetResponses() []*InsertLocationWithoutBoundaryResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateLocationWithoutBoundaryByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders                            `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name                string                                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels              string                                              `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Namespace           string                                              `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Code                string                                              `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Status              UpdateLocationWithoutBoundaryByIdRequest_Status     `protobuf:"varint,6,opt,name=status,proto3,enum=farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest_Status" json:"status,omitempty"`
	Metadata            string                                              `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NewVersion          int32                                               `protobuf:"varint,8,opt,name=newVersion,proto3" json:"newVersion,omitempty"`
	MinS2Level          int32                                               `protobuf:"varint,9,opt,name=minS2Level,proto3" json:"minS2Level,omitempty"`
	MaxS2Level          int32                                               `protobuf:"varint,10,opt,name=maxS2Level,proto3" json:"maxS2Level,omitempty"`
	ModifiedByActorId   int64                                               `protobuf:"varint,11,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                                              `protobuf:"bytes,12,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Visibility          UpdateLocationWithoutBoundaryByIdRequest_Visibility `protobuf:"varint,13,opt,name=visibility,proto3,enum=farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest_Visibility" json:"visibility,omitempty"`
	GeographyUid        string                                              `protobuf:"bytes,14,opt,name=geographyUid,proto3" json:"geographyUid,omitempty"`
	Pincode             string                                              `protobuf:"bytes,15,opt,name=pincode,proto3" json:"pincode,omitempty"`
	LatLongGeohash      string                                              `protobuf:"bytes,16,opt,name=latLongGeohash,proto3" json:"latLongGeohash,omitempty"`
	Id                  int64                                               `protobuf:"varint,17,opt,name=id,proto3" json:"id,omitempty"`
	OldVersion          int32                                               `protobuf:"varint,18,opt,name=oldVersion,proto3" json:"oldVersion,omitempty"`
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) Reset() {
	*x = UpdateLocationWithoutBoundaryByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationWithoutBoundaryByIdRequest) ProtoMessage() {}

func (x *UpdateLocationWithoutBoundaryByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationWithoutBoundaryByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocationWithoutBoundaryByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetStatus() UpdateLocationWithoutBoundaryByIdRequest_Status {
	if x != nil {
		return x.Status
	}
	return UpdateLocationWithoutBoundaryByIdRequest_UNCLAIMED
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetNewVersion() int32 {
	if x != nil {
		return x.NewVersion
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetMinS2Level() int32 {
	if x != nil {
		return x.MinS2Level
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetMaxS2Level() int32 {
	if x != nil {
		return x.MaxS2Level
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetVisibility() UpdateLocationWithoutBoundaryByIdRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return UpdateLocationWithoutBoundaryByIdRequest_VISIBLE
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetGeographyUid() string {
	if x != nil {
		return x.GeographyUid
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetLatLongGeohash() string {
	if x != nil {
		return x.LatLongGeohash
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdRequest) GetOldVersion() int32 {
	if x != nil {
		return x.OldVersion
	}
	return 0
}

type BulkUpdateLocationWithoutBoundaryByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders                    `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*UpdateLocationWithoutBoundaryByIdRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkUpdateLocationWithoutBoundaryByIdRequest) Reset() {
	*x = BulkUpdateLocationWithoutBoundaryByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationWithoutBoundaryByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationWithoutBoundaryByIdRequest) ProtoMessage() {}

func (x *BulkUpdateLocationWithoutBoundaryByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationWithoutBoundaryByIdRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationWithoutBoundaryByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{69}
}

func (x *BulkUpdateLocationWithoutBoundaryByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkUpdateLocationWithoutBoundaryByIdRequest) GetRequests() []*UpdateLocationWithoutBoundaryByIdRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type UpdateLocationWithoutBoundaryByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) Reset() {
	*x = UpdateLocationWithoutBoundaryByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationWithoutBoundaryByIdResponse) ProtoMessage() {}

func (x *UpdateLocationWithoutBoundaryByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationWithoutBoundaryByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocationWithoutBoundaryByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateLocationWithoutBoundaryByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkUpdateLocationWithoutBoundaryByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*UpdateLocationWithoutBoundaryByIdResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) Reset() {
	*x = BulkUpdateLocationWithoutBoundaryByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateLocationWithoutBoundaryByIdResponse) ProtoMessage() {}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateLocationWithoutBoundaryByIdResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateLocationWithoutBoundaryByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{71}
}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkUpdateLocationWithoutBoundaryByIdResponse) GetResponses() []*UpdateLocationWithoutBoundaryByIdResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DeleteLocationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders      *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	DeletedAt           int64                    `protobuf:"varint,2,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	ModifiedByActorId   int64                    `protobuf:"varint,3,opt,name=modifiedByActorId,proto3" json:"modifiedByActorId,omitempty"`
	ModifiedByActorType string                   `protobuf:"bytes,4,opt,name=modifiedByActorType,proto3" json:"modifiedByActorType,omitempty"`
	Id                  int64                    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteLocationByIdRequest) Reset() {
	*x = DeleteLocationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLocationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocationByIdRequest) ProtoMessage() {}

func (x *DeleteLocationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocationByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocationByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteLocationByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *DeleteLocationByIdRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *DeleteLocationByIdRequest) GetModifiedByActorId() int64 {
	if x != nil {
		return x.ModifiedByActorId
	}
	return 0
}

func (x *DeleteLocationByIdRequest) GetModifiedByActorType() string {
	if x != nil {
		return x.ModifiedByActorType
	}
	return ""
}

func (x *DeleteLocationByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BulkDeleteLocationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders     `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*DeleteLocationByIdRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkDeleteLocationByIdRequest) Reset() {
	*x = BulkDeleteLocationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteLocationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteLocationByIdRequest) ProtoMessage() {}

func (x *BulkDeleteLocationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteLocationByIdRequest.ProtoReflect.Descriptor instead.
func (*BulkDeleteLocationByIdRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{73}
}

func (x *BulkDeleteLocationByIdRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkDeleteLocationByIdRequest) GetRequests() []*DeleteLocationByIdRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DeleteLocationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *DeleteLocationByIdResponse) Reset() {
	*x = DeleteLocationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLocationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocationByIdResponse) ProtoMessage() {}

func (x *DeleteLocationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocationByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteLocationByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteLocationByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteLocationByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DeleteLocationByIdResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *DeleteLocationByIdResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkDeleteLocationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*DeleteLocationByIdResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkDeleteLocationByIdResponse) Reset() {
	*x = BulkDeleteLocationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteLocationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteLocationByIdResponse) ProtoMessage() {}

func (x *BulkDeleteLocationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteLocationByIdResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteLocationByIdResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{75}
}

func (x *BulkDeleteLocationByIdResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkDeleteLocationByIdResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkDeleteLocationByIdResponse) GetResponses() []*DeleteLocationByIdResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type FetchDuplicateVillagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FetchDuplicateVillagesRequest) Reset() {
	*x = FetchDuplicateVillagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesRequest) ProtoMessage() {}

func (x *FetchDuplicateVillagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesRequest.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{76}
}

func (x *FetchDuplicateVillagesRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchDuplicateVillagesRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchDuplicateVillagesRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FetchDuplicateVillagesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FetchDuplicateVillagesResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchDuplicateVillagesResponseRecord) Reset() {
	*x = FetchDuplicateVillagesResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesResponseRecord) ProtoMessage() {}

func (x *FetchDuplicateVillagesResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesResponseRecord.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{77}
}

func (x *FetchDuplicateVillagesResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FetchDuplicateVillagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                     `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FetchDuplicateVillagesResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FetchDuplicateVillagesResponse) Reset() {
	*x = FetchDuplicateVillagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesResponse) ProtoMessage() {}

func (x *FetchDuplicateVillagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesResponse.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{78}
}

func (x *FetchDuplicateVillagesResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchDuplicateVillagesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchDuplicateVillagesResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FetchDuplicateVillagesResponse) GetRecords() []*FetchDuplicateVillagesResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchDuplicateVillagesBySDTVLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CountryStored  string                   `protobuf:"bytes,3,opt,name=countryStored,proto3" json:"countryStored,omitempty"`
	StateStored    string                   `protobuf:"bytes,4,opt,name=stateStored,proto3" json:"stateStored,omitempty"`
	DistrictStored string                   `protobuf:"bytes,5,opt,name=districtStored,proto3" json:"districtStored,omitempty"`
	TehsilStored   string                   `protobuf:"bytes,6,opt,name=tehsilStored,proto3" json:"tehsilStored,omitempty"`
	Name           string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) Reset() {
	*x = FetchDuplicateVillagesBySDTVLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesBySDTVLatLongRequest) ProtoMessage() {}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesBySDTVLatLongRequest.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesBySDTVLatLongRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{79}
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetCountryStored() string {
	if x != nil {
		return x.CountryStored
	}
	return ""
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetStateStored() string {
	if x != nil {
		return x.StateStored
	}
	return ""
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetDistrictStored() string {
	if x != nil {
		return x.DistrictStored
	}
	return ""
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetTehsilStored() string {
	if x != nil {
		return x.TehsilStored
	}
	return ""
}

func (x *FetchDuplicateVillagesBySDTVLatLongRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FetchDuplicateVillagesBySDTVLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponseRecord) Reset() {
	*x = FetchDuplicateVillagesBySDTVLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesBySDTVLatLongResponseRecord) ProtoMessage() {}

func (x *FetchDuplicateVillagesBySDTVLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesBySDTVLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesBySDTVLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{80}
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FetchDuplicateVillagesBySDTVLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                                  `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FetchDuplicateVillagesBySDTVLatLongResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) Reset() {
	*x = FetchDuplicateVillagesBySDTVLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateVillagesBySDTVLatLongResponse) ProtoMessage() {}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateVillagesBySDTVLatLongResponse.ProtoReflect.Descriptor instead.
func (*FetchDuplicateVillagesBySDTVLatLongResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{81}
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FetchDuplicateVillagesBySDTVLatLongResponse) GetRecords() []*FetchDuplicateVillagesBySDTVLatLongResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchDuplicateTehsilsBySDTVLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CountryStored  string                   `protobuf:"bytes,3,opt,name=countryStored,proto3" json:"countryStored,omitempty"`
	StateStored    string                   `protobuf:"bytes,4,opt,name=stateStored,proto3" json:"stateStored,omitempty"`
	DistrictStored string                   `protobuf:"bytes,5,opt,name=districtStored,proto3" json:"districtStored,omitempty"`
	Name           string                   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) Reset() {
	*x = FetchDuplicateTehsilsBySDTVLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateTehsilsBySDTVLatLongRequest) ProtoMessage() {}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateTehsilsBySDTVLatLongRequest.ProtoReflect.Descriptor instead.
func (*FetchDuplicateTehsilsBySDTVLatLongRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{82}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetCountryStored() string {
	if x != nil {
		return x.CountryStored
	}
	return ""
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetStateStored() string {
	if x != nil {
		return x.StateStored
	}
	return ""
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetDistrictStored() string {
	if x != nil {
		return x.DistrictStored
	}
	return ""
}

func (x *FetchDuplicateTehsilsBySDTVLatLongRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FetchDuplicateTehsilsBySDTVLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponseRecord) Reset() {
	*x = FetchDuplicateTehsilsBySDTVLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateTehsilsBySDTVLatLongResponseRecord) ProtoMessage() {}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateTehsilsBySDTVLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*FetchDuplicateTehsilsBySDTVLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{83}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FetchDuplicateTehsilsBySDTVLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                                 `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FetchDuplicateTehsilsBySDTVLatLongResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) Reset() {
	*x = FetchDuplicateTehsilsBySDTVLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateTehsilsBySDTVLatLongResponse) ProtoMessage() {}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateTehsilsBySDTVLatLongResponse.ProtoReflect.Descriptor instead.
func (*FetchDuplicateTehsilsBySDTVLatLongResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{84}
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FetchDuplicateTehsilsBySDTVLatLongResponse) GetRecords() []*FetchDuplicateTehsilsBySDTVLatLongResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchDuplicateDistrictsBySDTVLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CountryStored  string                   `protobuf:"bytes,3,opt,name=countryStored,proto3" json:"countryStored,omitempty"`
	StateStored    string                   `protobuf:"bytes,4,opt,name=stateStored,proto3" json:"stateStored,omitempty"`
	Name           string                   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) Reset() {
	*x = FetchDuplicateDistrictsBySDTVLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateDistrictsBySDTVLatLongRequest) ProtoMessage() {}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateDistrictsBySDTVLatLongRequest.ProtoReflect.Descriptor instead.
func (*FetchDuplicateDistrictsBySDTVLatLongRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{85}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) GetCountryStored() string {
	if x != nil {
		return x.CountryStored
	}
	return ""
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) GetStateStored() string {
	if x != nil {
		return x.StateStored
	}
	return ""
}

func (x *FetchDuplicateDistrictsBySDTVLatLongRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FetchDuplicateDistrictsBySDTVLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponseRecord) Reset() {
	*x = FetchDuplicateDistrictsBySDTVLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateDistrictsBySDTVLatLongResponseRecord) ProtoMessage() {}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateDistrictsBySDTVLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*FetchDuplicateDistrictsBySDTVLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{86}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FetchDuplicateDistrictsBySDTVLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                                   `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FetchDuplicateDistrictsBySDTVLatLongResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) Reset() {
	*x = FetchDuplicateDistrictsBySDTVLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateDistrictsBySDTVLatLongResponse) ProtoMessage() {}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateDistrictsBySDTVLatLongResponse.ProtoReflect.Descriptor instead.
func (*FetchDuplicateDistrictsBySDTVLatLongResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{87}
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FetchDuplicateDistrictsBySDTVLatLongResponse) GetRecords() []*FetchDuplicateDistrictsBySDTVLatLongResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchDuplicateStatesBySDTVLatLongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	CountryStored  string                   `protobuf:"bytes,3,opt,name=countryStored,proto3" json:"countryStored,omitempty"`
	Name           string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) Reset() {
	*x = FetchDuplicateStatesBySDTVLatLongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateStatesBySDTVLatLongRequest) ProtoMessage() {}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateStatesBySDTVLatLongRequest.ProtoReflect.Descriptor instead.
func (*FetchDuplicateStatesBySDTVLatLongRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{88}
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) GetCountryStored() string {
	if x != nil {
		return x.CountryStored
	}
	return ""
}

func (x *FetchDuplicateStatesBySDTVLatLongRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FetchDuplicateStatesBySDTVLatLongResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchDuplicateStatesBySDTVLatLongResponseRecord) Reset() {
	*x = FetchDuplicateStatesBySDTVLatLongResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateStatesBySDTVLatLongResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateStatesBySDTVLatLongResponseRecord) ProtoMessage() {}

func (x *FetchDuplicateStatesBySDTVLatLongResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateStatesBySDTVLatLongResponseRecord.ProtoReflect.Descriptor instead.
func (*FetchDuplicateStatesBySDTVLatLongResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{89}
}

func (x *FetchDuplicateStatesBySDTVLatLongResponseRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FetchDuplicateStatesBySDTVLatLongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                                `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FetchDuplicateStatesBySDTVLatLongResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) Reset() {
	*x = FetchDuplicateStatesBySDTVLatLongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDuplicateStatesBySDTVLatLongResponse) ProtoMessage() {}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDuplicateStatesBySDTVLatLongResponse.ProtoReflect.Descriptor instead.
func (*FetchDuplicateStatesBySDTVLatLongResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{90}
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FetchDuplicateStatesBySDTVLatLongResponse) GetRecords() []*FetchDuplicateStatesBySDTVLatLongResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetDuplicateGeographiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Latitude       float64                  `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                  `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Country        string                   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	State          string                   `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	District       string                   `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	Tehsil         string                   `protobuf:"bytes,9,opt,name=tehsil,proto3" json:"tehsil,omitempty"`
	Village        string                   `protobuf:"bytes,10,opt,name=village,proto3" json:"village,omitempty"`
	GeoType        GeographyType            `protobuf:"varint,11,opt,name=geoType,proto3,enum=farm.nurture.location.service.proto.GeographyType" json:"geoType,omitempty"`
}

func (x *GetDuplicateGeographiesRequest) Reset() {
	*x = GetDuplicateGeographiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDuplicateGeographiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDuplicateGeographiesRequest) ProtoMessage() {}

func (x *GetDuplicateGeographiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDuplicateGeographiesRequest.ProtoReflect.Descriptor instead.
func (*GetDuplicateGeographiesRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{91}
}

func (x *GetDuplicateGeographiesRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetDuplicateGeographiesRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetDuplicateGeographiesRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetDuplicateGeographiesRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetDuplicateGeographiesRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetDuplicateGeographiesRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetDuplicateGeographiesRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetDuplicateGeographiesRequest) GetTehsil() string {
	if x != nil {
		return x.Tehsil
	}
	return ""
}

func (x *GetDuplicateGeographiesRequest) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *GetDuplicateGeographiesRequest) GetGeoType() GeographyType {
	if x != nil {
		return x.GeoType
	}
	return GeographyType_NO_GEOGRAPHY_TYPE
}

type GetDuplicateGeographiesResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDuplicateGeographiesResponseRecord) Reset() {
	*x = GetDuplicateGeographiesResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDuplicateGeographiesResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDuplicateGeographiesResponseRecord) ProtoMessage() {}

func (x *GetDuplicateGeographiesResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDuplicateGeographiesResponseRecord.ProtoReflect.Descriptor instead.
func (*GetDuplicateGeographiesResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{92}
}

type GetDuplicateGeographiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Id      []int64                       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDuplicateGeographiesResponse) Reset() {
	*x = GetDuplicateGeographiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDuplicateGeographiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDuplicateGeographiesResponse) ProtoMessage() {}

func (x *GetDuplicateGeographiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDuplicateGeographiesResponse.ProtoReflect.Descriptor instead.
func (*GetDuplicateGeographiesResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{93}
}

func (x *GetDuplicateGeographiesResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetDuplicateGeographiesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetDuplicateGeographiesResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetDuplicateGeographiesResponse) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type InsertVendorLocationDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	VendorId       string                   `protobuf:"bytes,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	VendorType     string                   `protobuf:"bytes,3,opt,name=vendorType,proto3" json:"vendorType,omitempty"`
	Geohash7       string                   `protobuf:"bytes,4,opt,name=geohash7,proto3" json:"geohash7,omitempty"`
	Geohash6       string                   `protobuf:"bytes,5,opt,name=geohash6,proto3" json:"geohash6,omitempty"`
	Latitude       float64                  `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                  `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Village        string                   `protobuf:"bytes,8,opt,name=village,proto3" json:"village,omitempty"`
	Tehsil         string                   `protobuf:"bytes,9,opt,name=tehsil,proto3" json:"tehsil,omitempty"`
	District       string                   `protobuf:"bytes,10,opt,name=district,proto3" json:"district,omitempty"`
	State          string                   `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Country        string                   `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	VendorResponse string                   `protobuf:"bytes,13,opt,name=vendorResponse,proto3" json:"vendorResponse,omitempty"`
}

func (x *InsertVendorLocationDataRequest) Reset() {
	*x = InsertVendorLocationDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertVendorLocationDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertVendorLocationDataRequest) ProtoMessage() {}

func (x *InsertVendorLocationDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertVendorLocationDataRequest.ProtoReflect.Descriptor instead.
func (*InsertVendorLocationDataRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{94}
}

func (x *InsertVendorLocationDataRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *InsertVendorLocationDataRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetVendorType() string {
	if x != nil {
		return x.VendorType
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetGeohash7() string {
	if x != nil {
		return x.Geohash7
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetGeohash6() string {
	if x != nil {
		return x.Geohash6
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *InsertVendorLocationDataRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *InsertVendorLocationDataRequest) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetTehsil() string {
	if x != nil {
		return x.Tehsil
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *InsertVendorLocationDataRequest) GetVendorResponse() string {
	if x != nil {
		return x.VendorResponse
	}
	return ""
}

type BulkInsertVendorLocationDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders           `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*InsertVendorLocationDataRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkInsertVendorLocationDataRequest) Reset() {
	*x = BulkInsertVendorLocationDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertVendorLocationDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertVendorLocationDataRequest) ProtoMessage() {}

func (x *BulkInsertVendorLocationDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertVendorLocationDataRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertVendorLocationDataRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{95}
}

func (x *BulkInsertVendorLocationDataRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkInsertVendorLocationDataRequest) GetRequests() []*InsertVendorLocationDataRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertVendorLocationDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *InsertVendorLocationDataResponse) Reset() {
	*x = InsertVendorLocationDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertVendorLocationDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertVendorLocationDataResponse) ProtoMessage() {}

func (x *InsertVendorLocationDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertVendorLocationDataResponse.ProtoReflect.Descriptor instead.
func (*InsertVendorLocationDataResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{96}
}

func (x *InsertVendorLocationDataResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InsertVendorLocationDataResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InsertVendorLocationDataResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *InsertVendorLocationDataResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkInsertVendorLocationDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*InsertVendorLocationDataResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkInsertVendorLocationDataResponse) Reset() {
	*x = BulkInsertVendorLocationDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertVendorLocationDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertVendorLocationDataResponse) ProtoMessage() {}

func (x *BulkInsertVendorLocationDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertVendorLocationDataResponse.ProtoReflect.Descriptor instead.
func (*BulkInsertVendorLocationDataResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{97}
}

func (x *BulkInsertVendorLocationDataResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkInsertVendorLocationDataResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkInsertVendorLocationDataResponse) GetResponses() []*InsertVendorLocationDataResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type SearchVendorLocationsByGeohashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Geohash7       string                   `protobuf:"bytes,3,opt,name=geohash7,proto3" json:"geohash7,omitempty"`
	Geohash6       string                   `protobuf:"bytes,4,opt,name=geohash6,proto3" json:"geohash6,omitempty"`
}

func (x *SearchVendorLocationsByGeohashRequest) Reset() {
	*x = SearchVendorLocationsByGeohashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVendorLocationsByGeohashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVendorLocationsByGeohashRequest) ProtoMessage() {}

func (x *SearchVendorLocationsByGeohashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVendorLocationsByGeohashRequest.ProtoReflect.Descriptor instead.
func (*SearchVendorLocationsByGeohashRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{98}
}

func (x *SearchVendorLocationsByGeohashRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *SearchVendorLocationsByGeohashRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *SearchVendorLocationsByGeohashRequest) GetGeohash7() string {
	if x != nil {
		return x.Geohash7
	}
	return ""
}

func (x *SearchVendorLocationsByGeohashRequest) GetGeohash6() string {
	if x != nil {
		return x.Geohash6
	}
	return ""
}

type SearchVendorLocationsByGeohashResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Village   string  `protobuf:"bytes,3,opt,name=village,proto3" json:"village,omitempty"`
	Tehsil    string  `protobuf:"bytes,4,opt,name=tehsil,proto3" json:"tehsil,omitempty"`
	District  string  `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	State     string  `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Country   string  `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *SearchVendorLocationsByGeohashResponseRecord) Reset() {
	*x = SearchVendorLocationsByGeohashResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVendorLocationsByGeohashResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVendorLocationsByGeohashResponseRecord) ProtoMessage() {}

func (x *SearchVendorLocationsByGeohashResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVendorLocationsByGeohashResponseRecord.ProtoReflect.Descriptor instead.
func (*SearchVendorLocationsByGeohashResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{99}
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetTehsil() string {
	if x != nil {
		return x.Tehsil
	}
	return ""
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SearchVendorLocationsByGeohashResponseRecord) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type SearchVendorLocationsByGeohashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                             `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*SearchVendorLocationsByGeohashResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *SearchVendorLocationsByGeohashResponse) Reset() {
	*x = SearchVendorLocationsByGeohashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVendorLocationsByGeohashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVendorLocationsByGeohashResponse) ProtoMessage() {}

func (x *SearchVendorLocationsByGeohashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVendorLocationsByGeohashResponse.ProtoReflect.Descriptor instead.
func (*SearchVendorLocationsByGeohashResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{100}
}

func (x *SearchVendorLocationsByGeohashResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SearchVendorLocationsByGeohashResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchVendorLocationsByGeohashResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *SearchVendorLocationsByGeohashResponse) GetRecords() []*SearchVendorLocationsByGeohashResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type SearchLocationsByGeohashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Geohash8       string                   `protobuf:"bytes,3,opt,name=geohash8,proto3" json:"geohash8,omitempty"`
}

func (x *SearchLocationsByGeohashRequest) Reset() {
	*x = SearchLocationsByGeohashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsByGeohashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsByGeohashRequest) ProtoMessage() {}

func (x *SearchLocationsByGeohashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsByGeohashRequest.ProtoReflect.Descriptor instead.
func (*SearchLocationsByGeohashRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{101}
}

func (x *SearchLocationsByGeohashRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *SearchLocationsByGeohashRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *SearchLocationsByGeohashRequest) GetGeohash8() string {
	if x != nil {
		return x.Geohash8
	}
	return ""
}

type SearchLocationsByGeohashResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Village   string  `protobuf:"bytes,3,opt,name=village,proto3" json:"village,omitempty"`
	Tehsil    string  `protobuf:"bytes,4,opt,name=tehsil,proto3" json:"tehsil,omitempty"`
	District  string  `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	State     string  `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Country   string  `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *SearchLocationsByGeohashResponseRecord) Reset() {
	*x = SearchLocationsByGeohashResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsByGeohashResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsByGeohashResponseRecord) ProtoMessage() {}

func (x *SearchLocationsByGeohashResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsByGeohashResponseRecord.ProtoReflect.Descriptor instead.
func (*SearchLocationsByGeohashResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{102}
}

func (x *SearchLocationsByGeohashResponseRecord) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SearchLocationsByGeohashResponseRecord) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *SearchLocationsByGeohashResponseRecord) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *SearchLocationsByGeohashResponseRecord) GetTehsil() string {
	if x != nil {
		return x.Tehsil
	}
	return ""
}

func (x *SearchLocationsByGeohashResponseRecord) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *SearchLocationsByGeohashResponseRecord) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SearchLocationsByGeohashResponseRecord) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type SearchLocationsByGeohashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GoCommon.RequestStatusResult             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*GoCommon.Attribs                       `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*SearchLocationsByGeohashResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *SearchLocationsByGeohashResponse) Reset() {
	*x = SearchLocationsByGeohashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsByGeohashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsByGeohashResponse) ProtoMessage() {}

func (x *SearchLocationsByGeohashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsByGeohashResponse.ProtoReflect.Descriptor instead.
func (*SearchLocationsByGeohashResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{103}
}

func (x *SearchLocationsByGeohashResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SearchLocationsByGeohashResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchLocationsByGeohashResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *SearchLocationsByGeohashResponse) GetRecords() []*SearchLocationsByGeohashResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetLocationDataByLatLngRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool                     `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Latitude       float64                  `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                  `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetLocationDataByLatLngRequest) Reset() {
	*x = GetLocationDataByLatLngRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationDataByLatLngRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationDataByLatLngRequest) ProtoMessage() {}

func (x *GetLocationDataByLatLngRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationDataByLatLngRequest.ProtoReflect.Descriptor instead.
func (*GetLocationDataByLatLngRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{104}
}

func (x *GetLocationDataByLatLngRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *GetLocationDataByLatLngRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *GetLocationDataByLatLngRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetLocationDataByLatLngRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetLocationDataByLatLngResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocationDataByLatLngResponseRecord) Reset() {
	*x = GetLocationDataByLatLngResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationDataByLatLngResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationDataByLatLngResponseRecord) ProtoMessage() {}

func (x *GetLocationDataByLatLngResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationDataByLatLngResponseRecord.ProtoReflect.Descriptor instead.
func (*GetLocationDataByLatLngResponseRecord) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{105}
}

type GetLocationDataByLatLngResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs   []*GoCommon.Attribs           `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Latitude  float64                       `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64                       `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Village   string                        `protobuf:"bytes,6,opt,name=village,proto3" json:"village,omitempty"`
	Tehsil    string                        `protobuf:"bytes,7,opt,name=tehsil,proto3" json:"tehsil,omitempty"`
	District  string                        `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	State     string                        `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Country   string                        `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *GetLocationDataByLatLngResponse) Reset() {
	*x = GetLocationDataByLatLngResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationDataByLatLngResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationDataByLatLngResponse) ProtoMessage() {}

func (x *GetLocationDataByLatLngResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationDataByLatLngResponse.ProtoReflect.Descriptor instead.
func (*GetLocationDataByLatLngResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{106}
}

func (x *GetLocationDataByLatLngResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLocationDataByLatLngResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLocationDataByLatLngResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *GetLocationDataByLatLngResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetLocationDataByLatLngResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetLocationDataByLatLngResponse) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *GetLocationDataByLatLngResponse) GetTehsil() string {
	if x != nil {
		return x.Tehsil
	}
	return ""
}

func (x *GetLocationDataByLatLngResponse) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetLocationDataByLatLngResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetLocationDataByLatLngResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type AddVendorApiLedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Vendor         string                   `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	ApiName        string                   `protobuf:"bytes,3,opt,name=apiName,proto3" json:"apiName,omitempty"`
	ResponseStatus string                   `protobuf:"bytes,4,opt,name=responseStatus,proto3" json:"responseStatus,omitempty"`
	Params         string                   `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *AddVendorApiLedgerRequest) Reset() {
	*x = AddVendorApiLedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVendorApiLedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVendorApiLedgerRequest) ProtoMessage() {}

func (x *AddVendorApiLedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVendorApiLedgerRequest.ProtoReflect.Descriptor instead.
func (*AddVendorApiLedgerRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{107}
}

func (x *AddVendorApiLedgerRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddVendorApiLedgerRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AddVendorApiLedgerRequest) GetApiName() string {
	if x != nil {
		return x.ApiName
	}
	return ""
}

func (x *AddVendorApiLedgerRequest) GetResponseStatus() string {
	if x != nil {
		return x.ResponseStatus
	}
	return ""
}

func (x *AddVendorApiLedgerRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type BulkAddVendorApiLedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *GoCommon.RequestHeaders     `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddVendorApiLedgerRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddVendorApiLedgerRequest) Reset() {
	*x = BulkAddVendorApiLedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddVendorApiLedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddVendorApiLedgerRequest) ProtoMessage() {}

func (x *BulkAddVendorApiLedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddVendorApiLedgerRequest.ProtoReflect.Descriptor instead.
func (*BulkAddVendorApiLedgerRequest) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{108}
}

func (x *BulkAddVendorApiLedgerRequest) GetRequestHeaders() *GoCommon.RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddVendorApiLedgerRequest) GetRequests() []*AddVendorApiLedgerRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddVendorApiLedgerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string                        `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*GoCommon.Attribs           `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddVendorApiLedgerResponse) Reset() {
	*x = AddVendorApiLedgerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVendorApiLedgerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVendorApiLedgerResponse) ProtoMessage() {}

func (x *AddVendorApiLedgerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVendorApiLedgerResponse.ProtoReflect.Descriptor instead.
func (*AddVendorApiLedgerResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{109}
}

func (x *AddVendorApiLedgerResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddVendorApiLedgerResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddVendorApiLedgerResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddVendorApiLedgerResponse) GetAttribs() []*GoCommon.Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddVendorApiLedgerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddVendorApiLedgerResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddVendorApiLedgerResponse) Reset() {
	*x = BulkAddVendorApiLedgerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddVendorApiLedgerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddVendorApiLedgerResponse) ProtoMessage() {}

func (x *BulkAddVendorApiLedgerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddVendorApiLedgerResponse.ProtoReflect.Descriptor instead.
func (*BulkAddVendorApiLedgerResponse) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{110}
}

func (x *BulkAddVendorApiLedgerResponse) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddVendorApiLedgerResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddVendorApiLedgerResponse) GetResponses() []*AddVendorApiLedgerResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type MultiRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnTxn   bool       `protobuf:"varint,1,opt,name=onTxn,proto3" json:"onTxn,omitempty"`
	Request []*Request `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *MultiRequests) Reset() {
	*x = MultiRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRequests) ProtoMessage() {}

func (x *MultiRequests) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRequests.ProtoReflect.Descriptor instead.
func (*MultiRequests) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{111}
}

func (x *MultiRequests) GetOnTxn() bool {
	if x != nil {
		return x.OnTxn
	}
	return false
}

func (x *MultiRequests) GetRequest() []*Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to ARequest:
	//	*Request_ReqInsertLocation
	//	*Request_ReqInsertLocationBulk
	//	*Request_ReqInsertLocationS2Cell
	//	*Request_ReqInsertLocationS2CellBulk
	//	*Request_ReqInsertConfig
	//	*Request_ReqInsertConfigBulk
	//	*Request_ReqFetchLocationById
	//	*Request_ReqFetchLocationByCodeAndNamespace
	//	*Request_ReqFetchS2CellById
	//	*Request_ReqFetchS2CellByLocation
	//	*Request_ReqFetchS2CellByLocationId
	//	*Request_ReqUpdateLocationById
	//	*Request_ReqUpdateLocationByIdBulk
	//	*Request_ReqUpdateLocationLabelById
	//	*Request_ReqUpdateLocationLabelByIdBulk
	//	*Request_ReqUpdateDeleteS2CellByLocation
	//	*Request_ReqUpdateDeleteS2CellByLocationBulk
	//	*Request_ReqFetchConfigById
	//	*Request_ReqAddLocation
	//	*Request_ReqAddLocationBulk
	//	*Request_ReqUpdateLocation
	//	*Request_ReqUpdateLocationBulk
	//	*Request_ReqGetLocationsWithBoundary
	//	*Request_ReqGetLocations
	//	*Request_ReqGetChildGeographies
	//	*Request_ReqInsertLocationWithoutBoundary
	//	*Request_ReqInsertLocationWithoutBoundaryBulk
	//	*Request_ReqUpdateLocationWithoutBoundaryById
	//	*Request_ReqUpdateLocationWithoutBoundaryByIdBulk
	//	*Request_ReqDeleteLocationById
	//	*Request_ReqDeleteLocationByIdBulk
	//	*Request_ReqFetchDuplicateVillages
	//	*Request_ReqFetchDuplicateVillagesBySDTVLatLong
	//	*Request_ReqFetchDuplicateTehsilsBySDTVLatLong
	//	*Request_ReqFetchDuplicateDistrictsBySDTVLatLong
	//	*Request_ReqFetchDuplicateStatesBySDTVLatLong
	//	*Request_ReqGetDuplicateGeographies
	//	*Request_ReqInsertVendorLocationData
	//	*Request_ReqInsertVendorLocationDataBulk
	//	*Request_ReqSearchVendorLocationsByGeohash
	//	*Request_ReqSearchLocationsByGeohash
	//	*Request_ReqGetLocationDataByLatLng
	//	*Request_ReqAddVendorApiLedger
	//	*Request_ReqAddVendorApiLedgerBulk
	ARequest isRequest_ARequest `protobuf_oneof:"ARequest"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{112}
}

func (x *Request) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (m *Request) GetARequest() isRequest_ARequest {
	if m != nil {
		return m.ARequest
	}
	return nil
}

func (x *Request) GetReqInsertLocation() *InsertLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocation); ok {
		return x.ReqInsertLocation
	}
	return nil
}

func (x *Request) GetReqInsertLocationBulk() *BulkInsertLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocationBulk); ok {
		return x.ReqInsertLocationBulk
	}
	return nil
}

func (x *Request) GetReqInsertLocationS2Cell() *InsertLocationS2CellRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocationS2Cell); ok {
		return x.ReqInsertLocationS2Cell
	}
	return nil
}

func (x *Request) GetReqInsertLocationS2CellBulk() *BulkInsertLocationS2CellRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocationS2CellBulk); ok {
		return x.ReqInsertLocationS2CellBulk
	}
	return nil
}

func (x *Request) GetReqInsertConfig() *InsertConfigRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertConfig); ok {
		return x.ReqInsertConfig
	}
	return nil
}

func (x *Request) GetReqInsertConfigBulk() *BulkInsertConfigRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertConfigBulk); ok {
		return x.ReqInsertConfigBulk
	}
	return nil
}

func (x *Request) GetReqFetchLocationById() *FetchLocationByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchLocationById); ok {
		return x.ReqFetchLocationById
	}
	return nil
}

func (x *Request) GetReqFetchLocationByCodeAndNamespace() *FetchLocationByCodeAndNamespaceRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchLocationByCodeAndNamespace); ok {
		return x.ReqFetchLocationByCodeAndNamespace
	}
	return nil
}

func (x *Request) GetReqFetchS2CellById() *FetchS2CellByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchS2CellById); ok {
		return x.ReqFetchS2CellById
	}
	return nil
}

func (x *Request) GetReqFetchS2CellByLocation() *FetchS2CellByLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchS2CellByLocation); ok {
		return x.ReqFetchS2CellByLocation
	}
	return nil
}

func (x *Request) GetReqFetchS2CellByLocationId() *FetchS2CellByLocationIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchS2CellByLocationId); ok {
		return x.ReqFetchS2CellByLocationId
	}
	return nil
}

func (x *Request) GetReqUpdateLocationById() *UpdateLocationByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationById); ok {
		return x.ReqUpdateLocationById
	}
	return nil
}

func (x *Request) GetReqUpdateLocationByIdBulk() *BulkUpdateLocationByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationByIdBulk); ok {
		return x.ReqUpdateLocationByIdBulk
	}
	return nil
}

func (x *Request) GetReqUpdateLocationLabelById() *UpdateLocationLabelByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationLabelById); ok {
		return x.ReqUpdateLocationLabelById
	}
	return nil
}

func (x *Request) GetReqUpdateLocationLabelByIdBulk() *BulkUpdateLocationLabelByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationLabelByIdBulk); ok {
		return x.ReqUpdateLocationLabelByIdBulk
	}
	return nil
}

func (x *Request) GetReqUpdateDeleteS2CellByLocation() *UpdateDeleteS2CellByLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateDeleteS2CellByLocation); ok {
		return x.ReqUpdateDeleteS2CellByLocation
	}
	return nil
}

func (x *Request) GetReqUpdateDeleteS2CellByLocationBulk() *BulkUpdateDeleteS2CellByLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateDeleteS2CellByLocationBulk); ok {
		return x.ReqUpdateDeleteS2CellByLocationBulk
	}
	return nil
}

func (x *Request) GetReqFetchConfigById() *FetchConfigByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchConfigById); ok {
		return x.ReqFetchConfigById
	}
	return nil
}

func (x *Request) GetReqAddLocation() *AddLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddLocation); ok {
		return x.ReqAddLocation
	}
	return nil
}

func (x *Request) GetReqAddLocationBulk() *BulkAddLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddLocationBulk); ok {
		return x.ReqAddLocationBulk
	}
	return nil
}

func (x *Request) GetReqUpdateLocation() *UpdateLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocation); ok {
		return x.ReqUpdateLocation
	}
	return nil
}

func (x *Request) GetReqUpdateLocationBulk() *BulkUpdateLocationRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationBulk); ok {
		return x.ReqUpdateLocationBulk
	}
	return nil
}

func (x *Request) GetReqGetLocationsWithBoundary() *GetLocationsWithBoundaryRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetLocationsWithBoundary); ok {
		return x.ReqGetLocationsWithBoundary
	}
	return nil
}

func (x *Request) GetReqGetLocations() *GetLocationsRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetLocations); ok {
		return x.ReqGetLocations
	}
	return nil
}

func (x *Request) GetReqGetChildGeographies() *GetChildGeographiesRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetChildGeographies); ok {
		return x.ReqGetChildGeographies
	}
	return nil
}

func (x *Request) GetReqInsertLocationWithoutBoundary() *InsertLocationWithoutBoundaryRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocationWithoutBoundary); ok {
		return x.ReqInsertLocationWithoutBoundary
	}
	return nil
}

func (x *Request) GetReqInsertLocationWithoutBoundaryBulk() *BulkInsertLocationWithoutBoundaryRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertLocationWithoutBoundaryBulk); ok {
		return x.ReqInsertLocationWithoutBoundaryBulk
	}
	return nil
}

func (x *Request) GetReqUpdateLocationWithoutBoundaryById() *UpdateLocationWithoutBoundaryByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationWithoutBoundaryById); ok {
		return x.ReqUpdateLocationWithoutBoundaryById
	}
	return nil
}

func (x *Request) GetReqUpdateLocationWithoutBoundaryByIdBulk() *BulkUpdateLocationWithoutBoundaryByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqUpdateLocationWithoutBoundaryByIdBulk); ok {
		return x.ReqUpdateLocationWithoutBoundaryByIdBulk
	}
	return nil
}

func (x *Request) GetReqDeleteLocationById() *DeleteLocationByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqDeleteLocationById); ok {
		return x.ReqDeleteLocationById
	}
	return nil
}

func (x *Request) GetReqDeleteLocationByIdBulk() *BulkDeleteLocationByIdRequest {
	if x, ok := x.GetARequest().(*Request_ReqDeleteLocationByIdBulk); ok {
		return x.ReqDeleteLocationByIdBulk
	}
	return nil
}

func (x *Request) GetReqFetchDuplicateVillages() *FetchDuplicateVillagesRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchDuplicateVillages); ok {
		return x.ReqFetchDuplicateVillages
	}
	return nil
}

func (x *Request) GetReqFetchDuplicateVillagesBySDTVLatLong() *FetchDuplicateVillagesBySDTVLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchDuplicateVillagesBySDTVLatLong); ok {
		return x.ReqFetchDuplicateVillagesBySDTVLatLong
	}
	return nil
}

func (x *Request) GetReqFetchDuplicateTehsilsBySDTVLatLong() *FetchDuplicateTehsilsBySDTVLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchDuplicateTehsilsBySDTVLatLong); ok {
		return x.ReqFetchDuplicateTehsilsBySDTVLatLong
	}
	return nil
}

func (x *Request) GetReqFetchDuplicateDistrictsBySDTVLatLong() *FetchDuplicateDistrictsBySDTVLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchDuplicateDistrictsBySDTVLatLong); ok {
		return x.ReqFetchDuplicateDistrictsBySDTVLatLong
	}
	return nil
}

func (x *Request) GetReqFetchDuplicateStatesBySDTVLatLong() *FetchDuplicateStatesBySDTVLatLongRequest {
	if x, ok := x.GetARequest().(*Request_ReqFetchDuplicateStatesBySDTVLatLong); ok {
		return x.ReqFetchDuplicateStatesBySDTVLatLong
	}
	return nil
}

func (x *Request) GetReqGetDuplicateGeographies() *GetDuplicateGeographiesRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetDuplicateGeographies); ok {
		return x.ReqGetDuplicateGeographies
	}
	return nil
}

func (x *Request) GetReqInsertVendorLocationData() *InsertVendorLocationDataRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertVendorLocationData); ok {
		return x.ReqInsertVendorLocationData
	}
	return nil
}

func (x *Request) GetReqInsertVendorLocationDataBulk() *BulkInsertVendorLocationDataRequest {
	if x, ok := x.GetARequest().(*Request_ReqInsertVendorLocationDataBulk); ok {
		return x.ReqInsertVendorLocationDataBulk
	}
	return nil
}

func (x *Request) GetReqSearchVendorLocationsByGeohash() *SearchVendorLocationsByGeohashRequest {
	if x, ok := x.GetARequest().(*Request_ReqSearchVendorLocationsByGeohash); ok {
		return x.ReqSearchVendorLocationsByGeohash
	}
	return nil
}

func (x *Request) GetReqSearchLocationsByGeohash() *SearchLocationsByGeohashRequest {
	if x, ok := x.GetARequest().(*Request_ReqSearchLocationsByGeohash); ok {
		return x.ReqSearchLocationsByGeohash
	}
	return nil
}

func (x *Request) GetReqGetLocationDataByLatLng() *GetLocationDataByLatLngRequest {
	if x, ok := x.GetARequest().(*Request_ReqGetLocationDataByLatLng); ok {
		return x.ReqGetLocationDataByLatLng
	}
	return nil
}

func (x *Request) GetReqAddVendorApiLedger() *AddVendorApiLedgerRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddVendorApiLedger); ok {
		return x.ReqAddVendorApiLedger
	}
	return nil
}

func (x *Request) GetReqAddVendorApiLedgerBulk() *BulkAddVendorApiLedgerRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddVendorApiLedgerBulk); ok {
		return x.ReqAddVendorApiLedgerBulk
	}
	return nil
}

type isRequest_ARequest interface {
	isRequest_ARequest()
}

type Request_ReqInsertLocation struct {
	ReqInsertLocation *InsertLocationRequest `protobuf:"bytes,2,opt,name=reqInsertLocation,proto3,oneof"`
}

type Request_ReqInsertLocationBulk struct {
	ReqInsertLocationBulk *BulkInsertLocationRequest `protobuf:"bytes,3,opt,name=reqInsertLocationBulk,proto3,oneof"`
}

type Request_ReqInsertLocationS2Cell struct {
	ReqInsertLocationS2Cell *InsertLocationS2CellRequest `protobuf:"bytes,4,opt,name=reqInsertLocationS2Cell,proto3,oneof"`
}

type Request_ReqInsertLocationS2CellBulk struct {
	ReqInsertLocationS2CellBulk *BulkInsertLocationS2CellRequest `protobuf:"bytes,5,opt,name=reqInsertLocationS2CellBulk,proto3,oneof"`
}

type Request_ReqInsertConfig struct {
	ReqInsertConfig *InsertConfigRequest `protobuf:"bytes,6,opt,name=reqInsertConfig,proto3,oneof"`
}

type Request_ReqInsertConfigBulk struct {
	ReqInsertConfigBulk *BulkInsertConfigRequest `protobuf:"bytes,7,opt,name=reqInsertConfigBulk,proto3,oneof"`
}

type Request_ReqFetchLocationById struct {
	ReqFetchLocationById *FetchLocationByIdRequest `protobuf:"bytes,8,opt,name=reqFetchLocationById,proto3,oneof"`
}

type Request_ReqFetchLocationByCodeAndNamespace struct {
	ReqFetchLocationByCodeAndNamespace *FetchLocationByCodeAndNamespaceRequest `protobuf:"bytes,9,opt,name=reqFetchLocationByCodeAndNamespace,proto3,oneof"`
}

type Request_ReqFetchS2CellById struct {
	ReqFetchS2CellById *FetchS2CellByIdRequest `protobuf:"bytes,10,opt,name=reqFetchS2CellById,proto3,oneof"`
}

type Request_ReqFetchS2CellByLocation struct {
	ReqFetchS2CellByLocation *FetchS2CellByLocationRequest `protobuf:"bytes,11,opt,name=reqFetchS2CellByLocation,proto3,oneof"`
}

type Request_ReqFetchS2CellByLocationId struct {
	ReqFetchS2CellByLocationId *FetchS2CellByLocationIdRequest `protobuf:"bytes,12,opt,name=reqFetchS2CellByLocationId,proto3,oneof"`
}

type Request_ReqUpdateLocationById struct {
	ReqUpdateLocationById *UpdateLocationByIdRequest `protobuf:"bytes,13,opt,name=reqUpdateLocationById,proto3,oneof"`
}

type Request_ReqUpdateLocationByIdBulk struct {
	ReqUpdateLocationByIdBulk *BulkUpdateLocationByIdRequest `protobuf:"bytes,14,opt,name=reqUpdateLocationByIdBulk,proto3,oneof"`
}

type Request_ReqUpdateLocationLabelById struct {
	ReqUpdateLocationLabelById *UpdateLocationLabelByIdRequest `protobuf:"bytes,15,opt,name=reqUpdateLocationLabelById,proto3,oneof"`
}

type Request_ReqUpdateLocationLabelByIdBulk struct {
	ReqUpdateLocationLabelByIdBulk *BulkUpdateLocationLabelByIdRequest `protobuf:"bytes,16,opt,name=reqUpdateLocationLabelByIdBulk,proto3,oneof"`
}

type Request_ReqUpdateDeleteS2CellByLocation struct {
	ReqUpdateDeleteS2CellByLocation *UpdateDeleteS2CellByLocationRequest `protobuf:"bytes,17,opt,name=reqUpdateDeleteS2CellByLocation,proto3,oneof"`
}

type Request_ReqUpdateDeleteS2CellByLocationBulk struct {
	ReqUpdateDeleteS2CellByLocationBulk *BulkUpdateDeleteS2CellByLocationRequest `protobuf:"bytes,18,opt,name=reqUpdateDeleteS2CellByLocationBulk,proto3,oneof"`
}

type Request_ReqFetchConfigById struct {
	ReqFetchConfigById *FetchConfigByIdRequest `protobuf:"bytes,19,opt,name=reqFetchConfigById,proto3,oneof"`
}

type Request_ReqAddLocation struct {
	ReqAddLocation *AddLocationRequest `protobuf:"bytes,20,opt,name=reqAddLocation,proto3,oneof"`
}

type Request_ReqAddLocationBulk struct {
	ReqAddLocationBulk *BulkAddLocationRequest `protobuf:"bytes,21,opt,name=reqAddLocationBulk,proto3,oneof"`
}

type Request_ReqUpdateLocation struct {
	ReqUpdateLocation *UpdateLocationRequest `protobuf:"bytes,22,opt,name=reqUpdateLocation,proto3,oneof"`
}

type Request_ReqUpdateLocationBulk struct {
	ReqUpdateLocationBulk *BulkUpdateLocationRequest `protobuf:"bytes,23,opt,name=reqUpdateLocationBulk,proto3,oneof"`
}

type Request_ReqGetLocationsWithBoundary struct {
	ReqGetLocationsWithBoundary *GetLocationsWithBoundaryRequest `protobuf:"bytes,24,opt,name=reqGetLocationsWithBoundary,proto3,oneof"`
}

type Request_ReqGetLocations struct {
	ReqGetLocations *GetLocationsRequest `protobuf:"bytes,25,opt,name=reqGetLocations,proto3,oneof"`
}

type Request_ReqGetChildGeographies struct {
	ReqGetChildGeographies *GetChildGeographiesRequest `protobuf:"bytes,26,opt,name=reqGetChildGeographies,proto3,oneof"`
}

type Request_ReqInsertLocationWithoutBoundary struct {
	ReqInsertLocationWithoutBoundary *InsertLocationWithoutBoundaryRequest `protobuf:"bytes,27,opt,name=reqInsertLocationWithoutBoundary,proto3,oneof"`
}

type Request_ReqInsertLocationWithoutBoundaryBulk struct {
	ReqInsertLocationWithoutBoundaryBulk *BulkInsertLocationWithoutBoundaryRequest `protobuf:"bytes,28,opt,name=reqInsertLocationWithoutBoundaryBulk,proto3,oneof"`
}

type Request_ReqUpdateLocationWithoutBoundaryById struct {
	ReqUpdateLocationWithoutBoundaryById *UpdateLocationWithoutBoundaryByIdRequest `protobuf:"bytes,29,opt,name=reqUpdateLocationWithoutBoundaryById,proto3,oneof"`
}

type Request_ReqUpdateLocationWithoutBoundaryByIdBulk struct {
	ReqUpdateLocationWithoutBoundaryByIdBulk *BulkUpdateLocationWithoutBoundaryByIdRequest `protobuf:"bytes,30,opt,name=reqUpdateLocationWithoutBoundaryByIdBulk,proto3,oneof"`
}

type Request_ReqDeleteLocationById struct {
	ReqDeleteLocationById *DeleteLocationByIdRequest `protobuf:"bytes,31,opt,name=reqDeleteLocationById,proto3,oneof"`
}

type Request_ReqDeleteLocationByIdBulk struct {
	ReqDeleteLocationByIdBulk *BulkDeleteLocationByIdRequest `protobuf:"bytes,32,opt,name=reqDeleteLocationByIdBulk,proto3,oneof"`
}

type Request_ReqFetchDuplicateVillages struct {
	ReqFetchDuplicateVillages *FetchDuplicateVillagesRequest `protobuf:"bytes,33,opt,name=reqFetchDuplicateVillages,proto3,oneof"`
}

type Request_ReqFetchDuplicateVillagesBySDTVLatLong struct {
	ReqFetchDuplicateVillagesBySDTVLatLong *FetchDuplicateVillagesBySDTVLatLongRequest `protobuf:"bytes,34,opt,name=reqFetchDuplicateVillagesBySDTVLatLong,proto3,oneof"`
}

type Request_ReqFetchDuplicateTehsilsBySDTVLatLong struct {
	ReqFetchDuplicateTehsilsBySDTVLatLong *FetchDuplicateTehsilsBySDTVLatLongRequest `protobuf:"bytes,35,opt,name=reqFetchDuplicateTehsilsBySDTVLatLong,proto3,oneof"`
}

type Request_ReqFetchDuplicateDistrictsBySDTVLatLong struct {
	ReqFetchDuplicateDistrictsBySDTVLatLong *FetchDuplicateDistrictsBySDTVLatLongRequest `protobuf:"bytes,36,opt,name=reqFetchDuplicateDistrictsBySDTVLatLong,proto3,oneof"`
}

type Request_ReqFetchDuplicateStatesBySDTVLatLong struct {
	ReqFetchDuplicateStatesBySDTVLatLong *FetchDuplicateStatesBySDTVLatLongRequest `protobuf:"bytes,37,opt,name=reqFetchDuplicateStatesBySDTVLatLong,proto3,oneof"`
}

type Request_ReqGetDuplicateGeographies struct {
	ReqGetDuplicateGeographies *GetDuplicateGeographiesRequest `protobuf:"bytes,38,opt,name=reqGetDuplicateGeographies,proto3,oneof"`
}

type Request_ReqInsertVendorLocationData struct {
	ReqInsertVendorLocationData *InsertVendorLocationDataRequest `protobuf:"bytes,39,opt,name=reqInsertVendorLocationData,proto3,oneof"`
}

type Request_ReqInsertVendorLocationDataBulk struct {
	ReqInsertVendorLocationDataBulk *BulkInsertVendorLocationDataRequest `protobuf:"bytes,40,opt,name=reqInsertVendorLocationDataBulk,proto3,oneof"`
}

type Request_ReqSearchVendorLocationsByGeohash struct {
	ReqSearchVendorLocationsByGeohash *SearchVendorLocationsByGeohashRequest `protobuf:"bytes,41,opt,name=reqSearchVendorLocationsByGeohash,proto3,oneof"`
}

type Request_ReqSearchLocationsByGeohash struct {
	ReqSearchLocationsByGeohash *SearchLocationsByGeohashRequest `protobuf:"bytes,42,opt,name=reqSearchLocationsByGeohash,proto3,oneof"`
}

type Request_ReqGetLocationDataByLatLng struct {
	ReqGetLocationDataByLatLng *GetLocationDataByLatLngRequest `protobuf:"bytes,43,opt,name=reqGetLocationDataByLatLng,proto3,oneof"`
}

type Request_ReqAddVendorApiLedger struct {
	ReqAddVendorApiLedger *AddVendorApiLedgerRequest `protobuf:"bytes,44,opt,name=reqAddVendorApiLedger,proto3,oneof"`
}

type Request_ReqAddVendorApiLedgerBulk struct {
	ReqAddVendorApiLedgerBulk *BulkAddVendorApiLedgerRequest `protobuf:"bytes,45,opt,name=reqAddVendorApiLedgerBulk,proto3,oneof"`
}

func (*Request_ReqInsertLocation) isRequest_ARequest() {}

func (*Request_ReqInsertLocationBulk) isRequest_ARequest() {}

func (*Request_ReqInsertLocationS2Cell) isRequest_ARequest() {}

func (*Request_ReqInsertLocationS2CellBulk) isRequest_ARequest() {}

func (*Request_ReqInsertConfig) isRequest_ARequest() {}

func (*Request_ReqInsertConfigBulk) isRequest_ARequest() {}

func (*Request_ReqFetchLocationById) isRequest_ARequest() {}

func (*Request_ReqFetchLocationByCodeAndNamespace) isRequest_ARequest() {}

func (*Request_ReqFetchS2CellById) isRequest_ARequest() {}

func (*Request_ReqFetchS2CellByLocation) isRequest_ARequest() {}

func (*Request_ReqFetchS2CellByLocationId) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationById) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationByIdBulk) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationLabelById) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationLabelByIdBulk) isRequest_ARequest() {}

func (*Request_ReqUpdateDeleteS2CellByLocation) isRequest_ARequest() {}

func (*Request_ReqUpdateDeleteS2CellByLocationBulk) isRequest_ARequest() {}

func (*Request_ReqFetchConfigById) isRequest_ARequest() {}

func (*Request_ReqAddLocation) isRequest_ARequest() {}

func (*Request_ReqAddLocationBulk) isRequest_ARequest() {}

func (*Request_ReqUpdateLocation) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationBulk) isRequest_ARequest() {}

func (*Request_ReqGetLocationsWithBoundary) isRequest_ARequest() {}

func (*Request_ReqGetLocations) isRequest_ARequest() {}

func (*Request_ReqGetChildGeographies) isRequest_ARequest() {}

func (*Request_ReqInsertLocationWithoutBoundary) isRequest_ARequest() {}

func (*Request_ReqInsertLocationWithoutBoundaryBulk) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationWithoutBoundaryById) isRequest_ARequest() {}

func (*Request_ReqUpdateLocationWithoutBoundaryByIdBulk) isRequest_ARequest() {}

func (*Request_ReqDeleteLocationById) isRequest_ARequest() {}

func (*Request_ReqDeleteLocationByIdBulk) isRequest_ARequest() {}

func (*Request_ReqFetchDuplicateVillages) isRequest_ARequest() {}

func (*Request_ReqFetchDuplicateVillagesBySDTVLatLong) isRequest_ARequest() {}

func (*Request_ReqFetchDuplicateTehsilsBySDTVLatLong) isRequest_ARequest() {}

func (*Request_ReqFetchDuplicateDistrictsBySDTVLatLong) isRequest_ARequest() {}

func (*Request_ReqFetchDuplicateStatesBySDTVLatLong) isRequest_ARequest() {}

func (*Request_ReqGetDuplicateGeographies) isRequest_ARequest() {}

func (*Request_ReqInsertVendorLocationData) isRequest_ARequest() {}

func (*Request_ReqInsertVendorLocationDataBulk) isRequest_ARequest() {}

func (*Request_ReqSearchVendorLocationsByGeohash) isRequest_ARequest() {}

func (*Request_ReqSearchLocationsByGeohash) isRequest_ARequest() {}

func (*Request_ReqGetLocationDataByLatLng) isRequest_ARequest() {}

func (*Request_ReqAddVendorApiLedger) isRequest_ARequest() {}

func (*Request_ReqAddVendorApiLedgerBulk) isRequest_ARequest() {}

type MultiResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GoCommon.RequestStatusResult `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Response []*Response                   `protobuf:"bytes,2,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiResponses) Reset() {
	*x = MultiResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiResponses) ProtoMessage() {}

func (x *MultiResponses) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiResponses.ProtoReflect.Descriptor instead.
func (*MultiResponses) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{113}
}

func (x *MultiResponses) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiResponses) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  string                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Status *GoCommon.RequestStatusResult `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to AResponse:
	//	*Response_ResInsertLocation
	//	*Response_ResInsertLocationBulk
	//	*Response_ResInsertLocationS2Cell
	//	*Response_ResInsertLocationS2CellBulk
	//	*Response_ResInsertConfig
	//	*Response_ResInsertConfigBulk
	//	*Response_ResFetchLocationById
	//	*Response_ResFetchLocationByCodeAndNamespace
	//	*Response_ResFetchS2CellById
	//	*Response_ResFetchS2CellByLocation
	//	*Response_ResFetchS2CellByLocationId
	//	*Response_ResUpdateLocationById
	//	*Response_ResUpdateLocationByIdBulk
	//	*Response_ResUpdateLocationLabelById
	//	*Response_ResUpdateLocationLabelByIdBulk
	//	*Response_ResUpdateDeleteS2CellByLocation
	//	*Response_ResUpdateDeleteS2CellByLocationBulk
	//	*Response_ResFetchConfigById
	//	*Response_ResAddLocation
	//	*Response_ResAddLocationBulk
	//	*Response_ResUpdateLocation
	//	*Response_ResUpdateLocationBulk
	//	*Response_ResGetLocationsWithBoundary
	//	*Response_ResGetLocations
	//	*Response_ResGetChildGeographies
	//	*Response_ResInsertLocationWithoutBoundary
	//	*Response_ResInsertLocationWithoutBoundaryBulk
	//	*Response_ResUpdateLocationWithoutBoundaryById
	//	*Response_ResUpdateLocationWithoutBoundaryByIdBulk
	//	*Response_ResDeleteLocationById
	//	*Response_ResDeleteLocationByIdBulk
	//	*Response_ResFetchDuplicateVillages
	//	*Response_ResFetchDuplicateVillagesBySDTVLatLong
	//	*Response_ResFetchDuplicateTehsilsBySDTVLatLong
	//	*Response_ResFetchDuplicateDistrictsBySDTVLatLong
	//	*Response_ResFetchDuplicateStatesBySDTVLatLong
	//	*Response_ResGetDuplicateGeographies
	//	*Response_ResInsertVendorLocationData
	//	*Response_ResInsertVendorLocationDataBulk
	//	*Response_ResSearchVendorLocationsByGeohash
	//	*Response_ResSearchLocationsByGeohash
	//	*Response_ResGetLocationDataByLatLng
	//	*Response_ResAddVendorApiLedger
	//	*Response_ResAddVendorApiLedgerBulk
	AResponse isResponse_AResponse `protobuf_oneof:"AResponse"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LocationService_location_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_LocationService_location_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_LocationService_location_service_proto_rawDescGZIP(), []int{114}
}

func (x *Response) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Response) GetStatus() *GoCommon.RequestStatusResult {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Response) GetAResponse() isResponse_AResponse {
	if m != nil {
		return m.AResponse
	}
	return nil
}

func (x *Response) GetResInsertLocation() *InsertLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocation); ok {
		return x.ResInsertLocation
	}
	return nil
}

func (x *Response) GetResInsertLocationBulk() *BulkInsertLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocationBulk); ok {
		return x.ResInsertLocationBulk
	}
	return nil
}

func (x *Response) GetResInsertLocationS2Cell() *InsertLocationS2CellResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocationS2Cell); ok {
		return x.ResInsertLocationS2Cell
	}
	return nil
}

func (x *Response) GetResInsertLocationS2CellBulk() *BulkInsertLocationS2CellResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocationS2CellBulk); ok {
		return x.ResInsertLocationS2CellBulk
	}
	return nil
}

func (x *Response) GetResInsertConfig() *InsertConfigResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertConfig); ok {
		return x.ResInsertConfig
	}
	return nil
}

func (x *Response) GetResInsertConfigBulk() *BulkInsertConfigResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertConfigBulk); ok {
		return x.ResInsertConfigBulk
	}
	return nil
}

func (x *Response) GetResFetchLocationById() *Location {
	if x, ok := x.GetAResponse().(*Response_ResFetchLocationById); ok {
		return x.ResFetchLocationById
	}
	return nil
}

func (x *Response) GetResFetchLocationByCodeAndNamespace() *Location {
	if x, ok := x.GetAResponse().(*Response_ResFetchLocationByCodeAndNamespace); ok {
		return x.ResFetchLocationByCodeAndNamespace
	}
	return nil
}

func (x *Response) GetResFetchS2CellById() *S2Cell {
	if x, ok := x.GetAResponse().(*Response_ResFetchS2CellById); ok {
		return x.ResFetchS2CellById
	}
	return nil
}

func (x *Response) GetResFetchS2CellByLocation() *S2Cell {
	if x, ok := x.GetAResponse().(*Response_ResFetchS2CellByLocation); ok {
		return x.ResFetchS2CellByLocation
	}
	return nil
}

func (x *Response) GetResFetchS2CellByLocationId() *LocationS2Cells {
	if x, ok := x.GetAResponse().(*Response_ResFetchS2CellByLocationId); ok {
		return x.ResFetchS2CellByLocationId
	}
	return nil
}

func (x *Response) GetResUpdateLocationById() *UpdateLocationByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationById); ok {
		return x.ResUpdateLocationById
	}
	return nil
}

func (x *Response) GetResUpdateLocationByIdBulk() *BulkUpdateLocationByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationByIdBulk); ok {
		return x.ResUpdateLocationByIdBulk
	}
	return nil
}

func (x *Response) GetResUpdateLocationLabelById() *UpdateLocationLabelByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationLabelById); ok {
		return x.ResUpdateLocationLabelById
	}
	return nil
}

func (x *Response) GetResUpdateLocationLabelByIdBulk() *BulkUpdateLocationLabelByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationLabelByIdBulk); ok {
		return x.ResUpdateLocationLabelByIdBulk
	}
	return nil
}

func (x *Response) GetResUpdateDeleteS2CellByLocation() *UpdateDeleteS2CellByLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateDeleteS2CellByLocation); ok {
		return x.ResUpdateDeleteS2CellByLocation
	}
	return nil
}

func (x *Response) GetResUpdateDeleteS2CellByLocationBulk() *BulkUpdateDeleteS2CellByLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateDeleteS2CellByLocationBulk); ok {
		return x.ResUpdateDeleteS2CellByLocationBulk
	}
	return nil
}

func (x *Response) GetResFetchConfigById() *Config {
	if x, ok := x.GetAResponse().(*Response_ResFetchConfigById); ok {
		return x.ResFetchConfigById
	}
	return nil
}

func (x *Response) GetResAddLocation() *AddLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddLocation); ok {
		return x.ResAddLocation
	}
	return nil
}

func (x *Response) GetResAddLocationBulk() *BulkAddLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddLocationBulk); ok {
		return x.ResAddLocationBulk
	}
	return nil
}

func (x *Response) GetResUpdateLocation() *UpdateLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocation); ok {
		return x.ResUpdateLocation
	}
	return nil
}

func (x *Response) GetResUpdateLocationBulk() *BulkUpdateLocationResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationBulk); ok {
		return x.ResUpdateLocationBulk
	}
	return nil
}

func (x *Response) GetResGetLocationsWithBoundary() *GetLocationsWithBoundaryResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetLocationsWithBoundary); ok {
		return x.ResGetLocationsWithBoundary
	}
	return nil
}

func (x *Response) GetResGetLocations() *GetLocationsResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetLocations); ok {
		return x.ResGetLocations
	}
	return nil
}

func (x *Response) GetResGetChildGeographies() *GetChildGeographiesResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetChildGeographies); ok {
		return x.ResGetChildGeographies
	}
	return nil
}

func (x *Response) GetResInsertLocationWithoutBoundary() *InsertLocationWithoutBoundaryResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocationWithoutBoundary); ok {
		return x.ResInsertLocationWithoutBoundary
	}
	return nil
}

func (x *Response) GetResInsertLocationWithoutBoundaryBulk() *BulkInsertLocationWithoutBoundaryResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertLocationWithoutBoundaryBulk); ok {
		return x.ResInsertLocationWithoutBoundaryBulk
	}
	return nil
}

func (x *Response) GetResUpdateLocationWithoutBoundaryById() *UpdateLocationWithoutBoundaryByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationWithoutBoundaryById); ok {
		return x.ResUpdateLocationWithoutBoundaryById
	}
	return nil
}

func (x *Response) GetResUpdateLocationWithoutBoundaryByIdBulk() *BulkUpdateLocationWithoutBoundaryByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResUpdateLocationWithoutBoundaryByIdBulk); ok {
		return x.ResUpdateLocationWithoutBoundaryByIdBulk
	}
	return nil
}

func (x *Response) GetResDeleteLocationById() *DeleteLocationByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResDeleteLocationById); ok {
		return x.ResDeleteLocationById
	}
	return nil
}

func (x *Response) GetResDeleteLocationByIdBulk() *BulkDeleteLocationByIdResponse {
	if x, ok := x.GetAResponse().(*Response_ResDeleteLocationByIdBulk); ok {
		return x.ResDeleteLocationByIdBulk
	}
	return nil
}

func (x *Response) GetResFetchDuplicateVillages() *FetchDuplicateVillagesResponse {
	if x, ok := x.GetAResponse().(*Response_ResFetchDuplicateVillages); ok {
		return x.ResFetchDuplicateVillages
	}
	return nil
}

func (x *Response) GetResFetchDuplicateVillagesBySDTVLatLong() *FetchDuplicateVillagesBySDTVLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResFetchDuplicateVillagesBySDTVLatLong); ok {
		return x.ResFetchDuplicateVillagesBySDTVLatLong
	}
	return nil
}

func (x *Response) GetResFetchDuplicateTehsilsBySDTVLatLong() *FetchDuplicateTehsilsBySDTVLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResFetchDuplicateTehsilsBySDTVLatLong); ok {
		return x.ResFetchDuplicateTehsilsBySDTVLatLong
	}
	return nil
}

func (x *Response) GetResFetchDuplicateDistrictsBySDTVLatLong() *FetchDuplicateDistrictsBySDTVLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResFetchDuplicateDistrictsBySDTVLatLong); ok {
		return x.ResFetchDuplicateDistrictsBySDTVLatLong
	}
	return nil
}

func (x *Response) GetResFetchDuplicateStatesBySDTVLatLong() *FetchDuplicateStatesBySDTVLatLongResponse {
	if x, ok := x.GetAResponse().(*Response_ResFetchDuplicateStatesBySDTVLatLong); ok {
		return x.ResFetchDuplicateStatesBySDTVLatLong
	}
	return nil
}

func (x *Response) GetResGetDuplicateGeographies() *GetDuplicateGeographiesResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetDuplicateGeographies); ok {
		return x.ResGetDuplicateGeographies
	}
	return nil
}

func (x *Response) GetResInsertVendorLocationData() *InsertVendorLocationDataResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertVendorLocationData); ok {
		return x.ResInsertVendorLocationData
	}
	return nil
}

func (x *Response) GetResInsertVendorLocationDataBulk() *BulkInsertVendorLocationDataResponse {
	if x, ok := x.GetAResponse().(*Response_ResInsertVendorLocationDataBulk); ok {
		return x.ResInsertVendorLocationDataBulk
	}
	return nil
}

func (x *Response) GetResSearchVendorLocationsByGeohash() *SearchVendorLocationsByGeohashResponse {
	if x, ok := x.GetAResponse().(*Response_ResSearchVendorLocationsByGeohash); ok {
		return x.ResSearchVendorLocationsByGeohash
	}
	return nil
}

func (x *Response) GetResSearchLocationsByGeohash() *SearchLocationsByGeohashResponse {
	if x, ok := x.GetAResponse().(*Response_ResSearchLocationsByGeohash); ok {
		return x.ResSearchLocationsByGeohash
	}
	return nil
}

func (x *Response) GetResGetLocationDataByLatLng() *GetLocationDataByLatLngResponse {
	if x, ok := x.GetAResponse().(*Response_ResGetLocationDataByLatLng); ok {
		return x.ResGetLocationDataByLatLng
	}
	return nil
}

func (x *Response) GetResAddVendorApiLedger() *AddVendorApiLedgerResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddVendorApiLedger); ok {
		return x.ResAddVendorApiLedger
	}
	return nil
}

func (x *Response) GetResAddVendorApiLedgerBulk() *BulkAddVendorApiLedgerResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddVendorApiLedgerBulk); ok {
		return x.ResAddVendorApiLedgerBulk
	}
	return nil
}

type isResponse_AResponse interface {
	isResponse_AResponse()
}

type Response_ResInsertLocation struct {
	ResInsertLocation *InsertLocationResponse `protobuf:"bytes,3,opt,name=resInsertLocation,proto3,oneof"`
}

type Response_ResInsertLocationBulk struct {
	ResInsertLocationBulk *BulkInsertLocationResponse `protobuf:"bytes,4,opt,name=resInsertLocationBulk,proto3,oneof"`
}

type Response_ResInsertLocationS2Cell struct {
	ResInsertLocationS2Cell *InsertLocationS2CellResponse `protobuf:"bytes,5,opt,name=resInsertLocationS2Cell,proto3,oneof"`
}

type Response_ResInsertLocationS2CellBulk struct {
	ResInsertLocationS2CellBulk *BulkInsertLocationS2CellResponse `protobuf:"bytes,6,opt,name=resInsertLocationS2CellBulk,proto3,oneof"`
}

type Response_ResInsertConfig struct {
	ResInsertConfig *InsertConfigResponse `protobuf:"bytes,7,opt,name=resInsertConfig,proto3,oneof"`
}

type Response_ResInsertConfigBulk struct {
	ResInsertConfigBulk *BulkInsertConfigResponse `protobuf:"bytes,8,opt,name=resInsertConfigBulk,proto3,oneof"`
}

type Response_ResFetchLocationById struct {
	ResFetchLocationById *Location `protobuf:"bytes,9,opt,name=resFetchLocationById,proto3,oneof"`
}

type Response_ResFetchLocationByCodeAndNamespace struct {
	ResFetchLocationByCodeAndNamespace *Location `protobuf:"bytes,10,opt,name=resFetchLocationByCodeAndNamespace,proto3,oneof"`
}

type Response_ResFetchS2CellById struct {
	ResFetchS2CellById *S2Cell `protobuf:"bytes,11,opt,name=resFetchS2CellById,proto3,oneof"`
}

type Response_ResFetchS2CellByLocation struct {
	ResFetchS2CellByLocation *S2Cell `protobuf:"bytes,12,opt,name=resFetchS2CellByLocation,proto3,oneof"`
}

type Response_ResFetchS2CellByLocationId struct {
	ResFetchS2CellByLocationId *LocationS2Cells `protobuf:"bytes,13,opt,name=resFetchS2CellByLocationId,proto3,oneof"`
}

type Response_ResUpdateLocationById struct {
	ResUpdateLocationById *UpdateLocationByIdResponse `protobuf:"bytes,14,opt,name=resUpdateLocationById,proto3,oneof"`
}

type Response_ResUpdateLocationByIdBulk struct {
	ResUpdateLocationByIdBulk *BulkUpdateLocationByIdResponse `protobuf:"bytes,15,opt,name=resUpdateLocationByIdBulk,proto3,oneof"`
}

type Response_ResUpdateLocationLabelById struct {
	ResUpdateLocationLabelById *UpdateLocationLabelByIdResponse `protobuf:"bytes,16,opt,name=resUpdateLocationLabelById,proto3,oneof"`
}

type Response_ResUpdateLocationLabelByIdBulk struct {
	ResUpdateLocationLabelByIdBulk *BulkUpdateLocationLabelByIdResponse `protobuf:"bytes,17,opt,name=resUpdateLocationLabelByIdBulk,proto3,oneof"`
}

type Response_ResUpdateDeleteS2CellByLocation struct {
	ResUpdateDeleteS2CellByLocation *UpdateDeleteS2CellByLocationResponse `protobuf:"bytes,18,opt,name=resUpdateDeleteS2CellByLocation,proto3,oneof"`
}

type Response_ResUpdateDeleteS2CellByLocationBulk struct {
	ResUpdateDeleteS2CellByLocationBulk *BulkUpdateDeleteS2CellByLocationResponse `protobuf:"bytes,19,opt,name=resUpdateDeleteS2CellByLocationBulk,proto3,oneof"`
}

type Response_ResFetchConfigById struct {
	ResFetchConfigById *Config `protobuf:"bytes,20,opt,name=resFetchConfigById,proto3,oneof"`
}

type Response_ResAddLocation struct {
	ResAddLocation *AddLocationResponse `protobuf:"bytes,21,opt,name=resAddLocation,proto3,oneof"`
}

type Response_ResAddLocationBulk struct {
	ResAddLocationBulk *BulkAddLocationResponse `protobuf:"bytes,22,opt,name=resAddLocationBulk,proto3,oneof"`
}

type Response_ResUpdateLocation struct {
	ResUpdateLocation *UpdateLocationResponse `protobuf:"bytes,23,opt,name=resUpdateLocation,proto3,oneof"`
}

type Response_ResUpdateLocationBulk struct {
	ResUpdateLocationBulk *BulkUpdateLocationResponse `protobuf:"bytes,24,opt,name=resUpdateLocationBulk,proto3,oneof"`
}

type Response_ResGetLocationsWithBoundary struct {
	ResGetLocationsWithBoundary *GetLocationsWithBoundaryResponse `protobuf:"bytes,25,opt,name=resGetLocationsWithBoundary,proto3,oneof"`
}

type Response_ResGetLocations struct {
	ResGetLocations *GetLocationsResponse `protobuf:"bytes,26,opt,name=resGetLocations,proto3,oneof"`
}

type Response_ResGetChildGeographies struct {
	ResGetChildGeographies *GetChildGeographiesResponse `protobuf:"bytes,27,opt,name=resGetChildGeographies,proto3,oneof"`
}

type Response_ResInsertLocationWithoutBoundary struct {
	ResInsertLocationWithoutBoundary *InsertLocationWithoutBoundaryResponse `protobuf:"bytes,28,opt,name=resInsertLocationWithoutBoundary,proto3,oneof"`
}

type Response_ResInsertLocationWithoutBoundaryBulk struct {
	ResInsertLocationWithoutBoundaryBulk *BulkInsertLocationWithoutBoundaryResponse `protobuf:"bytes,29,opt,name=resInsertLocationWithoutBoundaryBulk,proto3,oneof"`
}

type Response_ResUpdateLocationWithoutBoundaryById struct {
	ResUpdateLocationWithoutBoundaryById *UpdateLocationWithoutBoundaryByIdResponse `protobuf:"bytes,30,opt,name=resUpdateLocationWithoutBoundaryById,proto3,oneof"`
}

type Response_ResUpdateLocationWithoutBoundaryByIdBulk struct {
	ResUpdateLocationWithoutBoundaryByIdBulk *BulkUpdateLocationWithoutBoundaryByIdResponse `protobuf:"bytes,31,opt,name=resUpdateLocationWithoutBoundaryByIdBulk,proto3,oneof"`
}

type Response_ResDeleteLocationById struct {
	ResDeleteLocationById *DeleteLocationByIdResponse `protobuf:"bytes,32,opt,name=resDeleteLocationById,proto3,oneof"`
}

type Response_ResDeleteLocationByIdBulk struct {
	ResDeleteLocationByIdBulk *BulkDeleteLocationByIdResponse `protobuf:"bytes,33,opt,name=resDeleteLocationByIdBulk,proto3,oneof"`
}

type Response_ResFetchDuplicateVillages struct {
	ResFetchDuplicateVillages *FetchDuplicateVillagesResponse `protobuf:"bytes,34,opt,name=resFetchDuplicateVillages,proto3,oneof"`
}

type Response_ResFetchDuplicateVillagesBySDTVLatLong struct {
	ResFetchDuplicateVillagesBySDTVLatLong *FetchDuplicateVillagesBySDTVLatLongResponse `protobuf:"bytes,35,opt,name=resFetchDuplicateVillagesBySDTVLatLong,proto3,oneof"`
}

type Response_ResFetchDuplicateTehsilsBySDTVLatLong struct {
	ResFetchDuplicateTehsilsBySDTVLatLong *FetchDuplicateTehsilsBySDTVLatLongResponse `protobuf:"bytes,36,opt,name=resFetchDuplicateTehsilsBySDTVLatLong,proto3,oneof"`
}

type Response_ResFetchDuplicateDistrictsBySDTVLatLong struct {
	ResFetchDuplicateDistrictsBySDTVLatLong *FetchDuplicateDistrictsBySDTVLatLongResponse `protobuf:"bytes,37,opt,name=resFetchDuplicateDistrictsBySDTVLatLong,proto3,oneof"`
}

type Response_ResFetchDuplicateStatesBySDTVLatLong struct {
	ResFetchDuplicateStatesBySDTVLatLong *FetchDuplicateStatesBySDTVLatLongResponse `protobuf:"bytes,38,opt,name=resFetchDuplicateStatesBySDTVLatLong,proto3,oneof"`
}

type Response_ResGetDuplicateGeographies struct {
	ResGetDuplicateGeographies *GetDuplicateGeographiesResponse `protobuf:"bytes,39,opt,name=resGetDuplicateGeographies,proto3,oneof"`
}

type Response_ResInsertVendorLocationData struct {
	ResInsertVendorLocationData *InsertVendorLocationDataResponse `protobuf:"bytes,40,opt,name=resInsertVendorLocationData,proto3,oneof"`
}

type Response_ResInsertVendorLocationDataBulk struct {
	ResInsertVendorLocationDataBulk *BulkInsertVendorLocationDataResponse `protobuf:"bytes,41,opt,name=resInsertVendorLocationDataBulk,proto3,oneof"`
}

type Response_ResSearchVendorLocationsByGeohash struct {
	ResSearchVendorLocationsByGeohash *SearchVendorLocationsByGeohashResponse `protobuf:"bytes,42,opt,name=resSearchVendorLocationsByGeohash,proto3,oneof"`
}

type Response_ResSearchLocationsByGeohash struct {
	ResSearchLocationsByGeohash *SearchLocationsByGeohashResponse `protobuf:"bytes,43,opt,name=resSearchLocationsByGeohash,proto3,oneof"`
}

type Response_ResGetLocationDataByLatLng struct {
	ResGetLocationDataByLatLng *GetLocationDataByLatLngResponse `protobuf:"bytes,44,opt,name=resGetLocationDataByLatLng,proto3,oneof"`
}

type Response_ResAddVendorApiLedger struct {
	ResAddVendorApiLedger *AddVendorApiLedgerResponse `protobuf:"bytes,45,opt,name=resAddVendorApiLedger,proto3,oneof"`
}

type Response_ResAddVendorApiLedgerBulk struct {
	ResAddVendorApiLedgerBulk *BulkAddVendorApiLedgerResponse `protobuf:"bytes,46,opt,name=resAddVendorApiLedgerBulk,proto3,oneof"`
}

func (*Response_ResInsertLocation) isResponse_AResponse() {}

func (*Response_ResInsertLocationBulk) isResponse_AResponse() {}

func (*Response_ResInsertLocationS2Cell) isResponse_AResponse() {}

func (*Response_ResInsertLocationS2CellBulk) isResponse_AResponse() {}

func (*Response_ResInsertConfig) isResponse_AResponse() {}

func (*Response_ResInsertConfigBulk) isResponse_AResponse() {}

func (*Response_ResFetchLocationById) isResponse_AResponse() {}

func (*Response_ResFetchLocationByCodeAndNamespace) isResponse_AResponse() {}

func (*Response_ResFetchS2CellById) isResponse_AResponse() {}

func (*Response_ResFetchS2CellByLocation) isResponse_AResponse() {}

func (*Response_ResFetchS2CellByLocationId) isResponse_AResponse() {}

func (*Response_ResUpdateLocationById) isResponse_AResponse() {}

func (*Response_ResUpdateLocationByIdBulk) isResponse_AResponse() {}

func (*Response_ResUpdateLocationLabelById) isResponse_AResponse() {}

func (*Response_ResUpdateLocationLabelByIdBulk) isResponse_AResponse() {}

func (*Response_ResUpdateDeleteS2CellByLocation) isResponse_AResponse() {}

func (*Response_ResUpdateDeleteS2CellByLocationBulk) isResponse_AResponse() {}

func (*Response_ResFetchConfigById) isResponse_AResponse() {}

func (*Response_ResAddLocation) isResponse_AResponse() {}

func (*Response_ResAddLocationBulk) isResponse_AResponse() {}

func (*Response_ResUpdateLocation) isResponse_AResponse() {}

func (*Response_ResUpdateLocationBulk) isResponse_AResponse() {}

func (*Response_ResGetLocationsWithBoundary) isResponse_AResponse() {}

func (*Response_ResGetLocations) isResponse_AResponse() {}

func (*Response_ResGetChildGeographies) isResponse_AResponse() {}

func (*Response_ResInsertLocationWithoutBoundary) isResponse_AResponse() {}

func (*Response_ResInsertLocationWithoutBoundaryBulk) isResponse_AResponse() {}

func (*Response_ResUpdateLocationWithoutBoundaryById) isResponse_AResponse() {}

func (*Response_ResUpdateLocationWithoutBoundaryByIdBulk) isResponse_AResponse() {}

func (*Response_ResDeleteLocationById) isResponse_AResponse() {}

func (*Response_ResDeleteLocationByIdBulk) isResponse_AResponse() {}

func (*Response_ResFetchDuplicateVillages) isResponse_AResponse() {}

func (*Response_ResFetchDuplicateVillagesBySDTVLatLong) isResponse_AResponse() {}

func (*Response_ResFetchDuplicateTehsilsBySDTVLatLong) isResponse_AResponse() {}

func (*Response_ResFetchDuplicateDistrictsBySDTVLatLong) isResponse_AResponse() {}

func (*Response_ResFetchDuplicateStatesBySDTVLatLong) isResponse_AResponse() {}

func (*Response_ResGetDuplicateGeographies) isResponse_AResponse() {}

func (*Response_ResInsertVendorLocationData) isResponse_AResponse() {}

func (*Response_ResInsertVendorLocationDataBulk) isResponse_AResponse() {}

func (*Response_ResSearchVendorLocationsByGeohash) isResponse_AResponse() {}

func (*Response_ResSearchLocationsByGeohash) isResponse_AResponse() {}

func (*Response_ResGetLocationDataByLatLng) isResponse_AResponse() {}

func (*Response_ResAddVendorApiLedger) isResponse_AResponse() {}

func (*Response_ResAddVendorApiLedgerBulk) isResponse_AResponse() {}

var File_LocationService_location_service_proto protoreflect.FileDescriptor

var file_LocationService_location_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x08, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x28, 0x0a,
	0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0xe7, 0x05, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x32, 0x43, 0x65,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32, 0x37, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x32, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x32, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x38, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32, 0x39, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x32, 0x39, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x30, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x30, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31,
	0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32,
	0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x32, 0x31, 0x33, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x33, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x34, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x32, 0x31, 0x34, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x35,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x32, 0x31, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x37, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x32, 0x31, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x38, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1f, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x17,
	0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xda, 0x01, 0x0a,
	0x18, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xaa, 0x06, 0x0a, 0x0e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65,
	0x6f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x87, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xde, 0x01, 0x0a, 0x26, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xc8, 0x05, 0x0a, 0x0c, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x32, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32, 0x38, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x32, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x32, 0x39, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x39, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x30, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x32, 0x31, 0x30, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x31, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32,
	0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x33, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x32, 0x31, 0x33, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x32, 0x31, 0x34, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x34, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x35,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31,
	0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x32, 0x31, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x38, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x32, 0x31, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x06, 0x53,
	0x32, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x80, 0x02, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd1, 0x05, 0x0a, 0x15, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x37, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32,
	0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x32, 0x39, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x32, 0x39, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32,
	0x31, 0x30, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x30, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x31, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x32, 0x31, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x32, 0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x32, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x33,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x33, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x34, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31,
	0x34, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x32, 0x31, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x36, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x32, 0x31, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32, 0x31, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x37, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x32,
	0x31, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x32, 0x31, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x95,
	0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe3, 0x07, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47,
	0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x28, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xd7, 0x01, 0x0a,
	0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xe1, 0x01, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x22, 0xf0, 0x01, 0x0a, 0x23, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x62, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xeb, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x28, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x4b, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb4, 0x06, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x42,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x4d, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0xc9, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xd8,
	0x01, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x56, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xbb, 0x06, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x93, 0x05, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x50, 0x50, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x70, 0x22, 0x68,
	0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x50, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x22, 0xba, 0x03, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xc2, 0x04, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x47, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x76, 0x0a, 0x17, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x22, 0xc7, 0x01,
	0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0xe3, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0xb8, 0x07, 0x0a, 0x24, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x53, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x28, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x25, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x29, 0x42, 0x75, 0x6c, 0x6b, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x8e, 0x07, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x32, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53,
	0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x32, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53,
	0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x55, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x47,
	0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x0a,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x49, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xf5, 0x01, 0x0a, 0x2c, 0x42, 0x75, 0x6c, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf5,
	0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x2d, 0x42, 0x75, 0x6c, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x6c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x85, 0x02,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x24, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x12, 0x63, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x2a, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x31, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x2b, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x70, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x29, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x42, 0x0a, 0x30, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xcb, 0x02, 0x0a, 0x2a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53,
	0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73,
	0x12, 0x6f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53,
	0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x8d, 0x02, 0x0a, 0x2b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53,
	0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x44, 0x0a, 0x32, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44,
	0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x2c, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x71, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x28, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x2f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44,
	0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x29, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x73, 0x12, 0x6e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x1f,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x37, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x36, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x36, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe3, 0x01, 0x0a, 0x23, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x24, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x37, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x36, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x36, 0x22,
	0xe6, 0x01, 0x0a, 0x2c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x26, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x38, 0x22, 0xe0, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xb7, 0x02, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x65, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xde, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x87, 0x03, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0xe9, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xd7, 0x01, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1a, 0x41, 0x64,
	0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x54,
	0x78, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x2e, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6a, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x7c, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x88,
	0x01, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x70, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x73, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32,
	0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65,
	0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65,
	0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x76,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x85, 0x01, 0x0a, 0x1a,
	0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79,
	0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x94, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x72,
	0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32,
	0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0,
	0x01, 0x0a, 0x23, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x23, 0x72, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x6d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x61, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0x6a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x20, 0x72, 0x65, 0x71, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0xa3, 0x01, 0x0a,
	0x24, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x24, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0xa3, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x24, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x28, 0x72, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x28, 0x72, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x76, 0x0a, 0x15, 0x72, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a,
	0x26, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x26, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54,
	0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0xa6, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x71,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68,
	0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x25, 0x72, 0x65, 0x71, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68,
	0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0xac, 0x01, 0x0a, 0x27, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x27, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0xa3, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44,
	0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x24, 0x72, 0x65, 0x71, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c,
	0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x94, 0x01, 0x0a, 0x1f, 0x72, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1f, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x9a, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47,
	0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x71, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x88, 0x01,
	0x0a, 0x1b, 0x72, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x71,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67,
	0x12, 0x76, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x0a, 0x0a,
	0x08, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0x7d, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1b, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x65, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x63, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x22,
	0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x73, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x18,
	0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x72,
	0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43,
	0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x77, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x86,
	0x01, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x95, 0x01, 0x0a,
	0x1f, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x23, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x23, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x5d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x6b, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1b, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x65, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x20, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x24,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x42, 0x75, 0x6c, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x24, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0xa4, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x24, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x28, 0x72, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x28, 0x72, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x77, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x75, 0x6c, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x72, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x19,
	0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x73, 0x12, 0xaa, 0x01, 0x0a, 0x26, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x26, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0xa7,
	0x01, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54,
	0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x25, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54,
	0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0xad, 0x01, 0x0a, 0x27, 0x72, 0x65, 0x73,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x27, 0x72, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54,
	0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x73,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x24, 0x72, 0x65, 0x73, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x86, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x9b, 0x01, 0x0a,
	0x21, 0x72, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47,
	0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12,
	0x77, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70,
	0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x0b,
	0x0a, 0x09, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x69, 0x0a, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55,
	0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x55, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x45, 0x4f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x48, 0x50, 0x10, 0x04, 0x2a, 0x3b, 0x0a,
	0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0d, 0x47, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x4f, 0x5f, 0x47, 0x45, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x4c, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x45, 0x48, 0x53, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0x05, 0x2a, 0x87, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x11,
	0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x10, 0x08, 0x32, 0xd1, 0x3c, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x92, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x6c, 0x6b, 0x12, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x32, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a,
	0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x32, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8c, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98,
	0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x3c, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x26, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x32,
	0x43, 0x65, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x1e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x19, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x1d, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x42, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb9, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x47,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c,
	0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32,
	0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xc8, 0x01, 0x0a, 0x27, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c,
	0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x4c,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x95, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x3b, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01,
	0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x3e, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0,
	0x01, 0x0a, 0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa1, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x12,
	0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47,
	0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xbf, 0x01, 0x0a, 0x24, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x49, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xcb, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xcb, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xd7, 0x01, 0x0a, 0x2c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x51, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a,
	0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01,
	0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x1d, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd1, 0x01, 0x0a, 0x2a, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c,
	0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xce, 0x01, 0x0a, 0x29,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44,
	0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x68, 0x73, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd4, 0x01, 0x0a,
	0x2b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x50, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x44,
	0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xcb, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x4d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54,
	0x56, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x44, 0x54, 0x56,
	0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xad, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xb0, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x48, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xc2, 0x01, 0x0a, 0x25, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x44, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x68, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x1e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12, 0x43,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x4c, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x19,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a,
	0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x42,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x07, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x33, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x42,
	0x59, 0x0a, 0x23, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x43, 0x6f, 0x72, 0x65,
	0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_LocationService_location_service_proto_rawDescOnce sync.Once
	file_LocationService_location_service_proto_rawDescData = file_LocationService_location_service_proto_rawDesc
)

func file_LocationService_location_service_proto_rawDescGZIP() []byte {
	file_LocationService_location_service_proto_rawDescOnce.Do(func() {
		file_LocationService_location_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_LocationService_location_service_proto_rawDescData)
	})
	return file_LocationService_location_service_proto_rawDescData
}

var file_LocationService_location_service_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_LocationService_location_service_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_LocationService_location_service_proto_goTypes = []interface{}{
	(Namespace)(0),                                             // 0: farm.nurture.location.service.proto.Namespace
	(Status)(0),                                                // 1: farm.nurture.location.service.proto.Status
	(Format)(0),                                                // 2: farm.nurture.location.service.proto.Format
	(Visibility)(0),                                            // 3: farm.nurture.location.service.proto.Visibility
	(GeographyType)(0),                                         // 4: farm.nurture.location.service.proto.GeographyType
	(LabelKey)(0),                                              // 5: farm.nurture.location.service.proto.LabelKey
	(InsertLocationRequest_Status)(0),                          // 6: farm.nurture.location.service.proto.InsertLocationRequest.Status
	(InsertLocationRequest_Visibility)(0),                      // 7: farm.nurture.location.service.proto.InsertLocationRequest.Visibility
	(UpdateLocationByIdRequest_Status)(0),                      // 8: farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status
	(UpdateLocationByIdRequest_Visibility)(0),                  // 9: farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility
	(InsertLocationWithoutBoundaryRequest_Status)(0),           // 10: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status
	(InsertLocationWithoutBoundaryRequest_Visibility)(0),       // 11: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility
	(UpdateLocationWithoutBoundaryByIdRequest_Status)(0),       // 12: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status
	(UpdateLocationWithoutBoundaryByIdRequest_Visibility)(0),   // 13: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility
	(*InsertLocationRequest)(nil),                              // 14: farm.nurture.location.service.proto.InsertLocationRequest
	(*BulkInsertLocationRequest)(nil),                          // 15: farm.nurture.location.service.proto.BulkInsertLocationRequest
	(*InsertLocationResponse)(nil),                             // 16: farm.nurture.location.service.proto.InsertLocationResponse
	(*BulkInsertLocationResponse)(nil),                         // 17: farm.nurture.location.service.proto.BulkInsertLocationResponse
	(*InsertLocationS2CellRequest)(nil),                        // 18: farm.nurture.location.service.proto.InsertLocationS2CellRequest
	(*BulkInsertLocationS2CellRequest)(nil),                    // 19: farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest
	(*InsertLocationS2CellResponse)(nil),                       // 20: farm.nurture.location.service.proto.InsertLocationS2CellResponse
	(*BulkInsertLocationS2CellResponse)(nil),                   // 21: farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse
	(*InsertConfigRequest)(nil),                                // 22: farm.nurture.location.service.proto.InsertConfigRequest
	(*BulkInsertConfigRequest)(nil),                            // 23: farm.nurture.location.service.proto.BulkInsertConfigRequest
	(*InsertConfigResponse)(nil),                               // 24: farm.nurture.location.service.proto.InsertConfigResponse
	(*BulkInsertConfigResponse)(nil),                           // 25: farm.nurture.location.service.proto.BulkInsertConfigResponse
	(*FetchLocationByIdRequest)(nil),                           // 26: farm.nurture.location.service.proto.FetchLocationByIdRequest
	(*LocationRecord)(nil),                                     // 27: farm.nurture.location.service.proto.LocationRecord
	(*Location)(nil),                                           // 28: farm.nurture.location.service.proto.Location
	(*FetchLocationByCodeAndNamespaceRequest)(nil),             // 29: farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest
	(*FetchS2CellByIdRequest)(nil),                             // 30: farm.nurture.location.service.proto.FetchS2CellByIdRequest
	(*S2CellRecord)(nil),                                       // 31: farm.nurture.location.service.proto.S2CellRecord
	(*S2Cell)(nil),                                             // 32: farm.nurture.location.service.proto.S2Cell
	(*FetchS2CellByLocationRequest)(nil),                       // 33: farm.nurture.location.service.proto.FetchS2CellByLocationRequest
	(*FetchS2CellByLocationIdRequest)(nil),                     // 34: farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest
	(*LocationS2CellsRecord)(nil),                              // 35: farm.nurture.location.service.proto.LocationS2CellsRecord
	(*LocationS2Cells)(nil),                                    // 36: farm.nurture.location.service.proto.LocationS2Cells
	(*UpdateLocationByIdRequest)(nil),                          // 37: farm.nurture.location.service.proto.UpdateLocationByIdRequest
	(*BulkUpdateLocationByIdRequest)(nil),                      // 38: farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest
	(*UpdateLocationByIdResponse)(nil),                         // 39: farm.nurture.location.service.proto.UpdateLocationByIdResponse
	(*BulkUpdateLocationByIdResponse)(nil),                     // 40: farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse
	(*UpdateLocationLabelByIdRequest)(nil),                     // 41: farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest
	(*BulkUpdateLocationLabelByIdRequest)(nil),                 // 42: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest
	(*UpdateLocationLabelByIdResponse)(nil),                    // 43: farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse
	(*BulkUpdateLocationLabelByIdResponse)(nil),                // 44: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse
	(*UpdateDeleteS2CellByLocationRequest)(nil),                // 45: farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest
	(*BulkUpdateDeleteS2CellByLocationRequest)(nil),            // 46: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest
	(*UpdateDeleteS2CellByLocationResponse)(nil),               // 47: farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse
	(*BulkUpdateDeleteS2CellByLocationResponse)(nil),           // 48: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse
	(*FetchConfigByIdRequest)(nil),                             // 49: farm.nurture.location.service.proto.FetchConfigByIdRequest
	(*ConfigRecord)(nil),                                       // 50: farm.nurture.location.service.proto.ConfigRecord
	(*Config)(nil),                                             // 51: farm.nurture.location.service.proto.Config
	(*AddLocationRequest)(nil),                                 // 52: farm.nurture.location.service.proto.AddLocationRequest
	(*Label)(nil),                                              // 53: farm.nurture.location.service.proto.Label
	(*BulkAddLocationRequest)(nil),                             // 54: farm.nurture.location.service.proto.BulkAddLocationRequest
	(*AddLocationResponse)(nil),                                // 55: farm.nurture.location.service.proto.AddLocationResponse
	(*BulkAddLocationResponse)(nil),                            // 56: farm.nurture.location.service.proto.BulkAddLocationResponse
	(*UpdateLocationRequest)(nil),                              // 57: farm.nurture.location.service.proto.UpdateLocationRequest
	(*BulkUpdateLocationRequest)(nil),                          // 58: farm.nurture.location.service.proto.BulkUpdateLocationRequest
	(*UpdateLocationResponse)(nil),                             // 59: farm.nurture.location.service.proto.UpdateLocationResponse
	(*BulkUpdateLocationResponse)(nil),                         // 60: farm.nurture.location.service.proto.BulkUpdateLocationResponse
	(*GetLocationsWithBoundaryRequest)(nil),                    // 61: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest
	(*LabelGroup)(nil),                                         // 62: farm.nurture.location.service.proto.LabelGroup
	(*LabelOPP)(nil),                                           // 63: farm.nurture.location.service.proto.LabelOPP
	(*GetLocationsWithBoundaryResponseRecord)(nil),             // 64: farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord
	(*GetLocationsWithBoundaryResponse)(nil),                   // 65: farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse
	(*LocationWithBoundary)(nil),                               // 66: farm.nurture.location.service.proto.LocationWithBoundary
	(*GetLocationsRequest)(nil),                                // 67: farm.nurture.location.service.proto.GetLocationsRequest
	(*GetLocationsResponseRecord)(nil),                         // 68: farm.nurture.location.service.proto.GetLocationsResponseRecord
	(*GetLocationsResponse)(nil),                               // 69: farm.nurture.location.service.proto.GetLocationsResponse
	(*LocationWithoutBoundary)(nil),                            // 70: farm.nurture.location.service.proto.LocationWithoutBoundary
	(*GeographyDataType)(nil),                                  // 71: farm.nurture.location.service.proto.GeographyDataType
	(*BulkGeographyDataType)(nil),                              // 72: farm.nurture.location.service.proto.BulkGeographyDataType
	(*GeographyTypeMessageResponse)(nil),                       // 73: farm.nurture.location.service.proto.GeographyTypeMessageResponse
	(*BulkGeographyTypeMessageResponse)(nil),                   // 74: farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse
	(*GetChildGeographiesRequest)(nil),                         // 75: farm.nurture.location.service.proto.GetChildGeographiesRequest
	(*GetChildGeographiesResponseRecord)(nil),                  // 76: farm.nurture.location.service.proto.GetChildGeographiesResponseRecord
	(*GetChildGeographiesResponse)(nil),                        // 77: farm.nurture.location.service.proto.GetChildGeographiesResponse
	(*InsertLocationWithoutBoundaryRequest)(nil),               // 78: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest
	(*BulkInsertLocationWithoutBoundaryRequest)(nil),           // 79: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest
	(*InsertLocationWithoutBoundaryResponse)(nil),              // 80: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse
	(*BulkInsertLocationWithoutBoundaryResponse)(nil),          // 81: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse
	(*UpdateLocationWithoutBoundaryByIdRequest)(nil),           // 82: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest
	(*BulkUpdateLocationWithoutBoundaryByIdRequest)(nil),       // 83: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest
	(*UpdateLocationWithoutBoundaryByIdResponse)(nil),          // 84: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse
	(*BulkUpdateLocationWithoutBoundaryByIdResponse)(nil),      // 85: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse
	(*DeleteLocationByIdRequest)(nil),                          // 86: farm.nurture.location.service.proto.DeleteLocationByIdRequest
	(*BulkDeleteLocationByIdRequest)(nil),                      // 87: farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest
	(*DeleteLocationByIdResponse)(nil),                         // 88: farm.nurture.location.service.proto.DeleteLocationByIdResponse
	(*BulkDeleteLocationByIdResponse)(nil),                     // 89: farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse
	(*FetchDuplicateVillagesRequest)(nil),                      // 90: farm.nurture.location.service.proto.FetchDuplicateVillagesRequest
	(*FetchDuplicateVillagesResponseRecord)(nil),               // 91: farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord
	(*FetchDuplicateVillagesResponse)(nil),                     // 92: farm.nurture.location.service.proto.FetchDuplicateVillagesResponse
	(*FetchDuplicateVillagesBySDTVLatLongRequest)(nil),         // 93: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest
	(*FetchDuplicateVillagesBySDTVLatLongResponseRecord)(nil),  // 94: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord
	(*FetchDuplicateVillagesBySDTVLatLongResponse)(nil),        // 95: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse
	(*FetchDuplicateTehsilsBySDTVLatLongRequest)(nil),          // 96: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest
	(*FetchDuplicateTehsilsBySDTVLatLongResponseRecord)(nil),   // 97: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord
	(*FetchDuplicateTehsilsBySDTVLatLongResponse)(nil),         // 98: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse
	(*FetchDuplicateDistrictsBySDTVLatLongRequest)(nil),        // 99: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest
	(*FetchDuplicateDistrictsBySDTVLatLongResponseRecord)(nil), // 100: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord
	(*FetchDuplicateDistrictsBySDTVLatLongResponse)(nil),       // 101: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse
	(*FetchDuplicateStatesBySDTVLatLongRequest)(nil),           // 102: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest
	(*FetchDuplicateStatesBySDTVLatLongResponseRecord)(nil),    // 103: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord
	(*FetchDuplicateStatesBySDTVLatLongResponse)(nil),          // 104: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse
	(*GetDuplicateGeographiesRequest)(nil),                     // 105: farm.nurture.location.service.proto.GetDuplicateGeographiesRequest
	(*GetDuplicateGeographiesResponseRecord)(nil),              // 106: farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord
	(*GetDuplicateGeographiesResponse)(nil),                    // 107: farm.nurture.location.service.proto.GetDuplicateGeographiesResponse
	(*InsertVendorLocationDataRequest)(nil),                    // 108: farm.nurture.location.service.proto.InsertVendorLocationDataRequest
	(*BulkInsertVendorLocationDataRequest)(nil),                // 109: farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest
	(*InsertVendorLocationDataResponse)(nil),                   // 110: farm.nurture.location.service.proto.InsertVendorLocationDataResponse
	(*BulkInsertVendorLocationDataResponse)(nil),               // 111: farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse
	(*SearchVendorLocationsByGeohashRequest)(nil),              // 112: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest
	(*SearchVendorLocationsByGeohashResponseRecord)(nil),       // 113: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord
	(*SearchVendorLocationsByGeohashResponse)(nil),             // 114: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse
	(*SearchLocationsByGeohashRequest)(nil),                    // 115: farm.nurture.location.service.proto.SearchLocationsByGeohashRequest
	(*SearchLocationsByGeohashResponseRecord)(nil),             // 116: farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord
	(*SearchLocationsByGeohashResponse)(nil),                   // 117: farm.nurture.location.service.proto.SearchLocationsByGeohashResponse
	(*GetLocationDataByLatLngRequest)(nil),                     // 118: farm.nurture.location.service.proto.GetLocationDataByLatLngRequest
	(*GetLocationDataByLatLngResponseRecord)(nil),              // 119: farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord
	(*GetLocationDataByLatLngResponse)(nil),                    // 120: farm.nurture.location.service.proto.GetLocationDataByLatLngResponse
	(*AddVendorApiLedgerRequest)(nil),                          // 121: farm.nurture.location.service.proto.AddVendorApiLedgerRequest
	(*BulkAddVendorApiLedgerRequest)(nil),                      // 122: farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest
	(*AddVendorApiLedgerResponse)(nil),                         // 123: farm.nurture.location.service.proto.AddVendorApiLedgerResponse
	(*BulkAddVendorApiLedgerResponse)(nil),                     // 124: farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse
	(*MultiRequests)(nil),                                      // 125: farm.nurture.location.service.proto.MultiRequests
	(*Request)(nil),                                            // 126: farm.nurture.location.service.proto.Request
	(*MultiResponses)(nil),                                     // 127: farm.nurture.location.service.proto.MultiResponses
	(*Response)(nil),                                           // 128: farm.nurture.location.service.proto.Response
	(*GoCommon.RequestHeaders)(nil),                            // 129: farm.nurture.core.contracts.common.RequestHeaders
	(*GoCommon.RequestStatusResult)(nil),                       // 130: farm.nurture.core.contracts.common.RequestStatusResult
	(*GoCommon.Attribs)(nil),                                   // 131: farm.nurture.core.contracts.common.Attribs
}
var file_LocationService_location_service_proto_depIdxs = []int32{
	129, // 0: farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	6,   // 1: farm.nurture.location.service.proto.InsertLocationRequest.status:type_name -> farm.nurture.location.service.proto.InsertLocationRequest.Status
	7,   // 2: farm.nurture.location.service.proto.InsertLocationRequest.visibility:type_name -> farm.nurture.location.service.proto.InsertLocationRequest.Visibility
	129, // 3: farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	14,  // 4: farm.nurture.location.service.proto.BulkInsertLocationRequest.requests:type_name -> farm.nurture.location.service.proto.InsertLocationRequest
	130, // 5: farm.nurture.location.service.proto.InsertLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 6: farm.nurture.location.service.proto.InsertLocationResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 7: farm.nurture.location.service.proto.BulkInsertLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	16,  // 8: farm.nurture.location.service.proto.BulkInsertLocationResponse.responses:type_name -> farm.nurture.location.service.proto.InsertLocationResponse
	129, // 9: farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 10: farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	18,  // 11: farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests:type_name -> farm.nurture.location.service.proto.InsertLocationS2CellRequest
	130, // 12: farm.nurture.location.service.proto.InsertLocationS2CellResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 13: farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 14: farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	20,  // 15: farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses:type_name -> farm.nurture.location.service.proto.InsertLocationS2CellResponse
	129, // 16: farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 17: farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	22,  // 18: farm.nurture.location.service.proto.BulkInsertConfigRequest.requests:type_name -> farm.nurture.location.service.proto.InsertConfigRequest
	130, // 19: farm.nurture.location.service.proto.InsertConfigResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 20: farm.nurture.location.service.proto.InsertConfigResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 21: farm.nurture.location.service.proto.BulkInsertConfigResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	24,  // 22: farm.nurture.location.service.proto.BulkInsertConfigResponse.responses:type_name -> farm.nurture.location.service.proto.InsertConfigResponse
	129, // 23: farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 24: farm.nurture.location.service.proto.Location.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 25: farm.nurture.location.service.proto.Location.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	27,  // 26: farm.nurture.location.service.proto.Location.records:type_name -> farm.nurture.location.service.proto.LocationRecord
	129, // 27: farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 28: farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 29: farm.nurture.location.service.proto.S2Cell.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 30: farm.nurture.location.service.proto.S2Cell.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	31,  // 31: farm.nurture.location.service.proto.S2Cell.records:type_name -> farm.nurture.location.service.proto.S2CellRecord
	129, // 32: farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 33: farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 34: farm.nurture.location.service.proto.LocationS2Cells.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 35: farm.nurture.location.service.proto.LocationS2Cells.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	35,  // 36: farm.nurture.location.service.proto.LocationS2Cells.records:type_name -> farm.nurture.location.service.proto.LocationS2CellsRecord
	129, // 37: farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	8,   // 38: farm.nurture.location.service.proto.UpdateLocationByIdRequest.status:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status
	9,   // 39: farm.nurture.location.service.proto.UpdateLocationByIdRequest.visibility:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility
	129, // 40: farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	37,  // 41: farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdRequest
	130, // 42: farm.nurture.location.service.proto.UpdateLocationByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 43: farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 44: farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	39,  // 45: farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdResponse
	129, // 46: farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 47: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	41,  // 48: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests:type_name -> farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest
	130, // 49: farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 50: farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 51: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	43,  // 52: farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses:type_name -> farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse
	129, // 53: farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 54: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	45,  // 55: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests:type_name -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest
	130, // 56: farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 57: farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 58: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	47,  // 59: farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses:type_name -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse
	129, // 60: farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 61: farm.nurture.location.service.proto.Config.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 62: farm.nurture.location.service.proto.Config.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	50,  // 63: farm.nurture.location.service.proto.Config.records:type_name -> farm.nurture.location.service.proto.ConfigRecord
	129, // 64: farm.nurture.location.service.proto.AddLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	2,   // 65: farm.nurture.location.service.proto.AddLocationRequest.format:type_name -> farm.nurture.location.service.proto.Format
	53,  // 66: farm.nurture.location.service.proto.AddLocationRequest.labels:type_name -> farm.nurture.location.service.proto.Label
	1,   // 67: farm.nurture.location.service.proto.AddLocationRequest.status:type_name -> farm.nurture.location.service.proto.Status
	3,   // 68: farm.nurture.location.service.proto.AddLocationRequest.visibility:type_name -> farm.nurture.location.service.proto.Visibility
	129, // 69: farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	52,  // 70: farm.nurture.location.service.proto.BulkAddLocationRequest.requests:type_name -> farm.nurture.location.service.proto.AddLocationRequest
	130, // 71: farm.nurture.location.service.proto.AddLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 72: farm.nurture.location.service.proto.AddLocationResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 73: farm.nurture.location.service.proto.BulkAddLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	55,  // 74: farm.nurture.location.service.proto.BulkAddLocationResponse.responses:type_name -> farm.nurture.location.service.proto.AddLocationResponse
	129, // 75: farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	2,   // 76: farm.nurture.location.service.proto.UpdateLocationRequest.format:type_name -> farm.nurture.location.service.proto.Format
	53,  // 77: farm.nurture.location.service.proto.UpdateLocationRequest.labels:type_name -> farm.nurture.location.service.proto.Label
	1,   // 78: farm.nurture.location.service.proto.UpdateLocationRequest.status:type_name -> farm.nurture.location.service.proto.Status
	3,   // 79: farm.nurture.location.service.proto.UpdateLocationRequest.visibility:type_name -> farm.nurture.location.service.proto.Visibility
	129, // 80: farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	57,  // 81: farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests:type_name -> farm.nurture.location.service.proto.UpdateLocationRequest
	130, // 82: farm.nurture.location.service.proto.UpdateLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 83: farm.nurture.location.service.proto.UpdateLocationResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 84: farm.nurture.location.service.proto.BulkUpdateLocationResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	59,  // 85: farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses:type_name -> farm.nurture.location.service.proto.UpdateLocationResponse
	129, // 86: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	2,   // 87: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.format:type_name -> farm.nurture.location.service.proto.Format
	62,  // 88: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels:type_name -> farm.nurture.location.service.proto.LabelGroup
	1,   // 89: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.status:type_name -> farm.nurture.location.service.proto.Status
	2,   // 90: farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.polygonFormat:type_name -> farm.nurture.location.service.proto.Format
	63,  // 91: farm.nurture.location.service.proto.LabelGroup.labelOpp:type_name -> farm.nurture.location.service.proto.LabelOPP
	53,  // 92: farm.nurture.location.service.proto.LabelOPP.label:type_name -> farm.nurture.location.service.proto.Label
	130, // 93: farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 94: farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	66,  // 95: farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary:type_name -> farm.nurture.location.service.proto.LocationWithBoundary
	2,   // 96: farm.nurture.location.service.proto.LocationWithBoundary.format:type_name -> farm.nurture.location.service.proto.Format
	53,  // 97: farm.nurture.location.service.proto.LocationWithBoundary.labels:type_name -> farm.nurture.location.service.proto.Label
	1,   // 98: farm.nurture.location.service.proto.LocationWithBoundary.locationStatus:type_name -> farm.nurture.location.service.proto.Status
	129, // 99: farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	62,  // 100: farm.nurture.location.service.proto.GetLocationsRequest.labels:type_name -> farm.nurture.location.service.proto.LabelGroup
	1,   // 101: farm.nurture.location.service.proto.GetLocationsRequest.status:type_name -> farm.nurture.location.service.proto.Status
	2,   // 102: farm.nurture.location.service.proto.GetLocationsRequest.polygonFormat:type_name -> farm.nurture.location.service.proto.Format
	130, // 103: farm.nurture.location.service.proto.GetLocationsResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 104: farm.nurture.location.service.proto.GetLocationsResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	70,  // 105: farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary:type_name -> farm.nurture.location.service.proto.LocationWithoutBoundary
	53,  // 106: farm.nurture.location.service.proto.LocationWithoutBoundary.labels:type_name -> farm.nurture.location.service.proto.Label
	1,   // 107: farm.nurture.location.service.proto.LocationWithoutBoundary.locationStatus:type_name -> farm.nurture.location.service.proto.Status
	129, // 108: farm.nurture.location.service.proto.GeographyDataType.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	4,   // 109: farm.nurture.location.service.proto.GeographyDataType.geoType:type_name -> farm.nurture.location.service.proto.GeographyType
	5,   // 110: farm.nurture.location.service.proto.GeographyDataType.labelKey:type_name -> farm.nurture.location.service.proto.LabelKey
	129, // 111: farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	71,  // 112: farm.nurture.location.service.proto.BulkGeographyDataType.requests:type_name -> farm.nurture.location.service.proto.GeographyDataType
	130, // 113: farm.nurture.location.service.proto.GeographyTypeMessageResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 114: farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 115: farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	73,  // 116: farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses:type_name -> farm.nurture.location.service.proto.GeographyTypeMessageResponse
	129, // 117: farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	2,   // 118: farm.nurture.location.service.proto.GetChildGeographiesRequest.format:type_name -> farm.nurture.location.service.proto.Format
	130, // 119: farm.nurture.location.service.proto.GetChildGeographiesResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 120: farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	66,  // 121: farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary:type_name -> farm.nurture.location.service.proto.LocationWithBoundary
	129, // 122: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	10,  // 123: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.status:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status
	11,  // 124: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.visibility:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility
	129, // 125: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	78,  // 126: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest
	130, // 127: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 128: farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 129: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	80,  // 130: farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse
	129, // 131: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	12,  // 132: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.status:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status
	13,  // 133: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.visibility:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility
	129, // 134: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	82,  // 135: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest
	130, // 136: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 137: farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 138: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	84,  // 139: farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse
	129, // 140: farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 141: farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	86,  // 142: farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests:type_name -> farm.nurture.location.service.proto.DeleteLocationByIdRequest
	130, // 143: farm.nurture.location.service.proto.DeleteLocationByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 144: farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 145: farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	88,  // 146: farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses:type_name -> farm.nurture.location.service.proto.DeleteLocationByIdResponse
	129, // 147: farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 148: farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 149: farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	91,  // 150: farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord
	129, // 151: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 152: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 153: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	94,  // 154: farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord
	129, // 155: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 156: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 157: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	97,  // 158: farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records:type_name -> farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord
	129, // 159: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 160: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 161: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	100, // 162: farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records:type_name -> farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord
	129, // 163: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 164: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 165: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	103, // 166: farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records:type_name -> farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord
	129, // 167: farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	4,   // 168: farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.geoType:type_name -> farm.nurture.location.service.proto.GeographyType
	130, // 169: farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 170: farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	129, // 171: farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 172: farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	108, // 173: farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests:type_name -> farm.nurture.location.service.proto.InsertVendorLocationDataRequest
	130, // 174: farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 175: farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 176: farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	110, // 177: farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses:type_name -> farm.nurture.location.service.proto.InsertVendorLocationDataResponse
	129, // 178: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 179: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 180: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	113, // 181: farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records:type_name -> farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord
	129, // 182: farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 183: farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 184: farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	116, // 185: farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records:type_name -> farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord
	129, // 186: farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	130, // 187: farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 188: farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	129, // 189: farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	129, // 190: farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders:type_name -> farm.nurture.core.contracts.common.RequestHeaders
	121, // 191: farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests:type_name -> farm.nurture.location.service.proto.AddVendorApiLedgerRequest
	130, // 192: farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	131, // 193: farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs:type_name -> farm.nurture.core.contracts.common.Attribs
	130, // 194: farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	123, // 195: farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses:type_name -> farm.nurture.location.service.proto.AddVendorApiLedgerResponse
	126, // 196: farm.nurture.location.service.proto.MultiRequests.request:type_name -> farm.nurture.location.service.proto.Request
	14,  // 197: farm.nurture.location.service.proto.Request.reqInsertLocation:type_name -> farm.nurture.location.service.proto.InsertLocationRequest
	15,  // 198: farm.nurture.location.service.proto.Request.reqInsertLocationBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationRequest
	18,  // 199: farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell:type_name -> farm.nurture.location.service.proto.InsertLocationS2CellRequest
	19,  // 200: farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest
	22,  // 201: farm.nurture.location.service.proto.Request.reqInsertConfig:type_name -> farm.nurture.location.service.proto.InsertConfigRequest
	23,  // 202: farm.nurture.location.service.proto.Request.reqInsertConfigBulk:type_name -> farm.nurture.location.service.proto.BulkInsertConfigRequest
	26,  // 203: farm.nurture.location.service.proto.Request.reqFetchLocationById:type_name -> farm.nurture.location.service.proto.FetchLocationByIdRequest
	29,  // 204: farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace:type_name -> farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest
	30,  // 205: farm.nurture.location.service.proto.Request.reqFetchS2CellById:type_name -> farm.nurture.location.service.proto.FetchS2CellByIdRequest
	33,  // 206: farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation:type_name -> farm.nurture.location.service.proto.FetchS2CellByLocationRequest
	34,  // 207: farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId:type_name -> farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest
	37,  // 208: farm.nurture.location.service.proto.Request.reqUpdateLocationById:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdRequest
	38,  // 209: farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest
	41,  // 210: farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById:type_name -> farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest
	42,  // 211: farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest
	45,  // 212: farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation:type_name -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest
	46,  // 213: farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest
	49,  // 214: farm.nurture.location.service.proto.Request.reqFetchConfigById:type_name -> farm.nurture.location.service.proto.FetchConfigByIdRequest
	52,  // 215: farm.nurture.location.service.proto.Request.reqAddLocation:type_name -> farm.nurture.location.service.proto.AddLocationRequest
	54,  // 216: farm.nurture.location.service.proto.Request.reqAddLocationBulk:type_name -> farm.nurture.location.service.proto.BulkAddLocationRequest
	57,  // 217: farm.nurture.location.service.proto.Request.reqUpdateLocation:type_name -> farm.nurture.location.service.proto.UpdateLocationRequest
	58,  // 218: farm.nurture.location.service.proto.Request.reqUpdateLocationBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationRequest
	61,  // 219: farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary:type_name -> farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest
	67,  // 220: farm.nurture.location.service.proto.Request.reqGetLocations:type_name -> farm.nurture.location.service.proto.GetLocationsRequest
	75,  // 221: farm.nurture.location.service.proto.Request.reqGetChildGeographies:type_name -> farm.nurture.location.service.proto.GetChildGeographiesRequest
	78,  // 222: farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest
	79,  // 223: farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest
	82,  // 224: farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest
	83,  // 225: farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest
	86,  // 226: farm.nurture.location.service.proto.Request.reqDeleteLocationById:type_name -> farm.nurture.location.service.proto.DeleteLocationByIdRequest
	87,  // 227: farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk:type_name -> farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest
	90,  // 228: farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesRequest
	93,  // 229: farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest
	96,  // 230: farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest
	99,  // 231: farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest
	102, // 232: farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest
	105, // 233: farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies:type_name -> farm.nurture.location.service.proto.GetDuplicateGeographiesRequest
	108, // 234: farm.nurture.location.service.proto.Request.reqInsertVendorLocationData:type_name -> farm.nurture.location.service.proto.InsertVendorLocationDataRequest
	109, // 235: farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk:type_name -> farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest
	112, // 236: farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash:type_name -> farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest
	115, // 237: farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash:type_name -> farm.nurture.location.service.proto.SearchLocationsByGeohashRequest
	118, // 238: farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng:type_name -> farm.nurture.location.service.proto.GetLocationDataByLatLngRequest
	121, // 239: farm.nurture.location.service.proto.Request.reqAddVendorApiLedger:type_name -> farm.nurture.location.service.proto.AddVendorApiLedgerRequest
	122, // 240: farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk:type_name -> farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest
	130, // 241: farm.nurture.location.service.proto.MultiResponses.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	128, // 242: farm.nurture.location.service.proto.MultiResponses.response:type_name -> farm.nurture.location.service.proto.Response
	130, // 243: farm.nurture.location.service.proto.Response.status:type_name -> farm.nurture.core.contracts.common.RequestStatusResult
	16,  // 244: farm.nurture.location.service.proto.Response.resInsertLocation:type_name -> farm.nurture.location.service.proto.InsertLocationResponse
	17,  // 245: farm.nurture.location.service.proto.Response.resInsertLocationBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationResponse
	20,  // 246: farm.nurture.location.service.proto.Response.resInsertLocationS2Cell:type_name -> farm.nurture.location.service.proto.InsertLocationS2CellResponse
	21,  // 247: farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse
	24,  // 248: farm.nurture.location.service.proto.Response.resInsertConfig:type_name -> farm.nurture.location.service.proto.InsertConfigResponse
	25,  // 249: farm.nurture.location.service.proto.Response.resInsertConfigBulk:type_name -> farm.nurture.location.service.proto.BulkInsertConfigResponse
	28,  // 250: farm.nurture.location.service.proto.Response.resFetchLocationById:type_name -> farm.nurture.location.service.proto.Location
	28,  // 251: farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace:type_name -> farm.nurture.location.service.proto.Location
	32,  // 252: farm.nurture.location.service.proto.Response.resFetchS2CellById:type_name -> farm.nurture.location.service.proto.S2Cell
	32,  // 253: farm.nurture.location.service.proto.Response.resFetchS2CellByLocation:type_name -> farm.nurture.location.service.proto.S2Cell
	36,  // 254: farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId:type_name -> farm.nurture.location.service.proto.LocationS2Cells
	39,  // 255: farm.nurture.location.service.proto.Response.resUpdateLocationById:type_name -> farm.nurture.location.service.proto.UpdateLocationByIdResponse
	40,  // 256: farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse
	43,  // 257: farm.nurture.location.service.proto.Response.resUpdateLocationLabelById:type_name -> farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse
	44,  // 258: farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse
	47,  // 259: farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation:type_name -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse
	48,  // 260: farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse
	51,  // 261: farm.nurture.location.service.proto.Response.resFetchConfigById:type_name -> farm.nurture.location.service.proto.Config
	55,  // 262: farm.nurture.location.service.proto.Response.resAddLocation:type_name -> farm.nurture.location.service.proto.AddLocationResponse
	56,  // 263: farm.nurture.location.service.proto.Response.resAddLocationBulk:type_name -> farm.nurture.location.service.proto.BulkAddLocationResponse
	59,  // 264: farm.nurture.location.service.proto.Response.resUpdateLocation:type_name -> farm.nurture.location.service.proto.UpdateLocationResponse
	60,  // 265: farm.nurture.location.service.proto.Response.resUpdateLocationBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationResponse
	65,  // 266: farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary:type_name -> farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse
	69,  // 267: farm.nurture.location.service.proto.Response.resGetLocations:type_name -> farm.nurture.location.service.proto.GetLocationsResponse
	77,  // 268: farm.nurture.location.service.proto.Response.resGetChildGeographies:type_name -> farm.nurture.location.service.proto.GetChildGeographiesResponse
	80,  // 269: farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary:type_name -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse
	81,  // 270: farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk:type_name -> farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse
	84,  // 271: farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById:type_name -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse
	85,  // 272: farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk:type_name -> farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse
	88,  // 273: farm.nurture.location.service.proto.Response.resDeleteLocationById:type_name -> farm.nurture.location.service.proto.DeleteLocationByIdResponse
	89,  // 274: farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk:type_name -> farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse
	92,  // 275: farm.nurture.location.service.proto.Response.resFetchDuplicateVillages:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesResponse
	95,  // 276: farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse
	98,  // 277: farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse
	101, // 278: farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse
	104, // 279: farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong:type_name -> farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse
	107, // 280: farm.nurture.location.service.proto.Response.resGetDuplicateGeographies:type_name -> farm.nurture.location.service.proto.GetDuplicateGeographiesResponse
	110, // 281: farm.nurture.location.service.proto.Response.resInsertVendorLocationData:type_name -> farm.nurture.location.service.proto.InsertVendorLocationDataResponse
	111, // 282: farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk:type_name -> farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse
	114, // 283: farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash:type_name -> farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse
	117, // 284: farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash:type_name -> farm.nurture.location.service.proto.SearchLocationsByGeohashResponse
	120, // 285: farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng:type_name -> farm.nurture.location.service.proto.GetLocationDataByLatLngResponse
	123, // 286: farm.nurture.location.service.proto.Response.resAddVendorApiLedger:type_name -> farm.nurture.location.service.proto.AddVendorApiLedgerResponse
	124, // 287: farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk:type_name -> farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse
	14,  // 288: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocation:input_type -> farm.nurture.location.service.proto.InsertLocationRequest
	15,  // 289: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationBulk:input_type -> farm.nurture.location.service.proto.BulkInsertLocationRequest
	18,  // 290: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationS2Cell:input_type -> farm.nurture.location.service.proto.InsertLocationS2CellRequest
	19,  // 291: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationS2CellBulk:input_type -> farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest
	22,  // 292: farm.nurture.location.service.proto.LocationService.ExecuteInsertConfig:input_type -> farm.nurture.location.service.proto.InsertConfigRequest
	23,  // 293: farm.nurture.location.service.proto.LocationService.ExecuteInsertConfigBulk:input_type -> farm.nurture.location.service.proto.BulkInsertConfigRequest
	26,  // 294: farm.nurture.location.service.proto.LocationService.ExecuteFetchLocationById:input_type -> farm.nurture.location.service.proto.FetchLocationByIdRequest
	29,  // 295: farm.nurture.location.service.proto.LocationService.ExecuteFetchLocationByCodeAndNamespace:input_type -> farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest
	30,  // 296: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellById:input_type -> farm.nurture.location.service.proto.FetchS2CellByIdRequest
	33,  // 297: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellByLocation:input_type -> farm.nurture.location.service.proto.FetchS2CellByLocationRequest
	34,  // 298: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellByLocationId:input_type -> farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest
	37,  // 299: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationById:input_type -> farm.nurture.location.service.proto.UpdateLocationByIdRequest
	38,  // 300: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationByIdBulk:input_type -> farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest
	41,  // 301: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationLabelById:input_type -> farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest
	42,  // 302: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationLabelByIdBulk:input_type -> farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest
	45,  // 303: farm.nurture.location.service.proto.LocationService.ExecuteUpdateDeleteS2CellByLocation:input_type -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest
	46,  // 304: farm.nurture.location.service.proto.LocationService.ExecuteUpdateDeleteS2CellByLocationBulk:input_type -> farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest
	49,  // 305: farm.nurture.location.service.proto.LocationService.ExecuteFetchConfigById:input_type -> farm.nurture.location.service.proto.FetchConfigByIdRequest
	52,  // 306: farm.nurture.location.service.proto.LocationService.ExecuteAddLocation:input_type -> farm.nurture.location.service.proto.AddLocationRequest
	54,  // 307: farm.nurture.location.service.proto.LocationService.ExecuteAddLocationBulk:input_type -> farm.nurture.location.service.proto.BulkAddLocationRequest
	57,  // 308: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocation:input_type -> farm.nurture.location.service.proto.UpdateLocationRequest
	58,  // 309: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationBulk:input_type -> farm.nurture.location.service.proto.BulkUpdateLocationRequest
	61,  // 310: farm.nurture.location.service.proto.LocationService.ExecuteGetLocationsWithBoundary:input_type -> farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest
	67,  // 311: farm.nurture.location.service.proto.LocationService.ExecuteGetLocations:input_type -> farm.nurture.location.service.proto.GetLocationsRequest
	75,  // 312: farm.nurture.location.service.proto.LocationService.ExecuteGetChildGeographies:input_type -> farm.nurture.location.service.proto.GetChildGeographiesRequest
	78,  // 313: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationWithoutBoundary:input_type -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest
	79,  // 314: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationWithoutBoundaryBulk:input_type -> farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest
	82,  // 315: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationWithoutBoundaryById:input_type -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest
	83,  // 316: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationWithoutBoundaryByIdBulk:input_type -> farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest
	86,  // 317: farm.nurture.location.service.proto.LocationService.ExecuteDeleteLocationById:input_type -> farm.nurture.location.service.proto.DeleteLocationByIdRequest
	87,  // 318: farm.nurture.location.service.proto.LocationService.ExecuteDeleteLocationByIdBulk:input_type -> farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest
	90,  // 319: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateVillages:input_type -> farm.nurture.location.service.proto.FetchDuplicateVillagesRequest
	93,  // 320: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateVillagesBySDTVLatLong:input_type -> farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest
	96,  // 321: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateTehsilsBySDTVLatLong:input_type -> farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest
	99,  // 322: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateDistrictsBySDTVLatLong:input_type -> farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest
	102, // 323: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateStatesBySDTVLatLong:input_type -> farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest
	105, // 324: farm.nurture.location.service.proto.LocationService.ExecuteGetDuplicateGeographies:input_type -> farm.nurture.location.service.proto.GetDuplicateGeographiesRequest
	108, // 325: farm.nurture.location.service.proto.LocationService.ExecuteInsertVendorLocationData:input_type -> farm.nurture.location.service.proto.InsertVendorLocationDataRequest
	109, // 326: farm.nurture.location.service.proto.LocationService.ExecuteInsertVendorLocationDataBulk:input_type -> farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest
	112, // 327: farm.nurture.location.service.proto.LocationService.ExecuteSearchVendorLocationsByGeohash:input_type -> farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest
	115, // 328: farm.nurture.location.service.proto.LocationService.ExecuteSearchLocationsByGeohash:input_type -> farm.nurture.location.service.proto.SearchLocationsByGeohashRequest
	118, // 329: farm.nurture.location.service.proto.LocationService.ExecuteGetLocationDataByLatLng:input_type -> farm.nurture.location.service.proto.GetLocationDataByLatLngRequest
	121, // 330: farm.nurture.location.service.proto.LocationService.ExecuteAddVendorApiLedger:input_type -> farm.nurture.location.service.proto.AddVendorApiLedgerRequest
	122, // 331: farm.nurture.location.service.proto.LocationService.ExecuteAddVendorApiLedgerBulk:input_type -> farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest
	125, // 332: farm.nurture.location.service.proto.LocationService.Execute:input_type -> farm.nurture.location.service.proto.MultiRequests
	16,  // 333: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocation:output_type -> farm.nurture.location.service.proto.InsertLocationResponse
	17,  // 334: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationBulk:output_type -> farm.nurture.location.service.proto.BulkInsertLocationResponse
	20,  // 335: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationS2Cell:output_type -> farm.nurture.location.service.proto.InsertLocationS2CellResponse
	21,  // 336: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationS2CellBulk:output_type -> farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse
	24,  // 337: farm.nurture.location.service.proto.LocationService.ExecuteInsertConfig:output_type -> farm.nurture.location.service.proto.InsertConfigResponse
	25,  // 338: farm.nurture.location.service.proto.LocationService.ExecuteInsertConfigBulk:output_type -> farm.nurture.location.service.proto.BulkInsertConfigResponse
	28,  // 339: farm.nurture.location.service.proto.LocationService.ExecuteFetchLocationById:output_type -> farm.nurture.location.service.proto.Location
	28,  // 340: farm.nurture.location.service.proto.LocationService.ExecuteFetchLocationByCodeAndNamespace:output_type -> farm.nurture.location.service.proto.Location
	32,  // 341: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellById:output_type -> farm.nurture.location.service.proto.S2Cell
	32,  // 342: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellByLocation:output_type -> farm.nurture.location.service.proto.S2Cell
	36,  // 343: farm.nurture.location.service.proto.LocationService.ExecuteFetchS2CellByLocationId:output_type -> farm.nurture.location.service.proto.LocationS2Cells
	39,  // 344: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationById:output_type -> farm.nurture.location.service.proto.UpdateLocationByIdResponse
	40,  // 345: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationByIdBulk:output_type -> farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse
	43,  // 346: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationLabelById:output_type -> farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse
	44,  // 347: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationLabelByIdBulk:output_type -> farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse
	47,  // 348: farm.nurture.location.service.proto.LocationService.ExecuteUpdateDeleteS2CellByLocation:output_type -> farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse
	48,  // 349: farm.nurture.location.service.proto.LocationService.ExecuteUpdateDeleteS2CellByLocationBulk:output_type -> farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse
	51,  // 350: farm.nurture.location.service.proto.LocationService.ExecuteFetchConfigById:output_type -> farm.nurture.location.service.proto.Config
	55,  // 351: farm.nurture.location.service.proto.LocationService.ExecuteAddLocation:output_type -> farm.nurture.location.service.proto.AddLocationResponse
	56,  // 352: farm.nurture.location.service.proto.LocationService.ExecuteAddLocationBulk:output_type -> farm.nurture.location.service.proto.BulkAddLocationResponse
	59,  // 353: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocation:output_type -> farm.nurture.location.service.proto.UpdateLocationResponse
	60,  // 354: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationBulk:output_type -> farm.nurture.location.service.proto.BulkUpdateLocationResponse
	65,  // 355: farm.nurture.location.service.proto.LocationService.ExecuteGetLocationsWithBoundary:output_type -> farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse
	69,  // 356: farm.nurture.location.service.proto.LocationService.ExecuteGetLocations:output_type -> farm.nurture.location.service.proto.GetLocationsResponse
	77,  // 357: farm.nurture.location.service.proto.LocationService.ExecuteGetChildGeographies:output_type -> farm.nurture.location.service.proto.GetChildGeographiesResponse
	80,  // 358: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationWithoutBoundary:output_type -> farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse
	81,  // 359: farm.nurture.location.service.proto.LocationService.ExecuteInsertLocationWithoutBoundaryBulk:output_type -> farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse
	84,  // 360: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationWithoutBoundaryById:output_type -> farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse
	85,  // 361: farm.nurture.location.service.proto.LocationService.ExecuteUpdateLocationWithoutBoundaryByIdBulk:output_type -> farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse
	88,  // 362: farm.nurture.location.service.proto.LocationService.ExecuteDeleteLocationById:output_type -> farm.nurture.location.service.proto.DeleteLocationByIdResponse
	89,  // 363: farm.nurture.location.service.proto.LocationService.ExecuteDeleteLocationByIdBulk:output_type -> farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse
	92,  // 364: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateVillages:output_type -> farm.nurture.location.service.proto.FetchDuplicateVillagesResponse
	95,  // 365: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateVillagesBySDTVLatLong:output_type -> farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse
	98,  // 366: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateTehsilsBySDTVLatLong:output_type -> farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse
	101, // 367: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateDistrictsBySDTVLatLong:output_type -> farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse
	104, // 368: farm.nurture.location.service.proto.LocationService.ExecuteFetchDuplicateStatesBySDTVLatLong:output_type -> farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse
	107, // 369: farm.nurture.location.service.proto.LocationService.ExecuteGetDuplicateGeographies:output_type -> farm.nurture.location.service.proto.GetDuplicateGeographiesResponse
	110, // 370: farm.nurture.location.service.proto.LocationService.ExecuteInsertVendorLocationData:output_type -> farm.nurture.location.service.proto.InsertVendorLocationDataResponse
	111, // 371: farm.nurture.location.service.proto.LocationService.ExecuteInsertVendorLocationDataBulk:output_type -> farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse
	114, // 372: farm.nurture.location.service.proto.LocationService.ExecuteSearchVendorLocationsByGeohash:output_type -> farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse
	117, // 373: farm.nurture.location.service.proto.LocationService.ExecuteSearchLocationsByGeohash:output_type -> farm.nurture.location.service.proto.SearchLocationsByGeohashResponse
	120, // 374: farm.nurture.location.service.proto.LocationService.ExecuteGetLocationDataByLatLng:output_type -> farm.nurture.location.service.proto.GetLocationDataByLatLngResponse
	123, // 375: farm.nurture.location.service.proto.LocationService.ExecuteAddVendorApiLedger:output_type -> farm.nurture.location.service.proto.AddVendorApiLedgerResponse
	124, // 376: farm.nurture.location.service.proto.LocationService.ExecuteAddVendorApiLedgerBulk:output_type -> farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse
	127, // 377: farm.nurture.location.service.proto.LocationService.Execute:output_type -> farm.nurture.location.service.proto.MultiResponses
	333, // [333:378] is the sub-list for method output_type
	288, // [288:333] is the sub-list for method input_type
	288, // [288:288] is the sub-list for extension type_name
	288, // [288:288] is the sub-list for extension extendee
	0,   // [0:288] is the sub-list for field type_name
}

func init() { file_LocationService_location_service_proto_init() }
func file_LocationService_location_service_proto_init() {
	if File_LocationService_location_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_LocationService_location_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationS2CellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationS2CellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationS2CellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationS2CellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLocationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLocationByCodeAndNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchS2CellByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CellRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchS2CellByLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchS2CellByLocationIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationS2CellsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationS2Cells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationLabelByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationLabelByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationLabelByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationLabelByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeleteS2CellByLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateDeleteS2CellByLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeleteS2CellByLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateDeleteS2CellByLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchConfigByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsWithBoundaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelOPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsWithBoundaryResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsWithBoundaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationWithBoundary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationWithoutBoundary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographyDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGeographyDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographyTypeMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGeographyTypeMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChildGeographiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChildGeographiesResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChildGeographiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationWithoutBoundaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationWithoutBoundaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLocationWithoutBoundaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertLocationWithoutBoundaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationWithoutBoundaryByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationWithoutBoundaryByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationWithoutBoundaryByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateLocationWithoutBoundaryByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLocationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteLocationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLocationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteLocationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesBySDTVLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesBySDTVLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateVillagesBySDTVLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateTehsilsBySDTVLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateTehsilsBySDTVLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateTehsilsBySDTVLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateDistrictsBySDTVLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateDistrictsBySDTVLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateDistrictsBySDTVLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateStatesBySDTVLatLongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateStatesBySDTVLatLongResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDuplicateStatesBySDTVLatLongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDuplicateGeographiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDuplicateGeographiesResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDuplicateGeographiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertVendorLocationDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertVendorLocationDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertVendorLocationDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertVendorLocationDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVendorLocationsByGeohashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVendorLocationsByGeohashResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVendorLocationsByGeohashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsByGeohashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsByGeohashResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsByGeohashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationDataByLatLngRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationDataByLatLngResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationDataByLatLngResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVendorApiLedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddVendorApiLedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVendorApiLedgerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddVendorApiLedgerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LocationService_location_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_LocationService_location_service_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*Request_ReqInsertLocation)(nil),
		(*Request_ReqInsertLocationBulk)(nil),
		(*Request_ReqInsertLocationS2Cell)(nil),
		(*Request_ReqInsertLocationS2CellBulk)(nil),
		(*Request_ReqInsertConfig)(nil),
		(*Request_ReqInsertConfigBulk)(nil),
		(*Request_ReqFetchLocationById)(nil),
		(*Request_ReqFetchLocationByCodeAndNamespace)(nil),
		(*Request_ReqFetchS2CellById)(nil),
		(*Request_ReqFetchS2CellByLocation)(nil),
		(*Request_ReqFetchS2CellByLocationId)(nil),
		(*Request_ReqUpdateLocationById)(nil),
		(*Request_ReqUpdateLocationByIdBulk)(nil),
		(*Request_ReqUpdateLocationLabelById)(nil),
		(*Request_ReqUpdateLocationLabelByIdBulk)(nil),
		(*Request_ReqUpdateDeleteS2CellByLocation)(nil),
		(*Request_ReqUpdateDeleteS2CellByLocationBulk)(nil),
		(*Request_ReqFetchConfigById)(nil),
		(*Request_ReqAddLocation)(nil),
		(*Request_ReqAddLocationBulk)(nil),
		(*Request_ReqUpdateLocation)(nil),
		(*Request_ReqUpdateLocationBulk)(nil),
		(*Request_ReqGetLocationsWithBoundary)(nil),
		(*Request_ReqGetLocations)(nil),
		(*Request_ReqGetChildGeographies)(nil),
		(*Request_ReqInsertLocationWithoutBoundary)(nil),
		(*Request_ReqInsertLocationWithoutBoundaryBulk)(nil),
		(*Request_ReqUpdateLocationWithoutBoundaryById)(nil),
		(*Request_ReqUpdateLocationWithoutBoundaryByIdBulk)(nil),
		(*Request_ReqDeleteLocationById)(nil),
		(*Request_ReqDeleteLocationByIdBulk)(nil),
		(*Request_ReqFetchDuplicateVillages)(nil),
		(*Request_ReqFetchDuplicateVillagesBySDTVLatLong)(nil),
		(*Request_ReqFetchDuplicateTehsilsBySDTVLatLong)(nil),
		(*Request_ReqFetchDuplicateDistrictsBySDTVLatLong)(nil),
		(*Request_ReqFetchDuplicateStatesBySDTVLatLong)(nil),
		(*Request_ReqGetDuplicateGeographies)(nil),
		(*Request_ReqInsertVendorLocationData)(nil),
		(*Request_ReqInsertVendorLocationDataBulk)(nil),
		(*Request_ReqSearchVendorLocationsByGeohash)(nil),
		(*Request_ReqSearchLocationsByGeohash)(nil),
		(*Request_ReqGetLocationDataByLatLng)(nil),
		(*Request_ReqAddVendorApiLedger)(nil),
		(*Request_ReqAddVendorApiLedgerBulk)(nil),
	}
	file_LocationService_location_service_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*Response_ResInsertLocation)(nil),
		(*Response_ResInsertLocationBulk)(nil),
		(*Response_ResInsertLocationS2Cell)(nil),
		(*Response_ResInsertLocationS2CellBulk)(nil),
		(*Response_ResInsertConfig)(nil),
		(*Response_ResInsertConfigBulk)(nil),
		(*Response_ResFetchLocationById)(nil),
		(*Response_ResFetchLocationByCodeAndNamespace)(nil),
		(*Response_ResFetchS2CellById)(nil),
		(*Response_ResFetchS2CellByLocation)(nil),
		(*Response_ResFetchS2CellByLocationId)(nil),
		(*Response_ResUpdateLocationById)(nil),
		(*Response_ResUpdateLocationByIdBulk)(nil),
		(*Response_ResUpdateLocationLabelById)(nil),
		(*Response_ResUpdateLocationLabelByIdBulk)(nil),
		(*Response_ResUpdateDeleteS2CellByLocation)(nil),
		(*Response_ResUpdateDeleteS2CellByLocationBulk)(nil),
		(*Response_ResFetchConfigById)(nil),
		(*Response_ResAddLocation)(nil),
		(*Response_ResAddLocationBulk)(nil),
		(*Response_ResUpdateLocation)(nil),
		(*Response_ResUpdateLocationBulk)(nil),
		(*Response_ResGetLocationsWithBoundary)(nil),
		(*Response_ResGetLocations)(nil),
		(*Response_ResGetChildGeographies)(nil),
		(*Response_ResInsertLocationWithoutBoundary)(nil),
		(*Response_ResInsertLocationWithoutBoundaryBulk)(nil),
		(*Response_ResUpdateLocationWithoutBoundaryById)(nil),
		(*Response_ResUpdateLocationWithoutBoundaryByIdBulk)(nil),
		(*Response_ResDeleteLocationById)(nil),
		(*Response_ResDeleteLocationByIdBulk)(nil),
		(*Response_ResFetchDuplicateVillages)(nil),
		(*Response_ResFetchDuplicateVillagesBySDTVLatLong)(nil),
		(*Response_ResFetchDuplicateTehsilsBySDTVLatLong)(nil),
		(*Response_ResFetchDuplicateDistrictsBySDTVLatLong)(nil),
		(*Response_ResFetchDuplicateStatesBySDTVLatLong)(nil),
		(*Response_ResGetDuplicateGeographies)(nil),
		(*Response_ResInsertVendorLocationData)(nil),
		(*Response_ResInsertVendorLocationDataBulk)(nil),
		(*Response_ResSearchVendorLocationsByGeohash)(nil),
		(*Response_ResSearchLocationsByGeohash)(nil),
		(*Response_ResGetLocationDataByLatLng)(nil),
		(*Response_ResAddVendorApiLedger)(nil),
		(*Response_ResAddVendorApiLedgerBulk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LocationService_location_service_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_LocationService_location_service_proto_goTypes,
		DependencyIndexes: file_LocationService_location_service_proto_depIdxs,
		EnumInfos:         file_LocationService_location_service_proto_enumTypes,
		MessageInfos:      file_LocationService_location_service_proto_msgTypes,
	}.Build()
	File_LocationService_location_service_proto = out.File
	file_LocationService_location_service_proto_rawDesc = nil
	file_LocationService_location_service_proto_goTypes = nil
	file_LocationService_location_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocationServiceClient interface {
	ExecuteInsertLocation(ctx context.Context, in *InsertLocationRequest, opts ...grpc.CallOption) (*InsertLocationResponse, error)
	ExecuteInsertLocationBulk(ctx context.Context, in *BulkInsertLocationRequest, opts ...grpc.CallOption) (*BulkInsertLocationResponse, error)
	ExecuteInsertLocationS2Cell(ctx context.Context, in *InsertLocationS2CellRequest, opts ...grpc.CallOption) (*InsertLocationS2CellResponse, error)
	ExecuteInsertLocationS2CellBulk(ctx context.Context, in *BulkInsertLocationS2CellRequest, opts ...grpc.CallOption) (*BulkInsertLocationS2CellResponse, error)
	ExecuteInsertConfig(ctx context.Context, in *InsertConfigRequest, opts ...grpc.CallOption) (*InsertConfigResponse, error)
	ExecuteInsertConfigBulk(ctx context.Context, in *BulkInsertConfigRequest, opts ...grpc.CallOption) (*BulkInsertConfigResponse, error)
	ExecuteFetchLocationById(ctx context.Context, in *FetchLocationByIdRequest, opts ...grpc.CallOption) (*Location, error)
	ExecuteFetchLocationByCodeAndNamespace(ctx context.Context, in *FetchLocationByCodeAndNamespaceRequest, opts ...grpc.CallOption) (*Location, error)
	ExecuteFetchS2CellById(ctx context.Context, in *FetchS2CellByIdRequest, opts ...grpc.CallOption) (*S2Cell, error)
	ExecuteFetchS2CellByLocation(ctx context.Context, in *FetchS2CellByLocationRequest, opts ...grpc.CallOption) (*S2Cell, error)
	ExecuteFetchS2CellByLocationId(ctx context.Context, in *FetchS2CellByLocationIdRequest, opts ...grpc.CallOption) (*LocationS2Cells, error)
	ExecuteUpdateLocationById(ctx context.Context, in *UpdateLocationByIdRequest, opts ...grpc.CallOption) (*UpdateLocationByIdResponse, error)
	ExecuteUpdateLocationByIdBulk(ctx context.Context, in *BulkUpdateLocationByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationByIdResponse, error)
	ExecuteUpdateLocationLabelById(ctx context.Context, in *UpdateLocationLabelByIdRequest, opts ...grpc.CallOption) (*UpdateLocationLabelByIdResponse, error)
	ExecuteUpdateLocationLabelByIdBulk(ctx context.Context, in *BulkUpdateLocationLabelByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationLabelByIdResponse, error)
	ExecuteUpdateDeleteS2CellByLocation(ctx context.Context, in *UpdateDeleteS2CellByLocationRequest, opts ...grpc.CallOption) (*UpdateDeleteS2CellByLocationResponse, error)
	ExecuteUpdateDeleteS2CellByLocationBulk(ctx context.Context, in *BulkUpdateDeleteS2CellByLocationRequest, opts ...grpc.CallOption) (*BulkUpdateDeleteS2CellByLocationResponse, error)
	ExecuteFetchConfigById(ctx context.Context, in *FetchConfigByIdRequest, opts ...grpc.CallOption) (*Config, error)
	ExecuteAddLocation(ctx context.Context, in *AddLocationRequest, opts ...grpc.CallOption) (*AddLocationResponse, error)
	ExecuteAddLocationBulk(ctx context.Context, in *BulkAddLocationRequest, opts ...grpc.CallOption) (*BulkAddLocationResponse, error)
	ExecuteUpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	ExecuteUpdateLocationBulk(ctx context.Context, in *BulkUpdateLocationRequest, opts ...grpc.CallOption) (*BulkUpdateLocationResponse, error)
	ExecuteGetLocationsWithBoundary(ctx context.Context, in *GetLocationsWithBoundaryRequest, opts ...grpc.CallOption) (*GetLocationsWithBoundaryResponse, error)
	ExecuteGetLocations(ctx context.Context, in *GetLocationsRequest, opts ...grpc.CallOption) (*GetLocationsResponse, error)
	ExecuteGetChildGeographies(ctx context.Context, in *GetChildGeographiesRequest, opts ...grpc.CallOption) (*GetChildGeographiesResponse, error)
	ExecuteInsertLocationWithoutBoundary(ctx context.Context, in *InsertLocationWithoutBoundaryRequest, opts ...grpc.CallOption) (*InsertLocationWithoutBoundaryResponse, error)
	ExecuteInsertLocationWithoutBoundaryBulk(ctx context.Context, in *BulkInsertLocationWithoutBoundaryRequest, opts ...grpc.CallOption) (*BulkInsertLocationWithoutBoundaryResponse, error)
	ExecuteUpdateLocationWithoutBoundaryById(ctx context.Context, in *UpdateLocationWithoutBoundaryByIdRequest, opts ...grpc.CallOption) (*UpdateLocationWithoutBoundaryByIdResponse, error)
	ExecuteUpdateLocationWithoutBoundaryByIdBulk(ctx context.Context, in *BulkUpdateLocationWithoutBoundaryByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationWithoutBoundaryByIdResponse, error)
	ExecuteDeleteLocationById(ctx context.Context, in *DeleteLocationByIdRequest, opts ...grpc.CallOption) (*DeleteLocationByIdResponse, error)
	ExecuteDeleteLocationByIdBulk(ctx context.Context, in *BulkDeleteLocationByIdRequest, opts ...grpc.CallOption) (*BulkDeleteLocationByIdResponse, error)
	ExecuteFetchDuplicateVillages(ctx context.Context, in *FetchDuplicateVillagesRequest, opts ...grpc.CallOption) (*FetchDuplicateVillagesResponse, error)
	ExecuteFetchDuplicateVillagesBySDTVLatLong(ctx context.Context, in *FetchDuplicateVillagesBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateVillagesBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateTehsilsBySDTVLatLong(ctx context.Context, in *FetchDuplicateTehsilsBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateTehsilsBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateDistrictsBySDTVLatLong(ctx context.Context, in *FetchDuplicateDistrictsBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateDistrictsBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateStatesBySDTVLatLong(ctx context.Context, in *FetchDuplicateStatesBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateStatesBySDTVLatLongResponse, error)
	ExecuteGetDuplicateGeographies(ctx context.Context, in *GetDuplicateGeographiesRequest, opts ...grpc.CallOption) (*GetDuplicateGeographiesResponse, error)
	ExecuteInsertVendorLocationData(ctx context.Context, in *InsertVendorLocationDataRequest, opts ...grpc.CallOption) (*InsertVendorLocationDataResponse, error)
	ExecuteInsertVendorLocationDataBulk(ctx context.Context, in *BulkInsertVendorLocationDataRequest, opts ...grpc.CallOption) (*BulkInsertVendorLocationDataResponse, error)
	ExecuteSearchVendorLocationsByGeohash(ctx context.Context, in *SearchVendorLocationsByGeohashRequest, opts ...grpc.CallOption) (*SearchVendorLocationsByGeohashResponse, error)
	ExecuteSearchLocationsByGeohash(ctx context.Context, in *SearchLocationsByGeohashRequest, opts ...grpc.CallOption) (*SearchLocationsByGeohashResponse, error)
	ExecuteGetLocationDataByLatLng(ctx context.Context, in *GetLocationDataByLatLngRequest, opts ...grpc.CallOption) (*GetLocationDataByLatLngResponse, error)
	ExecuteAddVendorApiLedger(ctx context.Context, in *AddVendorApiLedgerRequest, opts ...grpc.CallOption) (*AddVendorApiLedgerResponse, error)
	ExecuteAddVendorApiLedgerBulk(ctx context.Context, in *BulkAddVendorApiLedgerRequest, opts ...grpc.CallOption) (*BulkAddVendorApiLedgerResponse, error)
	Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) ExecuteInsertLocation(ctx context.Context, in *InsertLocationRequest, opts ...grpc.CallOption) (*InsertLocationResponse, error) {
	out := new(InsertLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertLocationBulk(ctx context.Context, in *BulkInsertLocationRequest, opts ...grpc.CallOption) (*BulkInsertLocationResponse, error) {
	out := new(BulkInsertLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertLocationS2Cell(ctx context.Context, in *InsertLocationS2CellRequest, opts ...grpc.CallOption) (*InsertLocationS2CellResponse, error) {
	out := new(InsertLocationS2CellResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2Cell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertLocationS2CellBulk(ctx context.Context, in *BulkInsertLocationS2CellRequest, opts ...grpc.CallOption) (*BulkInsertLocationS2CellResponse, error) {
	out := new(BulkInsertLocationS2CellResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2CellBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertConfig(ctx context.Context, in *InsertConfigRequest, opts ...grpc.CallOption) (*InsertConfigResponse, error) {
	out := new(InsertConfigResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertConfigBulk(ctx context.Context, in *BulkInsertConfigRequest, opts ...grpc.CallOption) (*BulkInsertConfigResponse, error) {
	out := new(BulkInsertConfigResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfigBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchLocationById(ctx context.Context, in *FetchLocationByIdRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchLocationByCodeAndNamespace(ctx context.Context, in *FetchLocationByCodeAndNamespaceRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationByCodeAndNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchS2CellById(ctx context.Context, in *FetchS2CellByIdRequest, opts ...grpc.CallOption) (*S2Cell, error) {
	out := new(S2Cell)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchS2CellByLocation(ctx context.Context, in *FetchS2CellByLocationRequest, opts ...grpc.CallOption) (*S2Cell, error) {
	out := new(S2Cell)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchS2CellByLocationId(ctx context.Context, in *FetchS2CellByLocationIdRequest, opts ...grpc.CallOption) (*LocationS2Cells, error) {
	out := new(LocationS2Cells)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationById(ctx context.Context, in *UpdateLocationByIdRequest, opts ...grpc.CallOption) (*UpdateLocationByIdResponse, error) {
	out := new(UpdateLocationByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationByIdBulk(ctx context.Context, in *BulkUpdateLocationByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationByIdResponse, error) {
	out := new(BulkUpdateLocationByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationByIdBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationLabelById(ctx context.Context, in *UpdateLocationLabelByIdRequest, opts ...grpc.CallOption) (*UpdateLocationLabelByIdResponse, error) {
	out := new(UpdateLocationLabelByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationLabelByIdBulk(ctx context.Context, in *BulkUpdateLocationLabelByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationLabelByIdResponse, error) {
	out := new(BulkUpdateLocationLabelByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelByIdBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateDeleteS2CellByLocation(ctx context.Context, in *UpdateDeleteS2CellByLocationRequest, opts ...grpc.CallOption) (*UpdateDeleteS2CellByLocationResponse, error) {
	out := new(UpdateDeleteS2CellByLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateDeleteS2CellByLocationBulk(ctx context.Context, in *BulkUpdateDeleteS2CellByLocationRequest, opts ...grpc.CallOption) (*BulkUpdateDeleteS2CellByLocationResponse, error) {
	out := new(BulkUpdateDeleteS2CellByLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocationBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchConfigById(ctx context.Context, in *FetchConfigByIdRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteAddLocation(ctx context.Context, in *AddLocationRequest, opts ...grpc.CallOption) (*AddLocationResponse, error) {
	out := new(AddLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteAddLocationBulk(ctx context.Context, in *BulkAddLocationRequest, opts ...grpc.CallOption) (*BulkAddLocationResponse, error) {
	out := new(BulkAddLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocationBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationBulk(ctx context.Context, in *BulkUpdateLocationRequest, opts ...grpc.CallOption) (*BulkUpdateLocationResponse, error) {
	out := new(BulkUpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteGetLocationsWithBoundary(ctx context.Context, in *GetLocationsWithBoundaryRequest, opts ...grpc.CallOption) (*GetLocationsWithBoundaryResponse, error) {
	out := new(GetLocationsWithBoundaryResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocationsWithBoundary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteGetLocations(ctx context.Context, in *GetLocationsRequest, opts ...grpc.CallOption) (*GetLocationsResponse, error) {
	out := new(GetLocationsResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteGetChildGeographies(ctx context.Context, in *GetChildGeographiesRequest, opts ...grpc.CallOption) (*GetChildGeographiesResponse, error) {
	out := new(GetChildGeographiesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteGetChildGeographies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertLocationWithoutBoundary(ctx context.Context, in *InsertLocationWithoutBoundaryRequest, opts ...grpc.CallOption) (*InsertLocationWithoutBoundaryResponse, error) {
	out := new(InsertLocationWithoutBoundaryResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertLocationWithoutBoundaryBulk(ctx context.Context, in *BulkInsertLocationWithoutBoundaryRequest, opts ...grpc.CallOption) (*BulkInsertLocationWithoutBoundaryResponse, error) {
	out := new(BulkInsertLocationWithoutBoundaryResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundaryBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationWithoutBoundaryById(ctx context.Context, in *UpdateLocationWithoutBoundaryByIdRequest, opts ...grpc.CallOption) (*UpdateLocationWithoutBoundaryByIdResponse, error) {
	out := new(UpdateLocationWithoutBoundaryByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteUpdateLocationWithoutBoundaryByIdBulk(ctx context.Context, in *BulkUpdateLocationWithoutBoundaryByIdRequest, opts ...grpc.CallOption) (*BulkUpdateLocationWithoutBoundaryByIdResponse, error) {
	out := new(BulkUpdateLocationWithoutBoundaryByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryByIdBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteDeleteLocationById(ctx context.Context, in *DeleteLocationByIdRequest, opts ...grpc.CallOption) (*DeleteLocationByIdResponse, error) {
	out := new(DeleteLocationByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteDeleteLocationByIdBulk(ctx context.Context, in *BulkDeleteLocationByIdRequest, opts ...grpc.CallOption) (*BulkDeleteLocationByIdResponse, error) {
	out := new(BulkDeleteLocationByIdResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationByIdBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchDuplicateVillages(ctx context.Context, in *FetchDuplicateVillagesRequest, opts ...grpc.CallOption) (*FetchDuplicateVillagesResponse, error) {
	out := new(FetchDuplicateVillagesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateVillages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchDuplicateVillagesBySDTVLatLong(ctx context.Context, in *FetchDuplicateVillagesBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateVillagesBySDTVLatLongResponse, error) {
	out := new(FetchDuplicateVillagesBySDTVLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateVillagesBySDTVLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchDuplicateTehsilsBySDTVLatLong(ctx context.Context, in *FetchDuplicateTehsilsBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateTehsilsBySDTVLatLongResponse, error) {
	out := new(FetchDuplicateTehsilsBySDTVLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateTehsilsBySDTVLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchDuplicateDistrictsBySDTVLatLong(ctx context.Context, in *FetchDuplicateDistrictsBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateDistrictsBySDTVLatLongResponse, error) {
	out := new(FetchDuplicateDistrictsBySDTVLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateDistrictsBySDTVLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteFetchDuplicateStatesBySDTVLatLong(ctx context.Context, in *FetchDuplicateStatesBySDTVLatLongRequest, opts ...grpc.CallOption) (*FetchDuplicateStatesBySDTVLatLongResponse, error) {
	out := new(FetchDuplicateStatesBySDTVLatLongResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateStatesBySDTVLatLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteGetDuplicateGeographies(ctx context.Context, in *GetDuplicateGeographiesRequest, opts ...grpc.CallOption) (*GetDuplicateGeographiesResponse, error) {
	out := new(GetDuplicateGeographiesResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteGetDuplicateGeographies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertVendorLocationData(ctx context.Context, in *InsertVendorLocationDataRequest, opts ...grpc.CallOption) (*InsertVendorLocationDataResponse, error) {
	out := new(InsertVendorLocationDataResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertVendorLocationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteInsertVendorLocationDataBulk(ctx context.Context, in *BulkInsertVendorLocationDataRequest, opts ...grpc.CallOption) (*BulkInsertVendorLocationDataResponse, error) {
	out := new(BulkInsertVendorLocationDataResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteInsertVendorLocationDataBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteSearchVendorLocationsByGeohash(ctx context.Context, in *SearchVendorLocationsByGeohashRequest, opts ...grpc.CallOption) (*SearchVendorLocationsByGeohashResponse, error) {
	out := new(SearchVendorLocationsByGeohashResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteSearchVendorLocationsByGeohash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteSearchLocationsByGeohash(ctx context.Context, in *SearchLocationsByGeohashRequest, opts ...grpc.CallOption) (*SearchLocationsByGeohashResponse, error) {
	out := new(SearchLocationsByGeohashResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteSearchLocationsByGeohash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteGetLocationDataByLatLng(ctx context.Context, in *GetLocationDataByLatLngRequest, opts ...grpc.CallOption) (*GetLocationDataByLatLngResponse, error) {
	out := new(GetLocationDataByLatLngResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocationDataByLatLng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteAddVendorApiLedger(ctx context.Context, in *AddVendorApiLedgerRequest, opts ...grpc.CallOption) (*AddVendorApiLedgerResponse, error) {
	out := new(AddVendorApiLedgerResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteAddVendorApiLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ExecuteAddVendorApiLedgerBulk(ctx context.Context, in *BulkAddVendorApiLedgerRequest, opts ...grpc.CallOption) (*BulkAddVendorApiLedgerResponse, error) {
	out := new(BulkAddVendorApiLedgerResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/ExecuteAddVendorApiLedgerBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error) {
	out := new(MultiResponses)
	err := c.cc.Invoke(ctx, "/farm.nurture.location.service.proto.LocationService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
type LocationServiceServer interface {
	ExecuteInsertLocation(context.Context, *InsertLocationRequest) (*InsertLocationResponse, error)
	ExecuteInsertLocationBulk(context.Context, *BulkInsertLocationRequest) (*BulkInsertLocationResponse, error)
	ExecuteInsertLocationS2Cell(context.Context, *InsertLocationS2CellRequest) (*InsertLocationS2CellResponse, error)
	ExecuteInsertLocationS2CellBulk(context.Context, *BulkInsertLocationS2CellRequest) (*BulkInsertLocationS2CellResponse, error)
	ExecuteInsertConfig(context.Context, *InsertConfigRequest) (*InsertConfigResponse, error)
	ExecuteInsertConfigBulk(context.Context, *BulkInsertConfigRequest) (*BulkInsertConfigResponse, error)
	ExecuteFetchLocationById(context.Context, *FetchLocationByIdRequest) (*Location, error)
	ExecuteFetchLocationByCodeAndNamespace(context.Context, *FetchLocationByCodeAndNamespaceRequest) (*Location, error)
	ExecuteFetchS2CellById(context.Context, *FetchS2CellByIdRequest) (*S2Cell, error)
	ExecuteFetchS2CellByLocation(context.Context, *FetchS2CellByLocationRequest) (*S2Cell, error)
	ExecuteFetchS2CellByLocationId(context.Context, *FetchS2CellByLocationIdRequest) (*LocationS2Cells, error)
	ExecuteUpdateLocationById(context.Context, *UpdateLocationByIdRequest) (*UpdateLocationByIdResponse, error)
	ExecuteUpdateLocationByIdBulk(context.Context, *BulkUpdateLocationByIdRequest) (*BulkUpdateLocationByIdResponse, error)
	ExecuteUpdateLocationLabelById(context.Context, *UpdateLocationLabelByIdRequest) (*UpdateLocationLabelByIdResponse, error)
	ExecuteUpdateLocationLabelByIdBulk(context.Context, *BulkUpdateLocationLabelByIdRequest) (*BulkUpdateLocationLabelByIdResponse, error)
	ExecuteUpdateDeleteS2CellByLocation(context.Context, *UpdateDeleteS2CellByLocationRequest) (*UpdateDeleteS2CellByLocationResponse, error)
	ExecuteUpdateDeleteS2CellByLocationBulk(context.Context, *BulkUpdateDeleteS2CellByLocationRequest) (*BulkUpdateDeleteS2CellByLocationResponse, error)
	ExecuteFetchConfigById(context.Context, *FetchConfigByIdRequest) (*Config, error)
	ExecuteAddLocation(context.Context, *AddLocationRequest) (*AddLocationResponse, error)
	ExecuteAddLocationBulk(context.Context, *BulkAddLocationRequest) (*BulkAddLocationResponse, error)
	ExecuteUpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	ExecuteUpdateLocationBulk(context.Context, *BulkUpdateLocationRequest) (*BulkUpdateLocationResponse, error)
	ExecuteGetLocationsWithBoundary(context.Context, *GetLocationsWithBoundaryRequest) (*GetLocationsWithBoundaryResponse, error)
	ExecuteGetLocations(context.Context, *GetLocationsRequest) (*GetLocationsResponse, error)
	ExecuteGetChildGeographies(context.Context, *GetChildGeographiesRequest) (*GetChildGeographiesResponse, error)
	ExecuteInsertLocationWithoutBoundary(context.Context, *InsertLocationWithoutBoundaryRequest) (*InsertLocationWithoutBoundaryResponse, error)
	ExecuteInsertLocationWithoutBoundaryBulk(context.Context, *BulkInsertLocationWithoutBoundaryRequest) (*BulkInsertLocationWithoutBoundaryResponse, error)
	ExecuteUpdateLocationWithoutBoundaryById(context.Context, *UpdateLocationWithoutBoundaryByIdRequest) (*UpdateLocationWithoutBoundaryByIdResponse, error)
	ExecuteUpdateLocationWithoutBoundaryByIdBulk(context.Context, *BulkUpdateLocationWithoutBoundaryByIdRequest) (*BulkUpdateLocationWithoutBoundaryByIdResponse, error)
	ExecuteDeleteLocationById(context.Context, *DeleteLocationByIdRequest) (*DeleteLocationByIdResponse, error)
	ExecuteDeleteLocationByIdBulk(context.Context, *BulkDeleteLocationByIdRequest) (*BulkDeleteLocationByIdResponse, error)
	ExecuteFetchDuplicateVillages(context.Context, *FetchDuplicateVillagesRequest) (*FetchDuplicateVillagesResponse, error)
	ExecuteFetchDuplicateVillagesBySDTVLatLong(context.Context, *FetchDuplicateVillagesBySDTVLatLongRequest) (*FetchDuplicateVillagesBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateTehsilsBySDTVLatLong(context.Context, *FetchDuplicateTehsilsBySDTVLatLongRequest) (*FetchDuplicateTehsilsBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateDistrictsBySDTVLatLong(context.Context, *FetchDuplicateDistrictsBySDTVLatLongRequest) (*FetchDuplicateDistrictsBySDTVLatLongResponse, error)
	ExecuteFetchDuplicateStatesBySDTVLatLong(context.Context, *FetchDuplicateStatesBySDTVLatLongRequest) (*FetchDuplicateStatesBySDTVLatLongResponse, error)
	ExecuteGetDuplicateGeographies(context.Context, *GetDuplicateGeographiesRequest) (*GetDuplicateGeographiesResponse, error)
	ExecuteInsertVendorLocationData(context.Context, *InsertVendorLocationDataRequest) (*InsertVendorLocationDataResponse, error)
	ExecuteInsertVendorLocationDataBulk(context.Context, *BulkInsertVendorLocationDataRequest) (*BulkInsertVendorLocationDataResponse, error)
	ExecuteSearchVendorLocationsByGeohash(context.Context, *SearchVendorLocationsByGeohashRequest) (*SearchVendorLocationsByGeohashResponse, error)
	ExecuteSearchLocationsByGeohash(context.Context, *SearchLocationsByGeohashRequest) (*SearchLocationsByGeohashResponse, error)
	ExecuteGetLocationDataByLatLng(context.Context, *GetLocationDataByLatLngRequest) (*GetLocationDataByLatLngResponse, error)
	ExecuteAddVendorApiLedger(context.Context, *AddVendorApiLedgerRequest) (*AddVendorApiLedgerResponse, error)
	ExecuteAddVendorApiLedgerBulk(context.Context, *BulkAddVendorApiLedgerRequest) (*BulkAddVendorApiLedgerResponse, error)
	Execute(context.Context, *MultiRequests) (*MultiResponses, error)
}

// UnimplementedLocationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (*UnimplementedLocationServiceServer) ExecuteInsertLocation(context.Context, *InsertLocationRequest) (*InsertLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocation not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertLocationBulk(context.Context, *BulkInsertLocationRequest) (*BulkInsertLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocationBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertLocationS2Cell(context.Context, *InsertLocationS2CellRequest) (*InsertLocationS2CellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocationS2Cell not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertLocationS2CellBulk(context.Context, *BulkInsertLocationS2CellRequest) (*BulkInsertLocationS2CellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocationS2CellBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertConfig(context.Context, *InsertConfigRequest) (*InsertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertConfig not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertConfigBulk(context.Context, *BulkInsertConfigRequest) (*BulkInsertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertConfigBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchLocationById(context.Context, *FetchLocationByIdRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchLocationById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchLocationByCodeAndNamespace(context.Context, *FetchLocationByCodeAndNamespaceRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchLocationByCodeAndNamespace not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchS2CellById(context.Context, *FetchS2CellByIdRequest) (*S2Cell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchS2CellById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchS2CellByLocation(context.Context, *FetchS2CellByLocationRequest) (*S2Cell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchS2CellByLocation not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchS2CellByLocationId(context.Context, *FetchS2CellByLocationIdRequest) (*LocationS2Cells, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchS2CellByLocationId not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationById(context.Context, *UpdateLocationByIdRequest) (*UpdateLocationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationByIdBulk(context.Context, *BulkUpdateLocationByIdRequest) (*BulkUpdateLocationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationByIdBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationLabelById(context.Context, *UpdateLocationLabelByIdRequest) (*UpdateLocationLabelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationLabelById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationLabelByIdBulk(context.Context, *BulkUpdateLocationLabelByIdRequest) (*BulkUpdateLocationLabelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationLabelByIdBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateDeleteS2CellByLocation(context.Context, *UpdateDeleteS2CellByLocationRequest) (*UpdateDeleteS2CellByLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateDeleteS2CellByLocation not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateDeleteS2CellByLocationBulk(context.Context, *BulkUpdateDeleteS2CellByLocationRequest) (*BulkUpdateDeleteS2CellByLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateDeleteS2CellByLocationBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchConfigById(context.Context, *FetchConfigByIdRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchConfigById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteAddLocation(context.Context, *AddLocationRequest) (*AddLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddLocation not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteAddLocationBulk(context.Context, *BulkAddLocationRequest) (*BulkAddLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddLocationBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocation not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationBulk(context.Context, *BulkUpdateLocationRequest) (*BulkUpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteGetLocationsWithBoundary(context.Context, *GetLocationsWithBoundaryRequest) (*GetLocationsWithBoundaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetLocationsWithBoundary not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteGetLocations(context.Context, *GetLocationsRequest) (*GetLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetLocations not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteGetChildGeographies(context.Context, *GetChildGeographiesRequest) (*GetChildGeographiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetChildGeographies not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertLocationWithoutBoundary(context.Context, *InsertLocationWithoutBoundaryRequest) (*InsertLocationWithoutBoundaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocationWithoutBoundary not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertLocationWithoutBoundaryBulk(context.Context, *BulkInsertLocationWithoutBoundaryRequest) (*BulkInsertLocationWithoutBoundaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertLocationWithoutBoundaryBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationWithoutBoundaryById(context.Context, *UpdateLocationWithoutBoundaryByIdRequest) (*UpdateLocationWithoutBoundaryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationWithoutBoundaryById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteUpdateLocationWithoutBoundaryByIdBulk(context.Context, *BulkUpdateLocationWithoutBoundaryByIdRequest) (*BulkUpdateLocationWithoutBoundaryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUpdateLocationWithoutBoundaryByIdBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteDeleteLocationById(context.Context, *DeleteLocationByIdRequest) (*DeleteLocationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDeleteLocationById not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteDeleteLocationByIdBulk(context.Context, *BulkDeleteLocationByIdRequest) (*BulkDeleteLocationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDeleteLocationByIdBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchDuplicateVillages(context.Context, *FetchDuplicateVillagesRequest) (*FetchDuplicateVillagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchDuplicateVillages not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchDuplicateVillagesBySDTVLatLong(context.Context, *FetchDuplicateVillagesBySDTVLatLongRequest) (*FetchDuplicateVillagesBySDTVLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchDuplicateVillagesBySDTVLatLong not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchDuplicateTehsilsBySDTVLatLong(context.Context, *FetchDuplicateTehsilsBySDTVLatLongRequest) (*FetchDuplicateTehsilsBySDTVLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchDuplicateTehsilsBySDTVLatLong not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchDuplicateDistrictsBySDTVLatLong(context.Context, *FetchDuplicateDistrictsBySDTVLatLongRequest) (*FetchDuplicateDistrictsBySDTVLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchDuplicateDistrictsBySDTVLatLong not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteFetchDuplicateStatesBySDTVLatLong(context.Context, *FetchDuplicateStatesBySDTVLatLongRequest) (*FetchDuplicateStatesBySDTVLatLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchDuplicateStatesBySDTVLatLong not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteGetDuplicateGeographies(context.Context, *GetDuplicateGeographiesRequest) (*GetDuplicateGeographiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetDuplicateGeographies not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertVendorLocationData(context.Context, *InsertVendorLocationDataRequest) (*InsertVendorLocationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertVendorLocationData not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteInsertVendorLocationDataBulk(context.Context, *BulkInsertVendorLocationDataRequest) (*BulkInsertVendorLocationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteInsertVendorLocationDataBulk not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteSearchVendorLocationsByGeohash(context.Context, *SearchVendorLocationsByGeohashRequest) (*SearchVendorLocationsByGeohashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSearchVendorLocationsByGeohash not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteSearchLocationsByGeohash(context.Context, *SearchLocationsByGeohashRequest) (*SearchLocationsByGeohashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSearchLocationsByGeohash not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteGetLocationDataByLatLng(context.Context, *GetLocationDataByLatLngRequest) (*GetLocationDataByLatLngResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGetLocationDataByLatLng not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteAddVendorApiLedger(context.Context, *AddVendorApiLedgerRequest) (*AddVendorApiLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddVendorApiLedger not implemented")
}
func (*UnimplementedLocationServiceServer) ExecuteAddVendorApiLedgerBulk(context.Context, *BulkAddVendorApiLedgerRequest) (*BulkAddVendorApiLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddVendorApiLedgerBulk not implemented")
}
func (*UnimplementedLocationServiceServer) Execute(context.Context, *MultiRequests) (*MultiResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterLocationServiceServer(s *grpc.Server, srv LocationServiceServer) {
	s.RegisterService(&_LocationService_serviceDesc, srv)
}

func _LocationService_ExecuteInsertLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocation(ctx, req.(*InsertLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertLocationBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocationBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocationBulk(ctx, req.(*BulkInsertLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertLocationS2Cell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLocationS2CellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocationS2Cell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2Cell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocationS2Cell(ctx, req.(*InsertLocationS2CellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertLocationS2CellBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertLocationS2CellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocationS2CellBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationS2CellBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocationS2CellBulk(ctx, req.(*BulkInsertLocationS2CellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertConfig(ctx, req.(*InsertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertConfigBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertConfigBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertConfigBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertConfigBulk(ctx, req.(*BulkInsertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchLocationById(ctx, req.(*FetchLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchLocationByCodeAndNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLocationByCodeAndNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchLocationByCodeAndNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchLocationByCodeAndNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchLocationByCodeAndNamespace(ctx, req.(*FetchLocationByCodeAndNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchS2CellById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchS2CellByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchS2CellById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchS2CellById(ctx, req.(*FetchS2CellByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchS2CellByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchS2CellByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchS2CellByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchS2CellByLocation(ctx, req.(*FetchS2CellByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchS2CellByLocationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchS2CellByLocationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchS2CellByLocationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchS2CellByLocationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchS2CellByLocationId(ctx, req.(*FetchS2CellByLocationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationById(ctx, req.(*UpdateLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationByIdBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationByIdBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationByIdBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationByIdBulk(ctx, req.(*BulkUpdateLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationLabelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationLabelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationLabelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationLabelById(ctx, req.(*UpdateLocationLabelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationLabelByIdBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateLocationLabelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationLabelByIdBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationLabelByIdBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationLabelByIdBulk(ctx, req.(*BulkUpdateLocationLabelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateDeleteS2CellByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeleteS2CellByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateDeleteS2CellByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateDeleteS2CellByLocation(ctx, req.(*UpdateDeleteS2CellByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateDeleteS2CellByLocationBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateDeleteS2CellByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateDeleteS2CellByLocationBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateDeleteS2CellByLocationBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateDeleteS2CellByLocationBulk(ctx, req.(*BulkUpdateDeleteS2CellByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchConfigById(ctx, req.(*FetchConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteAddLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteAddLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteAddLocation(ctx, req.(*AddLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteAddLocationBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteAddLocationBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteAddLocationBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteAddLocationBulk(ctx, req.(*BulkAddLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationBulk(ctx, req.(*BulkUpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteGetLocationsWithBoundary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationsWithBoundaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteGetLocationsWithBoundary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocationsWithBoundary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteGetLocationsWithBoundary(ctx, req.(*GetLocationsWithBoundaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteGetLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteGetLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteGetLocations(ctx, req.(*GetLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteGetChildGeographies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildGeographiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteGetChildGeographies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteGetChildGeographies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteGetChildGeographies(ctx, req.(*GetChildGeographiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertLocationWithoutBoundary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLocationWithoutBoundaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocationWithoutBoundary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocationWithoutBoundary(ctx, req.(*InsertLocationWithoutBoundaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertLocationWithoutBoundaryBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertLocationWithoutBoundaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertLocationWithoutBoundaryBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertLocationWithoutBoundaryBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertLocationWithoutBoundaryBulk(ctx, req.(*BulkInsertLocationWithoutBoundaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationWithoutBoundaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationWithoutBoundaryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationWithoutBoundaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationWithoutBoundaryById(ctx, req.(*UpdateLocationWithoutBoundaryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteUpdateLocationWithoutBoundaryByIdBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateLocationWithoutBoundaryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteUpdateLocationWithoutBoundaryByIdBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteUpdateLocationWithoutBoundaryByIdBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteUpdateLocationWithoutBoundaryByIdBulk(ctx, req.(*BulkUpdateLocationWithoutBoundaryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteDeleteLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteDeleteLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteDeleteLocationById(ctx, req.(*DeleteLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteDeleteLocationByIdBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteDeleteLocationByIdBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteDeleteLocationByIdBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteDeleteLocationByIdBulk(ctx, req.(*BulkDeleteLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchDuplicateVillages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDuplicateVillagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateVillages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateVillages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateVillages(ctx, req.(*FetchDuplicateVillagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchDuplicateVillagesBySDTVLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDuplicateVillagesBySDTVLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateVillagesBySDTVLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateVillagesBySDTVLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateVillagesBySDTVLatLong(ctx, req.(*FetchDuplicateVillagesBySDTVLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchDuplicateTehsilsBySDTVLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDuplicateTehsilsBySDTVLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateTehsilsBySDTVLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateTehsilsBySDTVLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateTehsilsBySDTVLatLong(ctx, req.(*FetchDuplicateTehsilsBySDTVLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchDuplicateDistrictsBySDTVLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDuplicateDistrictsBySDTVLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateDistrictsBySDTVLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateDistrictsBySDTVLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateDistrictsBySDTVLatLong(ctx, req.(*FetchDuplicateDistrictsBySDTVLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteFetchDuplicateStatesBySDTVLatLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDuplicateStatesBySDTVLatLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateStatesBySDTVLatLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteFetchDuplicateStatesBySDTVLatLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteFetchDuplicateStatesBySDTVLatLong(ctx, req.(*FetchDuplicateStatesBySDTVLatLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteGetDuplicateGeographies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDuplicateGeographiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteGetDuplicateGeographies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteGetDuplicateGeographies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteGetDuplicateGeographies(ctx, req.(*GetDuplicateGeographiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertVendorLocationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertVendorLocationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertVendorLocationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertVendorLocationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertVendorLocationData(ctx, req.(*InsertVendorLocationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteInsertVendorLocationDataBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertVendorLocationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteInsertVendorLocationDataBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteInsertVendorLocationDataBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteInsertVendorLocationDataBulk(ctx, req.(*BulkInsertVendorLocationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteSearchVendorLocationsByGeohash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVendorLocationsByGeohashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteSearchVendorLocationsByGeohash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteSearchVendorLocationsByGeohash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteSearchVendorLocationsByGeohash(ctx, req.(*SearchVendorLocationsByGeohashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteSearchLocationsByGeohash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLocationsByGeohashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteSearchLocationsByGeohash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteSearchLocationsByGeohash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteSearchLocationsByGeohash(ctx, req.(*SearchLocationsByGeohashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteGetLocationDataByLatLng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationDataByLatLngRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteGetLocationDataByLatLng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteGetLocationDataByLatLng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteGetLocationDataByLatLng(ctx, req.(*GetLocationDataByLatLngRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteAddVendorApiLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVendorApiLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteAddVendorApiLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteAddVendorApiLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteAddVendorApiLedger(ctx, req.(*AddVendorApiLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ExecuteAddVendorApiLedgerBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddVendorApiLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ExecuteAddVendorApiLedgerBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/ExecuteAddVendorApiLedgerBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ExecuteAddVendorApiLedgerBulk(ctx, req.(*BulkAddVendorApiLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.location.service.proto.LocationService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Execute(ctx, req.(*MultiRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.location.service.proto.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteInsertLocation",
			Handler:    _LocationService_ExecuteInsertLocation_Handler,
		},
		{
			MethodName: "ExecuteInsertLocationBulk",
			Handler:    _LocationService_ExecuteInsertLocationBulk_Handler,
		},
		{
			MethodName: "ExecuteInsertLocationS2Cell",
			Handler:    _LocationService_ExecuteInsertLocationS2Cell_Handler,
		},
		{
			MethodName: "ExecuteInsertLocationS2CellBulk",
			Handler:    _LocationService_ExecuteInsertLocationS2CellBulk_Handler,
		},
		{
			MethodName: "ExecuteInsertConfig",
			Handler:    _LocationService_ExecuteInsertConfig_Handler,
		},
		{
			MethodName: "ExecuteInsertConfigBulk",
			Handler:    _LocationService_ExecuteInsertConfigBulk_Handler,
		},
		{
			MethodName: "ExecuteFetchLocationById",
			Handler:    _LocationService_ExecuteFetchLocationById_Handler,
		},
		{
			MethodName: "ExecuteFetchLocationByCodeAndNamespace",
			Handler:    _LocationService_ExecuteFetchLocationByCodeAndNamespace_Handler,
		},
		{
			MethodName: "ExecuteFetchS2CellById",
			Handler:    _LocationService_ExecuteFetchS2CellById_Handler,
		},
		{
			MethodName: "ExecuteFetchS2CellByLocation",
			Handler:    _LocationService_ExecuteFetchS2CellByLocation_Handler,
		},
		{
			MethodName: "ExecuteFetchS2CellByLocationId",
			Handler:    _LocationService_ExecuteFetchS2CellByLocationId_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationById",
			Handler:    _LocationService_ExecuteUpdateLocationById_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationByIdBulk",
			Handler:    _LocationService_ExecuteUpdateLocationByIdBulk_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationLabelById",
			Handler:    _LocationService_ExecuteUpdateLocationLabelById_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationLabelByIdBulk",
			Handler:    _LocationService_ExecuteUpdateLocationLabelByIdBulk_Handler,
		},
		{
			MethodName: "ExecuteUpdateDeleteS2CellByLocation",
			Handler:    _LocationService_ExecuteUpdateDeleteS2CellByLocation_Handler,
		},
		{
			MethodName: "ExecuteUpdateDeleteS2CellByLocationBulk",
			Handler:    _LocationService_ExecuteUpdateDeleteS2CellByLocationBulk_Handler,
		},
		{
			MethodName: "ExecuteFetchConfigById",
			Handler:    _LocationService_ExecuteFetchConfigById_Handler,
		},
		{
			MethodName: "ExecuteAddLocation",
			Handler:    _LocationService_ExecuteAddLocation_Handler,
		},
		{
			MethodName: "ExecuteAddLocationBulk",
			Handler:    _LocationService_ExecuteAddLocationBulk_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocation",
			Handler:    _LocationService_ExecuteUpdateLocation_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationBulk",
			Handler:    _LocationService_ExecuteUpdateLocationBulk_Handler,
		},
		{
			MethodName: "ExecuteGetLocationsWithBoundary",
			Handler:    _LocationService_ExecuteGetLocationsWithBoundary_Handler,
		},
		{
			MethodName: "ExecuteGetLocations",
			Handler:    _LocationService_ExecuteGetLocations_Handler,
		},
		{
			MethodName: "ExecuteGetChildGeographies",
			Handler:    _LocationService_ExecuteGetChildGeographies_Handler,
		},
		{
			MethodName: "ExecuteInsertLocationWithoutBoundary",
			Handler:    _LocationService_ExecuteInsertLocationWithoutBoundary_Handler,
		},
		{
			MethodName: "ExecuteInsertLocationWithoutBoundaryBulk",
			Handler:    _LocationService_ExecuteInsertLocationWithoutBoundaryBulk_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationWithoutBoundaryById",
			Handler:    _LocationService_ExecuteUpdateLocationWithoutBoundaryById_Handler,
		},
		{
			MethodName: "ExecuteUpdateLocationWithoutBoundaryByIdBulk",
			Handler:    _LocationService_ExecuteUpdateLocationWithoutBoundaryByIdBulk_Handler,
		},
		{
			MethodName: "ExecuteDeleteLocationById",
			Handler:    _LocationService_ExecuteDeleteLocationById_Handler,
		},
		{
			MethodName: "ExecuteDeleteLocationByIdBulk",
			Handler:    _LocationService_ExecuteDeleteLocationByIdBulk_Handler,
		},
		{
			MethodName: "ExecuteFetchDuplicateVillages",
			Handler:    _LocationService_ExecuteFetchDuplicateVillages_Handler,
		},
		{
			MethodName: "ExecuteFetchDuplicateVillagesBySDTVLatLong",
			Handler:    _LocationService_ExecuteFetchDuplicateVillagesBySDTVLatLong_Handler,
		},
		{
			MethodName: "ExecuteFetchDuplicateTehsilsBySDTVLatLong",
			Handler:    _LocationService_ExecuteFetchDuplicateTehsilsBySDTVLatLong_Handler,
		},
		{
			MethodName: "ExecuteFetchDuplicateDistrictsBySDTVLatLong",
			Handler:    _LocationService_ExecuteFetchDuplicateDistrictsBySDTVLatLong_Handler,
		},
		{
			MethodName: "ExecuteFetchDuplicateStatesBySDTVLatLong",
			Handler:    _LocationService_ExecuteFetchDuplicateStatesBySDTVLatLong_Handler,
		},
		{
			MethodName: "ExecuteGetDuplicateGeographies",
			Handler:    _LocationService_ExecuteGetDuplicateGeographies_Handler,
		},
		{
			MethodName: "ExecuteInsertVendorLocationData",
			Handler:    _LocationService_ExecuteInsertVendorLocationData_Handler,
		},
		{
			MethodName: "ExecuteInsertVendorLocationDataBulk",
			Handler:    _LocationService_ExecuteInsertVendorLocationDataBulk_Handler,
		},
		{
			MethodName: "ExecuteSearchVendorLocationsByGeohash",
			Handler:    _LocationService_ExecuteSearchVendorLocationsByGeohash_Handler,
		},
		{
			MethodName: "ExecuteSearchLocationsByGeohash",
			Handler:    _LocationService_ExecuteSearchLocationsByGeohash_Handler,
		},
		{
			MethodName: "ExecuteGetLocationDataByLatLng",
			Handler:    _LocationService_ExecuteGetLocationDataByLatLng_Handler,
		},
		{
			MethodName: "ExecuteAddVendorApiLedger",
			Handler:    _LocationService_ExecuteAddVendorApiLedger_Handler,
		},
		{
			MethodName: "ExecuteAddVendorApiLedgerBulk",
			Handler:    _LocationService_ExecuteAddVendorApiLedgerBulk_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _LocationService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LocationService/location_service.proto",
}
