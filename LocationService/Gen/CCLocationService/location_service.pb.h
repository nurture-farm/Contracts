// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocationService/location_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LocationService_2flocation_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LocationService_2flocation_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/utils.pb.h"
#include "Common/headers.pb.h"
#include "Common/entities.pb.h"
#include "Common/event_reference.pb.h"
#include "Common/time_slot.pb.h"
#include "Common/tags.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LocationService_2flocation_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LocationService_2flocation_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[115]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LocationService_2flocation_5fservice_2eproto;
namespace farm {
namespace nurture {
namespace location {
namespace service {
namespace proto {
class AddLocationRequest;
class AddLocationRequestDefaultTypeInternal;
extern AddLocationRequestDefaultTypeInternal _AddLocationRequest_default_instance_;
class AddLocationResponse;
class AddLocationResponseDefaultTypeInternal;
extern AddLocationResponseDefaultTypeInternal _AddLocationResponse_default_instance_;
class AddVendorApiLedgerRequest;
class AddVendorApiLedgerRequestDefaultTypeInternal;
extern AddVendorApiLedgerRequestDefaultTypeInternal _AddVendorApiLedgerRequest_default_instance_;
class AddVendorApiLedgerResponse;
class AddVendorApiLedgerResponseDefaultTypeInternal;
extern AddVendorApiLedgerResponseDefaultTypeInternal _AddVendorApiLedgerResponse_default_instance_;
class BulkAddLocationRequest;
class BulkAddLocationRequestDefaultTypeInternal;
extern BulkAddLocationRequestDefaultTypeInternal _BulkAddLocationRequest_default_instance_;
class BulkAddLocationResponse;
class BulkAddLocationResponseDefaultTypeInternal;
extern BulkAddLocationResponseDefaultTypeInternal _BulkAddLocationResponse_default_instance_;
class BulkAddVendorApiLedgerRequest;
class BulkAddVendorApiLedgerRequestDefaultTypeInternal;
extern BulkAddVendorApiLedgerRequestDefaultTypeInternal _BulkAddVendorApiLedgerRequest_default_instance_;
class BulkAddVendorApiLedgerResponse;
class BulkAddVendorApiLedgerResponseDefaultTypeInternal;
extern BulkAddVendorApiLedgerResponseDefaultTypeInternal _BulkAddVendorApiLedgerResponse_default_instance_;
class BulkDeleteLocationByIdRequest;
class BulkDeleteLocationByIdRequestDefaultTypeInternal;
extern BulkDeleteLocationByIdRequestDefaultTypeInternal _BulkDeleteLocationByIdRequest_default_instance_;
class BulkDeleteLocationByIdResponse;
class BulkDeleteLocationByIdResponseDefaultTypeInternal;
extern BulkDeleteLocationByIdResponseDefaultTypeInternal _BulkDeleteLocationByIdResponse_default_instance_;
class BulkGeographyDataType;
class BulkGeographyDataTypeDefaultTypeInternal;
extern BulkGeographyDataTypeDefaultTypeInternal _BulkGeographyDataType_default_instance_;
class BulkGeographyTypeMessageResponse;
class BulkGeographyTypeMessageResponseDefaultTypeInternal;
extern BulkGeographyTypeMessageResponseDefaultTypeInternal _BulkGeographyTypeMessageResponse_default_instance_;
class BulkInsertConfigRequest;
class BulkInsertConfigRequestDefaultTypeInternal;
extern BulkInsertConfigRequestDefaultTypeInternal _BulkInsertConfigRequest_default_instance_;
class BulkInsertConfigResponse;
class BulkInsertConfigResponseDefaultTypeInternal;
extern BulkInsertConfigResponseDefaultTypeInternal _BulkInsertConfigResponse_default_instance_;
class BulkInsertLocationRequest;
class BulkInsertLocationRequestDefaultTypeInternal;
extern BulkInsertLocationRequestDefaultTypeInternal _BulkInsertLocationRequest_default_instance_;
class BulkInsertLocationResponse;
class BulkInsertLocationResponseDefaultTypeInternal;
extern BulkInsertLocationResponseDefaultTypeInternal _BulkInsertLocationResponse_default_instance_;
class BulkInsertLocationS2CellRequest;
class BulkInsertLocationS2CellRequestDefaultTypeInternal;
extern BulkInsertLocationS2CellRequestDefaultTypeInternal _BulkInsertLocationS2CellRequest_default_instance_;
class BulkInsertLocationS2CellResponse;
class BulkInsertLocationS2CellResponseDefaultTypeInternal;
extern BulkInsertLocationS2CellResponseDefaultTypeInternal _BulkInsertLocationS2CellResponse_default_instance_;
class BulkInsertLocationWithoutBoundaryRequest;
class BulkInsertLocationWithoutBoundaryRequestDefaultTypeInternal;
extern BulkInsertLocationWithoutBoundaryRequestDefaultTypeInternal _BulkInsertLocationWithoutBoundaryRequest_default_instance_;
class BulkInsertLocationWithoutBoundaryResponse;
class BulkInsertLocationWithoutBoundaryResponseDefaultTypeInternal;
extern BulkInsertLocationWithoutBoundaryResponseDefaultTypeInternal _BulkInsertLocationWithoutBoundaryResponse_default_instance_;
class BulkInsertVendorLocationDataRequest;
class BulkInsertVendorLocationDataRequestDefaultTypeInternal;
extern BulkInsertVendorLocationDataRequestDefaultTypeInternal _BulkInsertVendorLocationDataRequest_default_instance_;
class BulkInsertVendorLocationDataResponse;
class BulkInsertVendorLocationDataResponseDefaultTypeInternal;
extern BulkInsertVendorLocationDataResponseDefaultTypeInternal _BulkInsertVendorLocationDataResponse_default_instance_;
class BulkUpdateDeleteS2CellByLocationRequest;
class BulkUpdateDeleteS2CellByLocationRequestDefaultTypeInternal;
extern BulkUpdateDeleteS2CellByLocationRequestDefaultTypeInternal _BulkUpdateDeleteS2CellByLocationRequest_default_instance_;
class BulkUpdateDeleteS2CellByLocationResponse;
class BulkUpdateDeleteS2CellByLocationResponseDefaultTypeInternal;
extern BulkUpdateDeleteS2CellByLocationResponseDefaultTypeInternal _BulkUpdateDeleteS2CellByLocationResponse_default_instance_;
class BulkUpdateLocationByIdRequest;
class BulkUpdateLocationByIdRequestDefaultTypeInternal;
extern BulkUpdateLocationByIdRequestDefaultTypeInternal _BulkUpdateLocationByIdRequest_default_instance_;
class BulkUpdateLocationByIdResponse;
class BulkUpdateLocationByIdResponseDefaultTypeInternal;
extern BulkUpdateLocationByIdResponseDefaultTypeInternal _BulkUpdateLocationByIdResponse_default_instance_;
class BulkUpdateLocationLabelByIdRequest;
class BulkUpdateLocationLabelByIdRequestDefaultTypeInternal;
extern BulkUpdateLocationLabelByIdRequestDefaultTypeInternal _BulkUpdateLocationLabelByIdRequest_default_instance_;
class BulkUpdateLocationLabelByIdResponse;
class BulkUpdateLocationLabelByIdResponseDefaultTypeInternal;
extern BulkUpdateLocationLabelByIdResponseDefaultTypeInternal _BulkUpdateLocationLabelByIdResponse_default_instance_;
class BulkUpdateLocationRequest;
class BulkUpdateLocationRequestDefaultTypeInternal;
extern BulkUpdateLocationRequestDefaultTypeInternal _BulkUpdateLocationRequest_default_instance_;
class BulkUpdateLocationResponse;
class BulkUpdateLocationResponseDefaultTypeInternal;
extern BulkUpdateLocationResponseDefaultTypeInternal _BulkUpdateLocationResponse_default_instance_;
class BulkUpdateLocationWithoutBoundaryByIdRequest;
class BulkUpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal;
extern BulkUpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal _BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_;
class BulkUpdateLocationWithoutBoundaryByIdResponse;
class BulkUpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal;
extern BulkUpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal _BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConfigRecord;
class ConfigRecordDefaultTypeInternal;
extern ConfigRecordDefaultTypeInternal _ConfigRecord_default_instance_;
class DeleteLocationByIdRequest;
class DeleteLocationByIdRequestDefaultTypeInternal;
extern DeleteLocationByIdRequestDefaultTypeInternal _DeleteLocationByIdRequest_default_instance_;
class DeleteLocationByIdResponse;
class DeleteLocationByIdResponseDefaultTypeInternal;
extern DeleteLocationByIdResponseDefaultTypeInternal _DeleteLocationByIdResponse_default_instance_;
class FetchConfigByIdRequest;
class FetchConfigByIdRequestDefaultTypeInternal;
extern FetchConfigByIdRequestDefaultTypeInternal _FetchConfigByIdRequest_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongRequest;
class FetchDuplicateDistrictsBySDTVLatLongRequestDefaultTypeInternal;
extern FetchDuplicateDistrictsBySDTVLatLongRequestDefaultTypeInternal _FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongResponse;
class FetchDuplicateDistrictsBySDTVLatLongResponseDefaultTypeInternal;
extern FetchDuplicateDistrictsBySDTVLatLongResponseDefaultTypeInternal _FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_;
class FetchDuplicateDistrictsBySDTVLatLongResponseRecord;
class FetchDuplicateDistrictsBySDTVLatLongResponseRecordDefaultTypeInternal;
extern FetchDuplicateDistrictsBySDTVLatLongResponseRecordDefaultTypeInternal _FetchDuplicateDistrictsBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateStatesBySDTVLatLongRequest;
class FetchDuplicateStatesBySDTVLatLongRequestDefaultTypeInternal;
extern FetchDuplicateStatesBySDTVLatLongRequestDefaultTypeInternal _FetchDuplicateStatesBySDTVLatLongRequest_default_instance_;
class FetchDuplicateStatesBySDTVLatLongResponse;
class FetchDuplicateStatesBySDTVLatLongResponseDefaultTypeInternal;
extern FetchDuplicateStatesBySDTVLatLongResponseDefaultTypeInternal _FetchDuplicateStatesBySDTVLatLongResponse_default_instance_;
class FetchDuplicateStatesBySDTVLatLongResponseRecord;
class FetchDuplicateStatesBySDTVLatLongResponseRecordDefaultTypeInternal;
extern FetchDuplicateStatesBySDTVLatLongResponseRecordDefaultTypeInternal _FetchDuplicateStatesBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongRequest;
class FetchDuplicateTehsilsBySDTVLatLongRequestDefaultTypeInternal;
extern FetchDuplicateTehsilsBySDTVLatLongRequestDefaultTypeInternal _FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongResponse;
class FetchDuplicateTehsilsBySDTVLatLongResponseDefaultTypeInternal;
extern FetchDuplicateTehsilsBySDTVLatLongResponseDefaultTypeInternal _FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_;
class FetchDuplicateTehsilsBySDTVLatLongResponseRecord;
class FetchDuplicateTehsilsBySDTVLatLongResponseRecordDefaultTypeInternal;
extern FetchDuplicateTehsilsBySDTVLatLongResponseRecordDefaultTypeInternal _FetchDuplicateTehsilsBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongRequest;
class FetchDuplicateVillagesBySDTVLatLongRequestDefaultTypeInternal;
extern FetchDuplicateVillagesBySDTVLatLongRequestDefaultTypeInternal _FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongResponse;
class FetchDuplicateVillagesBySDTVLatLongResponseDefaultTypeInternal;
extern FetchDuplicateVillagesBySDTVLatLongResponseDefaultTypeInternal _FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_;
class FetchDuplicateVillagesBySDTVLatLongResponseRecord;
class FetchDuplicateVillagesBySDTVLatLongResponseRecordDefaultTypeInternal;
extern FetchDuplicateVillagesBySDTVLatLongResponseRecordDefaultTypeInternal _FetchDuplicateVillagesBySDTVLatLongResponseRecord_default_instance_;
class FetchDuplicateVillagesRequest;
class FetchDuplicateVillagesRequestDefaultTypeInternal;
extern FetchDuplicateVillagesRequestDefaultTypeInternal _FetchDuplicateVillagesRequest_default_instance_;
class FetchDuplicateVillagesResponse;
class FetchDuplicateVillagesResponseDefaultTypeInternal;
extern FetchDuplicateVillagesResponseDefaultTypeInternal _FetchDuplicateVillagesResponse_default_instance_;
class FetchDuplicateVillagesResponseRecord;
class FetchDuplicateVillagesResponseRecordDefaultTypeInternal;
extern FetchDuplicateVillagesResponseRecordDefaultTypeInternal _FetchDuplicateVillagesResponseRecord_default_instance_;
class FetchLocationByCodeAndNamespaceRequest;
class FetchLocationByCodeAndNamespaceRequestDefaultTypeInternal;
extern FetchLocationByCodeAndNamespaceRequestDefaultTypeInternal _FetchLocationByCodeAndNamespaceRequest_default_instance_;
class FetchLocationByIdRequest;
class FetchLocationByIdRequestDefaultTypeInternal;
extern FetchLocationByIdRequestDefaultTypeInternal _FetchLocationByIdRequest_default_instance_;
class FetchS2CellByIdRequest;
class FetchS2CellByIdRequestDefaultTypeInternal;
extern FetchS2CellByIdRequestDefaultTypeInternal _FetchS2CellByIdRequest_default_instance_;
class FetchS2CellByLocationIdRequest;
class FetchS2CellByLocationIdRequestDefaultTypeInternal;
extern FetchS2CellByLocationIdRequestDefaultTypeInternal _FetchS2CellByLocationIdRequest_default_instance_;
class FetchS2CellByLocationRequest;
class FetchS2CellByLocationRequestDefaultTypeInternal;
extern FetchS2CellByLocationRequestDefaultTypeInternal _FetchS2CellByLocationRequest_default_instance_;
class GeographyDataType;
class GeographyDataTypeDefaultTypeInternal;
extern GeographyDataTypeDefaultTypeInternal _GeographyDataType_default_instance_;
class GeographyTypeMessageResponse;
class GeographyTypeMessageResponseDefaultTypeInternal;
extern GeographyTypeMessageResponseDefaultTypeInternal _GeographyTypeMessageResponse_default_instance_;
class GetChildGeographiesRequest;
class GetChildGeographiesRequestDefaultTypeInternal;
extern GetChildGeographiesRequestDefaultTypeInternal _GetChildGeographiesRequest_default_instance_;
class GetChildGeographiesResponse;
class GetChildGeographiesResponseDefaultTypeInternal;
extern GetChildGeographiesResponseDefaultTypeInternal _GetChildGeographiesResponse_default_instance_;
class GetChildGeographiesResponseRecord;
class GetChildGeographiesResponseRecordDefaultTypeInternal;
extern GetChildGeographiesResponseRecordDefaultTypeInternal _GetChildGeographiesResponseRecord_default_instance_;
class GetDuplicateGeographiesRequest;
class GetDuplicateGeographiesRequestDefaultTypeInternal;
extern GetDuplicateGeographiesRequestDefaultTypeInternal _GetDuplicateGeographiesRequest_default_instance_;
class GetDuplicateGeographiesResponse;
class GetDuplicateGeographiesResponseDefaultTypeInternal;
extern GetDuplicateGeographiesResponseDefaultTypeInternal _GetDuplicateGeographiesResponse_default_instance_;
class GetDuplicateGeographiesResponseRecord;
class GetDuplicateGeographiesResponseRecordDefaultTypeInternal;
extern GetDuplicateGeographiesResponseRecordDefaultTypeInternal _GetDuplicateGeographiesResponseRecord_default_instance_;
class GetLocationDataByLatLngRequest;
class GetLocationDataByLatLngRequestDefaultTypeInternal;
extern GetLocationDataByLatLngRequestDefaultTypeInternal _GetLocationDataByLatLngRequest_default_instance_;
class GetLocationDataByLatLngResponse;
class GetLocationDataByLatLngResponseDefaultTypeInternal;
extern GetLocationDataByLatLngResponseDefaultTypeInternal _GetLocationDataByLatLngResponse_default_instance_;
class GetLocationDataByLatLngResponseRecord;
class GetLocationDataByLatLngResponseRecordDefaultTypeInternal;
extern GetLocationDataByLatLngResponseRecordDefaultTypeInternal _GetLocationDataByLatLngResponseRecord_default_instance_;
class GetLocationsRequest;
class GetLocationsRequestDefaultTypeInternal;
extern GetLocationsRequestDefaultTypeInternal _GetLocationsRequest_default_instance_;
class GetLocationsResponse;
class GetLocationsResponseDefaultTypeInternal;
extern GetLocationsResponseDefaultTypeInternal _GetLocationsResponse_default_instance_;
class GetLocationsResponseRecord;
class GetLocationsResponseRecordDefaultTypeInternal;
extern GetLocationsResponseRecordDefaultTypeInternal _GetLocationsResponseRecord_default_instance_;
class GetLocationsWithBoundaryRequest;
class GetLocationsWithBoundaryRequestDefaultTypeInternal;
extern GetLocationsWithBoundaryRequestDefaultTypeInternal _GetLocationsWithBoundaryRequest_default_instance_;
class GetLocationsWithBoundaryResponse;
class GetLocationsWithBoundaryResponseDefaultTypeInternal;
extern GetLocationsWithBoundaryResponseDefaultTypeInternal _GetLocationsWithBoundaryResponse_default_instance_;
class GetLocationsWithBoundaryResponseRecord;
class GetLocationsWithBoundaryResponseRecordDefaultTypeInternal;
extern GetLocationsWithBoundaryResponseRecordDefaultTypeInternal _GetLocationsWithBoundaryResponseRecord_default_instance_;
class InsertConfigRequest;
class InsertConfigRequestDefaultTypeInternal;
extern InsertConfigRequestDefaultTypeInternal _InsertConfigRequest_default_instance_;
class InsertConfigResponse;
class InsertConfigResponseDefaultTypeInternal;
extern InsertConfigResponseDefaultTypeInternal _InsertConfigResponse_default_instance_;
class InsertLocationRequest;
class InsertLocationRequestDefaultTypeInternal;
extern InsertLocationRequestDefaultTypeInternal _InsertLocationRequest_default_instance_;
class InsertLocationResponse;
class InsertLocationResponseDefaultTypeInternal;
extern InsertLocationResponseDefaultTypeInternal _InsertLocationResponse_default_instance_;
class InsertLocationS2CellRequest;
class InsertLocationS2CellRequestDefaultTypeInternal;
extern InsertLocationS2CellRequestDefaultTypeInternal _InsertLocationS2CellRequest_default_instance_;
class InsertLocationS2CellResponse;
class InsertLocationS2CellResponseDefaultTypeInternal;
extern InsertLocationS2CellResponseDefaultTypeInternal _InsertLocationS2CellResponse_default_instance_;
class InsertLocationWithoutBoundaryRequest;
class InsertLocationWithoutBoundaryRequestDefaultTypeInternal;
extern InsertLocationWithoutBoundaryRequestDefaultTypeInternal _InsertLocationWithoutBoundaryRequest_default_instance_;
class InsertLocationWithoutBoundaryResponse;
class InsertLocationWithoutBoundaryResponseDefaultTypeInternal;
extern InsertLocationWithoutBoundaryResponseDefaultTypeInternal _InsertLocationWithoutBoundaryResponse_default_instance_;
class InsertVendorLocationDataRequest;
class InsertVendorLocationDataRequestDefaultTypeInternal;
extern InsertVendorLocationDataRequestDefaultTypeInternal _InsertVendorLocationDataRequest_default_instance_;
class InsertVendorLocationDataResponse;
class InsertVendorLocationDataResponseDefaultTypeInternal;
extern InsertVendorLocationDataResponseDefaultTypeInternal _InsertVendorLocationDataResponse_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class LabelGroup;
class LabelGroupDefaultTypeInternal;
extern LabelGroupDefaultTypeInternal _LabelGroup_default_instance_;
class LabelOPP;
class LabelOPPDefaultTypeInternal;
extern LabelOPPDefaultTypeInternal _LabelOPP_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class LocationRecord;
class LocationRecordDefaultTypeInternal;
extern LocationRecordDefaultTypeInternal _LocationRecord_default_instance_;
class LocationS2Cells;
class LocationS2CellsDefaultTypeInternal;
extern LocationS2CellsDefaultTypeInternal _LocationS2Cells_default_instance_;
class LocationS2CellsRecord;
class LocationS2CellsRecordDefaultTypeInternal;
extern LocationS2CellsRecordDefaultTypeInternal _LocationS2CellsRecord_default_instance_;
class LocationWithBoundary;
class LocationWithBoundaryDefaultTypeInternal;
extern LocationWithBoundaryDefaultTypeInternal _LocationWithBoundary_default_instance_;
class LocationWithoutBoundary;
class LocationWithoutBoundaryDefaultTypeInternal;
extern LocationWithoutBoundaryDefaultTypeInternal _LocationWithoutBoundary_default_instance_;
class MultiRequests;
class MultiRequestsDefaultTypeInternal;
extern MultiRequestsDefaultTypeInternal _MultiRequests_default_instance_;
class MultiResponses;
class MultiResponsesDefaultTypeInternal;
extern MultiResponsesDefaultTypeInternal _MultiResponses_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class S2Cell;
class S2CellDefaultTypeInternal;
extern S2CellDefaultTypeInternal _S2Cell_default_instance_;
class S2CellRecord;
class S2CellRecordDefaultTypeInternal;
extern S2CellRecordDefaultTypeInternal _S2CellRecord_default_instance_;
class SearchLocationsByGeohashRequest;
class SearchLocationsByGeohashRequestDefaultTypeInternal;
extern SearchLocationsByGeohashRequestDefaultTypeInternal _SearchLocationsByGeohashRequest_default_instance_;
class SearchLocationsByGeohashResponse;
class SearchLocationsByGeohashResponseDefaultTypeInternal;
extern SearchLocationsByGeohashResponseDefaultTypeInternal _SearchLocationsByGeohashResponse_default_instance_;
class SearchLocationsByGeohashResponseRecord;
class SearchLocationsByGeohashResponseRecordDefaultTypeInternal;
extern SearchLocationsByGeohashResponseRecordDefaultTypeInternal _SearchLocationsByGeohashResponseRecord_default_instance_;
class SearchVendorLocationsByGeohashRequest;
class SearchVendorLocationsByGeohashRequestDefaultTypeInternal;
extern SearchVendorLocationsByGeohashRequestDefaultTypeInternal _SearchVendorLocationsByGeohashRequest_default_instance_;
class SearchVendorLocationsByGeohashResponse;
class SearchVendorLocationsByGeohashResponseDefaultTypeInternal;
extern SearchVendorLocationsByGeohashResponseDefaultTypeInternal _SearchVendorLocationsByGeohashResponse_default_instance_;
class SearchVendorLocationsByGeohashResponseRecord;
class SearchVendorLocationsByGeohashResponseRecordDefaultTypeInternal;
extern SearchVendorLocationsByGeohashResponseRecordDefaultTypeInternal _SearchVendorLocationsByGeohashResponseRecord_default_instance_;
class UpdateDeleteS2CellByLocationRequest;
class UpdateDeleteS2CellByLocationRequestDefaultTypeInternal;
extern UpdateDeleteS2CellByLocationRequestDefaultTypeInternal _UpdateDeleteS2CellByLocationRequest_default_instance_;
class UpdateDeleteS2CellByLocationResponse;
class UpdateDeleteS2CellByLocationResponseDefaultTypeInternal;
extern UpdateDeleteS2CellByLocationResponseDefaultTypeInternal _UpdateDeleteS2CellByLocationResponse_default_instance_;
class UpdateLocationByIdRequest;
class UpdateLocationByIdRequestDefaultTypeInternal;
extern UpdateLocationByIdRequestDefaultTypeInternal _UpdateLocationByIdRequest_default_instance_;
class UpdateLocationByIdResponse;
class UpdateLocationByIdResponseDefaultTypeInternal;
extern UpdateLocationByIdResponseDefaultTypeInternal _UpdateLocationByIdResponse_default_instance_;
class UpdateLocationLabelByIdRequest;
class UpdateLocationLabelByIdRequestDefaultTypeInternal;
extern UpdateLocationLabelByIdRequestDefaultTypeInternal _UpdateLocationLabelByIdRequest_default_instance_;
class UpdateLocationLabelByIdResponse;
class UpdateLocationLabelByIdResponseDefaultTypeInternal;
extern UpdateLocationLabelByIdResponseDefaultTypeInternal _UpdateLocationLabelByIdResponse_default_instance_;
class UpdateLocationRequest;
class UpdateLocationRequestDefaultTypeInternal;
extern UpdateLocationRequestDefaultTypeInternal _UpdateLocationRequest_default_instance_;
class UpdateLocationResponse;
class UpdateLocationResponseDefaultTypeInternal;
extern UpdateLocationResponseDefaultTypeInternal _UpdateLocationResponse_default_instance_;
class UpdateLocationWithoutBoundaryByIdRequest;
class UpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal;
extern UpdateLocationWithoutBoundaryByIdRequestDefaultTypeInternal _UpdateLocationWithoutBoundaryByIdRequest_default_instance_;
class UpdateLocationWithoutBoundaryByIdResponse;
class UpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal;
extern UpdateLocationWithoutBoundaryByIdResponseDefaultTypeInternal _UpdateLocationWithoutBoundaryByIdResponse_default_instance_;
}  // namespace proto
}  // namespace service
}  // namespace location
}  // namespace nurture
}  // namespace farm
PROTOBUF_NAMESPACE_OPEN
template<> ::farm::nurture::location::service::proto::AddLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::AddLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::AddLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::AddLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::AddVendorApiLedgerRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::AddVendorApiLedgerResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkAddLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkAddLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkAddLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkAddLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkGeographyDataType* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkGeographyDataType>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkGeographyTypeMessageResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertConfigRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertConfigResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::Config* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::Config>(Arena*);
template<> ::farm::nurture::location::service::proto::ConfigRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::ConfigRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::DeleteLocationByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::DeleteLocationByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchConfigByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchLocationByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchS2CellByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::FetchS2CellByLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GeographyDataType* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GeographyDataType>(Arena*);
template<> ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GeographyTypeMessageResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetChildGeographiesRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetChildGeographiesResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetChildGeographiesResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetDuplicateGeographiesResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationDataByLatLngResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertConfigRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertConfigRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertConfigResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertConfigResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationS2CellRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationS2CellResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertVendorLocationDataRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::InsertVendorLocationDataResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::Label* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::Label>(Arena*);
template<> ::farm::nurture::location::service::proto::LabelGroup* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LabelGroup>(Arena*);
template<> ::farm::nurture::location::service::proto::LabelOPP* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LabelOPP>(Arena*);
template<> ::farm::nurture::location::service::proto::Location* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::Location>(Arena*);
template<> ::farm::nurture::location::service::proto::LocationRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LocationRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::LocationS2Cells* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LocationS2Cells>(Arena*);
template<> ::farm::nurture::location::service::proto::LocationS2CellsRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LocationS2CellsRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::LocationWithBoundary* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LocationWithBoundary>(Arena*);
template<> ::farm::nurture::location::service::proto::LocationWithoutBoundary* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::LocationWithoutBoundary>(Arena*);
template<> ::farm::nurture::location::service::proto::MultiRequests* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::MultiRequests>(Arena*);
template<> ::farm::nurture::location::service::proto::MultiResponses* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::MultiResponses>(Arena*);
template<> ::farm::nurture::location::service::proto::Request* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::Request>(Arena*);
template<> ::farm::nurture::location::service::proto::Response* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::Response>(Arena*);
template<> ::farm::nurture::location::service::proto::S2Cell* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::S2Cell>(Arena*);
template<> ::farm::nurture::location::service::proto::S2CellRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::S2CellRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationResponse>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest>(Arena*);
template<> ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Arena::CreateMaybeMessage<::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace farm {
namespace nurture {
namespace location {
namespace service {
namespace proto {

enum InsertLocationRequest_Status : int {
  InsertLocationRequest_Status_UNCLAIMED = 0,
  InsertLocationRequest_Status_CLAIMED = 1,
  InsertLocationRequest_Status_InsertLocationRequest_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InsertLocationRequest_Status_InsertLocationRequest_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InsertLocationRequest_Status_IsValid(int value);
constexpr InsertLocationRequest_Status InsertLocationRequest_Status_Status_MIN = InsertLocationRequest_Status_UNCLAIMED;
constexpr InsertLocationRequest_Status InsertLocationRequest_Status_Status_MAX = InsertLocationRequest_Status_CLAIMED;
constexpr int InsertLocationRequest_Status_Status_ARRAYSIZE = InsertLocationRequest_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationRequest_Status_descriptor();
template<typename T>
inline const std::string& InsertLocationRequest_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertLocationRequest_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertLocationRequest_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertLocationRequest_Status_descriptor(), enum_t_value);
}
inline bool InsertLocationRequest_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InsertLocationRequest_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertLocationRequest_Status>(
    InsertLocationRequest_Status_descriptor(), name, value);
}
enum InsertLocationRequest_Visibility : int {
  InsertLocationRequest_Visibility_VISIBLE = 0,
  InsertLocationRequest_Visibility_INVISIBLE = 1,
  InsertLocationRequest_Visibility_InsertLocationRequest_Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InsertLocationRequest_Visibility_InsertLocationRequest_Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InsertLocationRequest_Visibility_IsValid(int value);
constexpr InsertLocationRequest_Visibility InsertLocationRequest_Visibility_Visibility_MIN = InsertLocationRequest_Visibility_VISIBLE;
constexpr InsertLocationRequest_Visibility InsertLocationRequest_Visibility_Visibility_MAX = InsertLocationRequest_Visibility_INVISIBLE;
constexpr int InsertLocationRequest_Visibility_Visibility_ARRAYSIZE = InsertLocationRequest_Visibility_Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationRequest_Visibility_descriptor();
template<typename T>
inline const std::string& InsertLocationRequest_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertLocationRequest_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertLocationRequest_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertLocationRequest_Visibility_descriptor(), enum_t_value);
}
inline bool InsertLocationRequest_Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InsertLocationRequest_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertLocationRequest_Visibility>(
    InsertLocationRequest_Visibility_descriptor(), name, value);
}
enum UpdateLocationByIdRequest_Status : int {
  UpdateLocationByIdRequest_Status_UNCLAIMED = 0,
  UpdateLocationByIdRequest_Status_CLAIMED = 1,
  UpdateLocationByIdRequest_Status_UpdateLocationByIdRequest_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateLocationByIdRequest_Status_UpdateLocationByIdRequest_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateLocationByIdRequest_Status_IsValid(int value);
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest_Status_Status_MIN = UpdateLocationByIdRequest_Status_UNCLAIMED;
constexpr UpdateLocationByIdRequest_Status UpdateLocationByIdRequest_Status_Status_MAX = UpdateLocationByIdRequest_Status_CLAIMED;
constexpr int UpdateLocationByIdRequest_Status_Status_ARRAYSIZE = UpdateLocationByIdRequest_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationByIdRequest_Status_descriptor();
template<typename T>
inline const std::string& UpdateLocationByIdRequest_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateLocationByIdRequest_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateLocationByIdRequest_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateLocationByIdRequest_Status_descriptor(), enum_t_value);
}
inline bool UpdateLocationByIdRequest_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateLocationByIdRequest_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateLocationByIdRequest_Status>(
    UpdateLocationByIdRequest_Status_descriptor(), name, value);
}
enum UpdateLocationByIdRequest_Visibility : int {
  UpdateLocationByIdRequest_Visibility_VISIBLE = 0,
  UpdateLocationByIdRequest_Visibility_INVISIBLE = 1,
  UpdateLocationByIdRequest_Visibility_UpdateLocationByIdRequest_Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateLocationByIdRequest_Visibility_UpdateLocationByIdRequest_Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateLocationByIdRequest_Visibility_IsValid(int value);
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest_Visibility_Visibility_MIN = UpdateLocationByIdRequest_Visibility_VISIBLE;
constexpr UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest_Visibility_Visibility_MAX = UpdateLocationByIdRequest_Visibility_INVISIBLE;
constexpr int UpdateLocationByIdRequest_Visibility_Visibility_ARRAYSIZE = UpdateLocationByIdRequest_Visibility_Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationByIdRequest_Visibility_descriptor();
template<typename T>
inline const std::string& UpdateLocationByIdRequest_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateLocationByIdRequest_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateLocationByIdRequest_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateLocationByIdRequest_Visibility_descriptor(), enum_t_value);
}
inline bool UpdateLocationByIdRequest_Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateLocationByIdRequest_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateLocationByIdRequest_Visibility>(
    UpdateLocationByIdRequest_Visibility_descriptor(), name, value);
}
enum InsertLocationWithoutBoundaryRequest_Status : int {
  InsertLocationWithoutBoundaryRequest_Status_UNCLAIMED = 0,
  InsertLocationWithoutBoundaryRequest_Status_CLAIMED = 1,
  InsertLocationWithoutBoundaryRequest_Status_InsertLocationWithoutBoundaryRequest_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InsertLocationWithoutBoundaryRequest_Status_InsertLocationWithoutBoundaryRequest_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InsertLocationWithoutBoundaryRequest_Status_IsValid(int value);
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest_Status_Status_MIN = InsertLocationWithoutBoundaryRequest_Status_UNCLAIMED;
constexpr InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest_Status_Status_MAX = InsertLocationWithoutBoundaryRequest_Status_CLAIMED;
constexpr int InsertLocationWithoutBoundaryRequest_Status_Status_ARRAYSIZE = InsertLocationWithoutBoundaryRequest_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationWithoutBoundaryRequest_Status_descriptor();
template<typename T>
inline const std::string& InsertLocationWithoutBoundaryRequest_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertLocationWithoutBoundaryRequest_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertLocationWithoutBoundaryRequest_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertLocationWithoutBoundaryRequest_Status_descriptor(), enum_t_value);
}
inline bool InsertLocationWithoutBoundaryRequest_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InsertLocationWithoutBoundaryRequest_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertLocationWithoutBoundaryRequest_Status>(
    InsertLocationWithoutBoundaryRequest_Status_descriptor(), name, value);
}
enum InsertLocationWithoutBoundaryRequest_Visibility : int {
  InsertLocationWithoutBoundaryRequest_Visibility_VISIBLE = 0,
  InsertLocationWithoutBoundaryRequest_Visibility_INVISIBLE = 1,
  InsertLocationWithoutBoundaryRequest_Visibility_InsertLocationWithoutBoundaryRequest_Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InsertLocationWithoutBoundaryRequest_Visibility_InsertLocationWithoutBoundaryRequest_Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InsertLocationWithoutBoundaryRequest_Visibility_IsValid(int value);
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest_Visibility_Visibility_MIN = InsertLocationWithoutBoundaryRequest_Visibility_VISIBLE;
constexpr InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest_Visibility_Visibility_MAX = InsertLocationWithoutBoundaryRequest_Visibility_INVISIBLE;
constexpr int InsertLocationWithoutBoundaryRequest_Visibility_Visibility_ARRAYSIZE = InsertLocationWithoutBoundaryRequest_Visibility_Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertLocationWithoutBoundaryRequest_Visibility_descriptor();
template<typename T>
inline const std::string& InsertLocationWithoutBoundaryRequest_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertLocationWithoutBoundaryRequest_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertLocationWithoutBoundaryRequest_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertLocationWithoutBoundaryRequest_Visibility_descriptor(), enum_t_value);
}
inline bool InsertLocationWithoutBoundaryRequest_Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InsertLocationWithoutBoundaryRequest_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertLocationWithoutBoundaryRequest_Visibility>(
    InsertLocationWithoutBoundaryRequest_Visibility_descriptor(), name, value);
}
enum UpdateLocationWithoutBoundaryByIdRequest_Status : int {
  UpdateLocationWithoutBoundaryByIdRequest_Status_UNCLAIMED = 0,
  UpdateLocationWithoutBoundaryByIdRequest_Status_CLAIMED = 1,
  UpdateLocationWithoutBoundaryByIdRequest_Status_UpdateLocationWithoutBoundaryByIdRequest_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateLocationWithoutBoundaryByIdRequest_Status_UpdateLocationWithoutBoundaryByIdRequest_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateLocationWithoutBoundaryByIdRequest_Status_IsValid(int value);
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest_Status_Status_MIN = UpdateLocationWithoutBoundaryByIdRequest_Status_UNCLAIMED;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest_Status_Status_MAX = UpdateLocationWithoutBoundaryByIdRequest_Status_CLAIMED;
constexpr int UpdateLocationWithoutBoundaryByIdRequest_Status_Status_ARRAYSIZE = UpdateLocationWithoutBoundaryByIdRequest_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor();
template<typename T>
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateLocationWithoutBoundaryByIdRequest_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateLocationWithoutBoundaryByIdRequest_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor(), enum_t_value);
}
inline bool UpdateLocationWithoutBoundaryByIdRequest_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateLocationWithoutBoundaryByIdRequest_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateLocationWithoutBoundaryByIdRequest_Status>(
    UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor(), name, value);
}
enum UpdateLocationWithoutBoundaryByIdRequest_Visibility : int {
  UpdateLocationWithoutBoundaryByIdRequest_Visibility_VISIBLE = 0,
  UpdateLocationWithoutBoundaryByIdRequest_Visibility_INVISIBLE = 1,
  UpdateLocationWithoutBoundaryByIdRequest_Visibility_UpdateLocationWithoutBoundaryByIdRequest_Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateLocationWithoutBoundaryByIdRequest_Visibility_UpdateLocationWithoutBoundaryByIdRequest_Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateLocationWithoutBoundaryByIdRequest_Visibility_IsValid(int value);
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_MIN = UpdateLocationWithoutBoundaryByIdRequest_Visibility_VISIBLE;
constexpr UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_MAX = UpdateLocationWithoutBoundaryByIdRequest_Visibility_INVISIBLE;
constexpr int UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_ARRAYSIZE = UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor();
template<typename T>
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateLocationWithoutBoundaryByIdRequest_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateLocationWithoutBoundaryByIdRequest_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor(), enum_t_value);
}
inline bool UpdateLocationWithoutBoundaryByIdRequest_Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateLocationWithoutBoundaryByIdRequest_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateLocationWithoutBoundaryByIdRequest_Visibility>(
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor(), name, value);
}
enum Namespace : int {
  NO_NAMESPACE = 0,
  NURTURE_FARM = 1,
  NURTURE_SUSTAIN = 2,
  MUNICIPALITY = 3,
  NURTURE_TRADE = 4,
  Namespace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Namespace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Namespace_IsValid(int value);
constexpr Namespace Namespace_MIN = NO_NAMESPACE;
constexpr Namespace Namespace_MAX = NURTURE_TRADE;
constexpr int Namespace_ARRAYSIZE = Namespace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Namespace_descriptor();
template<typename T>
inline const std::string& Namespace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Namespace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Namespace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Namespace_descriptor(), enum_t_value);
}
inline bool Namespace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Namespace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Namespace>(
    Namespace_descriptor(), name, value);
}
enum Status : int {
  NO_STATUS = 0,
  UNCLAIMED = 1,
  CLAIMED = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = NO_STATUS;
constexpr Status Status_MAX = CLAIMED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum Format : int {
  NO_FORMAT = 0,
  KML = 1,
  GEOJSON = 2,
  TEXT = 3,
  SHP = 4,
  Format_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Format_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Format_IsValid(int value);
constexpr Format Format_MIN = NO_FORMAT;
constexpr Format Format_MAX = SHP;
constexpr int Format_ARRAYSIZE = Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_descriptor();
template<typename T>
inline const std::string& Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Format_descriptor(), enum_t_value);
}
inline bool Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Format>(
    Format_descriptor(), name, value);
}
enum Visibility : int {
  NO_VISIBILITY = 0,
  VISIBLE = 1,
  INVISIBLE = 2,
  Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Visibility_IsValid(int value);
constexpr Visibility Visibility_MIN = NO_VISIBILITY;
constexpr Visibility Visibility_MAX = INVISIBLE;
constexpr int Visibility_ARRAYSIZE = Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_descriptor();
template<typename T>
inline const std::string& Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Visibility_descriptor(), enum_t_value);
}
inline bool Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Visibility>(
    Visibility_descriptor(), name, value);
}
enum GeographyType : int {
  NO_GEOGRAPHY_TYPE = 0,
  VILLAGE = 1,
  TEHSIL = 2,
  DISTRICT = 3,
  STATE = 4,
  COUNTRY = 5,
  GeographyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeographyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeographyType_IsValid(int value);
constexpr GeographyType GeographyType_MIN = NO_GEOGRAPHY_TYPE;
constexpr GeographyType GeographyType_MAX = COUNTRY;
constexpr int GeographyType_ARRAYSIZE = GeographyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeographyType_descriptor();
template<typename T>
inline const std::string& GeographyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeographyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeographyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeographyType_descriptor(), enum_t_value);
}
inline bool GeographyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GeographyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeographyType>(
    GeographyType_descriptor(), name, value);
}
enum LabelKey : int {
  no_label_type = 0,
  country = 1,
  state_id = 2,
  state = 3,
  district_id = 4,
  district = 5,
  tehsil_id = 6,
  tehsil = 7,
  type = 8,
  LabelKey_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LabelKey_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LabelKey_IsValid(int value);
constexpr LabelKey LabelKey_MIN = no_label_type;
constexpr LabelKey LabelKey_MAX = type;
constexpr int LabelKey_ARRAYSIZE = LabelKey_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelKey_descriptor();
template<typename T>
inline const std::string& LabelKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelKey_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LabelKey_descriptor(), enum_t_value);
}
inline bool LabelKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LabelKey* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LabelKey>(
    LabelKey_descriptor(), name, value);
}
// ===================================================================

class InsertLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationRequest) */ {
 public:
  inline InsertLocationRequest() : InsertLocationRequest(nullptr) {}
  virtual ~InsertLocationRequest();

  InsertLocationRequest(const InsertLocationRequest& from);
  InsertLocationRequest(InsertLocationRequest&& from) noexcept
    : InsertLocationRequest() {
    *this = ::std::move(from);
  }

  inline InsertLocationRequest& operator=(const InsertLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationRequest& operator=(InsertLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationRequest& default_instance();

  static inline const InsertLocationRequest* internal_default_instance() {
    return reinterpret_cast<const InsertLocationRequest*>(
               &_InsertLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsertLocationRequest& a, InsertLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationRequest* New() const final {
    return CreateMaybeMessage<InsertLocationRequest>(nullptr);
  }

  InsertLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationRequest& from);
  void MergeFrom(const InsertLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationRequest";
  }
  protected:
  explicit InsertLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InsertLocationRequest_Status Status;
  static constexpr Status UNCLAIMED =
    InsertLocationRequest_Status_UNCLAIMED;
  static constexpr Status CLAIMED =
    InsertLocationRequest_Status_CLAIMED;
  static inline bool Status_IsValid(int value) {
    return InsertLocationRequest_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    InsertLocationRequest_Status_Status_MIN;
  static constexpr Status Status_MAX =
    InsertLocationRequest_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    InsertLocationRequest_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return InsertLocationRequest_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return InsertLocationRequest_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return InsertLocationRequest_Status_Parse(name, value);
  }

  typedef InsertLocationRequest_Visibility Visibility;
  static constexpr Visibility VISIBLE =
    InsertLocationRequest_Visibility_VISIBLE;
  static constexpr Visibility INVISIBLE =
    InsertLocationRequest_Visibility_INVISIBLE;
  static inline bool Visibility_IsValid(int value) {
    return InsertLocationRequest_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    InsertLocationRequest_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    InsertLocationRequest_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    InsertLocationRequest_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return InsertLocationRequest_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return InsertLocationRequest_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Visibility* value) {
    return InsertLocationRequest_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kBoundaryFieldNumber = 4,
    kLabelsFieldNumber = 8,
    kNamespaceFieldNumber = 9,
    kCodeFieldNumber = 10,
    kMetadataFieldNumber = 12,
    kCreatedByActorTypeFieldNumber = 17,
    kModifiedByActorTypeFieldNumber = 19,
    kGeographyUidFieldNumber = 21,
    kPincodeFieldNumber = 22,
    kLatLongGeohashFieldNumber = 23,
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 2,
    kCenterLatitudeFieldNumber = 5,
    kCenterLongitudeFieldNumber = 6,
    kAreaFieldNumber = 7,
    kStatusFieldNumber = 11,
    kVersionFieldNumber = 13,
    kMinS2LevelFieldNumber = 14,
    kMaxS2LevelFieldNumber = 15,
    kCreatedByActorIdFieldNumber = 16,
    kModifiedByActorIdFieldNumber = 18,
    kVisibilityFieldNumber = 20,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string boundary = 4;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string labels = 8;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string namespace = 9;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 10;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string metadata = 12;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string createdByActorType = 17;
  void clear_createdbyactortype();
  const std::string& createdbyactortype() const;
  void set_createdbyactortype(const std::string& value);
  void set_createdbyactortype(std::string&& value);
  void set_createdbyactortype(const char* value);
  void set_createdbyactortype(const char* value, size_t size);
  std::string* mutable_createdbyactortype();
  std::string* release_createdbyactortype();
  void set_allocated_createdbyactortype(std::string* createdbyactortype);
  private:
  const std::string& _internal_createdbyactortype() const;
  void _internal_set_createdbyactortype(const std::string& value);
  std::string* _internal_mutable_createdbyactortype();
  public:

  // string modifiedByActorType = 19;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // string geographyUid = 21;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string pincode = 22;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string latLongGeohash = 23;
  void clear_latlonggeohash();
  const std::string& latlonggeohash() const;
  void set_latlonggeohash(const std::string& value);
  void set_latlonggeohash(std::string&& value);
  void set_latlonggeohash(const char* value);
  void set_latlonggeohash(const char* value, size_t size);
  std::string* mutable_latlonggeohash();
  std::string* release_latlonggeohash();
  void set_allocated_latlonggeohash(std::string* latlonggeohash);
  private:
  const std::string& _internal_latlonggeohash() const;
  void _internal_set_latlonggeohash(const std::string& value);
  std::string* _internal_mutable_latlonggeohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double centerLatitude = 5;
  void clear_centerlatitude();
  double centerlatitude() const;
  void set_centerlatitude(double value);
  private:
  double _internal_centerlatitude() const;
  void _internal_set_centerlatitude(double value);
  public:

  // double centerLongitude = 6;
  void clear_centerlongitude();
  double centerlongitude() const;
  void set_centerlongitude(double value);
  private:
  double _internal_centerlongitude() const;
  void _internal_set_centerlongitude(double value);
  public:

  // double area = 7;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // .farm.nurture.location.service.proto.InsertLocationRequest.Status status = 11;
  void clear_status();
  ::farm::nurture::location::service::proto::InsertLocationRequest_Status status() const;
  void set_status(::farm::nurture::location::service::proto::InsertLocationRequest_Status value);
  private:
  ::farm::nurture::location::service::proto::InsertLocationRequest_Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::InsertLocationRequest_Status value);
  public:

  // int32 version = 13;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minS2Level = 14;
  void clear_mins2level();
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level() const;
  void set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins2level() const;
  void _internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxS2Level = 15;
  void clear_maxs2level();
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level() const;
  void set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxs2level() const;
  void _internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createdByActorId = 16;
  void clear_createdbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid() const;
  void set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdbyactorid() const;
  void _internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 modifiedByActorId = 18;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.InsertLocationRequest.Visibility visibility = 20;
  void clear_visibility();
  ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::InsertLocationRequest_Visibility value);
  private:
  ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::InsertLocationRequest_Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latlonggeohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double centerlatitude_;
  double centerlongitude_;
  double area_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  int visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationRequest) */ {
 public:
  inline BulkInsertLocationRequest() : BulkInsertLocationRequest(nullptr) {}
  virtual ~BulkInsertLocationRequest();

  BulkInsertLocationRequest(const BulkInsertLocationRequest& from);
  BulkInsertLocationRequest(BulkInsertLocationRequest&& from) noexcept
    : BulkInsertLocationRequest() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationRequest& operator=(const BulkInsertLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationRequest& operator=(BulkInsertLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationRequest& default_instance();

  static inline const BulkInsertLocationRequest* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationRequest*>(
               &_BulkInsertLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BulkInsertLocationRequest& a, BulkInsertLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationRequest* New() const final {
    return CreateMaybeMessage<BulkInsertLocationRequest>(nullptr);
  }

  BulkInsertLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationRequest& from);
  void MergeFrom(const BulkInsertLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationRequest";
  }
  protected:
  explicit BulkInsertLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::InsertLocationRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationResponse) */ {
 public:
  inline InsertLocationResponse() : InsertLocationResponse(nullptr) {}
  virtual ~InsertLocationResponse();

  InsertLocationResponse(const InsertLocationResponse& from);
  InsertLocationResponse(InsertLocationResponse&& from) noexcept
    : InsertLocationResponse() {
    *this = ::std::move(from);
  }

  inline InsertLocationResponse& operator=(const InsertLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationResponse& operator=(InsertLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationResponse& default_instance();

  static inline const InsertLocationResponse* internal_default_instance() {
    return reinterpret_cast<const InsertLocationResponse*>(
               &_InsertLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InsertLocationResponse& a, InsertLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationResponse* New() const final {
    return CreateMaybeMessage<InsertLocationResponse>(nullptr);
  }

  InsertLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationResponse& from);
  void MergeFrom(const InsertLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationResponse";
  }
  protected:
  explicit InsertLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationResponse) */ {
 public:
  inline BulkInsertLocationResponse() : BulkInsertLocationResponse(nullptr) {}
  virtual ~BulkInsertLocationResponse();

  BulkInsertLocationResponse(const BulkInsertLocationResponse& from);
  BulkInsertLocationResponse(BulkInsertLocationResponse&& from) noexcept
    : BulkInsertLocationResponse() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationResponse& operator=(const BulkInsertLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationResponse& operator=(BulkInsertLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationResponse& default_instance();

  static inline const BulkInsertLocationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationResponse*>(
               &_BulkInsertLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BulkInsertLocationResponse& a, BulkInsertLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationResponse* New() const final {
    return CreateMaybeMessage<BulkInsertLocationResponse>(nullptr);
  }

  BulkInsertLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationResponse& from);
  void MergeFrom(const BulkInsertLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationResponse";
  }
  protected:
  explicit BulkInsertLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::InsertLocationResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertLocationS2CellRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationS2CellRequest) */ {
 public:
  inline InsertLocationS2CellRequest() : InsertLocationS2CellRequest(nullptr) {}
  virtual ~InsertLocationS2CellRequest();

  InsertLocationS2CellRequest(const InsertLocationS2CellRequest& from);
  InsertLocationS2CellRequest(InsertLocationS2CellRequest&& from) noexcept
    : InsertLocationS2CellRequest() {
    *this = ::std::move(from);
  }

  inline InsertLocationS2CellRequest& operator=(const InsertLocationS2CellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationS2CellRequest& operator=(InsertLocationS2CellRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationS2CellRequest& default_instance();

  static inline const InsertLocationS2CellRequest* internal_default_instance() {
    return reinterpret_cast<const InsertLocationS2CellRequest*>(
               &_InsertLocationS2CellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InsertLocationS2CellRequest& a, InsertLocationS2CellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationS2CellRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationS2CellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationS2CellRequest* New() const final {
    return CreateMaybeMessage<InsertLocationS2CellRequest>(nullptr);
  }

  InsertLocationS2CellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationS2CellRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationS2CellRequest& from);
  void MergeFrom(const InsertLocationS2CellRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationS2CellRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationS2CellRequest";
  }
  protected:
  explicit InsertLocationS2CellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kS2CellIdFieldNumber = 4,
    kS27LevelCellIdFieldNumber = 6,
    kS28LevelCellIdFieldNumber = 7,
    kS29LevelCellIdFieldNumber = 8,
    kS210LevelCellIdFieldNumber = 9,
    kS211LevelCellIdFieldNumber = 10,
    kS212LevelCellIdFieldNumber = 11,
    kS213LevelCellIdFieldNumber = 12,
    kS214LevelCellIdFieldNumber = 13,
    kS215LevelCellIdFieldNumber = 14,
    kS216LevelCellIdFieldNumber = 15,
    kS217LevelCellIdFieldNumber = 16,
    kS218LevelCellIdFieldNumber = 17,
    kS2CellLevelFieldNumber = 5,
  };
  // string namespace = 3;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 locationId = 2;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s2CellId = 4;
  void clear_s2cellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid() const;
  void set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s2cellid() const;
  void _internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s27LevelCellId = 6;
  void clear_s27levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid() const;
  void set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s27levelcellid() const;
  void _internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s28LevelCellId = 7;
  void clear_s28levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid() const;
  void set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s28levelcellid() const;
  void _internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s29LevelCellId = 8;
  void clear_s29levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid() const;
  void set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s29levelcellid() const;
  void _internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s210LevelCellId = 9;
  void clear_s210levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid() const;
  void set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s210levelcellid() const;
  void _internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s211LevelCellId = 10;
  void clear_s211levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid() const;
  void set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s211levelcellid() const;
  void _internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s212LevelCellId = 11;
  void clear_s212levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid() const;
  void set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s212levelcellid() const;
  void _internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s213LevelCellId = 12;
  void clear_s213levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid() const;
  void set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s213levelcellid() const;
  void _internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s214LevelCellId = 13;
  void clear_s214levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid() const;
  void set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s214levelcellid() const;
  void _internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s215LevelCellId = 14;
  void clear_s215levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid() const;
  void set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s215levelcellid() const;
  void _internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s216LevelCellId = 15;
  void clear_s216levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid() const;
  void set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s216levelcellid() const;
  void _internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s217LevelCellId = 16;
  void clear_s217levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid() const;
  void set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s217levelcellid() const;
  void _internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s218LevelCellId = 17;
  void clear_s218levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid() const;
  void set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s218levelcellid() const;
  void _internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 s2CellLevel = 5;
  void clear_s2celllevel();
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel() const;
  void set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s2celllevel() const;
  void _internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationS2CellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationS2CellRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest) */ {
 public:
  inline BulkInsertLocationS2CellRequest() : BulkInsertLocationS2CellRequest(nullptr) {}
  virtual ~BulkInsertLocationS2CellRequest();

  BulkInsertLocationS2CellRequest(const BulkInsertLocationS2CellRequest& from);
  BulkInsertLocationS2CellRequest(BulkInsertLocationS2CellRequest&& from) noexcept
    : BulkInsertLocationS2CellRequest() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationS2CellRequest& operator=(const BulkInsertLocationS2CellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationS2CellRequest& operator=(BulkInsertLocationS2CellRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationS2CellRequest& default_instance();

  static inline const BulkInsertLocationS2CellRequest* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationS2CellRequest*>(
               &_BulkInsertLocationS2CellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BulkInsertLocationS2CellRequest& a, BulkInsertLocationS2CellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationS2CellRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationS2CellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationS2CellRequest* New() const final {
    return CreateMaybeMessage<BulkInsertLocationS2CellRequest>(nullptr);
  }

  BulkInsertLocationS2CellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationS2CellRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationS2CellRequest& from);
  void MergeFrom(const BulkInsertLocationS2CellRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationS2CellRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest";
  }
  protected:
  explicit BulkInsertLocationS2CellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertLocationS2CellResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationS2CellResponse) */ {
 public:
  inline InsertLocationS2CellResponse() : InsertLocationS2CellResponse(nullptr) {}
  virtual ~InsertLocationS2CellResponse();

  InsertLocationS2CellResponse(const InsertLocationS2CellResponse& from);
  InsertLocationS2CellResponse(InsertLocationS2CellResponse&& from) noexcept
    : InsertLocationS2CellResponse() {
    *this = ::std::move(from);
  }

  inline InsertLocationS2CellResponse& operator=(const InsertLocationS2CellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationS2CellResponse& operator=(InsertLocationS2CellResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationS2CellResponse& default_instance();

  static inline const InsertLocationS2CellResponse* internal_default_instance() {
    return reinterpret_cast<const InsertLocationS2CellResponse*>(
               &_InsertLocationS2CellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InsertLocationS2CellResponse& a, InsertLocationS2CellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationS2CellResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationS2CellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationS2CellResponse* New() const final {
    return CreateMaybeMessage<InsertLocationS2CellResponse>(nullptr);
  }

  InsertLocationS2CellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationS2CellResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationS2CellResponse& from);
  void MergeFrom(const InsertLocationS2CellResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationS2CellResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationS2CellResponse";
  }
  protected:
  explicit InsertLocationS2CellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationS2CellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationS2CellResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse) */ {
 public:
  inline BulkInsertLocationS2CellResponse() : BulkInsertLocationS2CellResponse(nullptr) {}
  virtual ~BulkInsertLocationS2CellResponse();

  BulkInsertLocationS2CellResponse(const BulkInsertLocationS2CellResponse& from);
  BulkInsertLocationS2CellResponse(BulkInsertLocationS2CellResponse&& from) noexcept
    : BulkInsertLocationS2CellResponse() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationS2CellResponse& operator=(const BulkInsertLocationS2CellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationS2CellResponse& operator=(BulkInsertLocationS2CellResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationS2CellResponse& default_instance();

  static inline const BulkInsertLocationS2CellResponse* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationS2CellResponse*>(
               &_BulkInsertLocationS2CellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BulkInsertLocationS2CellResponse& a, BulkInsertLocationS2CellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationS2CellResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationS2CellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationS2CellResponse* New() const final {
    return CreateMaybeMessage<BulkInsertLocationS2CellResponse>(nullptr);
  }

  BulkInsertLocationS2CellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationS2CellResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationS2CellResponse& from);
  void MergeFrom(const BulkInsertLocationS2CellResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationS2CellResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse";
  }
  protected:
  explicit BulkInsertLocationS2CellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationS2CellResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertConfigRequest) */ {
 public:
  inline InsertConfigRequest() : InsertConfigRequest(nullptr) {}
  virtual ~InsertConfigRequest();

  InsertConfigRequest(const InsertConfigRequest& from);
  InsertConfigRequest(InsertConfigRequest&& from) noexcept
    : InsertConfigRequest() {
    *this = ::std::move(from);
  }

  inline InsertConfigRequest& operator=(const InsertConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertConfigRequest& operator=(InsertConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertConfigRequest& default_instance();

  static inline const InsertConfigRequest* internal_default_instance() {
    return reinterpret_cast<const InsertConfigRequest*>(
               &_InsertConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InsertConfigRequest& a, InsertConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertConfigRequest* New() const final {
    return CreateMaybeMessage<InsertConfigRequest>(nullptr);
  }

  InsertConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertConfigRequest& from);
  void MergeFrom(const InsertConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertConfigRequest";
  }
  protected:
  explicit InsertConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertConfigRequest) */ {
 public:
  inline BulkInsertConfigRequest() : BulkInsertConfigRequest(nullptr) {}
  virtual ~BulkInsertConfigRequest();

  BulkInsertConfigRequest(const BulkInsertConfigRequest& from);
  BulkInsertConfigRequest(BulkInsertConfigRequest&& from) noexcept
    : BulkInsertConfigRequest() {
    *this = ::std::move(from);
  }

  inline BulkInsertConfigRequest& operator=(const BulkInsertConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertConfigRequest& operator=(BulkInsertConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertConfigRequest& default_instance();

  static inline const BulkInsertConfigRequest* internal_default_instance() {
    return reinterpret_cast<const BulkInsertConfigRequest*>(
               &_BulkInsertConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BulkInsertConfigRequest& a, BulkInsertConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertConfigRequest* New() const final {
    return CreateMaybeMessage<BulkInsertConfigRequest>(nullptr);
  }

  BulkInsertConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertConfigRequest& from);
  void MergeFrom(const BulkInsertConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertConfigRequest";
  }
  protected:
  explicit BulkInsertConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.InsertConfigRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::InsertConfigRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::InsertConfigRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::InsertConfigRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::InsertConfigRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::InsertConfigRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertConfigResponse) */ {
 public:
  inline InsertConfigResponse() : InsertConfigResponse(nullptr) {}
  virtual ~InsertConfigResponse();

  InsertConfigResponse(const InsertConfigResponse& from);
  InsertConfigResponse(InsertConfigResponse&& from) noexcept
    : InsertConfigResponse() {
    *this = ::std::move(from);
  }

  inline InsertConfigResponse& operator=(const InsertConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertConfigResponse& operator=(InsertConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertConfigResponse& default_instance();

  static inline const InsertConfigResponse* internal_default_instance() {
    return reinterpret_cast<const InsertConfigResponse*>(
               &_InsertConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InsertConfigResponse& a, InsertConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertConfigResponse* New() const final {
    return CreateMaybeMessage<InsertConfigResponse>(nullptr);
  }

  InsertConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertConfigResponse& from);
  void MergeFrom(const InsertConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertConfigResponse";
  }
  protected:
  explicit InsertConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertConfigResponse) */ {
 public:
  inline BulkInsertConfigResponse() : BulkInsertConfigResponse(nullptr) {}
  virtual ~BulkInsertConfigResponse();

  BulkInsertConfigResponse(const BulkInsertConfigResponse& from);
  BulkInsertConfigResponse(BulkInsertConfigResponse&& from) noexcept
    : BulkInsertConfigResponse() {
    *this = ::std::move(from);
  }

  inline BulkInsertConfigResponse& operator=(const BulkInsertConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertConfigResponse& operator=(BulkInsertConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertConfigResponse& default_instance();

  static inline const BulkInsertConfigResponse* internal_default_instance() {
    return reinterpret_cast<const BulkInsertConfigResponse*>(
               &_BulkInsertConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BulkInsertConfigResponse& a, BulkInsertConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertConfigResponse* New() const final {
    return CreateMaybeMessage<BulkInsertConfigResponse>(nullptr);
  }

  BulkInsertConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertConfigResponse& from);
  void MergeFrom(const BulkInsertConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertConfigResponse";
  }
  protected:
  explicit BulkInsertConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.InsertConfigResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::InsertConfigResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::InsertConfigResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::InsertConfigResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::InsertConfigResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::InsertConfigResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchLocationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchLocationByIdRequest) */ {
 public:
  inline FetchLocationByIdRequest() : FetchLocationByIdRequest(nullptr) {}
  virtual ~FetchLocationByIdRequest();

  FetchLocationByIdRequest(const FetchLocationByIdRequest& from);
  FetchLocationByIdRequest(FetchLocationByIdRequest&& from) noexcept
    : FetchLocationByIdRequest() {
    *this = ::std::move(from);
  }

  inline FetchLocationByIdRequest& operator=(const FetchLocationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLocationByIdRequest& operator=(FetchLocationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchLocationByIdRequest& default_instance();

  static inline const FetchLocationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FetchLocationByIdRequest*>(
               &_FetchLocationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FetchLocationByIdRequest& a, FetchLocationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLocationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchLocationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLocationByIdRequest* New() const final {
    return CreateMaybeMessage<FetchLocationByIdRequest>(nullptr);
  }

  FetchLocationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLocationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchLocationByIdRequest& from);
  void MergeFrom(const FetchLocationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLocationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchLocationByIdRequest";
  }
  protected:
  explicit FetchLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string namespace = 4;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchLocationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LocationRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LocationRecord) */ {
 public:
  inline LocationRecord() : LocationRecord(nullptr) {}
  virtual ~LocationRecord();

  LocationRecord(const LocationRecord& from);
  LocationRecord(LocationRecord&& from) noexcept
    : LocationRecord() {
    *this = ::std::move(from);
  }

  inline LocationRecord& operator=(const LocationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationRecord& operator=(LocationRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationRecord& default_instance();

  static inline const LocationRecord* internal_default_instance() {
    return reinterpret_cast<const LocationRecord*>(
               &_LocationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LocationRecord& a, LocationRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationRecord* New() const final {
    return CreateMaybeMessage<LocationRecord>(nullptr);
  }

  LocationRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationRecord& from);
  void MergeFrom(const LocationRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LocationRecord";
  }
  protected:
  explicit LocationRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBoundaryFieldNumber = 3,
    kLabelsFieldNumber = 7,
    kNamespaceFieldNumber = 8,
    kCodeFieldNumber = 9,
    kStatusFieldNumber = 10,
    kMetadataFieldNumber = 11,
    kCreatedByActorTypeFieldNumber = 16,
    kModifiedByActorTypeFieldNumber = 18,
    kVisibilityFieldNumber = 22,
    kGeographyUidFieldNumber = 23,
    kPincodeFieldNumber = 24,
    kLatLongGeohashFieldNumber = 25,
    kIdFieldNumber = 1,
    kCenterLatitudeFieldNumber = 4,
    kCenterLongitudeFieldNumber = 5,
    kAreaFieldNumber = 6,
    kVersionFieldNumber = 12,
    kMinS2LevelFieldNumber = 13,
    kCreatedByActorIdFieldNumber = 15,
    kModifiedByActorIdFieldNumber = 17,
    kCreatedAtFieldNumber = 19,
    kUpdatedAtFieldNumber = 20,
    kDeletedAtFieldNumber = 21,
    kMaxS2LevelFieldNumber = 14,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string boundary = 3;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string labels = 7;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string namespace = 8;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 9;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string status = 10;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string metadata = 11;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string createdByActorType = 16;
  void clear_createdbyactortype();
  const std::string& createdbyactortype() const;
  void set_createdbyactortype(const std::string& value);
  void set_createdbyactortype(std::string&& value);
  void set_createdbyactortype(const char* value);
  void set_createdbyactortype(const char* value, size_t size);
  std::string* mutable_createdbyactortype();
  std::string* release_createdbyactortype();
  void set_allocated_createdbyactortype(std::string* createdbyactortype);
  private:
  const std::string& _internal_createdbyactortype() const;
  void _internal_set_createdbyactortype(const std::string& value);
  std::string* _internal_mutable_createdbyactortype();
  public:

  // string modifiedByActorType = 18;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // string visibility = 22;
  void clear_visibility();
  const std::string& visibility() const;
  void set_visibility(const std::string& value);
  void set_visibility(std::string&& value);
  void set_visibility(const char* value);
  void set_visibility(const char* value, size_t size);
  std::string* mutable_visibility();
  std::string* release_visibility();
  void set_allocated_visibility(std::string* visibility);
  private:
  const std::string& _internal_visibility() const;
  void _internal_set_visibility(const std::string& value);
  std::string* _internal_mutable_visibility();
  public:

  // string geographyUid = 23;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string pincode = 24;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string latLongGeohash = 25;
  void clear_latlonggeohash();
  const std::string& latlonggeohash() const;
  void set_latlonggeohash(const std::string& value);
  void set_latlonggeohash(std::string&& value);
  void set_latlonggeohash(const char* value);
  void set_latlonggeohash(const char* value, size_t size);
  std::string* mutable_latlonggeohash();
  std::string* release_latlonggeohash();
  void set_allocated_latlonggeohash(std::string* latlonggeohash);
  private:
  const std::string& _internal_latlonggeohash() const;
  void _internal_set_latlonggeohash(const std::string& value);
  std::string* _internal_mutable_latlonggeohash();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double centerLatitude = 4;
  void clear_centerlatitude();
  double centerlatitude() const;
  void set_centerlatitude(double value);
  private:
  double _internal_centerlatitude() const;
  void _internal_set_centerlatitude(double value);
  public:

  // double centerLongitude = 5;
  void clear_centerlongitude();
  double centerlongitude() const;
  void set_centerlongitude(double value);
  private:
  double _internal_centerlongitude() const;
  void _internal_set_centerlongitude(double value);
  public:

  // double area = 6;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // int32 version = 12;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minS2Level = 13;
  void clear_mins2level();
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level() const;
  void set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins2level() const;
  void _internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createdByActorId = 15;
  void clear_createdbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid() const;
  void set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdbyactorid() const;
  void _internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 modifiedByActorId = 17;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 19;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 20;
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletedAt = 21;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 maxS2Level = 14;
  void clear_maxs2level();
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level() const;
  void set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxs2level() const;
  void _internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LocationRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visibility_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latlonggeohash_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double centerlatitude_;
  double centerlongitude_;
  double area_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kRecordsFieldNumber = 4,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.location.service.proto.LocationRecord records = 4;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::farm::nurture::location::service::proto::LocationRecord& records() const;
  ::farm::nurture::location::service::proto::LocationRecord* release_records();
  ::farm::nurture::location::service::proto::LocationRecord* mutable_records();
  void set_allocated_records(::farm::nurture::location::service::proto::LocationRecord* records);
  private:
  const ::farm::nurture::location::service::proto::LocationRecord& _internal_records() const;
  ::farm::nurture::location::service::proto::LocationRecord* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::farm::nurture::location::service::proto::LocationRecord* records);
  ::farm::nurture::location::service::proto::LocationRecord* unsafe_arena_release_records();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::farm::nurture::location::service::proto::LocationRecord* records_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchLocationByCodeAndNamespaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest) */ {
 public:
  inline FetchLocationByCodeAndNamespaceRequest() : FetchLocationByCodeAndNamespaceRequest(nullptr) {}
  virtual ~FetchLocationByCodeAndNamespaceRequest();

  FetchLocationByCodeAndNamespaceRequest(const FetchLocationByCodeAndNamespaceRequest& from);
  FetchLocationByCodeAndNamespaceRequest(FetchLocationByCodeAndNamespaceRequest&& from) noexcept
    : FetchLocationByCodeAndNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline FetchLocationByCodeAndNamespaceRequest& operator=(const FetchLocationByCodeAndNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLocationByCodeAndNamespaceRequest& operator=(FetchLocationByCodeAndNamespaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchLocationByCodeAndNamespaceRequest& default_instance();

  static inline const FetchLocationByCodeAndNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const FetchLocationByCodeAndNamespaceRequest*>(
               &_FetchLocationByCodeAndNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FetchLocationByCodeAndNamespaceRequest& a, FetchLocationByCodeAndNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLocationByCodeAndNamespaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchLocationByCodeAndNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLocationByCodeAndNamespaceRequest* New() const final {
    return CreateMaybeMessage<FetchLocationByCodeAndNamespaceRequest>(nullptr);
  }

  FetchLocationByCodeAndNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLocationByCodeAndNamespaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchLocationByCodeAndNamespaceRequest& from);
  void MergeFrom(const FetchLocationByCodeAndNamespaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLocationByCodeAndNamespaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest";
  }
  protected:
  explicit FetchLocationByCodeAndNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 3,
    kNamespaceFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string namespace = 4;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchS2CellByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchS2CellByIdRequest) */ {
 public:
  inline FetchS2CellByIdRequest() : FetchS2CellByIdRequest(nullptr) {}
  virtual ~FetchS2CellByIdRequest();

  FetchS2CellByIdRequest(const FetchS2CellByIdRequest& from);
  FetchS2CellByIdRequest(FetchS2CellByIdRequest&& from) noexcept
    : FetchS2CellByIdRequest() {
    *this = ::std::move(from);
  }

  inline FetchS2CellByIdRequest& operator=(const FetchS2CellByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchS2CellByIdRequest& operator=(FetchS2CellByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchS2CellByIdRequest& default_instance();

  static inline const FetchS2CellByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FetchS2CellByIdRequest*>(
               &_FetchS2CellByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FetchS2CellByIdRequest& a, FetchS2CellByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchS2CellByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchS2CellByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchS2CellByIdRequest* New() const final {
    return CreateMaybeMessage<FetchS2CellByIdRequest>(nullptr);
  }

  FetchS2CellByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchS2CellByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchS2CellByIdRequest& from);
  void MergeFrom(const FetchS2CellByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchS2CellByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchS2CellByIdRequest";
  }
  protected:
  explicit FetchS2CellByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchS2CellByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class S2CellRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.S2CellRecord) */ {
 public:
  inline S2CellRecord() : S2CellRecord(nullptr) {}
  virtual ~S2CellRecord();

  S2CellRecord(const S2CellRecord& from);
  S2CellRecord(S2CellRecord&& from) noexcept
    : S2CellRecord() {
    *this = ::std::move(from);
  }

  inline S2CellRecord& operator=(const S2CellRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CellRecord& operator=(S2CellRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CellRecord& default_instance();

  static inline const S2CellRecord* internal_default_instance() {
    return reinterpret_cast<const S2CellRecord*>(
               &_S2CellRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2CellRecord& a, S2CellRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CellRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2CellRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CellRecord* New() const final {
    return CreateMaybeMessage<S2CellRecord>(nullptr);
  }

  S2CellRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CellRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CellRecord& from);
  void MergeFrom(const S2CellRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CellRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.S2CellRecord";
  }
  protected:
  explicit S2CellRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kS2CellIdFieldNumber = 3,
    kS27LevelCellIdFieldNumber = 5,
    kS28LevelCellIdFieldNumber = 6,
    kS29LevelCellIdFieldNumber = 7,
    kS210LevelCellIdFieldNumber = 8,
    kS211LevelCellIdFieldNumber = 9,
    kS212LevelCellIdFieldNumber = 10,
    kS213LevelCellIdFieldNumber = 11,
    kS214LevelCellIdFieldNumber = 12,
    kS215LevelCellIdFieldNumber = 13,
    kS216LevelCellIdFieldNumber = 14,
    kS217LevelCellIdFieldNumber = 15,
    kS218LevelCellIdFieldNumber = 16,
    kCreatedAtFieldNumber = 17,
    kUpdatedAtFieldNumber = 18,
    kDeletedAtFieldNumber = 19,
    kS2CellLevelFieldNumber = 4,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 locationId = 2;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s2CellId = 3;
  void clear_s2cellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid() const;
  void set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s2cellid() const;
  void _internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s27LevelCellId = 5;
  void clear_s27levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid() const;
  void set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s27levelcellid() const;
  void _internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s28LevelCellId = 6;
  void clear_s28levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid() const;
  void set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s28levelcellid() const;
  void _internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s29LevelCellId = 7;
  void clear_s29levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid() const;
  void set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s29levelcellid() const;
  void _internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s210LevelCellId = 8;
  void clear_s210levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid() const;
  void set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s210levelcellid() const;
  void _internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s211LevelCellId = 9;
  void clear_s211levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid() const;
  void set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s211levelcellid() const;
  void _internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s212LevelCellId = 10;
  void clear_s212levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid() const;
  void set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s212levelcellid() const;
  void _internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s213LevelCellId = 11;
  void clear_s213levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid() const;
  void set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s213levelcellid() const;
  void _internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s214LevelCellId = 12;
  void clear_s214levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid() const;
  void set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s214levelcellid() const;
  void _internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s215LevelCellId = 13;
  void clear_s215levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid() const;
  void set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s215levelcellid() const;
  void _internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s216LevelCellId = 14;
  void clear_s216levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid() const;
  void set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s216levelcellid() const;
  void _internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s217LevelCellId = 15;
  void clear_s217levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid() const;
  void set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s217levelcellid() const;
  void _internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s218LevelCellId = 16;
  void clear_s218levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid() const;
  void set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s218levelcellid() const;
  void _internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 17;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 18;
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletedAt = 19;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 s2CellLevel = 4;
  void clear_s2celllevel();
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel() const;
  void set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s2celllevel() const;
  void _internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.S2CellRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class S2Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.S2Cell) */ {
 public:
  inline S2Cell() : S2Cell(nullptr) {}
  virtual ~S2Cell();

  S2Cell(const S2Cell& from);
  S2Cell(S2Cell&& from) noexcept
    : S2Cell() {
    *this = ::std::move(from);
  }

  inline S2Cell& operator=(const S2Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2Cell& operator=(S2Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2Cell& default_instance();

  static inline const S2Cell* internal_default_instance() {
    return reinterpret_cast<const S2Cell*>(
               &_S2Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S2Cell& a, S2Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(S2Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2Cell* New() const final {
    return CreateMaybeMessage<S2Cell>(nullptr);
  }

  S2Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2Cell& from);
  void MergeFrom(const S2Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.S2Cell";
  }
  protected:
  explicit S2Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kRecordsFieldNumber = 4,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.location.service.proto.S2CellRecord records = 4;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::farm::nurture::location::service::proto::S2CellRecord& records() const;
  ::farm::nurture::location::service::proto::S2CellRecord* release_records();
  ::farm::nurture::location::service::proto::S2CellRecord* mutable_records();
  void set_allocated_records(::farm::nurture::location::service::proto::S2CellRecord* records);
  private:
  const ::farm::nurture::location::service::proto::S2CellRecord& _internal_records() const;
  ::farm::nurture::location::service::proto::S2CellRecord* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::farm::nurture::location::service::proto::S2CellRecord* records);
  ::farm::nurture::location::service::proto::S2CellRecord* unsafe_arena_release_records();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.S2Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::farm::nurture::location::service::proto::S2CellRecord* records_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchS2CellByLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchS2CellByLocationRequest) */ {
 public:
  inline FetchS2CellByLocationRequest() : FetchS2CellByLocationRequest(nullptr) {}
  virtual ~FetchS2CellByLocationRequest();

  FetchS2CellByLocationRequest(const FetchS2CellByLocationRequest& from);
  FetchS2CellByLocationRequest(FetchS2CellByLocationRequest&& from) noexcept
    : FetchS2CellByLocationRequest() {
    *this = ::std::move(from);
  }

  inline FetchS2CellByLocationRequest& operator=(const FetchS2CellByLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchS2CellByLocationRequest& operator=(FetchS2CellByLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchS2CellByLocationRequest& default_instance();

  static inline const FetchS2CellByLocationRequest* internal_default_instance() {
    return reinterpret_cast<const FetchS2CellByLocationRequest*>(
               &_FetchS2CellByLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FetchS2CellByLocationRequest& a, FetchS2CellByLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchS2CellByLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchS2CellByLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchS2CellByLocationRequest* New() const final {
    return CreateMaybeMessage<FetchS2CellByLocationRequest>(nullptr);
  }

  FetchS2CellByLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchS2CellByLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchS2CellByLocationRequest& from);
  void MergeFrom(const FetchS2CellByLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchS2CellByLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchS2CellByLocationRequest";
  }
  protected:
  explicit FetchS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kLocationIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
    kS2CellLevelFieldNumber = 5,
    kS2CellIdFieldNumber = 4,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 locationId = 3;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // int32 s2CellLevel = 5;
  void clear_s2celllevel();
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel() const;
  void set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s2celllevel() const;
  void _internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 s2CellId = 4;
  void clear_s2cellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid() const;
  void set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s2cellid() const;
  void _internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchS2CellByLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  bool isstaleallowed_;
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel_;
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchS2CellByLocationIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest) */ {
 public:
  inline FetchS2CellByLocationIdRequest() : FetchS2CellByLocationIdRequest(nullptr) {}
  virtual ~FetchS2CellByLocationIdRequest();

  FetchS2CellByLocationIdRequest(const FetchS2CellByLocationIdRequest& from);
  FetchS2CellByLocationIdRequest(FetchS2CellByLocationIdRequest&& from) noexcept
    : FetchS2CellByLocationIdRequest() {
    *this = ::std::move(from);
  }

  inline FetchS2CellByLocationIdRequest& operator=(const FetchS2CellByLocationIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchS2CellByLocationIdRequest& operator=(FetchS2CellByLocationIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchS2CellByLocationIdRequest& default_instance();

  static inline const FetchS2CellByLocationIdRequest* internal_default_instance() {
    return reinterpret_cast<const FetchS2CellByLocationIdRequest*>(
               &_FetchS2CellByLocationIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FetchS2CellByLocationIdRequest& a, FetchS2CellByLocationIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchS2CellByLocationIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchS2CellByLocationIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchS2CellByLocationIdRequest* New() const final {
    return CreateMaybeMessage<FetchS2CellByLocationIdRequest>(nullptr);
  }

  FetchS2CellByLocationIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchS2CellByLocationIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchS2CellByLocationIdRequest& from);
  void MergeFrom(const FetchS2CellByLocationIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchS2CellByLocationIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest";
  }
  protected:
  explicit FetchS2CellByLocationIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kLocationIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 locationId = 3;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LocationS2CellsRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LocationS2CellsRecord) */ {
 public:
  inline LocationS2CellsRecord() : LocationS2CellsRecord(nullptr) {}
  virtual ~LocationS2CellsRecord();

  LocationS2CellsRecord(const LocationS2CellsRecord& from);
  LocationS2CellsRecord(LocationS2CellsRecord&& from) noexcept
    : LocationS2CellsRecord() {
    *this = ::std::move(from);
  }

  inline LocationS2CellsRecord& operator=(const LocationS2CellsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationS2CellsRecord& operator=(LocationS2CellsRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationS2CellsRecord& default_instance();

  static inline const LocationS2CellsRecord* internal_default_instance() {
    return reinterpret_cast<const LocationS2CellsRecord*>(
               &_LocationS2CellsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LocationS2CellsRecord& a, LocationS2CellsRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationS2CellsRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationS2CellsRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationS2CellsRecord* New() const final {
    return CreateMaybeMessage<LocationS2CellsRecord>(nullptr);
  }

  LocationS2CellsRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationS2CellsRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationS2CellsRecord& from);
  void MergeFrom(const LocationS2CellsRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationS2CellsRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LocationS2CellsRecord";
  }
  protected:
  explicit LocationS2CellsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kS2CellIdFieldNumber = 3,
    kS27LevelCellIdFieldNumber = 5,
    kS28LevelCellIdFieldNumber = 6,
    kS29LevelCellIdFieldNumber = 7,
    kS210LevelCellIdFieldNumber = 8,
    kS211LevelCellIdFieldNumber = 9,
    kS212LevelCellIdFieldNumber = 10,
    kS213LevelCellIdFieldNumber = 11,
    kS214LevelCellIdFieldNumber = 12,
    kS215LevelCellIdFieldNumber = 13,
    kS216LevelCellIdFieldNumber = 14,
    kS217LevelCellIdFieldNumber = 15,
    kS218LevelCellIdFieldNumber = 16,
    kCreatedAtFieldNumber = 17,
    kUpdatedAtFieldNumber = 18,
    kDeletedAtFieldNumber = 19,
    kS2CellLevelFieldNumber = 4,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 locationId = 2;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s2CellId = 3;
  void clear_s2cellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid() const;
  void set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s2cellid() const;
  void _internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s27LevelCellId = 5;
  void clear_s27levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid() const;
  void set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s27levelcellid() const;
  void _internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s28LevelCellId = 6;
  void clear_s28levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid() const;
  void set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s28levelcellid() const;
  void _internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s29LevelCellId = 7;
  void clear_s29levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid() const;
  void set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s29levelcellid() const;
  void _internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s210LevelCellId = 8;
  void clear_s210levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid() const;
  void set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s210levelcellid() const;
  void _internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s211LevelCellId = 9;
  void clear_s211levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid() const;
  void set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s211levelcellid() const;
  void _internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s212LevelCellId = 10;
  void clear_s212levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid() const;
  void set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s212levelcellid() const;
  void _internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s213LevelCellId = 11;
  void clear_s213levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid() const;
  void set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s213levelcellid() const;
  void _internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s214LevelCellId = 12;
  void clear_s214levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid() const;
  void set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s214levelcellid() const;
  void _internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s215LevelCellId = 13;
  void clear_s215levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid() const;
  void set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s215levelcellid() const;
  void _internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s216LevelCellId = 14;
  void clear_s216levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid() const;
  void set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s216levelcellid() const;
  void _internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s217LevelCellId = 15;
  void clear_s217levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid() const;
  void set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s217levelcellid() const;
  void _internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s218LevelCellId = 16;
  void clear_s218levelcellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid() const;
  void set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s218levelcellid() const;
  void _internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 17;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 18;
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletedAt = 19;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 s2CellLevel = 4;
  void clear_s2celllevel();
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel() const;
  void set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s2celllevel() const;
  void _internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LocationS2CellsRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s27levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s28levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s29levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s210levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s211levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s212levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s213levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s214levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s215levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s216levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s217levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s218levelcellid_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LocationS2Cells PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LocationS2Cells) */ {
 public:
  inline LocationS2Cells() : LocationS2Cells(nullptr) {}
  virtual ~LocationS2Cells();

  LocationS2Cells(const LocationS2Cells& from);
  LocationS2Cells(LocationS2Cells&& from) noexcept
    : LocationS2Cells() {
    *this = ::std::move(from);
  }

  inline LocationS2Cells& operator=(const LocationS2Cells& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationS2Cells& operator=(LocationS2Cells&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationS2Cells& default_instance();

  static inline const LocationS2Cells* internal_default_instance() {
    return reinterpret_cast<const LocationS2Cells*>(
               &_LocationS2Cells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LocationS2Cells& a, LocationS2Cells& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationS2Cells* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationS2Cells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationS2Cells* New() const final {
    return CreateMaybeMessage<LocationS2Cells>(nullptr);
  }

  LocationS2Cells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationS2Cells>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationS2Cells& from);
  void MergeFrom(const LocationS2Cells& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationS2Cells* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LocationS2Cells";
  }
  protected:
  explicit LocationS2Cells(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.LocationS2CellsRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::LocationS2CellsRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationS2CellsRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::LocationS2CellsRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::LocationS2CellsRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::LocationS2CellsRecord& records(int index) const;
  ::farm::nurture::location::service::proto::LocationS2CellsRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationS2CellsRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LocationS2Cells)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationS2CellsRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationByIdRequest) */ {
 public:
  inline UpdateLocationByIdRequest() : UpdateLocationByIdRequest(nullptr) {}
  virtual ~UpdateLocationByIdRequest();

  UpdateLocationByIdRequest(const UpdateLocationByIdRequest& from);
  UpdateLocationByIdRequest(UpdateLocationByIdRequest&& from) noexcept
    : UpdateLocationByIdRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLocationByIdRequest& operator=(const UpdateLocationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationByIdRequest& operator=(UpdateLocationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationByIdRequest& default_instance();

  static inline const UpdateLocationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationByIdRequest*>(
               &_UpdateLocationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateLocationByIdRequest& a, UpdateLocationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationByIdRequest* New() const final {
    return CreateMaybeMessage<UpdateLocationByIdRequest>(nullptr);
  }

  UpdateLocationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationByIdRequest& from);
  void MergeFrom(const UpdateLocationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationByIdRequest";
  }
  protected:
  explicit UpdateLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateLocationByIdRequest_Status Status;
  static constexpr Status UNCLAIMED =
    UpdateLocationByIdRequest_Status_UNCLAIMED;
  static constexpr Status CLAIMED =
    UpdateLocationByIdRequest_Status_CLAIMED;
  static inline bool Status_IsValid(int value) {
    return UpdateLocationByIdRequest_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UpdateLocationByIdRequest_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UpdateLocationByIdRequest_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UpdateLocationByIdRequest_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UpdateLocationByIdRequest_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UpdateLocationByIdRequest_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UpdateLocationByIdRequest_Status_Parse(name, value);
  }

  typedef UpdateLocationByIdRequest_Visibility Visibility;
  static constexpr Visibility VISIBLE =
    UpdateLocationByIdRequest_Visibility_VISIBLE;
  static constexpr Visibility INVISIBLE =
    UpdateLocationByIdRequest_Visibility_INVISIBLE;
  static inline bool Visibility_IsValid(int value) {
    return UpdateLocationByIdRequest_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    UpdateLocationByIdRequest_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    UpdateLocationByIdRequest_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    UpdateLocationByIdRequest_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return UpdateLocationByIdRequest_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return UpdateLocationByIdRequest_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Visibility* value) {
    return UpdateLocationByIdRequest_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBoundaryFieldNumber = 3,
    kLabelsFieldNumber = 7,
    kNamespaceFieldNumber = 8,
    kCodeFieldNumber = 9,
    kMetadataFieldNumber = 11,
    kModifiedByActorTypeFieldNumber = 16,
    kGeographyUidFieldNumber = 18,
    kPincodeFieldNumber = 19,
    kLatLongGeohashFieldNumber = 20,
    kRequestHeadersFieldNumber = 1,
    kCenterLatitudeFieldNumber = 4,
    kCenterLongitudeFieldNumber = 5,
    kAreaFieldNumber = 6,
    kStatusFieldNumber = 10,
    kNewVersionFieldNumber = 12,
    kMinS2LevelFieldNumber = 13,
    kMaxS2LevelFieldNumber = 14,
    kModifiedByActorIdFieldNumber = 15,
    kVisibilityFieldNumber = 17,
    kOldVersionFieldNumber = 22,
    kIdFieldNumber = 21,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string boundary = 3;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string labels = 7;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string namespace = 8;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 9;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string metadata = 11;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string modifiedByActorType = 16;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // string geographyUid = 18;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string pincode = 19;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string latLongGeohash = 20;
  void clear_latlonggeohash();
  const std::string& latlonggeohash() const;
  void set_latlonggeohash(const std::string& value);
  void set_latlonggeohash(std::string&& value);
  void set_latlonggeohash(const char* value);
  void set_latlonggeohash(const char* value, size_t size);
  std::string* mutable_latlonggeohash();
  std::string* release_latlonggeohash();
  void set_allocated_latlonggeohash(std::string* latlonggeohash);
  private:
  const std::string& _internal_latlonggeohash() const;
  void _internal_set_latlonggeohash(const std::string& value);
  std::string* _internal_mutable_latlonggeohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double centerLatitude = 4;
  void clear_centerlatitude();
  double centerlatitude() const;
  void set_centerlatitude(double value);
  private:
  double _internal_centerlatitude() const;
  void _internal_set_centerlatitude(double value);
  public:

  // double centerLongitude = 5;
  void clear_centerlongitude();
  double centerlongitude() const;
  void set_centerlongitude(double value);
  private:
  double _internal_centerlongitude() const;
  void _internal_set_centerlongitude(double value);
  public:

  // double area = 6;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status status = 10;
  void clear_status();
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status status() const;
  void set_status(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status value);
  private:
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status value);
  public:

  // int32 newVersion = 12;
  void clear_newversion();
  ::PROTOBUF_NAMESPACE_ID::int32 newversion() const;
  void set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newversion() const;
  void _internal_set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minS2Level = 13;
  void clear_mins2level();
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level() const;
  void set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins2level() const;
  void _internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxS2Level = 14;
  void clear_maxs2level();
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level() const;
  void set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxs2level() const;
  void _internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 modifiedByActorId = 15;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility visibility = 17;
  void clear_visibility();
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility value);
  private:
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility value);
  public:

  // int32 oldVersion = 22;
  void clear_oldversion();
  ::PROTOBUF_NAMESPACE_ID::int32 oldversion() const;
  void set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oldversion() const;
  void _internal_set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 id = 21;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latlonggeohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double centerlatitude_;
  double centerlongitude_;
  double area_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 newversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  int visibility_;
  ::PROTOBUF_NAMESPACE_ID::int32 oldversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest) */ {
 public:
  inline BulkUpdateLocationByIdRequest() : BulkUpdateLocationByIdRequest(nullptr) {}
  virtual ~BulkUpdateLocationByIdRequest();

  BulkUpdateLocationByIdRequest(const BulkUpdateLocationByIdRequest& from);
  BulkUpdateLocationByIdRequest(BulkUpdateLocationByIdRequest&& from) noexcept
    : BulkUpdateLocationByIdRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationByIdRequest& operator=(const BulkUpdateLocationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationByIdRequest& operator=(BulkUpdateLocationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationByIdRequest& default_instance();

  static inline const BulkUpdateLocationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationByIdRequest*>(
               &_BulkUpdateLocationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BulkUpdateLocationByIdRequest& a, BulkUpdateLocationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationByIdRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationByIdRequest>(nullptr);
  }

  BulkUpdateLocationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationByIdRequest& from);
  void MergeFrom(const BulkUpdateLocationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest";
  }
  protected:
  explicit BulkUpdateLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationByIdResponse) */ {
 public:
  inline UpdateLocationByIdResponse() : UpdateLocationByIdResponse(nullptr) {}
  virtual ~UpdateLocationByIdResponse();

  UpdateLocationByIdResponse(const UpdateLocationByIdResponse& from);
  UpdateLocationByIdResponse(UpdateLocationByIdResponse&& from) noexcept
    : UpdateLocationByIdResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLocationByIdResponse& operator=(const UpdateLocationByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationByIdResponse& operator=(UpdateLocationByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationByIdResponse& default_instance();

  static inline const UpdateLocationByIdResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationByIdResponse*>(
               &_UpdateLocationByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateLocationByIdResponse& a, UpdateLocationByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationByIdResponse* New() const final {
    return CreateMaybeMessage<UpdateLocationByIdResponse>(nullptr);
  }

  UpdateLocationByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationByIdResponse& from);
  void MergeFrom(const UpdateLocationByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationByIdResponse";
  }
  protected:
  explicit UpdateLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse) */ {
 public:
  inline BulkUpdateLocationByIdResponse() : BulkUpdateLocationByIdResponse(nullptr) {}
  virtual ~BulkUpdateLocationByIdResponse();

  BulkUpdateLocationByIdResponse(const BulkUpdateLocationByIdResponse& from);
  BulkUpdateLocationByIdResponse(BulkUpdateLocationByIdResponse&& from) noexcept
    : BulkUpdateLocationByIdResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationByIdResponse& operator=(const BulkUpdateLocationByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationByIdResponse& operator=(BulkUpdateLocationByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationByIdResponse& default_instance();

  static inline const BulkUpdateLocationByIdResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationByIdResponse*>(
               &_BulkUpdateLocationByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BulkUpdateLocationByIdResponse& a, BulkUpdateLocationByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationByIdResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationByIdResponse>(nullptr);
  }

  BulkUpdateLocationByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationByIdResponse& from);
  void MergeFrom(const BulkUpdateLocationByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse";
  }
  protected:
  explicit BulkUpdateLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationByIdResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationLabelByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest) */ {
 public:
  inline UpdateLocationLabelByIdRequest() : UpdateLocationLabelByIdRequest(nullptr) {}
  virtual ~UpdateLocationLabelByIdRequest();

  UpdateLocationLabelByIdRequest(const UpdateLocationLabelByIdRequest& from);
  UpdateLocationLabelByIdRequest(UpdateLocationLabelByIdRequest&& from) noexcept
    : UpdateLocationLabelByIdRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLocationLabelByIdRequest& operator=(const UpdateLocationLabelByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationLabelByIdRequest& operator=(UpdateLocationLabelByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationLabelByIdRequest& default_instance();

  static inline const UpdateLocationLabelByIdRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationLabelByIdRequest*>(
               &_UpdateLocationLabelByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UpdateLocationLabelByIdRequest& a, UpdateLocationLabelByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationLabelByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationLabelByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationLabelByIdRequest* New() const final {
    return CreateMaybeMessage<UpdateLocationLabelByIdRequest>(nullptr);
  }

  UpdateLocationLabelByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationLabelByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationLabelByIdRequest& from);
  void MergeFrom(const UpdateLocationLabelByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationLabelByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest";
  }
  protected:
  explicit UpdateLocationLabelByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kModifiedByActorTypeFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kModifiedByActorIdFieldNumber = 3,
    kIdFieldNumber = 5,
  };
  // string labels = 2;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string modifiedByActorType = 4;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 modifiedByActorId = 3;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationLabelByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest) */ {
 public:
  inline BulkUpdateLocationLabelByIdRequest() : BulkUpdateLocationLabelByIdRequest(nullptr) {}
  virtual ~BulkUpdateLocationLabelByIdRequest();

  BulkUpdateLocationLabelByIdRequest(const BulkUpdateLocationLabelByIdRequest& from);
  BulkUpdateLocationLabelByIdRequest(BulkUpdateLocationLabelByIdRequest&& from) noexcept
    : BulkUpdateLocationLabelByIdRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationLabelByIdRequest& operator=(const BulkUpdateLocationLabelByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationLabelByIdRequest& operator=(BulkUpdateLocationLabelByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationLabelByIdRequest& default_instance();

  static inline const BulkUpdateLocationLabelByIdRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationLabelByIdRequest*>(
               &_BulkUpdateLocationLabelByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BulkUpdateLocationLabelByIdRequest& a, BulkUpdateLocationLabelByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationLabelByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationLabelByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationLabelByIdRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationLabelByIdRequest>(nullptr);
  }

  BulkUpdateLocationLabelByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationLabelByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationLabelByIdRequest& from);
  void MergeFrom(const BulkUpdateLocationLabelByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationLabelByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest";
  }
  protected:
  explicit BulkUpdateLocationLabelByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationLabelByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse) */ {
 public:
  inline UpdateLocationLabelByIdResponse() : UpdateLocationLabelByIdResponse(nullptr) {}
  virtual ~UpdateLocationLabelByIdResponse();

  UpdateLocationLabelByIdResponse(const UpdateLocationLabelByIdResponse& from);
  UpdateLocationLabelByIdResponse(UpdateLocationLabelByIdResponse&& from) noexcept
    : UpdateLocationLabelByIdResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLocationLabelByIdResponse& operator=(const UpdateLocationLabelByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationLabelByIdResponse& operator=(UpdateLocationLabelByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationLabelByIdResponse& default_instance();

  static inline const UpdateLocationLabelByIdResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationLabelByIdResponse*>(
               &_UpdateLocationLabelByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateLocationLabelByIdResponse& a, UpdateLocationLabelByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationLabelByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationLabelByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationLabelByIdResponse* New() const final {
    return CreateMaybeMessage<UpdateLocationLabelByIdResponse>(nullptr);
  }

  UpdateLocationLabelByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationLabelByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationLabelByIdResponse& from);
  void MergeFrom(const UpdateLocationLabelByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationLabelByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse";
  }
  protected:
  explicit UpdateLocationLabelByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationLabelByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse) */ {
 public:
  inline BulkUpdateLocationLabelByIdResponse() : BulkUpdateLocationLabelByIdResponse(nullptr) {}
  virtual ~BulkUpdateLocationLabelByIdResponse();

  BulkUpdateLocationLabelByIdResponse(const BulkUpdateLocationLabelByIdResponse& from);
  BulkUpdateLocationLabelByIdResponse(BulkUpdateLocationLabelByIdResponse&& from) noexcept
    : BulkUpdateLocationLabelByIdResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationLabelByIdResponse& operator=(const BulkUpdateLocationLabelByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationLabelByIdResponse& operator=(BulkUpdateLocationLabelByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationLabelByIdResponse& default_instance();

  static inline const BulkUpdateLocationLabelByIdResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationLabelByIdResponse*>(
               &_BulkUpdateLocationLabelByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BulkUpdateLocationLabelByIdResponse& a, BulkUpdateLocationLabelByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationLabelByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationLabelByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationLabelByIdResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationLabelByIdResponse>(nullptr);
  }

  BulkUpdateLocationLabelByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationLabelByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationLabelByIdResponse& from);
  void MergeFrom(const BulkUpdateLocationLabelByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationLabelByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse";
  }
  protected:
  explicit BulkUpdateLocationLabelByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeleteS2CellByLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest) */ {
 public:
  inline UpdateDeleteS2CellByLocationRequest() : UpdateDeleteS2CellByLocationRequest(nullptr) {}
  virtual ~UpdateDeleteS2CellByLocationRequest();

  UpdateDeleteS2CellByLocationRequest(const UpdateDeleteS2CellByLocationRequest& from);
  UpdateDeleteS2CellByLocationRequest(UpdateDeleteS2CellByLocationRequest&& from) noexcept
    : UpdateDeleteS2CellByLocationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeleteS2CellByLocationRequest& operator=(const UpdateDeleteS2CellByLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeleteS2CellByLocationRequest& operator=(UpdateDeleteS2CellByLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeleteS2CellByLocationRequest& default_instance();

  static inline const UpdateDeleteS2CellByLocationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeleteS2CellByLocationRequest*>(
               &_UpdateDeleteS2CellByLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateDeleteS2CellByLocationRequest& a, UpdateDeleteS2CellByLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeleteS2CellByLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeleteS2CellByLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeleteS2CellByLocationRequest* New() const final {
    return CreateMaybeMessage<UpdateDeleteS2CellByLocationRequest>(nullptr);
  }

  UpdateDeleteS2CellByLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeleteS2CellByLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeleteS2CellByLocationRequest& from);
  void MergeFrom(const UpdateDeleteS2CellByLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeleteS2CellByLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest";
  }
  protected:
  explicit UpdateDeleteS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kDeletedAtFieldNumber = 2,
    kLocationIdFieldNumber = 3,
    kS2CellIdFieldNumber = 4,
    kS2CellLevelFieldNumber = 5,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 deletedAt = 2;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 locationId = 3;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int64 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 s2CellId = 4;
  void clear_s2cellid();
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid() const;
  void set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_s2cellid() const;
  void _internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 s2CellLevel = 5;
  void clear_s2celllevel();
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel() const;
  void set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s2celllevel() const;
  void _internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 locationid_;
  ::PROTOBUF_NAMESPACE_ID::int64 s2cellid_;
  ::PROTOBUF_NAMESPACE_ID::int32 s2celllevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateDeleteS2CellByLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest) */ {
 public:
  inline BulkUpdateDeleteS2CellByLocationRequest() : BulkUpdateDeleteS2CellByLocationRequest(nullptr) {}
  virtual ~BulkUpdateDeleteS2CellByLocationRequest();

  BulkUpdateDeleteS2CellByLocationRequest(const BulkUpdateDeleteS2CellByLocationRequest& from);
  BulkUpdateDeleteS2CellByLocationRequest(BulkUpdateDeleteS2CellByLocationRequest&& from) noexcept
    : BulkUpdateDeleteS2CellByLocationRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateDeleteS2CellByLocationRequest& operator=(const BulkUpdateDeleteS2CellByLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateDeleteS2CellByLocationRequest& operator=(BulkUpdateDeleteS2CellByLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateDeleteS2CellByLocationRequest& default_instance();

  static inline const BulkUpdateDeleteS2CellByLocationRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateDeleteS2CellByLocationRequest*>(
               &_BulkUpdateDeleteS2CellByLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BulkUpdateDeleteS2CellByLocationRequest& a, BulkUpdateDeleteS2CellByLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateDeleteS2CellByLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateDeleteS2CellByLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateDeleteS2CellByLocationRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateDeleteS2CellByLocationRequest>(nullptr);
  }

  BulkUpdateDeleteS2CellByLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateDeleteS2CellByLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateDeleteS2CellByLocationRequest& from);
  void MergeFrom(const BulkUpdateDeleteS2CellByLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateDeleteS2CellByLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest";
  }
  protected:
  explicit BulkUpdateDeleteS2CellByLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeleteS2CellByLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse) */ {
 public:
  inline UpdateDeleteS2CellByLocationResponse() : UpdateDeleteS2CellByLocationResponse(nullptr) {}
  virtual ~UpdateDeleteS2CellByLocationResponse();

  UpdateDeleteS2CellByLocationResponse(const UpdateDeleteS2CellByLocationResponse& from);
  UpdateDeleteS2CellByLocationResponse(UpdateDeleteS2CellByLocationResponse&& from) noexcept
    : UpdateDeleteS2CellByLocationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDeleteS2CellByLocationResponse& operator=(const UpdateDeleteS2CellByLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeleteS2CellByLocationResponse& operator=(UpdateDeleteS2CellByLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeleteS2CellByLocationResponse& default_instance();

  static inline const UpdateDeleteS2CellByLocationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDeleteS2CellByLocationResponse*>(
               &_UpdateDeleteS2CellByLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UpdateDeleteS2CellByLocationResponse& a, UpdateDeleteS2CellByLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeleteS2CellByLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeleteS2CellByLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeleteS2CellByLocationResponse* New() const final {
    return CreateMaybeMessage<UpdateDeleteS2CellByLocationResponse>(nullptr);
  }

  UpdateDeleteS2CellByLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeleteS2CellByLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeleteS2CellByLocationResponse& from);
  void MergeFrom(const UpdateDeleteS2CellByLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeleteS2CellByLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse";
  }
  protected:
  explicit UpdateDeleteS2CellByLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateDeleteS2CellByLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse) */ {
 public:
  inline BulkUpdateDeleteS2CellByLocationResponse() : BulkUpdateDeleteS2CellByLocationResponse(nullptr) {}
  virtual ~BulkUpdateDeleteS2CellByLocationResponse();

  BulkUpdateDeleteS2CellByLocationResponse(const BulkUpdateDeleteS2CellByLocationResponse& from);
  BulkUpdateDeleteS2CellByLocationResponse(BulkUpdateDeleteS2CellByLocationResponse&& from) noexcept
    : BulkUpdateDeleteS2CellByLocationResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateDeleteS2CellByLocationResponse& operator=(const BulkUpdateDeleteS2CellByLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateDeleteS2CellByLocationResponse& operator=(BulkUpdateDeleteS2CellByLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateDeleteS2CellByLocationResponse& default_instance();

  static inline const BulkUpdateDeleteS2CellByLocationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateDeleteS2CellByLocationResponse*>(
               &_BulkUpdateDeleteS2CellByLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BulkUpdateDeleteS2CellByLocationResponse& a, BulkUpdateDeleteS2CellByLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateDeleteS2CellByLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateDeleteS2CellByLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateDeleteS2CellByLocationResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateDeleteS2CellByLocationResponse>(nullptr);
  }

  BulkUpdateDeleteS2CellByLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateDeleteS2CellByLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateDeleteS2CellByLocationResponse& from);
  void MergeFrom(const BulkUpdateDeleteS2CellByLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateDeleteS2CellByLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse";
  }
  protected:
  explicit BulkUpdateDeleteS2CellByLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchConfigByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchConfigByIdRequest) */ {
 public:
  inline FetchConfigByIdRequest() : FetchConfigByIdRequest(nullptr) {}
  virtual ~FetchConfigByIdRequest();

  FetchConfigByIdRequest(const FetchConfigByIdRequest& from);
  FetchConfigByIdRequest(FetchConfigByIdRequest&& from) noexcept
    : FetchConfigByIdRequest() {
    *this = ::std::move(from);
  }

  inline FetchConfigByIdRequest& operator=(const FetchConfigByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchConfigByIdRequest& operator=(FetchConfigByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchConfigByIdRequest& default_instance();

  static inline const FetchConfigByIdRequest* internal_default_instance() {
    return reinterpret_cast<const FetchConfigByIdRequest*>(
               &_FetchConfigByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FetchConfigByIdRequest& a, FetchConfigByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchConfigByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchConfigByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchConfigByIdRequest* New() const final {
    return CreateMaybeMessage<FetchConfigByIdRequest>(nullptr);
  }

  FetchConfigByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchConfigByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchConfigByIdRequest& from);
  void MergeFrom(const FetchConfigByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchConfigByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchConfigByIdRequest";
  }
  protected:
  explicit FetchConfigByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchConfigByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConfigRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.ConfigRecord) */ {
 public:
  inline ConfigRecord() : ConfigRecord(nullptr) {}
  virtual ~ConfigRecord();

  ConfigRecord(const ConfigRecord& from);
  ConfigRecord(ConfigRecord&& from) noexcept
    : ConfigRecord() {
    *this = ::std::move(from);
  }

  inline ConfigRecord& operator=(const ConfigRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRecord& operator=(ConfigRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigRecord& default_instance();

  static inline const ConfigRecord* internal_default_instance() {
    return reinterpret_cast<const ConfigRecord*>(
               &_ConfigRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ConfigRecord& a, ConfigRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRecord* New() const final {
    return CreateMaybeMessage<ConfigRecord>(nullptr);
  }

  ConfigRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigRecord& from);
  void MergeFrom(const ConfigRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.ConfigRecord";
  }
  protected:
  explicit ConfigRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kDeletedAtFieldNumber = 6,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 4;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 5;
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletedAt = 6;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.ConfigRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kRecordsFieldNumber = 4,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.location.service.proto.ConfigRecord records = 4;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::farm::nurture::location::service::proto::ConfigRecord& records() const;
  ::farm::nurture::location::service::proto::ConfigRecord* release_records();
  ::farm::nurture::location::service::proto::ConfigRecord* mutable_records();
  void set_allocated_records(::farm::nurture::location::service::proto::ConfigRecord* records);
  private:
  const ::farm::nurture::location::service::proto::ConfigRecord& _internal_records() const;
  ::farm::nurture::location::service::proto::ConfigRecord* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::farm::nurture::location::service::proto::ConfigRecord* records);
  ::farm::nurture::location::service::proto::ConfigRecord* unsafe_arena_release_records();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::farm::nurture::location::service::proto::ConfigRecord* records_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.AddLocationRequest) */ {
 public:
  inline AddLocationRequest() : AddLocationRequest(nullptr) {}
  virtual ~AddLocationRequest();

  AddLocationRequest(const AddLocationRequest& from);
  AddLocationRequest(AddLocationRequest&& from) noexcept
    : AddLocationRequest() {
    *this = ::std::move(from);
  }

  inline AddLocationRequest& operator=(const AddLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLocationRequest& operator=(AddLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddLocationRequest& default_instance();

  static inline const AddLocationRequest* internal_default_instance() {
    return reinterpret_cast<const AddLocationRequest*>(
               &_AddLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AddLocationRequest& a, AddLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLocationRequest* New() const final {
    return CreateMaybeMessage<AddLocationRequest>(nullptr);
  }

  AddLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddLocationRequest& from);
  void MergeFrom(const AddLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.AddLocationRequest";
  }
  protected:
  explicit AddLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kBoundaryFieldNumber = 3,
    kNamespaceFieldNumber = 8,
    kNameFieldNumber = 10,
    kCodeFieldNumber = 11,
    kCreatedByActorTypeFieldNumber = 14,
    kGeographyUidFieldNumber = 16,
    kPincodeFieldNumber = 17,
    kLatLongGeohashFieldNumber = 18,
    kRequestHeadersFieldNumber = 1,
    kCenterLatitudeFieldNumber = 5,
    kFormatFieldNumber = 2,
    kStatusFieldNumber = 9,
    kCenterLongitudeFieldNumber = 6,
    kAreaFieldNumber = 7,
    kIdFieldNumber = 12,
    kCreatedByActorIdFieldNumber = 13,
    kVisibilityFieldNumber = 15,
  };
  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::farm::nurture::location::service::proto::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
      mutable_labels();
  private:
  const ::farm::nurture::location::service::proto::Label& _internal_labels(int index) const;
  ::farm::nurture::location::service::proto::Label* _internal_add_labels();
  public:
  const ::farm::nurture::location::service::proto::Label& labels(int index) const;
  ::farm::nurture::location::service::proto::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
      labels() const;

  // string boundary = 3;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string namespace = 8;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 11;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string created_by_actor_type = 14;
  void clear_created_by_actor_type();
  const std::string& created_by_actor_type() const;
  void set_created_by_actor_type(const std::string& value);
  void set_created_by_actor_type(std::string&& value);
  void set_created_by_actor_type(const char* value);
  void set_created_by_actor_type(const char* value, size_t size);
  std::string* mutable_created_by_actor_type();
  std::string* release_created_by_actor_type();
  void set_allocated_created_by_actor_type(std::string* created_by_actor_type);
  private:
  const std::string& _internal_created_by_actor_type() const;
  void _internal_set_created_by_actor_type(const std::string& value);
  std::string* _internal_mutable_created_by_actor_type();
  public:

  // string geography_uid = 16;
  void clear_geography_uid();
  const std::string& geography_uid() const;
  void set_geography_uid(const std::string& value);
  void set_geography_uid(std::string&& value);
  void set_geography_uid(const char* value);
  void set_geography_uid(const char* value, size_t size);
  std::string* mutable_geography_uid();
  std::string* release_geography_uid();
  void set_allocated_geography_uid(std::string* geography_uid);
  private:
  const std::string& _internal_geography_uid() const;
  void _internal_set_geography_uid(const std::string& value);
  std::string* _internal_mutable_geography_uid();
  public:

  // string pincode = 17;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string lat_long_geohash = 18;
  void clear_lat_long_geohash();
  const std::string& lat_long_geohash() const;
  void set_lat_long_geohash(const std::string& value);
  void set_lat_long_geohash(std::string&& value);
  void set_lat_long_geohash(const char* value);
  void set_lat_long_geohash(const char* value, size_t size);
  std::string* mutable_lat_long_geohash();
  std::string* release_lat_long_geohash();
  void set_allocated_lat_long_geohash(std::string* lat_long_geohash);
  private:
  const std::string& _internal_lat_long_geohash() const;
  void _internal_set_lat_long_geohash(const std::string& value);
  std::string* _internal_mutable_lat_long_geohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double center_latitude = 5;
  void clear_center_latitude();
  double center_latitude() const;
  void set_center_latitude(double value);
  private:
  double _internal_center_latitude() const;
  void _internal_set_center_latitude(double value);
  public:

  // .farm.nurture.location.service.proto.Format format = 2;
  void clear_format();
  ::farm::nurture::location::service::proto::Format format() const;
  void set_format(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_format() const;
  void _internal_set_format(::farm::nurture::location::service::proto::Format value);
  public:

  // .farm.nurture.location.service.proto.Status status = 9;
  void clear_status();
  ::farm::nurture::location::service::proto::Status status() const;
  void set_status(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::Status value);
  public:

  // double center_longitude = 6;
  void clear_center_longitude();
  double center_longitude() const;
  void set_center_longitude(double value);
  private:
  double _internal_center_longitude() const;
  void _internal_set_center_longitude(double value);
  public:

  // double area = 7;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // int64 id = 12;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_by_actor_id = 13;
  void clear_created_by_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 created_by_actor_id() const;
  void set_created_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_by_actor_id() const;
  void _internal_set_created_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  void clear_visibility();
  ::farm::nurture::location::service::proto::Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::Visibility value);
  private:
  ::farm::nurture::location::service::proto::Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.AddLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_by_actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geography_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lat_long_geohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double center_latitude_;
  int format_;
  int status_;
  double center_longitude_;
  double area_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_by_actor_id_;
  int visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Label PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kDeleteKeyFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool deleteKey = 3;
  void clear_deletekey();
  bool deletekey() const;
  void set_deletekey(bool value);
  private:
  bool _internal_deletekey() const;
  void _internal_set_deletekey(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool deletekey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkAddLocationRequest) */ {
 public:
  inline BulkAddLocationRequest() : BulkAddLocationRequest(nullptr) {}
  virtual ~BulkAddLocationRequest();

  BulkAddLocationRequest(const BulkAddLocationRequest& from);
  BulkAddLocationRequest(BulkAddLocationRequest&& from) noexcept
    : BulkAddLocationRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddLocationRequest& operator=(const BulkAddLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddLocationRequest& operator=(BulkAddLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddLocationRequest& default_instance();

  static inline const BulkAddLocationRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddLocationRequest*>(
               &_BulkAddLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(BulkAddLocationRequest& a, BulkAddLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddLocationRequest* New() const final {
    return CreateMaybeMessage<BulkAddLocationRequest>(nullptr);
  }

  BulkAddLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddLocationRequest& from);
  void MergeFrom(const BulkAddLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkAddLocationRequest";
  }
  protected:
  explicit BulkAddLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.AddLocationRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::AddLocationRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::AddLocationRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::AddLocationRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::AddLocationRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::AddLocationRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkAddLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.AddLocationResponse) */ {
 public:
  inline AddLocationResponse() : AddLocationResponse(nullptr) {}
  virtual ~AddLocationResponse();

  AddLocationResponse(const AddLocationResponse& from);
  AddLocationResponse(AddLocationResponse&& from) noexcept
    : AddLocationResponse() {
    *this = ::std::move(from);
  }

  inline AddLocationResponse& operator=(const AddLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLocationResponse& operator=(AddLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddLocationResponse& default_instance();

  static inline const AddLocationResponse* internal_default_instance() {
    return reinterpret_cast<const AddLocationResponse*>(
               &_AddLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddLocationResponse& a, AddLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLocationResponse* New() const final {
    return CreateMaybeMessage<AddLocationResponse>(nullptr);
  }

  AddLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddLocationResponse& from);
  void MergeFrom(const AddLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.AddLocationResponse";
  }
  protected:
  explicit AddLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.AddLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkAddLocationResponse) */ {
 public:
  inline BulkAddLocationResponse() : BulkAddLocationResponse(nullptr) {}
  virtual ~BulkAddLocationResponse();

  BulkAddLocationResponse(const BulkAddLocationResponse& from);
  BulkAddLocationResponse(BulkAddLocationResponse&& from) noexcept
    : BulkAddLocationResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddLocationResponse& operator=(const BulkAddLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddLocationResponse& operator=(BulkAddLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddLocationResponse& default_instance();

  static inline const BulkAddLocationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddLocationResponse*>(
               &_BulkAddLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(BulkAddLocationResponse& a, BulkAddLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddLocationResponse* New() const final {
    return CreateMaybeMessage<BulkAddLocationResponse>(nullptr);
  }

  BulkAddLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddLocationResponse& from);
  void MergeFrom(const BulkAddLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkAddLocationResponse";
  }
  protected:
  explicit BulkAddLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.AddLocationResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::AddLocationResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::AddLocationResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::AddLocationResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::AddLocationResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::AddLocationResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkAddLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationRequest) */ {
 public:
  inline UpdateLocationRequest() : UpdateLocationRequest(nullptr) {}
  virtual ~UpdateLocationRequest();

  UpdateLocationRequest(const UpdateLocationRequest& from);
  UpdateLocationRequest(UpdateLocationRequest&& from) noexcept
    : UpdateLocationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLocationRequest& operator=(const UpdateLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationRequest& operator=(UpdateLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationRequest& default_instance();

  static inline const UpdateLocationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationRequest*>(
               &_UpdateLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UpdateLocationRequest& a, UpdateLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationRequest* New() const final {
    return CreateMaybeMessage<UpdateLocationRequest>(nullptr);
  }

  UpdateLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationRequest& from);
  void MergeFrom(const UpdateLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationRequest";
  }
  protected:
  explicit UpdateLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kBoundaryFieldNumber = 3,
    kNamespaceFieldNumber = 8,
    kNameFieldNumber = 10,
    kCodeFieldNumber = 12,
    kModifiedByActorTypeFieldNumber = 14,
    kGeographyUidFieldNumber = 16,
    kPincodeFieldNumber = 17,
    kLatLongGeohashFieldNumber = 18,
    kRequestHeadersFieldNumber = 1,
    kCenterLatitudeFieldNumber = 5,
    kFormatFieldNumber = 2,
    kStatusFieldNumber = 9,
    kCenterLongitudeFieldNumber = 6,
    kAreaFieldNumber = 7,
    kIdFieldNumber = 11,
    kModifiedByActorIdFieldNumber = 13,
    kVisibilityFieldNumber = 15,
  };
  // repeated .farm.nurture.location.service.proto.Label labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::farm::nurture::location::service::proto::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
      mutable_labels();
  private:
  const ::farm::nurture::location::service::proto::Label& _internal_labels(int index) const;
  ::farm::nurture::location::service::proto::Label* _internal_add_labels();
  public:
  const ::farm::nurture::location::service::proto::Label& labels(int index) const;
  ::farm::nurture::location::service::proto::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
      labels() const;

  // string boundary = 3;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string namespace = 8;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 12;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string modified_by_actor_type = 14;
  void clear_modified_by_actor_type();
  const std::string& modified_by_actor_type() const;
  void set_modified_by_actor_type(const std::string& value);
  void set_modified_by_actor_type(std::string&& value);
  void set_modified_by_actor_type(const char* value);
  void set_modified_by_actor_type(const char* value, size_t size);
  std::string* mutable_modified_by_actor_type();
  std::string* release_modified_by_actor_type();
  void set_allocated_modified_by_actor_type(std::string* modified_by_actor_type);
  private:
  const std::string& _internal_modified_by_actor_type() const;
  void _internal_set_modified_by_actor_type(const std::string& value);
  std::string* _internal_mutable_modified_by_actor_type();
  public:

  // string geography_uid = 16;
  void clear_geography_uid();
  const std::string& geography_uid() const;
  void set_geography_uid(const std::string& value);
  void set_geography_uid(std::string&& value);
  void set_geography_uid(const char* value);
  void set_geography_uid(const char* value, size_t size);
  std::string* mutable_geography_uid();
  std::string* release_geography_uid();
  void set_allocated_geography_uid(std::string* geography_uid);
  private:
  const std::string& _internal_geography_uid() const;
  void _internal_set_geography_uid(const std::string& value);
  std::string* _internal_mutable_geography_uid();
  public:

  // string pincode = 17;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string lat_long_geohash = 18;
  void clear_lat_long_geohash();
  const std::string& lat_long_geohash() const;
  void set_lat_long_geohash(const std::string& value);
  void set_lat_long_geohash(std::string&& value);
  void set_lat_long_geohash(const char* value);
  void set_lat_long_geohash(const char* value, size_t size);
  std::string* mutable_lat_long_geohash();
  std::string* release_lat_long_geohash();
  void set_allocated_lat_long_geohash(std::string* lat_long_geohash);
  private:
  const std::string& _internal_lat_long_geohash() const;
  void _internal_set_lat_long_geohash(const std::string& value);
  std::string* _internal_mutable_lat_long_geohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double center_latitude = 5;
  void clear_center_latitude();
  double center_latitude() const;
  void set_center_latitude(double value);
  private:
  double _internal_center_latitude() const;
  void _internal_set_center_latitude(double value);
  public:

  // .farm.nurture.location.service.proto.Format format = 2;
  void clear_format();
  ::farm::nurture::location::service::proto::Format format() const;
  void set_format(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_format() const;
  void _internal_set_format(::farm::nurture::location::service::proto::Format value);
  public:

  // .farm.nurture.location.service.proto.Status status = 9;
  void clear_status();
  ::farm::nurture::location::service::proto::Status status() const;
  void set_status(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::Status value);
  public:

  // double center_longitude = 6;
  void clear_center_longitude();
  double center_longitude() const;
  void set_center_longitude(double value);
  private:
  double _internal_center_longitude() const;
  void _internal_set_center_longitude(double value);
  public:

  // double area = 7;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // int64 id = 11;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 modified_by_actor_id = 13;
  void clear_modified_by_actor_id();
  ::PROTOBUF_NAMESPACE_ID::int64 modified_by_actor_id() const;
  void set_modified_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modified_by_actor_id() const;
  void _internal_set_modified_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.Visibility visibility = 15;
  void clear_visibility();
  ::farm::nurture::location::service::proto::Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::Visibility value);
  private:
  ::farm::nurture::location::service::proto::Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_by_actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geography_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lat_long_geohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double center_latitude_;
  int format_;
  int status_;
  double center_longitude_;
  double area_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 modified_by_actor_id_;
  int visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationRequest) */ {
 public:
  inline BulkUpdateLocationRequest() : BulkUpdateLocationRequest(nullptr) {}
  virtual ~BulkUpdateLocationRequest();

  BulkUpdateLocationRequest(const BulkUpdateLocationRequest& from);
  BulkUpdateLocationRequest(BulkUpdateLocationRequest&& from) noexcept
    : BulkUpdateLocationRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationRequest& operator=(const BulkUpdateLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationRequest& operator=(BulkUpdateLocationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationRequest& default_instance();

  static inline const BulkUpdateLocationRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationRequest*>(
               &_BulkUpdateLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(BulkUpdateLocationRequest& a, BulkUpdateLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationRequest>(nullptr);
  }

  BulkUpdateLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationRequest& from);
  void MergeFrom(const BulkUpdateLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationRequest";
  }
  protected:
  explicit BulkUpdateLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::UpdateLocationRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationResponse) */ {
 public:
  inline UpdateLocationResponse() : UpdateLocationResponse(nullptr) {}
  virtual ~UpdateLocationResponse();

  UpdateLocationResponse(const UpdateLocationResponse& from);
  UpdateLocationResponse(UpdateLocationResponse&& from) noexcept
    : UpdateLocationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLocationResponse& operator=(const UpdateLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationResponse& operator=(UpdateLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationResponse& default_instance();

  static inline const UpdateLocationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationResponse*>(
               &_UpdateLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UpdateLocationResponse& a, UpdateLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationResponse* New() const final {
    return CreateMaybeMessage<UpdateLocationResponse>(nullptr);
  }

  UpdateLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationResponse& from);
  void MergeFrom(const UpdateLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationResponse";
  }
  protected:
  explicit UpdateLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationResponse) */ {
 public:
  inline BulkUpdateLocationResponse() : BulkUpdateLocationResponse(nullptr) {}
  virtual ~BulkUpdateLocationResponse();

  BulkUpdateLocationResponse(const BulkUpdateLocationResponse& from);
  BulkUpdateLocationResponse(BulkUpdateLocationResponse&& from) noexcept
    : BulkUpdateLocationResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationResponse& operator=(const BulkUpdateLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationResponse& operator=(BulkUpdateLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationResponse& default_instance();

  static inline const BulkUpdateLocationResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationResponse*>(
               &_BulkUpdateLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BulkUpdateLocationResponse& a, BulkUpdateLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationResponse>(nullptr);
  }

  BulkUpdateLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationResponse& from);
  void MergeFrom(const BulkUpdateLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationResponse";
  }
  protected:
  explicit BulkUpdateLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::UpdateLocationResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsWithBoundaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest) */ {
 public:
  inline GetLocationsWithBoundaryRequest() : GetLocationsWithBoundaryRequest(nullptr) {}
  virtual ~GetLocationsWithBoundaryRequest();

  GetLocationsWithBoundaryRequest(const GetLocationsWithBoundaryRequest& from);
  GetLocationsWithBoundaryRequest(GetLocationsWithBoundaryRequest&& from) noexcept
    : GetLocationsWithBoundaryRequest() {
    *this = ::std::move(from);
  }

  inline GetLocationsWithBoundaryRequest& operator=(const GetLocationsWithBoundaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsWithBoundaryRequest& operator=(GetLocationsWithBoundaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsWithBoundaryRequest& default_instance();

  static inline const GetLocationsWithBoundaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationsWithBoundaryRequest*>(
               &_GetLocationsWithBoundaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetLocationsWithBoundaryRequest& a, GetLocationsWithBoundaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsWithBoundaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsWithBoundaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsWithBoundaryRequest* New() const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryRequest>(nullptr);
  }

  GetLocationsWithBoundaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsWithBoundaryRequest& from);
  void MergeFrom(const GetLocationsWithBoundaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsWithBoundaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest";
  }
  protected:
  explicit GetLocationsWithBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 8,
    kBoundaryFieldNumber = 12,
    kRequestHeadersFieldNumber = 1,
    kLabelsFieldNumber = 4,
    kIsStaleAllowedFieldNumber = 2,
    kFormatFieldNumber = 3,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kRadiusFieldNumber = 7,
    kPageSizeFieldNumber = 10,
    kPageNumberFieldNumber = 11,
    kStatusFieldNumber = 9,
    kPolygonFormatFieldNumber = 13,
  };
  // string namespace = 8;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string boundary = 12;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.location.service.proto.LabelGroup labels = 4;
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::farm::nurture::location::service::proto::LabelGroup& labels() const;
  ::farm::nurture::location::service::proto::LabelGroup* release_labels();
  ::farm::nurture::location::service::proto::LabelGroup* mutable_labels();
  void set_allocated_labels(::farm::nurture::location::service::proto::LabelGroup* labels);
  private:
  const ::farm::nurture::location::service::proto::LabelGroup& _internal_labels() const;
  ::farm::nurture::location::service::proto::LabelGroup* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::farm::nurture::location::service::proto::LabelGroup* labels);
  ::farm::nurture::location::service::proto::LabelGroup* unsafe_arena_release_labels();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // .farm.nurture.location.service.proto.Format format = 3;
  void clear_format();
  ::farm::nurture::location::service::proto::Format format() const;
  void set_format(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_format() const;
  void _internal_set_format(::farm::nurture::location::service::proto::Format value);
  public:

  // double latitude = 5;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 6;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double radius = 7;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // int64 pageSize = 10;
  void clear_pagesize();
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize() const;
  void set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagesize() const;
  void _internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pageNumber = 11;
  void clear_pagenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber() const;
  void set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagenumber() const;
  void _internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.Status status = 9;
  void clear_status();
  ::farm::nurture::location::service::proto::Status status() const;
  void set_status(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::Status value);
  public:

  // .farm.nurture.location.service.proto.Format polygonFormat = 13;
  void clear_polygonformat();
  ::farm::nurture::location::service::proto::Format polygonformat() const;
  void set_polygonformat(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_polygonformat() const;
  void _internal_set_polygonformat(::farm::nurture::location::service::proto::Format value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::location::service::proto::LabelGroup* labels_;
  bool isstaleallowed_;
  int format_;
  double latitude_;
  double longitude_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber_;
  int status_;
  int polygonformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LabelGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LabelGroup) */ {
 public:
  inline LabelGroup() : LabelGroup(nullptr) {}
  virtual ~LabelGroup();

  LabelGroup(const LabelGroup& from);
  LabelGroup(LabelGroup&& from) noexcept
    : LabelGroup() {
    *this = ::std::move(from);
  }

  inline LabelGroup& operator=(const LabelGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelGroup& operator=(LabelGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelGroup& default_instance();

  static inline const LabelGroup* internal_default_instance() {
    return reinterpret_cast<const LabelGroup*>(
               &_LabelGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LabelGroup& a, LabelGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelGroup* New() const final {
    return CreateMaybeMessage<LabelGroup>(nullptr);
  }

  LabelGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelGroup& from);
  void MergeFrom(const LabelGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LabelGroup";
  }
  protected:
  explicit LabelGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelOppFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.LabelOPP labelOpp = 1;
  int labelopp_size() const;
  private:
  int _internal_labelopp_size() const;
  public:
  void clear_labelopp();
  ::farm::nurture::location::service::proto::LabelOPP* mutable_labelopp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LabelOPP >*
      mutable_labelopp();
  private:
  const ::farm::nurture::location::service::proto::LabelOPP& _internal_labelopp(int index) const;
  ::farm::nurture::location::service::proto::LabelOPP* _internal_add_labelopp();
  public:
  const ::farm::nurture::location::service::proto::LabelOPP& labelopp(int index) const;
  ::farm::nurture::location::service::proto::LabelOPP* add_labelopp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LabelOPP >&
      labelopp() const;

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LabelGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LabelOPP > labelopp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LabelOPP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LabelOPP) */ {
 public:
  inline LabelOPP() : LabelOPP(nullptr) {}
  virtual ~LabelOPP();

  LabelOPP(const LabelOPP& from);
  LabelOPP(LabelOPP&& from) noexcept
    : LabelOPP() {
    *this = ::std::move(from);
  }

  inline LabelOPP& operator=(const LabelOPP& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelOPP& operator=(LabelOPP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelOPP& default_instance();

  static inline const LabelOPP* internal_default_instance() {
    return reinterpret_cast<const LabelOPP*>(
               &_LabelOPP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(LabelOPP& a, LabelOPP& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelOPP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelOPP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelOPP* New() const final {
    return CreateMaybeMessage<LabelOPP>(nullptr);
  }

  LabelOPP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelOPP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelOPP& from);
  void MergeFrom(const LabelOPP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelOPP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LabelOPP";
  }
  protected:
  explicit LabelOPP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.Label label = 2;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  ::farm::nurture::location::service::proto::Label* mutable_label(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
      mutable_label();
  private:
  const ::farm::nurture::location::service::proto::Label& _internal_label(int index) const;
  ::farm::nurture::location::service::proto::Label* _internal_add_label();
  public:
  const ::farm::nurture::location::service::proto::Label& label(int index) const;
  ::farm::nurture::location::service::proto::Label* add_label();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
      label() const;

  // string operator = 1;
  void clear_operator_();
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LabelOPP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label > label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsWithBoundaryResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord) */ {
 public:
  inline GetLocationsWithBoundaryResponseRecord() : GetLocationsWithBoundaryResponseRecord(nullptr) {}
  virtual ~GetLocationsWithBoundaryResponseRecord();

  GetLocationsWithBoundaryResponseRecord(const GetLocationsWithBoundaryResponseRecord& from);
  GetLocationsWithBoundaryResponseRecord(GetLocationsWithBoundaryResponseRecord&& from) noexcept
    : GetLocationsWithBoundaryResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetLocationsWithBoundaryResponseRecord& operator=(const GetLocationsWithBoundaryResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsWithBoundaryResponseRecord& operator=(GetLocationsWithBoundaryResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsWithBoundaryResponseRecord& default_instance();

  static inline const GetLocationsWithBoundaryResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetLocationsWithBoundaryResponseRecord*>(
               &_GetLocationsWithBoundaryResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetLocationsWithBoundaryResponseRecord& a, GetLocationsWithBoundaryResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsWithBoundaryResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsWithBoundaryResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsWithBoundaryResponseRecord* New() const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryResponseRecord>(nullptr);
  }

  GetLocationsWithBoundaryResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsWithBoundaryResponseRecord& from);
  void MergeFrom(const GetLocationsWithBoundaryResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsWithBoundaryResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord";
  }
  protected:
  explicit GetLocationsWithBoundaryResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsWithBoundaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse) */ {
 public:
  inline GetLocationsWithBoundaryResponse() : GetLocationsWithBoundaryResponse(nullptr) {}
  virtual ~GetLocationsWithBoundaryResponse();

  GetLocationsWithBoundaryResponse(const GetLocationsWithBoundaryResponse& from);
  GetLocationsWithBoundaryResponse(GetLocationsWithBoundaryResponse&& from) noexcept
    : GetLocationsWithBoundaryResponse() {
    *this = ::std::move(from);
  }

  inline GetLocationsWithBoundaryResponse& operator=(const GetLocationsWithBoundaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsWithBoundaryResponse& operator=(GetLocationsWithBoundaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsWithBoundaryResponse& default_instance();

  static inline const GetLocationsWithBoundaryResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocationsWithBoundaryResponse*>(
               &_GetLocationsWithBoundaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetLocationsWithBoundaryResponse& a, GetLocationsWithBoundaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsWithBoundaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsWithBoundaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsWithBoundaryResponse* New() const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryResponse>(nullptr);
  }

  GetLocationsWithBoundaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsWithBoundaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsWithBoundaryResponse& from);
  void MergeFrom(const GetLocationsWithBoundaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsWithBoundaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse";
  }
  protected:
  explicit GetLocationsWithBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kLocationWithBoundaryFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  int locationwithboundary_size() const;
  private:
  int _internal_locationwithboundary_size() const;
  public:
  void clear_locationwithboundary();
  ::farm::nurture::location::service::proto::LocationWithBoundary* mutable_locationwithboundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >*
      mutable_locationwithboundary();
  private:
  const ::farm::nurture::location::service::proto::LocationWithBoundary& _internal_locationwithboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithBoundary* _internal_add_locationwithboundary();
  public:
  const ::farm::nurture::location::service::proto::LocationWithBoundary& locationwithboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithBoundary* add_locationwithboundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >&
      locationwithboundary() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary > locationwithboundary_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LocationWithBoundary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LocationWithBoundary) */ {
 public:
  inline LocationWithBoundary() : LocationWithBoundary(nullptr) {}
  virtual ~LocationWithBoundary();

  LocationWithBoundary(const LocationWithBoundary& from);
  LocationWithBoundary(LocationWithBoundary&& from) noexcept
    : LocationWithBoundary() {
    *this = ::std::move(from);
  }

  inline LocationWithBoundary& operator=(const LocationWithBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationWithBoundary& operator=(LocationWithBoundary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationWithBoundary& default_instance();

  static inline const LocationWithBoundary* internal_default_instance() {
    return reinterpret_cast<const LocationWithBoundary*>(
               &_LocationWithBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(LocationWithBoundary& a, LocationWithBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationWithBoundary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationWithBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationWithBoundary* New() const final {
    return CreateMaybeMessage<LocationWithBoundary>(nullptr);
  }

  LocationWithBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationWithBoundary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationWithBoundary& from);
  void MergeFrom(const LocationWithBoundary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationWithBoundary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LocationWithBoundary";
  }
  protected:
  explicit LocationWithBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kNameFieldNumber = 2,
    kBoundaryFieldNumber = 4,
    kNamespaceFieldNumber = 9,
    kIdFieldNumber = 1,
    kCenterLatitudeFieldNumber = 6,
    kFormatFieldNumber = 3,
    kLocationStatusFieldNumber = 10,
    kCenterLongitudeFieldNumber = 7,
    kAreaFieldNumber = 8,
  };
  // repeated .farm.nurture.location.service.proto.Label labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::farm::nurture::location::service::proto::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
      mutable_labels();
  private:
  const ::farm::nurture::location::service::proto::Label& _internal_labels(int index) const;
  ::farm::nurture::location::service::proto::Label* _internal_add_labels();
  public:
  const ::farm::nurture::location::service::proto::Label& labels(int index) const;
  ::farm::nurture::location::service::proto::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
      labels() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string boundary = 4;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // string namespace = 9;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double center_latitude = 6;
  void clear_center_latitude();
  double center_latitude() const;
  void set_center_latitude(double value);
  private:
  double _internal_center_latitude() const;
  void _internal_set_center_latitude(double value);
  public:

  // .farm.nurture.location.service.proto.Format format = 3;
  void clear_format();
  ::farm::nurture::location::service::proto::Format format() const;
  void set_format(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_format() const;
  void _internal_set_format(::farm::nurture::location::service::proto::Format value);
  public:

  // .farm.nurture.location.service.proto.Status locationStatus = 10;
  void clear_locationstatus();
  ::farm::nurture::location::service::proto::Status locationstatus() const;
  void set_locationstatus(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_locationstatus() const;
  void _internal_set_locationstatus(::farm::nurture::location::service::proto::Status value);
  public:

  // double center_longitude = 7;
  void clear_center_longitude();
  double center_longitude() const;
  void set_center_longitude(double value);
  private:
  double _internal_center_longitude() const;
  void _internal_set_center_longitude(double value);
  public:

  // double area = 8;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LocationWithBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double center_latitude_;
  int format_;
  int locationstatus_;
  double center_longitude_;
  double area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsRequest) */ {
 public:
  inline GetLocationsRequest() : GetLocationsRequest(nullptr) {}
  virtual ~GetLocationsRequest();

  GetLocationsRequest(const GetLocationsRequest& from);
  GetLocationsRequest(GetLocationsRequest&& from) noexcept
    : GetLocationsRequest() {
    *this = ::std::move(from);
  }

  inline GetLocationsRequest& operator=(const GetLocationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsRequest& operator=(GetLocationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsRequest& default_instance();

  static inline const GetLocationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationsRequest*>(
               &_GetLocationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetLocationsRequest& a, GetLocationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsRequest* New() const final {
    return CreateMaybeMessage<GetLocationsRequest>(nullptr);
  }

  GetLocationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsRequest& from);
  void MergeFrom(const GetLocationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsRequest";
  }
  protected:
  explicit GetLocationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 7,
    kBoundaryFieldNumber = 11,
    kRequestHeadersFieldNumber = 1,
    kLabelsFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kIsStaleAllowedFieldNumber = 2,
    kStatusFieldNumber = 8,
    kRadiusFieldNumber = 6,
    kPageSizeFieldNumber = 9,
    kPageNumberFieldNumber = 10,
    kPolygonFormatFieldNumber = 12,
  };
  // string namespace = 7;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string boundary = 11;
  void clear_boundary();
  const std::string& boundary() const;
  void set_boundary(const std::string& value);
  void set_boundary(std::string&& value);
  void set_boundary(const char* value);
  void set_boundary(const char* value, size_t size);
  std::string* mutable_boundary();
  std::string* release_boundary();
  void set_allocated_boundary(std::string* boundary);
  private:
  const std::string& _internal_boundary() const;
  void _internal_set_boundary(const std::string& value);
  std::string* _internal_mutable_boundary();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.location.service.proto.LabelGroup labels = 3;
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::farm::nurture::location::service::proto::LabelGroup& labels() const;
  ::farm::nurture::location::service::proto::LabelGroup* release_labels();
  ::farm::nurture::location::service::proto::LabelGroup* mutable_labels();
  void set_allocated_labels(::farm::nurture::location::service::proto::LabelGroup* labels);
  private:
  const ::farm::nurture::location::service::proto::LabelGroup& _internal_labels() const;
  ::farm::nurture::location::service::proto::LabelGroup* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::farm::nurture::location::service::proto::LabelGroup* labels);
  ::farm::nurture::location::service::proto::LabelGroup* unsafe_arena_release_labels();

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // .farm.nurture.location.service.proto.Status status = 8;
  void clear_status();
  ::farm::nurture::location::service::proto::Status status() const;
  void set_status(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::Status value);
  public:

  // double radius = 6;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // int64 pageSize = 9;
  void clear_pagesize();
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize() const;
  void set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagesize() const;
  void _internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pageNumber = 10;
  void clear_pagenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber() const;
  void set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagenumber() const;
  void _internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.Format polygonFormat = 12;
  void clear_polygonformat();
  ::farm::nurture::location::service::proto::Format polygonformat() const;
  void set_polygonformat(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_polygonformat() const;
  void _internal_set_polygonformat(::farm::nurture::location::service::proto::Format value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boundary_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::farm::nurture::location::service::proto::LabelGroup* labels_;
  double latitude_;
  double longitude_;
  bool isstaleallowed_;
  int status_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber_;
  int polygonformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsResponseRecord) */ {
 public:
  inline GetLocationsResponseRecord() : GetLocationsResponseRecord(nullptr) {}
  virtual ~GetLocationsResponseRecord();

  GetLocationsResponseRecord(const GetLocationsResponseRecord& from);
  GetLocationsResponseRecord(GetLocationsResponseRecord&& from) noexcept
    : GetLocationsResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetLocationsResponseRecord& operator=(const GetLocationsResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsResponseRecord& operator=(GetLocationsResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsResponseRecord& default_instance();

  static inline const GetLocationsResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetLocationsResponseRecord*>(
               &_GetLocationsResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetLocationsResponseRecord& a, GetLocationsResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsResponseRecord* New() const final {
    return CreateMaybeMessage<GetLocationsResponseRecord>(nullptr);
  }

  GetLocationsResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsResponseRecord& from);
  void MergeFrom(const GetLocationsResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsResponseRecord";
  }
  protected:
  explicit GetLocationsResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationsResponse) */ {
 public:
  inline GetLocationsResponse() : GetLocationsResponse(nullptr) {}
  virtual ~GetLocationsResponse();

  GetLocationsResponse(const GetLocationsResponse& from);
  GetLocationsResponse(GetLocationsResponse&& from) noexcept
    : GetLocationsResponse() {
    *this = ::std::move(from);
  }

  inline GetLocationsResponse& operator=(const GetLocationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationsResponse& operator=(GetLocationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationsResponse& default_instance();

  static inline const GetLocationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocationsResponse*>(
               &_GetLocationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetLocationsResponse& a, GetLocationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationsResponse* New() const final {
    return CreateMaybeMessage<GetLocationsResponse>(nullptr);
  }

  GetLocationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationsResponse& from);
  void MergeFrom(const GetLocationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationsResponse";
  }
  protected:
  explicit GetLocationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kLocationWithoutBoundaryFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.LocationWithoutBoundary locationWithoutBoundary = 4;
  int locationwithoutboundary_size() const;
  private:
  int _internal_locationwithoutboundary_size() const;
  public:
  void clear_locationwithoutboundary();
  ::farm::nurture::location::service::proto::LocationWithoutBoundary* mutable_locationwithoutboundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithoutBoundary >*
      mutable_locationwithoutboundary();
  private:
  const ::farm::nurture::location::service::proto::LocationWithoutBoundary& _internal_locationwithoutboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithoutBoundary* _internal_add_locationwithoutboundary();
  public:
  const ::farm::nurture::location::service::proto::LocationWithoutBoundary& locationwithoutboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithoutBoundary* add_locationwithoutboundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithoutBoundary >&
      locationwithoutboundary() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithoutBoundary > locationwithoutboundary_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LocationWithoutBoundary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.LocationWithoutBoundary) */ {
 public:
  inline LocationWithoutBoundary() : LocationWithoutBoundary(nullptr) {}
  virtual ~LocationWithoutBoundary();

  LocationWithoutBoundary(const LocationWithoutBoundary& from);
  LocationWithoutBoundary(LocationWithoutBoundary&& from) noexcept
    : LocationWithoutBoundary() {
    *this = ::std::move(from);
  }

  inline LocationWithoutBoundary& operator=(const LocationWithoutBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationWithoutBoundary& operator=(LocationWithoutBoundary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationWithoutBoundary& default_instance();

  static inline const LocationWithoutBoundary* internal_default_instance() {
    return reinterpret_cast<const LocationWithoutBoundary*>(
               &_LocationWithoutBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(LocationWithoutBoundary& a, LocationWithoutBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationWithoutBoundary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationWithoutBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationWithoutBoundary* New() const final {
    return CreateMaybeMessage<LocationWithoutBoundary>(nullptr);
  }

  LocationWithoutBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationWithoutBoundary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationWithoutBoundary& from);
  void MergeFrom(const LocationWithoutBoundary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationWithoutBoundary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.LocationWithoutBoundary";
  }
  protected:
  explicit LocationWithoutBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kNameFieldNumber = 2,
    kNamespaceFieldNumber = 7,
    kIdFieldNumber = 1,
    kCenterLatitudeFieldNumber = 4,
    kCenterLongitudeFieldNumber = 5,
    kAreaFieldNumber = 6,
    kLocationStatusFieldNumber = 8,
  };
  // repeated .farm.nurture.location.service.proto.Label labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::farm::nurture::location::service::proto::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
      mutable_labels();
  private:
  const ::farm::nurture::location::service::proto::Label& _internal_labels(int index) const;
  ::farm::nurture::location::service::proto::Label* _internal_add_labels();
  public:
  const ::farm::nurture::location::service::proto::Label& labels(int index) const;
  ::farm::nurture::location::service::proto::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
      labels() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 7;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double center_latitude = 4;
  void clear_center_latitude();
  double center_latitude() const;
  void set_center_latitude(double value);
  private:
  double _internal_center_latitude() const;
  void _internal_set_center_latitude(double value);
  public:

  // double center_longitude = 5;
  void clear_center_longitude();
  double center_longitude() const;
  void set_center_longitude(double value);
  private:
  double _internal_center_longitude() const;
  void _internal_set_center_longitude(double value);
  public:

  // double area = 6;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // .farm.nurture.location.service.proto.Status locationStatus = 8;
  void clear_locationstatus();
  ::farm::nurture::location::service::proto::Status locationstatus() const;
  void set_locationstatus(::farm::nurture::location::service::proto::Status value);
  private:
  ::farm::nurture::location::service::proto::Status _internal_locationstatus() const;
  void _internal_set_locationstatus(::farm::nurture::location::service::proto::Status value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.LocationWithoutBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double center_latitude_;
  double center_longitude_;
  double area_;
  int locationstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GeographyDataType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GeographyDataType) */ {
 public:
  inline GeographyDataType() : GeographyDataType(nullptr) {}
  virtual ~GeographyDataType();

  GeographyDataType(const GeographyDataType& from);
  GeographyDataType(GeographyDataType&& from) noexcept
    : GeographyDataType() {
    *this = ::std::move(from);
  }

  inline GeographyDataType& operator=(const GeographyDataType& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographyDataType& operator=(GeographyDataType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeographyDataType& default_instance();

  static inline const GeographyDataType* internal_default_instance() {
    return reinterpret_cast<const GeographyDataType*>(
               &_GeographyDataType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GeographyDataType& a, GeographyDataType& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographyDataType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographyDataType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeographyDataType* New() const final {
    return CreateMaybeMessage<GeographyDataType>(nullptr);
  }

  GeographyDataType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeographyDataType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeographyDataType& from);
  void MergeFrom(const GeographyDataType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyDataType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GeographyDataType";
  }
  protected:
  explicit GeographyDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kGeoTypeFieldNumber = 2,
    kLabelKeyFieldNumber = 3,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.location.service.proto.GeographyType geoType = 2;
  void clear_geotype();
  ::farm::nurture::location::service::proto::GeographyType geotype() const;
  void set_geotype(::farm::nurture::location::service::proto::GeographyType value);
  private:
  ::farm::nurture::location::service::proto::GeographyType _internal_geotype() const;
  void _internal_set_geotype(::farm::nurture::location::service::proto::GeographyType value);
  public:

  // .farm.nurture.location.service.proto.LabelKey labelKey = 3;
  void clear_labelkey();
  ::farm::nurture::location::service::proto::LabelKey labelkey() const;
  void set_labelkey(::farm::nurture::location::service::proto::LabelKey value);
  private:
  ::farm::nurture::location::service::proto::LabelKey _internal_labelkey() const;
  void _internal_set_labelkey(::farm::nurture::location::service::proto::LabelKey value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GeographyDataType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  int geotype_;
  int labelkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkGeographyDataType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkGeographyDataType) */ {
 public:
  inline BulkGeographyDataType() : BulkGeographyDataType(nullptr) {}
  virtual ~BulkGeographyDataType();

  BulkGeographyDataType(const BulkGeographyDataType& from);
  BulkGeographyDataType(BulkGeographyDataType&& from) noexcept
    : BulkGeographyDataType() {
    *this = ::std::move(from);
  }

  inline BulkGeographyDataType& operator=(const BulkGeographyDataType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkGeographyDataType& operator=(BulkGeographyDataType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkGeographyDataType& default_instance();

  static inline const BulkGeographyDataType* internal_default_instance() {
    return reinterpret_cast<const BulkGeographyDataType*>(
               &_BulkGeographyDataType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(BulkGeographyDataType& a, BulkGeographyDataType& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkGeographyDataType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkGeographyDataType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkGeographyDataType* New() const final {
    return CreateMaybeMessage<BulkGeographyDataType>(nullptr);
  }

  BulkGeographyDataType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkGeographyDataType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkGeographyDataType& from);
  void MergeFrom(const BulkGeographyDataType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkGeographyDataType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkGeographyDataType";
  }
  protected:
  explicit BulkGeographyDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.GeographyDataType requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::GeographyDataType* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyDataType >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::GeographyDataType& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::GeographyDataType* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::GeographyDataType& requests(int index) const;
  ::farm::nurture::location::service::proto::GeographyDataType* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyDataType >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkGeographyDataType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyDataType > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GeographyTypeMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GeographyTypeMessageResponse) */ {
 public:
  inline GeographyTypeMessageResponse() : GeographyTypeMessageResponse(nullptr) {}
  virtual ~GeographyTypeMessageResponse();

  GeographyTypeMessageResponse(const GeographyTypeMessageResponse& from);
  GeographyTypeMessageResponse(GeographyTypeMessageResponse&& from) noexcept
    : GeographyTypeMessageResponse() {
    *this = ::std::move(from);
  }

  inline GeographyTypeMessageResponse& operator=(const GeographyTypeMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographyTypeMessageResponse& operator=(GeographyTypeMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeographyTypeMessageResponse& default_instance();

  static inline const GeographyTypeMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GeographyTypeMessageResponse*>(
               &_GeographyTypeMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GeographyTypeMessageResponse& a, GeographyTypeMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographyTypeMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographyTypeMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeographyTypeMessageResponse* New() const final {
    return CreateMaybeMessage<GeographyTypeMessageResponse>(nullptr);
  }

  GeographyTypeMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeographyTypeMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeographyTypeMessageResponse& from);
  void MergeFrom(const GeographyTypeMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyTypeMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GeographyTypeMessageResponse";
  }
  protected:
  explicit GeographyTypeMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GeographyTypeMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkGeographyTypeMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse) */ {
 public:
  inline BulkGeographyTypeMessageResponse() : BulkGeographyTypeMessageResponse(nullptr) {}
  virtual ~BulkGeographyTypeMessageResponse();

  BulkGeographyTypeMessageResponse(const BulkGeographyTypeMessageResponse& from);
  BulkGeographyTypeMessageResponse(BulkGeographyTypeMessageResponse&& from) noexcept
    : BulkGeographyTypeMessageResponse() {
    *this = ::std::move(from);
  }

  inline BulkGeographyTypeMessageResponse& operator=(const BulkGeographyTypeMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkGeographyTypeMessageResponse& operator=(BulkGeographyTypeMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkGeographyTypeMessageResponse& default_instance();

  static inline const BulkGeographyTypeMessageResponse* internal_default_instance() {
    return reinterpret_cast<const BulkGeographyTypeMessageResponse*>(
               &_BulkGeographyTypeMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(BulkGeographyTypeMessageResponse& a, BulkGeographyTypeMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkGeographyTypeMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkGeographyTypeMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkGeographyTypeMessageResponse* New() const final {
    return CreateMaybeMessage<BulkGeographyTypeMessageResponse>(nullptr);
  }

  BulkGeographyTypeMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkGeographyTypeMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkGeographyTypeMessageResponse& from);
  void MergeFrom(const BulkGeographyTypeMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkGeographyTypeMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse";
  }
  protected:
  explicit BulkGeographyTypeMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.GeographyTypeMessageResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::GeographyTypeMessageResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::GeographyTypeMessageResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetChildGeographiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetChildGeographiesRequest) */ {
 public:
  inline GetChildGeographiesRequest() : GetChildGeographiesRequest(nullptr) {}
  virtual ~GetChildGeographiesRequest();

  GetChildGeographiesRequest(const GetChildGeographiesRequest& from);
  GetChildGeographiesRequest(GetChildGeographiesRequest&& from) noexcept
    : GetChildGeographiesRequest() {
    *this = ::std::move(from);
  }

  inline GetChildGeographiesRequest& operator=(const GetChildGeographiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildGeographiesRequest& operator=(GetChildGeographiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChildGeographiesRequest& default_instance();

  static inline const GetChildGeographiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetChildGeographiesRequest*>(
               &_GetChildGeographiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetChildGeographiesRequest& a, GetChildGeographiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildGeographiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildGeographiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildGeographiesRequest* New() const final {
    return CreateMaybeMessage<GetChildGeographiesRequest>(nullptr);
  }

  GetChildGeographiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildGeographiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChildGeographiesRequest& from);
  void MergeFrom(const GetChildGeographiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChildGeographiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetChildGeographiesRequest";
  }
  protected:
  explicit GetChildGeographiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 4,
    kCodeFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
    kFormatFieldNumber = 6,
    kPageSizeFieldNumber = 7,
    kPageNumberFieldNumber = 8,
  };
  // string namespace = 4;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 5;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // .farm.nurture.location.service.proto.Format format = 6;
  void clear_format();
  ::farm::nurture::location::service::proto::Format format() const;
  void set_format(::farm::nurture::location::service::proto::Format value);
  private:
  ::farm::nurture::location::service::proto::Format _internal_format() const;
  void _internal_set_format(::farm::nurture::location::service::proto::Format value);
  public:

  // int64 pageSize = 7;
  void clear_pagesize();
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize() const;
  void set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagesize() const;
  void _internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pageNumber = 8;
  void clear_pagenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber() const;
  void set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pagenumber() const;
  void _internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetChildGeographiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 pagenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetChildGeographiesResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord) */ {
 public:
  inline GetChildGeographiesResponseRecord() : GetChildGeographiesResponseRecord(nullptr) {}
  virtual ~GetChildGeographiesResponseRecord();

  GetChildGeographiesResponseRecord(const GetChildGeographiesResponseRecord& from);
  GetChildGeographiesResponseRecord(GetChildGeographiesResponseRecord&& from) noexcept
    : GetChildGeographiesResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetChildGeographiesResponseRecord& operator=(const GetChildGeographiesResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildGeographiesResponseRecord& operator=(GetChildGeographiesResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChildGeographiesResponseRecord& default_instance();

  static inline const GetChildGeographiesResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetChildGeographiesResponseRecord*>(
               &_GetChildGeographiesResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetChildGeographiesResponseRecord& a, GetChildGeographiesResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildGeographiesResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildGeographiesResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildGeographiesResponseRecord* New() const final {
    return CreateMaybeMessage<GetChildGeographiesResponseRecord>(nullptr);
  }

  GetChildGeographiesResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildGeographiesResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChildGeographiesResponseRecord& from);
  void MergeFrom(const GetChildGeographiesResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChildGeographiesResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetChildGeographiesResponseRecord";
  }
  protected:
  explicit GetChildGeographiesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetChildGeographiesResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetChildGeographiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetChildGeographiesResponse) */ {
 public:
  inline GetChildGeographiesResponse() : GetChildGeographiesResponse(nullptr) {}
  virtual ~GetChildGeographiesResponse();

  GetChildGeographiesResponse(const GetChildGeographiesResponse& from);
  GetChildGeographiesResponse(GetChildGeographiesResponse&& from) noexcept
    : GetChildGeographiesResponse() {
    *this = ::std::move(from);
  }

  inline GetChildGeographiesResponse& operator=(const GetChildGeographiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildGeographiesResponse& operator=(GetChildGeographiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChildGeographiesResponse& default_instance();

  static inline const GetChildGeographiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetChildGeographiesResponse*>(
               &_GetChildGeographiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetChildGeographiesResponse& a, GetChildGeographiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildGeographiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildGeographiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildGeographiesResponse* New() const final {
    return CreateMaybeMessage<GetChildGeographiesResponse>(nullptr);
  }

  GetChildGeographiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildGeographiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChildGeographiesResponse& from);
  void MergeFrom(const GetChildGeographiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChildGeographiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetChildGeographiesResponse";
  }
  protected:
  explicit GetChildGeographiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kLocationWithBoundaryFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
  int locationwithboundary_size() const;
  private:
  int _internal_locationwithboundary_size() const;
  public:
  void clear_locationwithboundary();
  ::farm::nurture::location::service::proto::LocationWithBoundary* mutable_locationwithboundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >*
      mutable_locationwithboundary();
  private:
  const ::farm::nurture::location::service::proto::LocationWithBoundary& _internal_locationwithboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithBoundary* _internal_add_locationwithboundary();
  public:
  const ::farm::nurture::location::service::proto::LocationWithBoundary& locationwithboundary(int index) const;
  ::farm::nurture::location::service::proto::LocationWithBoundary* add_locationwithboundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >&
      locationwithboundary() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetChildGeographiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary > locationwithboundary_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertLocationWithoutBoundaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest) */ {
 public:
  inline InsertLocationWithoutBoundaryRequest() : InsertLocationWithoutBoundaryRequest(nullptr) {}
  virtual ~InsertLocationWithoutBoundaryRequest();

  InsertLocationWithoutBoundaryRequest(const InsertLocationWithoutBoundaryRequest& from);
  InsertLocationWithoutBoundaryRequest(InsertLocationWithoutBoundaryRequest&& from) noexcept
    : InsertLocationWithoutBoundaryRequest() {
    *this = ::std::move(from);
  }

  inline InsertLocationWithoutBoundaryRequest& operator=(const InsertLocationWithoutBoundaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationWithoutBoundaryRequest& operator=(InsertLocationWithoutBoundaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationWithoutBoundaryRequest& default_instance();

  static inline const InsertLocationWithoutBoundaryRequest* internal_default_instance() {
    return reinterpret_cast<const InsertLocationWithoutBoundaryRequest*>(
               &_InsertLocationWithoutBoundaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(InsertLocationWithoutBoundaryRequest& a, InsertLocationWithoutBoundaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationWithoutBoundaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationWithoutBoundaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationWithoutBoundaryRequest* New() const final {
    return CreateMaybeMessage<InsertLocationWithoutBoundaryRequest>(nullptr);
  }

  InsertLocationWithoutBoundaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationWithoutBoundaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationWithoutBoundaryRequest& from);
  void MergeFrom(const InsertLocationWithoutBoundaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationWithoutBoundaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest";
  }
  protected:
  explicit InsertLocationWithoutBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InsertLocationWithoutBoundaryRequest_Status Status;
  static constexpr Status UNCLAIMED =
    InsertLocationWithoutBoundaryRequest_Status_UNCLAIMED;
  static constexpr Status CLAIMED =
    InsertLocationWithoutBoundaryRequest_Status_CLAIMED;
  static inline bool Status_IsValid(int value) {
    return InsertLocationWithoutBoundaryRequest_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    InsertLocationWithoutBoundaryRequest_Status_Status_MIN;
  static constexpr Status Status_MAX =
    InsertLocationWithoutBoundaryRequest_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    InsertLocationWithoutBoundaryRequest_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return InsertLocationWithoutBoundaryRequest_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return InsertLocationWithoutBoundaryRequest_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return InsertLocationWithoutBoundaryRequest_Status_Parse(name, value);
  }

  typedef InsertLocationWithoutBoundaryRequest_Visibility Visibility;
  static constexpr Visibility VISIBLE =
    InsertLocationWithoutBoundaryRequest_Visibility_VISIBLE;
  static constexpr Visibility INVISIBLE =
    InsertLocationWithoutBoundaryRequest_Visibility_INVISIBLE;
  static inline bool Visibility_IsValid(int value) {
    return InsertLocationWithoutBoundaryRequest_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    InsertLocationWithoutBoundaryRequest_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    InsertLocationWithoutBoundaryRequest_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    InsertLocationWithoutBoundaryRequest_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return InsertLocationWithoutBoundaryRequest_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return InsertLocationWithoutBoundaryRequest_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Visibility* value) {
    return InsertLocationWithoutBoundaryRequest_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kLabelsFieldNumber = 4,
    kNamespaceFieldNumber = 5,
    kCodeFieldNumber = 6,
    kMetadataFieldNumber = 8,
    kCreatedByActorTypeFieldNumber = 13,
    kModifiedByActorTypeFieldNumber = 15,
    kGeographyUidFieldNumber = 17,
    kPincodeFieldNumber = 18,
    kLatLongGeohashFieldNumber = 19,
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 2,
    kStatusFieldNumber = 7,
    kVersionFieldNumber = 9,
    kMinS2LevelFieldNumber = 10,
    kMaxS2LevelFieldNumber = 11,
    kCreatedByActorIdFieldNumber = 12,
    kModifiedByActorIdFieldNumber = 14,
    kVisibilityFieldNumber = 16,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string labels = 4;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string namespace = 5;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 6;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string metadata = 8;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string createdByActorType = 13;
  void clear_createdbyactortype();
  const std::string& createdbyactortype() const;
  void set_createdbyactortype(const std::string& value);
  void set_createdbyactortype(std::string&& value);
  void set_createdbyactortype(const char* value);
  void set_createdbyactortype(const char* value, size_t size);
  std::string* mutable_createdbyactortype();
  std::string* release_createdbyactortype();
  void set_allocated_createdbyactortype(std::string* createdbyactortype);
  private:
  const std::string& _internal_createdbyactortype() const;
  void _internal_set_createdbyactortype(const std::string& value);
  std::string* _internal_mutable_createdbyactortype();
  public:

  // string modifiedByActorType = 15;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // string geographyUid = 17;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string pincode = 18;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string latLongGeohash = 19;
  void clear_latlonggeohash();
  const std::string& latlonggeohash() const;
  void set_latlonggeohash(const std::string& value);
  void set_latlonggeohash(std::string&& value);
  void set_latlonggeohash(const char* value);
  void set_latlonggeohash(const char* value, size_t size);
  std::string* mutable_latlonggeohash();
  std::string* release_latlonggeohash();
  void set_allocated_latlonggeohash(std::string* latlonggeohash);
  private:
  const std::string& _internal_latlonggeohash() const;
  void _internal_set_latlonggeohash(const std::string& value);
  std::string* _internal_mutable_latlonggeohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status status = 7;
  void clear_status();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status status() const;
  void set_status(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status value);
  private:
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status value);
  public:

  // int32 version = 9;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minS2Level = 10;
  void clear_mins2level();
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level() const;
  void set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins2level() const;
  void _internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxS2Level = 11;
  void clear_maxs2level();
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level() const;
  void set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxs2level() const;
  void _internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createdByActorId = 12;
  void clear_createdbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid() const;
  void set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdbyactorid() const;
  void _internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 modifiedByActorId = 14;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility visibility = 16;
  void clear_visibility();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility value);
  private:
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latlonggeohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  int visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationWithoutBoundaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest) */ {
 public:
  inline BulkInsertLocationWithoutBoundaryRequest() : BulkInsertLocationWithoutBoundaryRequest(nullptr) {}
  virtual ~BulkInsertLocationWithoutBoundaryRequest();

  BulkInsertLocationWithoutBoundaryRequest(const BulkInsertLocationWithoutBoundaryRequest& from);
  BulkInsertLocationWithoutBoundaryRequest(BulkInsertLocationWithoutBoundaryRequest&& from) noexcept
    : BulkInsertLocationWithoutBoundaryRequest() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationWithoutBoundaryRequest& operator=(const BulkInsertLocationWithoutBoundaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationWithoutBoundaryRequest& operator=(BulkInsertLocationWithoutBoundaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationWithoutBoundaryRequest& default_instance();

  static inline const BulkInsertLocationWithoutBoundaryRequest* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationWithoutBoundaryRequest*>(
               &_BulkInsertLocationWithoutBoundaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(BulkInsertLocationWithoutBoundaryRequest& a, BulkInsertLocationWithoutBoundaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationWithoutBoundaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationWithoutBoundaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationWithoutBoundaryRequest* New() const final {
    return CreateMaybeMessage<BulkInsertLocationWithoutBoundaryRequest>(nullptr);
  }

  BulkInsertLocationWithoutBoundaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationWithoutBoundaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationWithoutBoundaryRequest& from);
  void MergeFrom(const BulkInsertLocationWithoutBoundaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationWithoutBoundaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest";
  }
  protected:
  explicit BulkInsertLocationWithoutBoundaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertLocationWithoutBoundaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse) */ {
 public:
  inline InsertLocationWithoutBoundaryResponse() : InsertLocationWithoutBoundaryResponse(nullptr) {}
  virtual ~InsertLocationWithoutBoundaryResponse();

  InsertLocationWithoutBoundaryResponse(const InsertLocationWithoutBoundaryResponse& from);
  InsertLocationWithoutBoundaryResponse(InsertLocationWithoutBoundaryResponse&& from) noexcept
    : InsertLocationWithoutBoundaryResponse() {
    *this = ::std::move(from);
  }

  inline InsertLocationWithoutBoundaryResponse& operator=(const InsertLocationWithoutBoundaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertLocationWithoutBoundaryResponse& operator=(InsertLocationWithoutBoundaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertLocationWithoutBoundaryResponse& default_instance();

  static inline const InsertLocationWithoutBoundaryResponse* internal_default_instance() {
    return reinterpret_cast<const InsertLocationWithoutBoundaryResponse*>(
               &_InsertLocationWithoutBoundaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(InsertLocationWithoutBoundaryResponse& a, InsertLocationWithoutBoundaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertLocationWithoutBoundaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertLocationWithoutBoundaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertLocationWithoutBoundaryResponse* New() const final {
    return CreateMaybeMessage<InsertLocationWithoutBoundaryResponse>(nullptr);
  }

  InsertLocationWithoutBoundaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertLocationWithoutBoundaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertLocationWithoutBoundaryResponse& from);
  void MergeFrom(const InsertLocationWithoutBoundaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertLocationWithoutBoundaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse";
  }
  protected:
  explicit InsertLocationWithoutBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertLocationWithoutBoundaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse) */ {
 public:
  inline BulkInsertLocationWithoutBoundaryResponse() : BulkInsertLocationWithoutBoundaryResponse(nullptr) {}
  virtual ~BulkInsertLocationWithoutBoundaryResponse();

  BulkInsertLocationWithoutBoundaryResponse(const BulkInsertLocationWithoutBoundaryResponse& from);
  BulkInsertLocationWithoutBoundaryResponse(BulkInsertLocationWithoutBoundaryResponse&& from) noexcept
    : BulkInsertLocationWithoutBoundaryResponse() {
    *this = ::std::move(from);
  }

  inline BulkInsertLocationWithoutBoundaryResponse& operator=(const BulkInsertLocationWithoutBoundaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertLocationWithoutBoundaryResponse& operator=(BulkInsertLocationWithoutBoundaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertLocationWithoutBoundaryResponse& default_instance();

  static inline const BulkInsertLocationWithoutBoundaryResponse* internal_default_instance() {
    return reinterpret_cast<const BulkInsertLocationWithoutBoundaryResponse*>(
               &_BulkInsertLocationWithoutBoundaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(BulkInsertLocationWithoutBoundaryResponse& a, BulkInsertLocationWithoutBoundaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertLocationWithoutBoundaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertLocationWithoutBoundaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertLocationWithoutBoundaryResponse* New() const final {
    return CreateMaybeMessage<BulkInsertLocationWithoutBoundaryResponse>(nullptr);
  }

  BulkInsertLocationWithoutBoundaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertLocationWithoutBoundaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertLocationWithoutBoundaryResponse& from);
  void MergeFrom(const BulkInsertLocationWithoutBoundaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertLocationWithoutBoundaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse";
  }
  protected:
  explicit BulkInsertLocationWithoutBoundaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationWithoutBoundaryByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest) */ {
 public:
  inline UpdateLocationWithoutBoundaryByIdRequest() : UpdateLocationWithoutBoundaryByIdRequest(nullptr) {}
  virtual ~UpdateLocationWithoutBoundaryByIdRequest();

  UpdateLocationWithoutBoundaryByIdRequest(const UpdateLocationWithoutBoundaryByIdRequest& from);
  UpdateLocationWithoutBoundaryByIdRequest(UpdateLocationWithoutBoundaryByIdRequest&& from) noexcept
    : UpdateLocationWithoutBoundaryByIdRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLocationWithoutBoundaryByIdRequest& operator=(const UpdateLocationWithoutBoundaryByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationWithoutBoundaryByIdRequest& operator=(UpdateLocationWithoutBoundaryByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationWithoutBoundaryByIdRequest& default_instance();

  static inline const UpdateLocationWithoutBoundaryByIdRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationWithoutBoundaryByIdRequest*>(
               &_UpdateLocationWithoutBoundaryByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(UpdateLocationWithoutBoundaryByIdRequest& a, UpdateLocationWithoutBoundaryByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationWithoutBoundaryByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationWithoutBoundaryByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationWithoutBoundaryByIdRequest* New() const final {
    return CreateMaybeMessage<UpdateLocationWithoutBoundaryByIdRequest>(nullptr);
  }

  UpdateLocationWithoutBoundaryByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationWithoutBoundaryByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationWithoutBoundaryByIdRequest& from);
  void MergeFrom(const UpdateLocationWithoutBoundaryByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationWithoutBoundaryByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest";
  }
  protected:
  explicit UpdateLocationWithoutBoundaryByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateLocationWithoutBoundaryByIdRequest_Status Status;
  static constexpr Status UNCLAIMED =
    UpdateLocationWithoutBoundaryByIdRequest_Status_UNCLAIMED;
  static constexpr Status CLAIMED =
    UpdateLocationWithoutBoundaryByIdRequest_Status_CLAIMED;
  static inline bool Status_IsValid(int value) {
    return UpdateLocationWithoutBoundaryByIdRequest_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UpdateLocationWithoutBoundaryByIdRequest_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UpdateLocationWithoutBoundaryByIdRequest_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UpdateLocationWithoutBoundaryByIdRequest_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UpdateLocationWithoutBoundaryByIdRequest_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UpdateLocationWithoutBoundaryByIdRequest_Status_Parse(name, value);
  }

  typedef UpdateLocationWithoutBoundaryByIdRequest_Visibility Visibility;
  static constexpr Visibility VISIBLE =
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_VISIBLE;
  static constexpr Visibility INVISIBLE =
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_INVISIBLE;
  static inline bool Visibility_IsValid(int value) {
    return UpdateLocationWithoutBoundaryByIdRequest_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    UpdateLocationWithoutBoundaryByIdRequest_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return UpdateLocationWithoutBoundaryByIdRequest_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Visibility* value) {
    return UpdateLocationWithoutBoundaryByIdRequest_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLabelsFieldNumber = 3,
    kNamespaceFieldNumber = 4,
    kCodeFieldNumber = 5,
    kMetadataFieldNumber = 7,
    kModifiedByActorTypeFieldNumber = 12,
    kGeographyUidFieldNumber = 14,
    kPincodeFieldNumber = 15,
    kLatLongGeohashFieldNumber = 16,
    kRequestHeadersFieldNumber = 1,
    kStatusFieldNumber = 6,
    kNewVersionFieldNumber = 8,
    kMinS2LevelFieldNumber = 9,
    kMaxS2LevelFieldNumber = 10,
    kModifiedByActorIdFieldNumber = 11,
    kVisibilityFieldNumber = 13,
    kOldVersionFieldNumber = 18,
    kIdFieldNumber = 17,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string labels = 3;
  void clear_labels();
  const std::string& labels() const;
  void set_labels(const std::string& value);
  void set_labels(std::string&& value);
  void set_labels(const char* value);
  void set_labels(const char* value, size_t size);
  std::string* mutable_labels();
  std::string* release_labels();
  void set_allocated_labels(std::string* labels);
  private:
  const std::string& _internal_labels() const;
  void _internal_set_labels(const std::string& value);
  std::string* _internal_mutable_labels();
  public:

  // string namespace = 4;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string code = 5;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string metadata = 7;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string modifiedByActorType = 12;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // string geographyUid = 14;
  void clear_geographyuid();
  const std::string& geographyuid() const;
  void set_geographyuid(const std::string& value);
  void set_geographyuid(std::string&& value);
  void set_geographyuid(const char* value);
  void set_geographyuid(const char* value, size_t size);
  std::string* mutable_geographyuid();
  std::string* release_geographyuid();
  void set_allocated_geographyuid(std::string* geographyuid);
  private:
  const std::string& _internal_geographyuid() const;
  void _internal_set_geographyuid(const std::string& value);
  std::string* _internal_mutable_geographyuid();
  public:

  // string pincode = 15;
  void clear_pincode();
  const std::string& pincode() const;
  void set_pincode(const std::string& value);
  void set_pincode(std::string&& value);
  void set_pincode(const char* value);
  void set_pincode(const char* value, size_t size);
  std::string* mutable_pincode();
  std::string* release_pincode();
  void set_allocated_pincode(std::string* pincode);
  private:
  const std::string& _internal_pincode() const;
  void _internal_set_pincode(const std::string& value);
  std::string* _internal_mutable_pincode();
  public:

  // string latLongGeohash = 16;
  void clear_latlonggeohash();
  const std::string& latlonggeohash() const;
  void set_latlonggeohash(const std::string& value);
  void set_latlonggeohash(std::string&& value);
  void set_latlonggeohash(const char* value);
  void set_latlonggeohash(const char* value, size_t size);
  std::string* mutable_latlonggeohash();
  std::string* release_latlonggeohash();
  void set_allocated_latlonggeohash(std::string* latlonggeohash);
  private:
  const std::string& _internal_latlonggeohash() const;
  void _internal_set_latlonggeohash(const std::string& value);
  std::string* _internal_mutable_latlonggeohash();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status status = 6;
  void clear_status();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status status() const;
  void set_status(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status value);
  private:
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status _internal_status() const;
  void _internal_set_status(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status value);
  public:

  // int32 newVersion = 8;
  void clear_newversion();
  ::PROTOBUF_NAMESPACE_ID::int32 newversion() const;
  void set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newversion() const;
  void _internal_set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minS2Level = 9;
  void clear_mins2level();
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level() const;
  void set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins2level() const;
  void _internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxS2Level = 10;
  void clear_maxs2level();
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level() const;
  void set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxs2level() const;
  void _internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 modifiedByActorId = 11;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility visibility = 13;
  void clear_visibility();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility visibility() const;
  void set_visibility(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility value);
  private:
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility _internal_visibility() const;
  void _internal_set_visibility(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility value);
  public:

  // int32 oldVersion = 18;
  void clear_oldversion();
  ::PROTOBUF_NAMESPACE_ID::int32 oldversion() const;
  void set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oldversion() const;
  void _internal_set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 id = 17;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geographyuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pincode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latlonggeohash_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 newversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins2level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxs2level_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  int visibility_;
  ::PROTOBUF_NAMESPACE_ID::int32 oldversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationWithoutBoundaryByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest) */ {
 public:
  inline BulkUpdateLocationWithoutBoundaryByIdRequest() : BulkUpdateLocationWithoutBoundaryByIdRequest(nullptr) {}
  virtual ~BulkUpdateLocationWithoutBoundaryByIdRequest();

  BulkUpdateLocationWithoutBoundaryByIdRequest(const BulkUpdateLocationWithoutBoundaryByIdRequest& from);
  BulkUpdateLocationWithoutBoundaryByIdRequest(BulkUpdateLocationWithoutBoundaryByIdRequest&& from) noexcept
    : BulkUpdateLocationWithoutBoundaryByIdRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationWithoutBoundaryByIdRequest& operator=(const BulkUpdateLocationWithoutBoundaryByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationWithoutBoundaryByIdRequest& operator=(BulkUpdateLocationWithoutBoundaryByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationWithoutBoundaryByIdRequest& default_instance();

  static inline const BulkUpdateLocationWithoutBoundaryByIdRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationWithoutBoundaryByIdRequest*>(
               &_BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(BulkUpdateLocationWithoutBoundaryByIdRequest& a, BulkUpdateLocationWithoutBoundaryByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationWithoutBoundaryByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationWithoutBoundaryByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationWithoutBoundaryByIdRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationWithoutBoundaryByIdRequest>(nullptr);
  }

  BulkUpdateLocationWithoutBoundaryByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationWithoutBoundaryByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationWithoutBoundaryByIdRequest& from);
  void MergeFrom(const BulkUpdateLocationWithoutBoundaryByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationWithoutBoundaryByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest";
  }
  protected:
  explicit BulkUpdateLocationWithoutBoundaryByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateLocationWithoutBoundaryByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse) */ {
 public:
  inline UpdateLocationWithoutBoundaryByIdResponse() : UpdateLocationWithoutBoundaryByIdResponse(nullptr) {}
  virtual ~UpdateLocationWithoutBoundaryByIdResponse();

  UpdateLocationWithoutBoundaryByIdResponse(const UpdateLocationWithoutBoundaryByIdResponse& from);
  UpdateLocationWithoutBoundaryByIdResponse(UpdateLocationWithoutBoundaryByIdResponse&& from) noexcept
    : UpdateLocationWithoutBoundaryByIdResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLocationWithoutBoundaryByIdResponse& operator=(const UpdateLocationWithoutBoundaryByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLocationWithoutBoundaryByIdResponse& operator=(UpdateLocationWithoutBoundaryByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLocationWithoutBoundaryByIdResponse& default_instance();

  static inline const UpdateLocationWithoutBoundaryByIdResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLocationWithoutBoundaryByIdResponse*>(
               &_UpdateLocationWithoutBoundaryByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(UpdateLocationWithoutBoundaryByIdResponse& a, UpdateLocationWithoutBoundaryByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLocationWithoutBoundaryByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLocationWithoutBoundaryByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLocationWithoutBoundaryByIdResponse* New() const final {
    return CreateMaybeMessage<UpdateLocationWithoutBoundaryByIdResponse>(nullptr);
  }

  UpdateLocationWithoutBoundaryByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLocationWithoutBoundaryByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLocationWithoutBoundaryByIdResponse& from);
  void MergeFrom(const UpdateLocationWithoutBoundaryByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLocationWithoutBoundaryByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse";
  }
  protected:
  explicit UpdateLocationWithoutBoundaryByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkUpdateLocationWithoutBoundaryByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse) */ {
 public:
  inline BulkUpdateLocationWithoutBoundaryByIdResponse() : BulkUpdateLocationWithoutBoundaryByIdResponse(nullptr) {}
  virtual ~BulkUpdateLocationWithoutBoundaryByIdResponse();

  BulkUpdateLocationWithoutBoundaryByIdResponse(const BulkUpdateLocationWithoutBoundaryByIdResponse& from);
  BulkUpdateLocationWithoutBoundaryByIdResponse(BulkUpdateLocationWithoutBoundaryByIdResponse&& from) noexcept
    : BulkUpdateLocationWithoutBoundaryByIdResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateLocationWithoutBoundaryByIdResponse& operator=(const BulkUpdateLocationWithoutBoundaryByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkUpdateLocationWithoutBoundaryByIdResponse& operator=(BulkUpdateLocationWithoutBoundaryByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkUpdateLocationWithoutBoundaryByIdResponse& default_instance();

  static inline const BulkUpdateLocationWithoutBoundaryByIdResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateLocationWithoutBoundaryByIdResponse*>(
               &_BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(BulkUpdateLocationWithoutBoundaryByIdResponse& a, BulkUpdateLocationWithoutBoundaryByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkUpdateLocationWithoutBoundaryByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkUpdateLocationWithoutBoundaryByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateLocationWithoutBoundaryByIdResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateLocationWithoutBoundaryByIdResponse>(nullptr);
  }

  BulkUpdateLocationWithoutBoundaryByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateLocationWithoutBoundaryByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkUpdateLocationWithoutBoundaryByIdResponse& from);
  void MergeFrom(const BulkUpdateLocationWithoutBoundaryByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateLocationWithoutBoundaryByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse";
  }
  protected:
  explicit BulkUpdateLocationWithoutBoundaryByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteLocationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.DeleteLocationByIdRequest) */ {
 public:
  inline DeleteLocationByIdRequest() : DeleteLocationByIdRequest(nullptr) {}
  virtual ~DeleteLocationByIdRequest();

  DeleteLocationByIdRequest(const DeleteLocationByIdRequest& from);
  DeleteLocationByIdRequest(DeleteLocationByIdRequest&& from) noexcept
    : DeleteLocationByIdRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLocationByIdRequest& operator=(const DeleteLocationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLocationByIdRequest& operator=(DeleteLocationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLocationByIdRequest& default_instance();

  static inline const DeleteLocationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLocationByIdRequest*>(
               &_DeleteLocationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(DeleteLocationByIdRequest& a, DeleteLocationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLocationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLocationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLocationByIdRequest* New() const final {
    return CreateMaybeMessage<DeleteLocationByIdRequest>(nullptr);
  }

  DeleteLocationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLocationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLocationByIdRequest& from);
  void MergeFrom(const DeleteLocationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLocationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.DeleteLocationByIdRequest";
  }
  protected:
  explicit DeleteLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifiedByActorTypeFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kDeletedAtFieldNumber = 2,
    kModifiedByActorIdFieldNumber = 3,
    kIdFieldNumber = 5,
  };
  // string modifiedByActorType = 4;
  void clear_modifiedbyactortype();
  const std::string& modifiedbyactortype() const;
  void set_modifiedbyactortype(const std::string& value);
  void set_modifiedbyactortype(std::string&& value);
  void set_modifiedbyactortype(const char* value);
  void set_modifiedbyactortype(const char* value, size_t size);
  std::string* mutable_modifiedbyactortype();
  std::string* release_modifiedbyactortype();
  void set_allocated_modifiedbyactortype(std::string* modifiedbyactortype);
  private:
  const std::string& _internal_modifiedbyactortype() const;
  void _internal_set_modifiedbyactortype(const std::string& value);
  std::string* _internal_mutable_modifiedbyactortype();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 deletedAt = 2;
  void clear_deletedat();
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat() const;
  void set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletedat() const;
  void _internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 modifiedByActorId = 3;
  void clear_modifiedbyactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid() const;
  void set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modifiedbyactorid() const;
  void _internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.DeleteLocationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedbyactortype_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 modifiedbyactorid_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkDeleteLocationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest) */ {
 public:
  inline BulkDeleteLocationByIdRequest() : BulkDeleteLocationByIdRequest(nullptr) {}
  virtual ~BulkDeleteLocationByIdRequest();

  BulkDeleteLocationByIdRequest(const BulkDeleteLocationByIdRequest& from);
  BulkDeleteLocationByIdRequest(BulkDeleteLocationByIdRequest&& from) noexcept
    : BulkDeleteLocationByIdRequest() {
    *this = ::std::move(from);
  }

  inline BulkDeleteLocationByIdRequest& operator=(const BulkDeleteLocationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDeleteLocationByIdRequest& operator=(BulkDeleteLocationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkDeleteLocationByIdRequest& default_instance();

  static inline const BulkDeleteLocationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const BulkDeleteLocationByIdRequest*>(
               &_BulkDeleteLocationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(BulkDeleteLocationByIdRequest& a, BulkDeleteLocationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDeleteLocationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDeleteLocationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkDeleteLocationByIdRequest* New() const final {
    return CreateMaybeMessage<BulkDeleteLocationByIdRequest>(nullptr);
  }

  BulkDeleteLocationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkDeleteLocationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkDeleteLocationByIdRequest& from);
  void MergeFrom(const BulkDeleteLocationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDeleteLocationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest";
  }
  protected:
  explicit BulkDeleteLocationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteLocationByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.DeleteLocationByIdResponse) */ {
 public:
  inline DeleteLocationByIdResponse() : DeleteLocationByIdResponse(nullptr) {}
  virtual ~DeleteLocationByIdResponse();

  DeleteLocationByIdResponse(const DeleteLocationByIdResponse& from);
  DeleteLocationByIdResponse(DeleteLocationByIdResponse&& from) noexcept
    : DeleteLocationByIdResponse() {
    *this = ::std::move(from);
  }

  inline DeleteLocationByIdResponse& operator=(const DeleteLocationByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLocationByIdResponse& operator=(DeleteLocationByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLocationByIdResponse& default_instance();

  static inline const DeleteLocationByIdResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLocationByIdResponse*>(
               &_DeleteLocationByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(DeleteLocationByIdResponse& a, DeleteLocationByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLocationByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLocationByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLocationByIdResponse* New() const final {
    return CreateMaybeMessage<DeleteLocationByIdResponse>(nullptr);
  }

  DeleteLocationByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLocationByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLocationByIdResponse& from);
  void MergeFrom(const DeleteLocationByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLocationByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.DeleteLocationByIdResponse";
  }
  protected:
  explicit DeleteLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.DeleteLocationByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkDeleteLocationByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse) */ {
 public:
  inline BulkDeleteLocationByIdResponse() : BulkDeleteLocationByIdResponse(nullptr) {}
  virtual ~BulkDeleteLocationByIdResponse();

  BulkDeleteLocationByIdResponse(const BulkDeleteLocationByIdResponse& from);
  BulkDeleteLocationByIdResponse(BulkDeleteLocationByIdResponse&& from) noexcept
    : BulkDeleteLocationByIdResponse() {
    *this = ::std::move(from);
  }

  inline BulkDeleteLocationByIdResponse& operator=(const BulkDeleteLocationByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDeleteLocationByIdResponse& operator=(BulkDeleteLocationByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkDeleteLocationByIdResponse& default_instance();

  static inline const BulkDeleteLocationByIdResponse* internal_default_instance() {
    return reinterpret_cast<const BulkDeleteLocationByIdResponse*>(
               &_BulkDeleteLocationByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(BulkDeleteLocationByIdResponse& a, BulkDeleteLocationByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDeleteLocationByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDeleteLocationByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkDeleteLocationByIdResponse* New() const final {
    return CreateMaybeMessage<BulkDeleteLocationByIdResponse>(nullptr);
  }

  BulkDeleteLocationByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkDeleteLocationByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkDeleteLocationByIdResponse& from);
  void MergeFrom(const BulkDeleteLocationByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDeleteLocationByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse";
  }
  protected:
  explicit BulkDeleteLocationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.DeleteLocationByIdResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest) */ {
 public:
  inline FetchDuplicateVillagesRequest() : FetchDuplicateVillagesRequest(nullptr) {}
  virtual ~FetchDuplicateVillagesRequest();

  FetchDuplicateVillagesRequest(const FetchDuplicateVillagesRequest& from);
  FetchDuplicateVillagesRequest(FetchDuplicateVillagesRequest&& from) noexcept
    : FetchDuplicateVillagesRequest() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesRequest& operator=(const FetchDuplicateVillagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesRequest& operator=(FetchDuplicateVillagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesRequest& default_instance();

  static inline const FetchDuplicateVillagesRequest* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesRequest*>(
               &_FetchDuplicateVillagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(FetchDuplicateVillagesRequest& a, FetchDuplicateVillagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesRequest* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesRequest>(nullptr);
  }

  FetchDuplicateVillagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesRequest& from);
  void MergeFrom(const FetchDuplicateVillagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesRequest";
  }
  protected:
  explicit FetchDuplicateVillagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIdFieldNumber = 3,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord) */ {
 public:
  inline FetchDuplicateVillagesResponseRecord() : FetchDuplicateVillagesResponseRecord(nullptr) {}
  virtual ~FetchDuplicateVillagesResponseRecord();

  FetchDuplicateVillagesResponseRecord(const FetchDuplicateVillagesResponseRecord& from);
  FetchDuplicateVillagesResponseRecord(FetchDuplicateVillagesResponseRecord&& from) noexcept
    : FetchDuplicateVillagesResponseRecord() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesResponseRecord& operator=(const FetchDuplicateVillagesResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesResponseRecord& operator=(FetchDuplicateVillagesResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesResponseRecord& default_instance();

  static inline const FetchDuplicateVillagesResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesResponseRecord*>(
               &_FetchDuplicateVillagesResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(FetchDuplicateVillagesResponseRecord& a, FetchDuplicateVillagesResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesResponseRecord* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesResponseRecord>(nullptr);
  }

  FetchDuplicateVillagesResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesResponseRecord& from);
  void MergeFrom(const FetchDuplicateVillagesResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord";
  }
  protected:
  explicit FetchDuplicateVillagesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse) */ {
 public:
  inline FetchDuplicateVillagesResponse() : FetchDuplicateVillagesResponse(nullptr) {}
  virtual ~FetchDuplicateVillagesResponse();

  FetchDuplicateVillagesResponse(const FetchDuplicateVillagesResponse& from);
  FetchDuplicateVillagesResponse(FetchDuplicateVillagesResponse&& from) noexcept
    : FetchDuplicateVillagesResponse() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesResponse& operator=(const FetchDuplicateVillagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesResponse& operator=(FetchDuplicateVillagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesResponse& default_instance();

  static inline const FetchDuplicateVillagesResponse* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesResponse*>(
               &_FetchDuplicateVillagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(FetchDuplicateVillagesResponse& a, FetchDuplicateVillagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesResponse* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesResponse>(nullptr);
  }

  FetchDuplicateVillagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesResponse& from);
  void MergeFrom(const FetchDuplicateVillagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesResponse";
  }
  protected:
  explicit FetchDuplicateVillagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesBySDTVLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest) */ {
 public:
  inline FetchDuplicateVillagesBySDTVLatLongRequest() : FetchDuplicateVillagesBySDTVLatLongRequest(nullptr) {}
  virtual ~FetchDuplicateVillagesBySDTVLatLongRequest();

  FetchDuplicateVillagesBySDTVLatLongRequest(const FetchDuplicateVillagesBySDTVLatLongRequest& from);
  FetchDuplicateVillagesBySDTVLatLongRequest(FetchDuplicateVillagesBySDTVLatLongRequest&& from) noexcept
    : FetchDuplicateVillagesBySDTVLatLongRequest() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesBySDTVLatLongRequest& operator=(const FetchDuplicateVillagesBySDTVLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesBySDTVLatLongRequest& operator=(FetchDuplicateVillagesBySDTVLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesBySDTVLatLongRequest& default_instance();

  static inline const FetchDuplicateVillagesBySDTVLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesBySDTVLatLongRequest*>(
               &_FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FetchDuplicateVillagesBySDTVLatLongRequest& a, FetchDuplicateVillagesBySDTVLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesBySDTVLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesBySDTVLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesBySDTVLatLongRequest* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongRequest>(nullptr);
  }

  FetchDuplicateVillagesBySDTVLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesBySDTVLatLongRequest& from);
  void MergeFrom(const FetchDuplicateVillagesBySDTVLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesBySDTVLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest";
  }
  protected:
  explicit FetchDuplicateVillagesBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryStoredFieldNumber = 3,
    kStateStoredFieldNumber = 4,
    kDistrictStoredFieldNumber = 5,
    kTehsilStoredFieldNumber = 6,
    kNameFieldNumber = 7,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string countryStored = 3;
  void clear_countrystored();
  const std::string& countrystored() const;
  void set_countrystored(const std::string& value);
  void set_countrystored(std::string&& value);
  void set_countrystored(const char* value);
  void set_countrystored(const char* value, size_t size);
  std::string* mutable_countrystored();
  std::string* release_countrystored();
  void set_allocated_countrystored(std::string* countrystored);
  private:
  const std::string& _internal_countrystored() const;
  void _internal_set_countrystored(const std::string& value);
  std::string* _internal_mutable_countrystored();
  public:

  // string stateStored = 4;
  void clear_statestored();
  const std::string& statestored() const;
  void set_statestored(const std::string& value);
  void set_statestored(std::string&& value);
  void set_statestored(const char* value);
  void set_statestored(const char* value, size_t size);
  std::string* mutable_statestored();
  std::string* release_statestored();
  void set_allocated_statestored(std::string* statestored);
  private:
  const std::string& _internal_statestored() const;
  void _internal_set_statestored(const std::string& value);
  std::string* _internal_mutable_statestored();
  public:

  // string districtStored = 5;
  void clear_districtstored();
  const std::string& districtstored() const;
  void set_districtstored(const std::string& value);
  void set_districtstored(std::string&& value);
  void set_districtstored(const char* value);
  void set_districtstored(const char* value, size_t size);
  std::string* mutable_districtstored();
  std::string* release_districtstored();
  void set_allocated_districtstored(std::string* districtstored);
  private:
  const std::string& _internal_districtstored() const;
  void _internal_set_districtstored(const std::string& value);
  std::string* _internal_mutable_districtstored();
  public:

  // string tehsilStored = 6;
  void clear_tehsilstored();
  const std::string& tehsilstored() const;
  void set_tehsilstored(const std::string& value);
  void set_tehsilstored(std::string&& value);
  void set_tehsilstored(const char* value);
  void set_tehsilstored(const char* value, size_t size);
  std::string* mutable_tehsilstored();
  std::string* release_tehsilstored();
  void set_allocated_tehsilstored(std::string* tehsilstored);
  private:
  const std::string& _internal_tehsilstored() const;
  void _internal_set_tehsilstored(const std::string& value);
  std::string* _internal_mutable_tehsilstored();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrystored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statestored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr districtstored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsilstored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesBySDTVLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord) */ {
 public:
  inline FetchDuplicateVillagesBySDTVLatLongResponseRecord() : FetchDuplicateVillagesBySDTVLatLongResponseRecord(nullptr) {}
  virtual ~FetchDuplicateVillagesBySDTVLatLongResponseRecord();

  FetchDuplicateVillagesBySDTVLatLongResponseRecord(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from);
  FetchDuplicateVillagesBySDTVLatLongResponseRecord(FetchDuplicateVillagesBySDTVLatLongResponseRecord&& from) noexcept
    : FetchDuplicateVillagesBySDTVLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesBySDTVLatLongResponseRecord& operator=(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesBySDTVLatLongResponseRecord& operator=(FetchDuplicateVillagesBySDTVLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesBySDTVLatLongResponseRecord& default_instance();

  static inline const FetchDuplicateVillagesBySDTVLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesBySDTVLatLongResponseRecord*>(
               &_FetchDuplicateVillagesBySDTVLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(FetchDuplicateVillagesBySDTVLatLongResponseRecord& a, FetchDuplicateVillagesBySDTVLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesBySDTVLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongResponseRecord>(nullptr);
  }

  FetchDuplicateVillagesBySDTVLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from);
  void MergeFrom(const FetchDuplicateVillagesBySDTVLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesBySDTVLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord";
  }
  protected:
  explicit FetchDuplicateVillagesBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateVillagesBySDTVLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse) */ {
 public:
  inline FetchDuplicateVillagesBySDTVLatLongResponse() : FetchDuplicateVillagesBySDTVLatLongResponse(nullptr) {}
  virtual ~FetchDuplicateVillagesBySDTVLatLongResponse();

  FetchDuplicateVillagesBySDTVLatLongResponse(const FetchDuplicateVillagesBySDTVLatLongResponse& from);
  FetchDuplicateVillagesBySDTVLatLongResponse(FetchDuplicateVillagesBySDTVLatLongResponse&& from) noexcept
    : FetchDuplicateVillagesBySDTVLatLongResponse() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateVillagesBySDTVLatLongResponse& operator=(const FetchDuplicateVillagesBySDTVLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateVillagesBySDTVLatLongResponse& operator=(FetchDuplicateVillagesBySDTVLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateVillagesBySDTVLatLongResponse& default_instance();

  static inline const FetchDuplicateVillagesBySDTVLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateVillagesBySDTVLatLongResponse*>(
               &_FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(FetchDuplicateVillagesBySDTVLatLongResponse& a, FetchDuplicateVillagesBySDTVLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateVillagesBySDTVLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateVillagesBySDTVLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateVillagesBySDTVLatLongResponse* New() const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongResponse>(nullptr);
  }

  FetchDuplicateVillagesBySDTVLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateVillagesBySDTVLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateVillagesBySDTVLatLongResponse& from);
  void MergeFrom(const FetchDuplicateVillagesBySDTVLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateVillagesBySDTVLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse";
  }
  protected:
  explicit FetchDuplicateVillagesBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateTehsilsBySDTVLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest) */ {
 public:
  inline FetchDuplicateTehsilsBySDTVLatLongRequest() : FetchDuplicateTehsilsBySDTVLatLongRequest(nullptr) {}
  virtual ~FetchDuplicateTehsilsBySDTVLatLongRequest();

  FetchDuplicateTehsilsBySDTVLatLongRequest(const FetchDuplicateTehsilsBySDTVLatLongRequest& from);
  FetchDuplicateTehsilsBySDTVLatLongRequest(FetchDuplicateTehsilsBySDTVLatLongRequest&& from) noexcept
    : FetchDuplicateTehsilsBySDTVLatLongRequest() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateTehsilsBySDTVLatLongRequest& operator=(const FetchDuplicateTehsilsBySDTVLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateTehsilsBySDTVLatLongRequest& operator=(FetchDuplicateTehsilsBySDTVLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateTehsilsBySDTVLatLongRequest& default_instance();

  static inline const FetchDuplicateTehsilsBySDTVLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateTehsilsBySDTVLatLongRequest*>(
               &_FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(FetchDuplicateTehsilsBySDTVLatLongRequest& a, FetchDuplicateTehsilsBySDTVLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateTehsilsBySDTVLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateTehsilsBySDTVLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateTehsilsBySDTVLatLongRequest* New() const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongRequest>(nullptr);
  }

  FetchDuplicateTehsilsBySDTVLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongRequest& from);
  void MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateTehsilsBySDTVLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest";
  }
  protected:
  explicit FetchDuplicateTehsilsBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryStoredFieldNumber = 3,
    kStateStoredFieldNumber = 4,
    kDistrictStoredFieldNumber = 5,
    kNameFieldNumber = 6,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string countryStored = 3;
  void clear_countrystored();
  const std::string& countrystored() const;
  void set_countrystored(const std::string& value);
  void set_countrystored(std::string&& value);
  void set_countrystored(const char* value);
  void set_countrystored(const char* value, size_t size);
  std::string* mutable_countrystored();
  std::string* release_countrystored();
  void set_allocated_countrystored(std::string* countrystored);
  private:
  const std::string& _internal_countrystored() const;
  void _internal_set_countrystored(const std::string& value);
  std::string* _internal_mutable_countrystored();
  public:

  // string stateStored = 4;
  void clear_statestored();
  const std::string& statestored() const;
  void set_statestored(const std::string& value);
  void set_statestored(std::string&& value);
  void set_statestored(const char* value);
  void set_statestored(const char* value, size_t size);
  std::string* mutable_statestored();
  std::string* release_statestored();
  void set_allocated_statestored(std::string* statestored);
  private:
  const std::string& _internal_statestored() const;
  void _internal_set_statestored(const std::string& value);
  std::string* _internal_mutable_statestored();
  public:

  // string districtStored = 5;
  void clear_districtstored();
  const std::string& districtstored() const;
  void set_districtstored(const std::string& value);
  void set_districtstored(std::string&& value);
  void set_districtstored(const char* value);
  void set_districtstored(const char* value, size_t size);
  std::string* mutable_districtstored();
  std::string* release_districtstored();
  void set_allocated_districtstored(std::string* districtstored);
  private:
  const std::string& _internal_districtstored() const;
  void _internal_set_districtstored(const std::string& value);
  std::string* _internal_mutable_districtstored();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrystored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statestored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr districtstored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateTehsilsBySDTVLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord) */ {
 public:
  inline FetchDuplicateTehsilsBySDTVLatLongResponseRecord() : FetchDuplicateTehsilsBySDTVLatLongResponseRecord(nullptr) {}
  virtual ~FetchDuplicateTehsilsBySDTVLatLongResponseRecord();

  FetchDuplicateTehsilsBySDTVLatLongResponseRecord(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from);
  FetchDuplicateTehsilsBySDTVLatLongResponseRecord(FetchDuplicateTehsilsBySDTVLatLongResponseRecord&& from) noexcept
    : FetchDuplicateTehsilsBySDTVLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateTehsilsBySDTVLatLongResponseRecord& operator=(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateTehsilsBySDTVLatLongResponseRecord& operator=(FetchDuplicateTehsilsBySDTVLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& default_instance();

  static inline const FetchDuplicateTehsilsBySDTVLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateTehsilsBySDTVLatLongResponseRecord*>(
               &_FetchDuplicateTehsilsBySDTVLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(FetchDuplicateTehsilsBySDTVLatLongResponseRecord& a, FetchDuplicateTehsilsBySDTVLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateTehsilsBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateTehsilsBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateTehsilsBySDTVLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongResponseRecord>(nullptr);
  }

  FetchDuplicateTehsilsBySDTVLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from);
  void MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateTehsilsBySDTVLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord";
  }
  protected:
  explicit FetchDuplicateTehsilsBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateTehsilsBySDTVLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse) */ {
 public:
  inline FetchDuplicateTehsilsBySDTVLatLongResponse() : FetchDuplicateTehsilsBySDTVLatLongResponse(nullptr) {}
  virtual ~FetchDuplicateTehsilsBySDTVLatLongResponse();

  FetchDuplicateTehsilsBySDTVLatLongResponse(const FetchDuplicateTehsilsBySDTVLatLongResponse& from);
  FetchDuplicateTehsilsBySDTVLatLongResponse(FetchDuplicateTehsilsBySDTVLatLongResponse&& from) noexcept
    : FetchDuplicateTehsilsBySDTVLatLongResponse() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateTehsilsBySDTVLatLongResponse& operator=(const FetchDuplicateTehsilsBySDTVLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateTehsilsBySDTVLatLongResponse& operator=(FetchDuplicateTehsilsBySDTVLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateTehsilsBySDTVLatLongResponse& default_instance();

  static inline const FetchDuplicateTehsilsBySDTVLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateTehsilsBySDTVLatLongResponse*>(
               &_FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(FetchDuplicateTehsilsBySDTVLatLongResponse& a, FetchDuplicateTehsilsBySDTVLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateTehsilsBySDTVLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateTehsilsBySDTVLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateTehsilsBySDTVLatLongResponse* New() const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongResponse>(nullptr);
  }

  FetchDuplicateTehsilsBySDTVLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateTehsilsBySDTVLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateTehsilsBySDTVLatLongResponse& from);
  void MergeFrom(const FetchDuplicateTehsilsBySDTVLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateTehsilsBySDTVLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse";
  }
  protected:
  explicit FetchDuplicateTehsilsBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateDistrictsBySDTVLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest) */ {
 public:
  inline FetchDuplicateDistrictsBySDTVLatLongRequest() : FetchDuplicateDistrictsBySDTVLatLongRequest(nullptr) {}
  virtual ~FetchDuplicateDistrictsBySDTVLatLongRequest();

  FetchDuplicateDistrictsBySDTVLatLongRequest(const FetchDuplicateDistrictsBySDTVLatLongRequest& from);
  FetchDuplicateDistrictsBySDTVLatLongRequest(FetchDuplicateDistrictsBySDTVLatLongRequest&& from) noexcept
    : FetchDuplicateDistrictsBySDTVLatLongRequest() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateDistrictsBySDTVLatLongRequest& operator=(const FetchDuplicateDistrictsBySDTVLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateDistrictsBySDTVLatLongRequest& operator=(FetchDuplicateDistrictsBySDTVLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateDistrictsBySDTVLatLongRequest& default_instance();

  static inline const FetchDuplicateDistrictsBySDTVLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateDistrictsBySDTVLatLongRequest*>(
               &_FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(FetchDuplicateDistrictsBySDTVLatLongRequest& a, FetchDuplicateDistrictsBySDTVLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateDistrictsBySDTVLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateDistrictsBySDTVLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateDistrictsBySDTVLatLongRequest* New() const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongRequest>(nullptr);
  }

  FetchDuplicateDistrictsBySDTVLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongRequest& from);
  void MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateDistrictsBySDTVLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest";
  }
  protected:
  explicit FetchDuplicateDistrictsBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryStoredFieldNumber = 3,
    kStateStoredFieldNumber = 4,
    kNameFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string countryStored = 3;
  void clear_countrystored();
  const std::string& countrystored() const;
  void set_countrystored(const std::string& value);
  void set_countrystored(std::string&& value);
  void set_countrystored(const char* value);
  void set_countrystored(const char* value, size_t size);
  std::string* mutable_countrystored();
  std::string* release_countrystored();
  void set_allocated_countrystored(std::string* countrystored);
  private:
  const std::string& _internal_countrystored() const;
  void _internal_set_countrystored(const std::string& value);
  std::string* _internal_mutable_countrystored();
  public:

  // string stateStored = 4;
  void clear_statestored();
  const std::string& statestored() const;
  void set_statestored(const std::string& value);
  void set_statestored(std::string&& value);
  void set_statestored(const char* value);
  void set_statestored(const char* value, size_t size);
  std::string* mutable_statestored();
  std::string* release_statestored();
  void set_allocated_statestored(std::string* statestored);
  private:
  const std::string& _internal_statestored() const;
  void _internal_set_statestored(const std::string& value);
  std::string* _internal_mutable_statestored();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrystored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statestored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateDistrictsBySDTVLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord) */ {
 public:
  inline FetchDuplicateDistrictsBySDTVLatLongResponseRecord() : FetchDuplicateDistrictsBySDTVLatLongResponseRecord(nullptr) {}
  virtual ~FetchDuplicateDistrictsBySDTVLatLongResponseRecord();

  FetchDuplicateDistrictsBySDTVLatLongResponseRecord(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from);
  FetchDuplicateDistrictsBySDTVLatLongResponseRecord(FetchDuplicateDistrictsBySDTVLatLongResponseRecord&& from) noexcept
    : FetchDuplicateDistrictsBySDTVLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateDistrictsBySDTVLatLongResponseRecord& operator=(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateDistrictsBySDTVLatLongResponseRecord& operator=(FetchDuplicateDistrictsBySDTVLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& default_instance();

  static inline const FetchDuplicateDistrictsBySDTVLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateDistrictsBySDTVLatLongResponseRecord*>(
               &_FetchDuplicateDistrictsBySDTVLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(FetchDuplicateDistrictsBySDTVLatLongResponseRecord& a, FetchDuplicateDistrictsBySDTVLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateDistrictsBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateDistrictsBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateDistrictsBySDTVLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongResponseRecord>(nullptr);
  }

  FetchDuplicateDistrictsBySDTVLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from);
  void MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateDistrictsBySDTVLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord";
  }
  protected:
  explicit FetchDuplicateDistrictsBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateDistrictsBySDTVLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse) */ {
 public:
  inline FetchDuplicateDistrictsBySDTVLatLongResponse() : FetchDuplicateDistrictsBySDTVLatLongResponse(nullptr) {}
  virtual ~FetchDuplicateDistrictsBySDTVLatLongResponse();

  FetchDuplicateDistrictsBySDTVLatLongResponse(const FetchDuplicateDistrictsBySDTVLatLongResponse& from);
  FetchDuplicateDistrictsBySDTVLatLongResponse(FetchDuplicateDistrictsBySDTVLatLongResponse&& from) noexcept
    : FetchDuplicateDistrictsBySDTVLatLongResponse() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateDistrictsBySDTVLatLongResponse& operator=(const FetchDuplicateDistrictsBySDTVLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateDistrictsBySDTVLatLongResponse& operator=(FetchDuplicateDistrictsBySDTVLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateDistrictsBySDTVLatLongResponse& default_instance();

  static inline const FetchDuplicateDistrictsBySDTVLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateDistrictsBySDTVLatLongResponse*>(
               &_FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(FetchDuplicateDistrictsBySDTVLatLongResponse& a, FetchDuplicateDistrictsBySDTVLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateDistrictsBySDTVLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateDistrictsBySDTVLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateDistrictsBySDTVLatLongResponse* New() const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongResponse>(nullptr);
  }

  FetchDuplicateDistrictsBySDTVLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateDistrictsBySDTVLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateDistrictsBySDTVLatLongResponse& from);
  void MergeFrom(const FetchDuplicateDistrictsBySDTVLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateDistrictsBySDTVLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse";
  }
  protected:
  explicit FetchDuplicateDistrictsBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateStatesBySDTVLatLongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest) */ {
 public:
  inline FetchDuplicateStatesBySDTVLatLongRequest() : FetchDuplicateStatesBySDTVLatLongRequest(nullptr) {}
  virtual ~FetchDuplicateStatesBySDTVLatLongRequest();

  FetchDuplicateStatesBySDTVLatLongRequest(const FetchDuplicateStatesBySDTVLatLongRequest& from);
  FetchDuplicateStatesBySDTVLatLongRequest(FetchDuplicateStatesBySDTVLatLongRequest&& from) noexcept
    : FetchDuplicateStatesBySDTVLatLongRequest() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateStatesBySDTVLatLongRequest& operator=(const FetchDuplicateStatesBySDTVLatLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateStatesBySDTVLatLongRequest& operator=(FetchDuplicateStatesBySDTVLatLongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateStatesBySDTVLatLongRequest& default_instance();

  static inline const FetchDuplicateStatesBySDTVLatLongRequest* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateStatesBySDTVLatLongRequest*>(
               &_FetchDuplicateStatesBySDTVLatLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(FetchDuplicateStatesBySDTVLatLongRequest& a, FetchDuplicateStatesBySDTVLatLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateStatesBySDTVLatLongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateStatesBySDTVLatLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateStatesBySDTVLatLongRequest* New() const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongRequest>(nullptr);
  }

  FetchDuplicateStatesBySDTVLatLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateStatesBySDTVLatLongRequest& from);
  void MergeFrom(const FetchDuplicateStatesBySDTVLatLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateStatesBySDTVLatLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest";
  }
  protected:
  explicit FetchDuplicateStatesBySDTVLatLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryStoredFieldNumber = 3,
    kNameFieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string countryStored = 3;
  void clear_countrystored();
  const std::string& countrystored() const;
  void set_countrystored(const std::string& value);
  void set_countrystored(std::string&& value);
  void set_countrystored(const char* value);
  void set_countrystored(const char* value, size_t size);
  std::string* mutable_countrystored();
  std::string* release_countrystored();
  void set_allocated_countrystored(std::string* countrystored);
  private:
  const std::string& _internal_countrystored() const;
  void _internal_set_countrystored(const std::string& value);
  std::string* _internal_mutable_countrystored();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrystored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateStatesBySDTVLatLongResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord) */ {
 public:
  inline FetchDuplicateStatesBySDTVLatLongResponseRecord() : FetchDuplicateStatesBySDTVLatLongResponseRecord(nullptr) {}
  virtual ~FetchDuplicateStatesBySDTVLatLongResponseRecord();

  FetchDuplicateStatesBySDTVLatLongResponseRecord(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from);
  FetchDuplicateStatesBySDTVLatLongResponseRecord(FetchDuplicateStatesBySDTVLatLongResponseRecord&& from) noexcept
    : FetchDuplicateStatesBySDTVLatLongResponseRecord() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateStatesBySDTVLatLongResponseRecord& operator=(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateStatesBySDTVLatLongResponseRecord& operator=(FetchDuplicateStatesBySDTVLatLongResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateStatesBySDTVLatLongResponseRecord& default_instance();

  static inline const FetchDuplicateStatesBySDTVLatLongResponseRecord* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateStatesBySDTVLatLongResponseRecord*>(
               &_FetchDuplicateStatesBySDTVLatLongResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(FetchDuplicateStatesBySDTVLatLongResponseRecord& a, FetchDuplicateStatesBySDTVLatLongResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateStatesBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateStatesBySDTVLatLongResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateStatesBySDTVLatLongResponseRecord* New() const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongResponseRecord>(nullptr);
  }

  FetchDuplicateStatesBySDTVLatLongResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from);
  void MergeFrom(const FetchDuplicateStatesBySDTVLatLongResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateStatesBySDTVLatLongResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord";
  }
  protected:
  explicit FetchDuplicateStatesBySDTVLatLongResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchDuplicateStatesBySDTVLatLongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse) */ {
 public:
  inline FetchDuplicateStatesBySDTVLatLongResponse() : FetchDuplicateStatesBySDTVLatLongResponse(nullptr) {}
  virtual ~FetchDuplicateStatesBySDTVLatLongResponse();

  FetchDuplicateStatesBySDTVLatLongResponse(const FetchDuplicateStatesBySDTVLatLongResponse& from);
  FetchDuplicateStatesBySDTVLatLongResponse(FetchDuplicateStatesBySDTVLatLongResponse&& from) noexcept
    : FetchDuplicateStatesBySDTVLatLongResponse() {
    *this = ::std::move(from);
  }

  inline FetchDuplicateStatesBySDTVLatLongResponse& operator=(const FetchDuplicateStatesBySDTVLatLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDuplicateStatesBySDTVLatLongResponse& operator=(FetchDuplicateStatesBySDTVLatLongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchDuplicateStatesBySDTVLatLongResponse& default_instance();

  static inline const FetchDuplicateStatesBySDTVLatLongResponse* internal_default_instance() {
    return reinterpret_cast<const FetchDuplicateStatesBySDTVLatLongResponse*>(
               &_FetchDuplicateStatesBySDTVLatLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(FetchDuplicateStatesBySDTVLatLongResponse& a, FetchDuplicateStatesBySDTVLatLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDuplicateStatesBySDTVLatLongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchDuplicateStatesBySDTVLatLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDuplicateStatesBySDTVLatLongResponse* New() const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongResponse>(nullptr);
  }

  FetchDuplicateStatesBySDTVLatLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDuplicateStatesBySDTVLatLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchDuplicateStatesBySDTVLatLongResponse& from);
  void MergeFrom(const FetchDuplicateStatesBySDTVLatLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchDuplicateStatesBySDTVLatLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse";
  }
  protected:
  explicit FetchDuplicateStatesBySDTVLatLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDuplicateGeographiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest) */ {
 public:
  inline GetDuplicateGeographiesRequest() : GetDuplicateGeographiesRequest(nullptr) {}
  virtual ~GetDuplicateGeographiesRequest();

  GetDuplicateGeographiesRequest(const GetDuplicateGeographiesRequest& from);
  GetDuplicateGeographiesRequest(GetDuplicateGeographiesRequest&& from) noexcept
    : GetDuplicateGeographiesRequest() {
    *this = ::std::move(from);
  }

  inline GetDuplicateGeographiesRequest& operator=(const GetDuplicateGeographiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDuplicateGeographiesRequest& operator=(GetDuplicateGeographiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDuplicateGeographiesRequest& default_instance();

  static inline const GetDuplicateGeographiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDuplicateGeographiesRequest*>(
               &_GetDuplicateGeographiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetDuplicateGeographiesRequest& a, GetDuplicateGeographiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDuplicateGeographiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDuplicateGeographiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDuplicateGeographiesRequest* New() const final {
    return CreateMaybeMessage<GetDuplicateGeographiesRequest>(nullptr);
  }

  GetDuplicateGeographiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDuplicateGeographiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDuplicateGeographiesRequest& from);
  void MergeFrom(const GetDuplicateGeographiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDuplicateGeographiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetDuplicateGeographiesRequest";
  }
  protected:
  explicit GetDuplicateGeographiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 6,
    kStateFieldNumber = 7,
    kDistrictFieldNumber = 8,
    kTehsilFieldNumber = 9,
    kVillageFieldNumber = 10,
    kRequestHeadersFieldNumber = 1,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kIsStaleAllowedFieldNumber = 2,
    kGeoTypeFieldNumber = 11,
  };
  // string country = 6;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string state = 7;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string district = 8;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string tehsil = 9;
  void clear_tehsil();
  const std::string& tehsil() const;
  void set_tehsil(const std::string& value);
  void set_tehsil(std::string&& value);
  void set_tehsil(const char* value);
  void set_tehsil(const char* value, size_t size);
  std::string* mutable_tehsil();
  std::string* release_tehsil();
  void set_allocated_tehsil(std::string* tehsil);
  private:
  const std::string& _internal_tehsil() const;
  void _internal_set_tehsil(const std::string& value);
  std::string* _internal_mutable_tehsil();
  public:

  // string village = 10;
  void clear_village();
  const std::string& village() const;
  void set_village(const std::string& value);
  void set_village(std::string&& value);
  void set_village(const char* value);
  void set_village(const char* value, size_t size);
  std::string* mutable_village();
  std::string* release_village();
  void set_allocated_village(std::string* village);
  private:
  const std::string& _internal_village() const;
  void _internal_set_village(const std::string& value);
  std::string* _internal_mutable_village();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // .farm.nurture.location.service.proto.GeographyType geoType = 11;
  void clear_geotype();
  ::farm::nurture::location::service::proto::GeographyType geotype() const;
  void set_geotype(::farm::nurture::location::service::proto::GeographyType value);
  private:
  ::farm::nurture::location::service::proto::GeographyType _internal_geotype() const;
  void _internal_set_geotype(::farm::nurture::location::service::proto::GeographyType value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsil_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr village_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double latitude_;
  double longitude_;
  bool isstaleallowed_;
  int geotype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDuplicateGeographiesResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord) */ {
 public:
  inline GetDuplicateGeographiesResponseRecord() : GetDuplicateGeographiesResponseRecord(nullptr) {}
  virtual ~GetDuplicateGeographiesResponseRecord();

  GetDuplicateGeographiesResponseRecord(const GetDuplicateGeographiesResponseRecord& from);
  GetDuplicateGeographiesResponseRecord(GetDuplicateGeographiesResponseRecord&& from) noexcept
    : GetDuplicateGeographiesResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetDuplicateGeographiesResponseRecord& operator=(const GetDuplicateGeographiesResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDuplicateGeographiesResponseRecord& operator=(GetDuplicateGeographiesResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDuplicateGeographiesResponseRecord& default_instance();

  static inline const GetDuplicateGeographiesResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetDuplicateGeographiesResponseRecord*>(
               &_GetDuplicateGeographiesResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GetDuplicateGeographiesResponseRecord& a, GetDuplicateGeographiesResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDuplicateGeographiesResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDuplicateGeographiesResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDuplicateGeographiesResponseRecord* New() const final {
    return CreateMaybeMessage<GetDuplicateGeographiesResponseRecord>(nullptr);
  }

  GetDuplicateGeographiesResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDuplicateGeographiesResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDuplicateGeographiesResponseRecord& from);
  void MergeFrom(const GetDuplicateGeographiesResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDuplicateGeographiesResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord";
  }
  protected:
  explicit GetDuplicateGeographiesResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetDuplicateGeographiesResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDuplicateGeographiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse) */ {
 public:
  inline GetDuplicateGeographiesResponse() : GetDuplicateGeographiesResponse(nullptr) {}
  virtual ~GetDuplicateGeographiesResponse();

  GetDuplicateGeographiesResponse(const GetDuplicateGeographiesResponse& from);
  GetDuplicateGeographiesResponse(GetDuplicateGeographiesResponse&& from) noexcept
    : GetDuplicateGeographiesResponse() {
    *this = ::std::move(from);
  }

  inline GetDuplicateGeographiesResponse& operator=(const GetDuplicateGeographiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDuplicateGeographiesResponse& operator=(GetDuplicateGeographiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDuplicateGeographiesResponse& default_instance();

  static inline const GetDuplicateGeographiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDuplicateGeographiesResponse*>(
               &_GetDuplicateGeographiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(GetDuplicateGeographiesResponse& a, GetDuplicateGeographiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDuplicateGeographiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDuplicateGeographiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDuplicateGeographiesResponse* New() const final {
    return CreateMaybeMessage<GetDuplicateGeographiesResponse>(nullptr);
  }

  GetDuplicateGeographiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDuplicateGeographiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDuplicateGeographiesResponse& from);
  void MergeFrom(const GetDuplicateGeographiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDuplicateGeographiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetDuplicateGeographiesResponse";
  }
  protected:
  explicit GetDuplicateGeographiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kIdFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated int64 id = 4;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_id();

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertVendorLocationDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertVendorLocationDataRequest) */ {
 public:
  inline InsertVendorLocationDataRequest() : InsertVendorLocationDataRequest(nullptr) {}
  virtual ~InsertVendorLocationDataRequest();

  InsertVendorLocationDataRequest(const InsertVendorLocationDataRequest& from);
  InsertVendorLocationDataRequest(InsertVendorLocationDataRequest&& from) noexcept
    : InsertVendorLocationDataRequest() {
    *this = ::std::move(from);
  }

  inline InsertVendorLocationDataRequest& operator=(const InsertVendorLocationDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertVendorLocationDataRequest& operator=(InsertVendorLocationDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertVendorLocationDataRequest& default_instance();

  static inline const InsertVendorLocationDataRequest* internal_default_instance() {
    return reinterpret_cast<const InsertVendorLocationDataRequest*>(
               &_InsertVendorLocationDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(InsertVendorLocationDataRequest& a, InsertVendorLocationDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertVendorLocationDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertVendorLocationDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertVendorLocationDataRequest* New() const final {
    return CreateMaybeMessage<InsertVendorLocationDataRequest>(nullptr);
  }

  InsertVendorLocationDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertVendorLocationDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertVendorLocationDataRequest& from);
  void MergeFrom(const InsertVendorLocationDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertVendorLocationDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertVendorLocationDataRequest";
  }
  protected:
  explicit InsertVendorLocationDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorIdFieldNumber = 2,
    kVendorTypeFieldNumber = 3,
    kGeohash7FieldNumber = 4,
    kGeohash6FieldNumber = 5,
    kVillageFieldNumber = 8,
    kTehsilFieldNumber = 9,
    kDistrictFieldNumber = 10,
    kStateFieldNumber = 11,
    kCountryFieldNumber = 12,
    kVendorResponseFieldNumber = 13,
    kRequestHeadersFieldNumber = 1,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
  };
  // string vendorId = 2;
  void clear_vendorid();
  const std::string& vendorid() const;
  void set_vendorid(const std::string& value);
  void set_vendorid(std::string&& value);
  void set_vendorid(const char* value);
  void set_vendorid(const char* value, size_t size);
  std::string* mutable_vendorid();
  std::string* release_vendorid();
  void set_allocated_vendorid(std::string* vendorid);
  private:
  const std::string& _internal_vendorid() const;
  void _internal_set_vendorid(const std::string& value);
  std::string* _internal_mutable_vendorid();
  public:

  // string vendorType = 3;
  void clear_vendortype();
  const std::string& vendortype() const;
  void set_vendortype(const std::string& value);
  void set_vendortype(std::string&& value);
  void set_vendortype(const char* value);
  void set_vendortype(const char* value, size_t size);
  std::string* mutable_vendortype();
  std::string* release_vendortype();
  void set_allocated_vendortype(std::string* vendortype);
  private:
  const std::string& _internal_vendortype() const;
  void _internal_set_vendortype(const std::string& value);
  std::string* _internal_mutable_vendortype();
  public:

  // string geohash7 = 4;
  void clear_geohash7();
  const std::string& geohash7() const;
  void set_geohash7(const std::string& value);
  void set_geohash7(std::string&& value);
  void set_geohash7(const char* value);
  void set_geohash7(const char* value, size_t size);
  std::string* mutable_geohash7();
  std::string* release_geohash7();
  void set_allocated_geohash7(std::string* geohash7);
  private:
  const std::string& _internal_geohash7() const;
  void _internal_set_geohash7(const std::string& value);
  std::string* _internal_mutable_geohash7();
  public:

  // string geohash6 = 5;
  void clear_geohash6();
  const std::string& geohash6() const;
  void set_geohash6(const std::string& value);
  void set_geohash6(std::string&& value);
  void set_geohash6(const char* value);
  void set_geohash6(const char* value, size_t size);
  std::string* mutable_geohash6();
  std::string* release_geohash6();
  void set_allocated_geohash6(std::string* geohash6);
  private:
  const std::string& _internal_geohash6() const;
  void _internal_set_geohash6(const std::string& value);
  std::string* _internal_mutable_geohash6();
  public:

  // string village = 8;
  void clear_village();
  const std::string& village() const;
  void set_village(const std::string& value);
  void set_village(std::string&& value);
  void set_village(const char* value);
  void set_village(const char* value, size_t size);
  std::string* mutable_village();
  std::string* release_village();
  void set_allocated_village(std::string* village);
  private:
  const std::string& _internal_village() const;
  void _internal_set_village(const std::string& value);
  std::string* _internal_mutable_village();
  public:

  // string tehsil = 9;
  void clear_tehsil();
  const std::string& tehsil() const;
  void set_tehsil(const std::string& value);
  void set_tehsil(std::string&& value);
  void set_tehsil(const char* value);
  void set_tehsil(const char* value, size_t size);
  std::string* mutable_tehsil();
  std::string* release_tehsil();
  void set_allocated_tehsil(std::string* tehsil);
  private:
  const std::string& _internal_tehsil() const;
  void _internal_set_tehsil(const std::string& value);
  std::string* _internal_mutable_tehsil();
  public:

  // string district = 10;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 11;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 12;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string vendorResponse = 13;
  void clear_vendorresponse();
  const std::string& vendorresponse() const;
  void set_vendorresponse(const std::string& value);
  void set_vendorresponse(std::string&& value);
  void set_vendorresponse(const char* value);
  void set_vendorresponse(const char* value, size_t size);
  std::string* mutable_vendorresponse();
  std::string* release_vendorresponse();
  void set_allocated_vendorresponse(std::string* vendorresponse);
  private:
  const std::string& _internal_vendorresponse() const;
  void _internal_set_vendorresponse(const std::string& value);
  std::string* _internal_mutable_vendorresponse();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertVendorLocationDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr village_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsil_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendorresponse_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertVendorLocationDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest) */ {
 public:
  inline BulkInsertVendorLocationDataRequest() : BulkInsertVendorLocationDataRequest(nullptr) {}
  virtual ~BulkInsertVendorLocationDataRequest();

  BulkInsertVendorLocationDataRequest(const BulkInsertVendorLocationDataRequest& from);
  BulkInsertVendorLocationDataRequest(BulkInsertVendorLocationDataRequest&& from) noexcept
    : BulkInsertVendorLocationDataRequest() {
    *this = ::std::move(from);
  }

  inline BulkInsertVendorLocationDataRequest& operator=(const BulkInsertVendorLocationDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertVendorLocationDataRequest& operator=(BulkInsertVendorLocationDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertVendorLocationDataRequest& default_instance();

  static inline const BulkInsertVendorLocationDataRequest* internal_default_instance() {
    return reinterpret_cast<const BulkInsertVendorLocationDataRequest*>(
               &_BulkInsertVendorLocationDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(BulkInsertVendorLocationDataRequest& a, BulkInsertVendorLocationDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertVendorLocationDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertVendorLocationDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertVendorLocationDataRequest* New() const final {
    return CreateMaybeMessage<BulkInsertVendorLocationDataRequest>(nullptr);
  }

  BulkInsertVendorLocationDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertVendorLocationDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertVendorLocationDataRequest& from);
  void MergeFrom(const BulkInsertVendorLocationDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertVendorLocationDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest";
  }
  protected:
  explicit BulkInsertVendorLocationDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertVendorLocationDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.InsertVendorLocationDataResponse) */ {
 public:
  inline InsertVendorLocationDataResponse() : InsertVendorLocationDataResponse(nullptr) {}
  virtual ~InsertVendorLocationDataResponse();

  InsertVendorLocationDataResponse(const InsertVendorLocationDataResponse& from);
  InsertVendorLocationDataResponse(InsertVendorLocationDataResponse&& from) noexcept
    : InsertVendorLocationDataResponse() {
    *this = ::std::move(from);
  }

  inline InsertVendorLocationDataResponse& operator=(const InsertVendorLocationDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertVendorLocationDataResponse& operator=(InsertVendorLocationDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertVendorLocationDataResponse& default_instance();

  static inline const InsertVendorLocationDataResponse* internal_default_instance() {
    return reinterpret_cast<const InsertVendorLocationDataResponse*>(
               &_InsertVendorLocationDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(InsertVendorLocationDataResponse& a, InsertVendorLocationDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertVendorLocationDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertVendorLocationDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertVendorLocationDataResponse* New() const final {
    return CreateMaybeMessage<InsertVendorLocationDataResponse>(nullptr);
  }

  InsertVendorLocationDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertVendorLocationDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertVendorLocationDataResponse& from);
  void MergeFrom(const InsertVendorLocationDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertVendorLocationDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.InsertVendorLocationDataResponse";
  }
  protected:
  explicit InsertVendorLocationDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.InsertVendorLocationDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkInsertVendorLocationDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse) */ {
 public:
  inline BulkInsertVendorLocationDataResponse() : BulkInsertVendorLocationDataResponse(nullptr) {}
  virtual ~BulkInsertVendorLocationDataResponse();

  BulkInsertVendorLocationDataResponse(const BulkInsertVendorLocationDataResponse& from);
  BulkInsertVendorLocationDataResponse(BulkInsertVendorLocationDataResponse&& from) noexcept
    : BulkInsertVendorLocationDataResponse() {
    *this = ::std::move(from);
  }

  inline BulkInsertVendorLocationDataResponse& operator=(const BulkInsertVendorLocationDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkInsertVendorLocationDataResponse& operator=(BulkInsertVendorLocationDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkInsertVendorLocationDataResponse& default_instance();

  static inline const BulkInsertVendorLocationDataResponse* internal_default_instance() {
    return reinterpret_cast<const BulkInsertVendorLocationDataResponse*>(
               &_BulkInsertVendorLocationDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(BulkInsertVendorLocationDataResponse& a, BulkInsertVendorLocationDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkInsertVendorLocationDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkInsertVendorLocationDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkInsertVendorLocationDataResponse* New() const final {
    return CreateMaybeMessage<BulkInsertVendorLocationDataResponse>(nullptr);
  }

  BulkInsertVendorLocationDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkInsertVendorLocationDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkInsertVendorLocationDataResponse& from);
  void MergeFrom(const BulkInsertVendorLocationDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkInsertVendorLocationDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse";
  }
  protected:
  explicit BulkInsertVendorLocationDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.InsertVendorLocationDataResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchVendorLocationsByGeohashRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest) */ {
 public:
  inline SearchVendorLocationsByGeohashRequest() : SearchVendorLocationsByGeohashRequest(nullptr) {}
  virtual ~SearchVendorLocationsByGeohashRequest();

  SearchVendorLocationsByGeohashRequest(const SearchVendorLocationsByGeohashRequest& from);
  SearchVendorLocationsByGeohashRequest(SearchVendorLocationsByGeohashRequest&& from) noexcept
    : SearchVendorLocationsByGeohashRequest() {
    *this = ::std::move(from);
  }

  inline SearchVendorLocationsByGeohashRequest& operator=(const SearchVendorLocationsByGeohashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchVendorLocationsByGeohashRequest& operator=(SearchVendorLocationsByGeohashRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchVendorLocationsByGeohashRequest& default_instance();

  static inline const SearchVendorLocationsByGeohashRequest* internal_default_instance() {
    return reinterpret_cast<const SearchVendorLocationsByGeohashRequest*>(
               &_SearchVendorLocationsByGeohashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SearchVendorLocationsByGeohashRequest& a, SearchVendorLocationsByGeohashRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchVendorLocationsByGeohashRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchVendorLocationsByGeohashRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchVendorLocationsByGeohashRequest* New() const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashRequest>(nullptr);
  }

  SearchVendorLocationsByGeohashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchVendorLocationsByGeohashRequest& from);
  void MergeFrom(const SearchVendorLocationsByGeohashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchVendorLocationsByGeohashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest";
  }
  protected:
  explicit SearchVendorLocationsByGeohashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeohash7FieldNumber = 3,
    kGeohash6FieldNumber = 4,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string geohash7 = 3;
  void clear_geohash7();
  const std::string& geohash7() const;
  void set_geohash7(const std::string& value);
  void set_geohash7(std::string&& value);
  void set_geohash7(const char* value);
  void set_geohash7(const char* value, size_t size);
  std::string* mutable_geohash7();
  std::string* release_geohash7();
  void set_allocated_geohash7(std::string* geohash7);
  private:
  const std::string& _internal_geohash7() const;
  void _internal_set_geohash7(const std::string& value);
  std::string* _internal_mutable_geohash7();
  public:

  // string geohash6 = 4;
  void clear_geohash6();
  const std::string& geohash6() const;
  void set_geohash6(const std::string& value);
  void set_geohash6(std::string&& value);
  void set_geohash6(const char* value);
  void set_geohash6(const char* value, size_t size);
  std::string* mutable_geohash6();
  std::string* release_geohash6();
  void set_allocated_geohash6(std::string* geohash6);
  private:
  const std::string& _internal_geohash6() const;
  void _internal_set_geohash6(const std::string& value);
  std::string* _internal_mutable_geohash6();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash6_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchVendorLocationsByGeohashResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord) */ {
 public:
  inline SearchVendorLocationsByGeohashResponseRecord() : SearchVendorLocationsByGeohashResponseRecord(nullptr) {}
  virtual ~SearchVendorLocationsByGeohashResponseRecord();

  SearchVendorLocationsByGeohashResponseRecord(const SearchVendorLocationsByGeohashResponseRecord& from);
  SearchVendorLocationsByGeohashResponseRecord(SearchVendorLocationsByGeohashResponseRecord&& from) noexcept
    : SearchVendorLocationsByGeohashResponseRecord() {
    *this = ::std::move(from);
  }

  inline SearchVendorLocationsByGeohashResponseRecord& operator=(const SearchVendorLocationsByGeohashResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchVendorLocationsByGeohashResponseRecord& operator=(SearchVendorLocationsByGeohashResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchVendorLocationsByGeohashResponseRecord& default_instance();

  static inline const SearchVendorLocationsByGeohashResponseRecord* internal_default_instance() {
    return reinterpret_cast<const SearchVendorLocationsByGeohashResponseRecord*>(
               &_SearchVendorLocationsByGeohashResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SearchVendorLocationsByGeohashResponseRecord& a, SearchVendorLocationsByGeohashResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchVendorLocationsByGeohashResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchVendorLocationsByGeohashResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchVendorLocationsByGeohashResponseRecord* New() const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashResponseRecord>(nullptr);
  }

  SearchVendorLocationsByGeohashResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchVendorLocationsByGeohashResponseRecord& from);
  void MergeFrom(const SearchVendorLocationsByGeohashResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchVendorLocationsByGeohashResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord";
  }
  protected:
  explicit SearchVendorLocationsByGeohashResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVillageFieldNumber = 3,
    kTehsilFieldNumber = 4,
    kDistrictFieldNumber = 5,
    kStateFieldNumber = 6,
    kCountryFieldNumber = 7,
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // string village = 3;
  void clear_village();
  const std::string& village() const;
  void set_village(const std::string& value);
  void set_village(std::string&& value);
  void set_village(const char* value);
  void set_village(const char* value, size_t size);
  std::string* mutable_village();
  std::string* release_village();
  void set_allocated_village(std::string* village);
  private:
  const std::string& _internal_village() const;
  void _internal_set_village(const std::string& value);
  std::string* _internal_mutable_village();
  public:

  // string tehsil = 4;
  void clear_tehsil();
  const std::string& tehsil() const;
  void set_tehsil(const std::string& value);
  void set_tehsil(std::string&& value);
  void set_tehsil(const char* value);
  void set_tehsil(const char* value, size_t size);
  std::string* mutable_tehsil();
  std::string* release_tehsil();
  void set_allocated_tehsil(std::string* tehsil);
  private:
  const std::string& _internal_tehsil() const;
  void _internal_set_tehsil(const std::string& value);
  std::string* _internal_mutable_tehsil();
  public:

  // string district = 5;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 6;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 7;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr village_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsil_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchVendorLocationsByGeohashResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse) */ {
 public:
  inline SearchVendorLocationsByGeohashResponse() : SearchVendorLocationsByGeohashResponse(nullptr) {}
  virtual ~SearchVendorLocationsByGeohashResponse();

  SearchVendorLocationsByGeohashResponse(const SearchVendorLocationsByGeohashResponse& from);
  SearchVendorLocationsByGeohashResponse(SearchVendorLocationsByGeohashResponse&& from) noexcept
    : SearchVendorLocationsByGeohashResponse() {
    *this = ::std::move(from);
  }

  inline SearchVendorLocationsByGeohashResponse& operator=(const SearchVendorLocationsByGeohashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchVendorLocationsByGeohashResponse& operator=(SearchVendorLocationsByGeohashResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchVendorLocationsByGeohashResponse& default_instance();

  static inline const SearchVendorLocationsByGeohashResponse* internal_default_instance() {
    return reinterpret_cast<const SearchVendorLocationsByGeohashResponse*>(
               &_SearchVendorLocationsByGeohashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SearchVendorLocationsByGeohashResponse& a, SearchVendorLocationsByGeohashResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchVendorLocationsByGeohashResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchVendorLocationsByGeohashResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchVendorLocationsByGeohashResponse* New() const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashResponse>(nullptr);
  }

  SearchVendorLocationsByGeohashResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchVendorLocationsByGeohashResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchVendorLocationsByGeohashResponse& from);
  void MergeFrom(const SearchVendorLocationsByGeohashResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchVendorLocationsByGeohashResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse";
  }
  protected:
  explicit SearchVendorLocationsByGeohashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchLocationsByGeohashRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest) */ {
 public:
  inline SearchLocationsByGeohashRequest() : SearchLocationsByGeohashRequest(nullptr) {}
  virtual ~SearchLocationsByGeohashRequest();

  SearchLocationsByGeohashRequest(const SearchLocationsByGeohashRequest& from);
  SearchLocationsByGeohashRequest(SearchLocationsByGeohashRequest&& from) noexcept
    : SearchLocationsByGeohashRequest() {
    *this = ::std::move(from);
  }

  inline SearchLocationsByGeohashRequest& operator=(const SearchLocationsByGeohashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchLocationsByGeohashRequest& operator=(SearchLocationsByGeohashRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchLocationsByGeohashRequest& default_instance();

  static inline const SearchLocationsByGeohashRequest* internal_default_instance() {
    return reinterpret_cast<const SearchLocationsByGeohashRequest*>(
               &_SearchLocationsByGeohashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SearchLocationsByGeohashRequest& a, SearchLocationsByGeohashRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchLocationsByGeohashRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchLocationsByGeohashRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchLocationsByGeohashRequest* New() const final {
    return CreateMaybeMessage<SearchLocationsByGeohashRequest>(nullptr);
  }

  SearchLocationsByGeohashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchLocationsByGeohashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchLocationsByGeohashRequest& from);
  void MergeFrom(const SearchLocationsByGeohashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchLocationsByGeohashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchLocationsByGeohashRequest";
  }
  protected:
  explicit SearchLocationsByGeohashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeohash8FieldNumber = 3,
    kRequestHeadersFieldNumber = 1,
    kIsStaleAllowedFieldNumber = 2,
  };
  // string geohash8 = 3;
  void clear_geohash8();
  const std::string& geohash8() const;
  void set_geohash8(const std::string& value);
  void set_geohash8(std::string&& value);
  void set_geohash8(const char* value);
  void set_geohash8(const char* value, size_t size);
  std::string* mutable_geohash8();
  std::string* release_geohash8();
  void set_allocated_geohash8(std::string* geohash8);
  private:
  const std::string& _internal_geohash8() const;
  void _internal_set_geohash8(const std::string& value);
  std::string* _internal_mutable_geohash8();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash8_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchLocationsByGeohashResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord) */ {
 public:
  inline SearchLocationsByGeohashResponseRecord() : SearchLocationsByGeohashResponseRecord(nullptr) {}
  virtual ~SearchLocationsByGeohashResponseRecord();

  SearchLocationsByGeohashResponseRecord(const SearchLocationsByGeohashResponseRecord& from);
  SearchLocationsByGeohashResponseRecord(SearchLocationsByGeohashResponseRecord&& from) noexcept
    : SearchLocationsByGeohashResponseRecord() {
    *this = ::std::move(from);
  }

  inline SearchLocationsByGeohashResponseRecord& operator=(const SearchLocationsByGeohashResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchLocationsByGeohashResponseRecord& operator=(SearchLocationsByGeohashResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchLocationsByGeohashResponseRecord& default_instance();

  static inline const SearchLocationsByGeohashResponseRecord* internal_default_instance() {
    return reinterpret_cast<const SearchLocationsByGeohashResponseRecord*>(
               &_SearchLocationsByGeohashResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SearchLocationsByGeohashResponseRecord& a, SearchLocationsByGeohashResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchLocationsByGeohashResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchLocationsByGeohashResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchLocationsByGeohashResponseRecord* New() const final {
    return CreateMaybeMessage<SearchLocationsByGeohashResponseRecord>(nullptr);
  }

  SearchLocationsByGeohashResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchLocationsByGeohashResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchLocationsByGeohashResponseRecord& from);
  void MergeFrom(const SearchLocationsByGeohashResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchLocationsByGeohashResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord";
  }
  protected:
  explicit SearchLocationsByGeohashResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVillageFieldNumber = 3,
    kTehsilFieldNumber = 4,
    kDistrictFieldNumber = 5,
    kStateFieldNumber = 6,
    kCountryFieldNumber = 7,
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // string village = 3;
  void clear_village();
  const std::string& village() const;
  void set_village(const std::string& value);
  void set_village(std::string&& value);
  void set_village(const char* value);
  void set_village(const char* value, size_t size);
  std::string* mutable_village();
  std::string* release_village();
  void set_allocated_village(std::string* village);
  private:
  const std::string& _internal_village() const;
  void _internal_set_village(const std::string& value);
  std::string* _internal_mutable_village();
  public:

  // string tehsil = 4;
  void clear_tehsil();
  const std::string& tehsil() const;
  void set_tehsil(const std::string& value);
  void set_tehsil(std::string&& value);
  void set_tehsil(const char* value);
  void set_tehsil(const char* value, size_t size);
  std::string* mutable_tehsil();
  std::string* release_tehsil();
  void set_allocated_tehsil(std::string* tehsil);
  private:
  const std::string& _internal_tehsil() const;
  void _internal_set_tehsil(const std::string& value);
  std::string* _internal_mutable_tehsil();
  public:

  // string district = 5;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 6;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 7;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr village_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsil_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchLocationsByGeohashResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse) */ {
 public:
  inline SearchLocationsByGeohashResponse() : SearchLocationsByGeohashResponse(nullptr) {}
  virtual ~SearchLocationsByGeohashResponse();

  SearchLocationsByGeohashResponse(const SearchLocationsByGeohashResponse& from);
  SearchLocationsByGeohashResponse(SearchLocationsByGeohashResponse&& from) noexcept
    : SearchLocationsByGeohashResponse() {
    *this = ::std::move(from);
  }

  inline SearchLocationsByGeohashResponse& operator=(const SearchLocationsByGeohashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchLocationsByGeohashResponse& operator=(SearchLocationsByGeohashResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchLocationsByGeohashResponse& default_instance();

  static inline const SearchLocationsByGeohashResponse* internal_default_instance() {
    return reinterpret_cast<const SearchLocationsByGeohashResponse*>(
               &_SearchLocationsByGeohashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SearchLocationsByGeohashResponse& a, SearchLocationsByGeohashResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchLocationsByGeohashResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchLocationsByGeohashResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchLocationsByGeohashResponse* New() const final {
    return CreateMaybeMessage<SearchLocationsByGeohashResponse>(nullptr);
  }

  SearchLocationsByGeohashResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchLocationsByGeohashResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchLocationsByGeohashResponse& from);
  void MergeFrom(const SearchLocationsByGeohashResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchLocationsByGeohashResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.SearchLocationsByGeohashResponse";
  }
  protected:
  explicit SearchLocationsByGeohashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kRecordsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // repeated .farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >*
      mutable_records();
  private:
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord& _internal_records(int index) const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* _internal_add_records();
  public:
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord& records(int index) const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >&
      records() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord > records_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationDataByLatLngRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest) */ {
 public:
  inline GetLocationDataByLatLngRequest() : GetLocationDataByLatLngRequest(nullptr) {}
  virtual ~GetLocationDataByLatLngRequest();

  GetLocationDataByLatLngRequest(const GetLocationDataByLatLngRequest& from);
  GetLocationDataByLatLngRequest(GetLocationDataByLatLngRequest&& from) noexcept
    : GetLocationDataByLatLngRequest() {
    *this = ::std::move(from);
  }

  inline GetLocationDataByLatLngRequest& operator=(const GetLocationDataByLatLngRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationDataByLatLngRequest& operator=(GetLocationDataByLatLngRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationDataByLatLngRequest& default_instance();

  static inline const GetLocationDataByLatLngRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationDataByLatLngRequest*>(
               &_GetLocationDataByLatLngRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(GetLocationDataByLatLngRequest& a, GetLocationDataByLatLngRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationDataByLatLngRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationDataByLatLngRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationDataByLatLngRequest* New() const final {
    return CreateMaybeMessage<GetLocationDataByLatLngRequest>(nullptr);
  }

  GetLocationDataByLatLngRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationDataByLatLngRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationDataByLatLngRequest& from);
  void MergeFrom(const GetLocationDataByLatLngRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationDataByLatLngRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationDataByLatLngRequest";
  }
  protected:
  explicit GetLocationDataByLatLngRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 1,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kIsStaleAllowedFieldNumber = 2,
  };
  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // bool isStaleAllowed = 2;
  void clear_isstaleallowed();
  bool isstaleallowed() const;
  void set_isstaleallowed(bool value);
  private:
  bool _internal_isstaleallowed() const;
  void _internal_set_isstaleallowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  double latitude_;
  double longitude_;
  bool isstaleallowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationDataByLatLngResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord) */ {
 public:
  inline GetLocationDataByLatLngResponseRecord() : GetLocationDataByLatLngResponseRecord(nullptr) {}
  virtual ~GetLocationDataByLatLngResponseRecord();

  GetLocationDataByLatLngResponseRecord(const GetLocationDataByLatLngResponseRecord& from);
  GetLocationDataByLatLngResponseRecord(GetLocationDataByLatLngResponseRecord&& from) noexcept
    : GetLocationDataByLatLngResponseRecord() {
    *this = ::std::move(from);
  }

  inline GetLocationDataByLatLngResponseRecord& operator=(const GetLocationDataByLatLngResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationDataByLatLngResponseRecord& operator=(GetLocationDataByLatLngResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationDataByLatLngResponseRecord& default_instance();

  static inline const GetLocationDataByLatLngResponseRecord* internal_default_instance() {
    return reinterpret_cast<const GetLocationDataByLatLngResponseRecord*>(
               &_GetLocationDataByLatLngResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(GetLocationDataByLatLngResponseRecord& a, GetLocationDataByLatLngResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationDataByLatLngResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationDataByLatLngResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationDataByLatLngResponseRecord* New() const final {
    return CreateMaybeMessage<GetLocationDataByLatLngResponseRecord>(nullptr);
  }

  GetLocationDataByLatLngResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationDataByLatLngResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationDataByLatLngResponseRecord& from);
  void MergeFrom(const GetLocationDataByLatLngResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationDataByLatLngResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord";
  }
  protected:
  explicit GetLocationDataByLatLngResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationDataByLatLngResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocationDataByLatLngResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse) */ {
 public:
  inline GetLocationDataByLatLngResponse() : GetLocationDataByLatLngResponse(nullptr) {}
  virtual ~GetLocationDataByLatLngResponse();

  GetLocationDataByLatLngResponse(const GetLocationDataByLatLngResponse& from);
  GetLocationDataByLatLngResponse(GetLocationDataByLatLngResponse&& from) noexcept
    : GetLocationDataByLatLngResponse() {
    *this = ::std::move(from);
  }

  inline GetLocationDataByLatLngResponse& operator=(const GetLocationDataByLatLngResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocationDataByLatLngResponse& operator=(GetLocationDataByLatLngResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocationDataByLatLngResponse& default_instance();

  static inline const GetLocationDataByLatLngResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocationDataByLatLngResponse*>(
               &_GetLocationDataByLatLngResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GetLocationDataByLatLngResponse& a, GetLocationDataByLatLngResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocationDataByLatLngResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocationDataByLatLngResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocationDataByLatLngResponse* New() const final {
    return CreateMaybeMessage<GetLocationDataByLatLngResponse>(nullptr);
  }

  GetLocationDataByLatLngResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocationDataByLatLngResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocationDataByLatLngResponse& from);
  void MergeFrom(const GetLocationDataByLatLngResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocationDataByLatLngResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.GetLocationDataByLatLngResponse";
  }
  protected:
  explicit GetLocationDataByLatLngResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kVillageFieldNumber = 6,
    kTehsilFieldNumber = 7,
    kDistrictFieldNumber = 8,
    kStateFieldNumber = 9,
    kCountryFieldNumber = 10,
    kStatusFieldNumber = 1,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string village = 6;
  void clear_village();
  const std::string& village() const;
  void set_village(const std::string& value);
  void set_village(std::string&& value);
  void set_village(const char* value);
  void set_village(const char* value, size_t size);
  std::string* mutable_village();
  std::string* release_village();
  void set_allocated_village(std::string* village);
  private:
  const std::string& _internal_village() const;
  void _internal_set_village(const std::string& value);
  std::string* _internal_mutable_village();
  public:

  // string tehsil = 7;
  void clear_tehsil();
  const std::string& tehsil() const;
  void set_tehsil(const std::string& value);
  void set_tehsil(std::string&& value);
  void set_tehsil(const char* value);
  void set_tehsil(const char* value, size_t size);
  std::string* mutable_tehsil();
  std::string* release_tehsil();
  void set_allocated_tehsil(std::string* tehsil);
  private:
  const std::string& _internal_tehsil() const;
  void _internal_set_tehsil(const std::string& value);
  std::string* _internal_mutable_tehsil();
  public:

  // string district = 8;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // string state = 9;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 10;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 5;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr village_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tehsil_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddVendorApiLedgerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.AddVendorApiLedgerRequest) */ {
 public:
  inline AddVendorApiLedgerRequest() : AddVendorApiLedgerRequest(nullptr) {}
  virtual ~AddVendorApiLedgerRequest();

  AddVendorApiLedgerRequest(const AddVendorApiLedgerRequest& from);
  AddVendorApiLedgerRequest(AddVendorApiLedgerRequest&& from) noexcept
    : AddVendorApiLedgerRequest() {
    *this = ::std::move(from);
  }

  inline AddVendorApiLedgerRequest& operator=(const AddVendorApiLedgerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddVendorApiLedgerRequest& operator=(AddVendorApiLedgerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddVendorApiLedgerRequest& default_instance();

  static inline const AddVendorApiLedgerRequest* internal_default_instance() {
    return reinterpret_cast<const AddVendorApiLedgerRequest*>(
               &_AddVendorApiLedgerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(AddVendorApiLedgerRequest& a, AddVendorApiLedgerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddVendorApiLedgerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddVendorApiLedgerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddVendorApiLedgerRequest* New() const final {
    return CreateMaybeMessage<AddVendorApiLedgerRequest>(nullptr);
  }

  AddVendorApiLedgerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddVendorApiLedgerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddVendorApiLedgerRequest& from);
  void MergeFrom(const AddVendorApiLedgerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddVendorApiLedgerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.AddVendorApiLedgerRequest";
  }
  protected:
  explicit AddVendorApiLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorFieldNumber = 2,
    kApiNameFieldNumber = 3,
    kResponseStatusFieldNumber = 4,
    kParamsFieldNumber = 5,
    kRequestHeadersFieldNumber = 1,
  };
  // string vendor = 2;
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string apiName = 3;
  void clear_apiname();
  const std::string& apiname() const;
  void set_apiname(const std::string& value);
  void set_apiname(std::string&& value);
  void set_apiname(const char* value);
  void set_apiname(const char* value, size_t size);
  std::string* mutable_apiname();
  std::string* release_apiname();
  void set_allocated_apiname(std::string* apiname);
  private:
  const std::string& _internal_apiname() const;
  void _internal_set_apiname(const std::string& value);
  std::string* _internal_mutable_apiname();
  public:

  // string responseStatus = 4;
  void clear_responsestatus();
  const std::string& responsestatus() const;
  void set_responsestatus(const std::string& value);
  void set_responsestatus(std::string&& value);
  void set_responsestatus(const char* value);
  void set_responsestatus(const char* value, size_t size);
  std::string* mutable_responsestatus();
  std::string* release_responsestatus();
  void set_allocated_responsestatus(std::string* responsestatus);
  private:
  const std::string& _internal_responsestatus() const;
  void _internal_set_responsestatus(const std::string& value);
  std::string* _internal_mutable_responsestatus();
  public:

  // string params = 5;
  void clear_params();
  const std::string& params() const;
  void set_params(const std::string& value);
  void set_params(std::string&& value);
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  std::string* mutable_params();
  std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.AddVendorApiLedgerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsestatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddVendorApiLedgerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest) */ {
 public:
  inline BulkAddVendorApiLedgerRequest() : BulkAddVendorApiLedgerRequest(nullptr) {}
  virtual ~BulkAddVendorApiLedgerRequest();

  BulkAddVendorApiLedgerRequest(const BulkAddVendorApiLedgerRequest& from);
  BulkAddVendorApiLedgerRequest(BulkAddVendorApiLedgerRequest&& from) noexcept
    : BulkAddVendorApiLedgerRequest() {
    *this = ::std::move(from);
  }

  inline BulkAddVendorApiLedgerRequest& operator=(const BulkAddVendorApiLedgerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddVendorApiLedgerRequest& operator=(BulkAddVendorApiLedgerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddVendorApiLedgerRequest& default_instance();

  static inline const BulkAddVendorApiLedgerRequest* internal_default_instance() {
    return reinterpret_cast<const BulkAddVendorApiLedgerRequest*>(
               &_BulkAddVendorApiLedgerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(BulkAddVendorApiLedgerRequest& a, BulkAddVendorApiLedgerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddVendorApiLedgerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddVendorApiLedgerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddVendorApiLedgerRequest* New() const final {
    return CreateMaybeMessage<BulkAddVendorApiLedgerRequest>(nullptr);
  }

  BulkAddVendorApiLedgerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddVendorApiLedgerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddVendorApiLedgerRequest& from);
  void MergeFrom(const BulkAddVendorApiLedgerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddVendorApiLedgerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest";
  }
  protected:
  explicit BulkAddVendorApiLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kRequestHeadersFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >*
      mutable_requests();
  private:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& _internal_requests(int index) const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* _internal_add_requests();
  public:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& requests(int index) const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >&
      requests() const;

  // .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::farm::nurture::core::contracts::common::RequestHeaders& requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* release_requestheaders();
  ::farm::nurture::core::contracts::common::RequestHeaders* mutable_requestheaders();
  void set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  private:
  const ::farm::nurture::core::contracts::common::RequestHeaders& _internal_requestheaders() const;
  ::farm::nurture::core::contracts::common::RequestHeaders* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders);
  ::farm::nurture::core::contracts::common::RequestHeaders* unsafe_arena_release_requestheaders();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest > requests_;
  ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddVendorApiLedgerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.AddVendorApiLedgerResponse) */ {
 public:
  inline AddVendorApiLedgerResponse() : AddVendorApiLedgerResponse(nullptr) {}
  virtual ~AddVendorApiLedgerResponse();

  AddVendorApiLedgerResponse(const AddVendorApiLedgerResponse& from);
  AddVendorApiLedgerResponse(AddVendorApiLedgerResponse&& from) noexcept
    : AddVendorApiLedgerResponse() {
    *this = ::std::move(from);
  }

  inline AddVendorApiLedgerResponse& operator=(const AddVendorApiLedgerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddVendorApiLedgerResponse& operator=(AddVendorApiLedgerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddVendorApiLedgerResponse& default_instance();

  static inline const AddVendorApiLedgerResponse* internal_default_instance() {
    return reinterpret_cast<const AddVendorApiLedgerResponse*>(
               &_AddVendorApiLedgerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(AddVendorApiLedgerResponse& a, AddVendorApiLedgerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddVendorApiLedgerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddVendorApiLedgerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddVendorApiLedgerResponse* New() const final {
    return CreateMaybeMessage<AddVendorApiLedgerResponse>(nullptr);
  }

  AddVendorApiLedgerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddVendorApiLedgerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddVendorApiLedgerResponse& from);
  void MergeFrom(const AddVendorApiLedgerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddVendorApiLedgerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.AddVendorApiLedgerResponse";
  }
  protected:
  explicit AddVendorApiLedgerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 4,
    kRecordIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  ::farm::nurture::core::contracts::common::Attribs* mutable_attribs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
      mutable_attribs();
  private:
  const ::farm::nurture::core::contracts::common::Attribs& _internal_attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* _internal_add_attribs();
  public:
  const ::farm::nurture::core::contracts::common::Attribs& attribs(int index) const;
  ::farm::nurture::core::contracts::common::Attribs* add_attribs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
      attribs() const;

  // string recordId = 3;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.AddVendorApiLedgerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs > attribs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkAddVendorApiLedgerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse) */ {
 public:
  inline BulkAddVendorApiLedgerResponse() : BulkAddVendorApiLedgerResponse(nullptr) {}
  virtual ~BulkAddVendorApiLedgerResponse();

  BulkAddVendorApiLedgerResponse(const BulkAddVendorApiLedgerResponse& from);
  BulkAddVendorApiLedgerResponse(BulkAddVendorApiLedgerResponse&& from) noexcept
    : BulkAddVendorApiLedgerResponse() {
    *this = ::std::move(from);
  }

  inline BulkAddVendorApiLedgerResponse& operator=(const BulkAddVendorApiLedgerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkAddVendorApiLedgerResponse& operator=(BulkAddVendorApiLedgerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkAddVendorApiLedgerResponse& default_instance();

  static inline const BulkAddVendorApiLedgerResponse* internal_default_instance() {
    return reinterpret_cast<const BulkAddVendorApiLedgerResponse*>(
               &_BulkAddVendorApiLedgerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(BulkAddVendorApiLedgerResponse& a, BulkAddVendorApiLedgerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkAddVendorApiLedgerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkAddVendorApiLedgerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkAddVendorApiLedgerResponse* New() const final {
    return CreateMaybeMessage<BulkAddVendorApiLedgerResponse>(nullptr);
  }

  BulkAddVendorApiLedgerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkAddVendorApiLedgerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkAddVendorApiLedgerResponse& from);
  void MergeFrom(const BulkAddVendorApiLedgerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkAddVendorApiLedgerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse";
  }
  protected:
  explicit BulkAddVendorApiLedgerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .farm.nurture.location.service.proto.AddVendorApiLedgerResponse responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >*
      mutable_responses();
  private:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& _internal_responses(int index) const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* _internal_add_responses();
  public:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& responses(int index) const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >&
      responses() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse > responses_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiRequests PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.MultiRequests) */ {
 public:
  inline MultiRequests() : MultiRequests(nullptr) {}
  virtual ~MultiRequests();

  MultiRequests(const MultiRequests& from);
  MultiRequests(MultiRequests&& from) noexcept
    : MultiRequests() {
    *this = ::std::move(from);
  }

  inline MultiRequests& operator=(const MultiRequests& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRequests& operator=(MultiRequests&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRequests& default_instance();

  static inline const MultiRequests* internal_default_instance() {
    return reinterpret_cast<const MultiRequests*>(
               &_MultiRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(MultiRequests& a, MultiRequests& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRequests* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRequests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRequests* New() const final {
    return CreateMaybeMessage<MultiRequests>(nullptr);
  }

  MultiRequests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRequests>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRequests& from);
  void MergeFrom(const MultiRequests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRequests* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.MultiRequests";
  }
  protected:
  explicit MultiRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kOnTxnFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.Request request = 2;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::farm::nurture::location::service::proto::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Request >*
      mutable_request();
  private:
  const ::farm::nurture::location::service::proto::Request& _internal_request(int index) const;
  ::farm::nurture::location::service::proto::Request* _internal_add_request();
  public:
  const ::farm::nurture::location::service::proto::Request& request(int index) const;
  ::farm::nurture::location::service::proto::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Request >&
      request() const;

  // bool onTxn = 1;
  void clear_ontxn();
  bool ontxn() const;
  void set_ontxn(bool value);
  private:
  bool _internal_ontxn() const;
  void _internal_set_ontxn(bool value);
  public:

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.MultiRequests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Request > request_;
  bool ontxn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum ARequestCase {
    kReqInsertLocation = 2,
    kReqInsertLocationBulk = 3,
    kReqInsertLocationS2Cell = 4,
    kReqInsertLocationS2CellBulk = 5,
    kReqInsertConfig = 6,
    kReqInsertConfigBulk = 7,
    kReqFetchLocationById = 8,
    kReqFetchLocationByCodeAndNamespace = 9,
    kReqFetchS2CellById = 10,
    kReqFetchS2CellByLocation = 11,
    kReqFetchS2CellByLocationId = 12,
    kReqUpdateLocationById = 13,
    kReqUpdateLocationByIdBulk = 14,
    kReqUpdateLocationLabelById = 15,
    kReqUpdateLocationLabelByIdBulk = 16,
    kReqUpdateDeleteS2CellByLocation = 17,
    kReqUpdateDeleteS2CellByLocationBulk = 18,
    kReqFetchConfigById = 19,
    kReqAddLocation = 20,
    kReqAddLocationBulk = 21,
    kReqUpdateLocation = 22,
    kReqUpdateLocationBulk = 23,
    kReqGetLocationsWithBoundary = 24,
    kReqGetLocations = 25,
    kReqGetChildGeographies = 26,
    kReqInsertLocationWithoutBoundary = 27,
    kReqInsertLocationWithoutBoundaryBulk = 28,
    kReqUpdateLocationWithoutBoundaryById = 29,
    kReqUpdateLocationWithoutBoundaryByIdBulk = 30,
    kReqDeleteLocationById = 31,
    kReqDeleteLocationByIdBulk = 32,
    kReqFetchDuplicateVillages = 33,
    kReqFetchDuplicateVillagesBySDTVLatLong = 34,
    kReqFetchDuplicateTehsilsBySDTVLatLong = 35,
    kReqFetchDuplicateDistrictsBySDTVLatLong = 36,
    kReqFetchDuplicateStatesBySDTVLatLong = 37,
    kReqGetDuplicateGeographies = 38,
    kReqInsertVendorLocationData = 39,
    kReqInsertVendorLocationDataBulk = 40,
    kReqSearchVendorLocationsByGeohash = 41,
    kReqSearchLocationsByGeohash = 42,
    kReqGetLocationDataByLatLng = 43,
    kReqAddVendorApiLedger = 44,
    kReqAddVendorApiLedgerBulk = 45,
    AREQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kReqInsertLocationFieldNumber = 2,
    kReqInsertLocationBulkFieldNumber = 3,
    kReqInsertLocationS2CellFieldNumber = 4,
    kReqInsertLocationS2CellBulkFieldNumber = 5,
    kReqInsertConfigFieldNumber = 6,
    kReqInsertConfigBulkFieldNumber = 7,
    kReqFetchLocationByIdFieldNumber = 8,
    kReqFetchLocationByCodeAndNamespaceFieldNumber = 9,
    kReqFetchS2CellByIdFieldNumber = 10,
    kReqFetchS2CellByLocationFieldNumber = 11,
    kReqFetchS2CellByLocationIdFieldNumber = 12,
    kReqUpdateLocationByIdFieldNumber = 13,
    kReqUpdateLocationByIdBulkFieldNumber = 14,
    kReqUpdateLocationLabelByIdFieldNumber = 15,
    kReqUpdateLocationLabelByIdBulkFieldNumber = 16,
    kReqUpdateDeleteS2CellByLocationFieldNumber = 17,
    kReqUpdateDeleteS2CellByLocationBulkFieldNumber = 18,
    kReqFetchConfigByIdFieldNumber = 19,
    kReqAddLocationFieldNumber = 20,
    kReqAddLocationBulkFieldNumber = 21,
    kReqUpdateLocationFieldNumber = 22,
    kReqUpdateLocationBulkFieldNumber = 23,
    kReqGetLocationsWithBoundaryFieldNumber = 24,
    kReqGetLocationsFieldNumber = 25,
    kReqGetChildGeographiesFieldNumber = 26,
    kReqInsertLocationWithoutBoundaryFieldNumber = 27,
    kReqInsertLocationWithoutBoundaryBulkFieldNumber = 28,
    kReqUpdateLocationWithoutBoundaryByIdFieldNumber = 29,
    kReqUpdateLocationWithoutBoundaryByIdBulkFieldNumber = 30,
    kReqDeleteLocationByIdFieldNumber = 31,
    kReqDeleteLocationByIdBulkFieldNumber = 32,
    kReqFetchDuplicateVillagesFieldNumber = 33,
    kReqFetchDuplicateVillagesBySDTVLatLongFieldNumber = 34,
    kReqFetchDuplicateTehsilsBySDTVLatLongFieldNumber = 35,
    kReqFetchDuplicateDistrictsBySDTVLatLongFieldNumber = 36,
    kReqFetchDuplicateStatesBySDTVLatLongFieldNumber = 37,
    kReqGetDuplicateGeographiesFieldNumber = 38,
    kReqInsertVendorLocationDataFieldNumber = 39,
    kReqInsertVendorLocationDataBulkFieldNumber = 40,
    kReqSearchVendorLocationsByGeohashFieldNumber = 41,
    kReqSearchLocationsByGeohashFieldNumber = 42,
    kReqGetLocationDataByLatLngFieldNumber = 43,
    kReqAddVendorApiLedgerFieldNumber = 44,
    kReqAddVendorApiLedgerBulkFieldNumber = 45,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.location.service.proto.InsertLocationRequest reqInsertLocation = 2;
  bool has_reqinsertlocation() const;
  private:
  bool _internal_has_reqinsertlocation() const;
  public:
  void clear_reqinsertlocation();
  const ::farm::nurture::location::service::proto::InsertLocationRequest& reqinsertlocation() const;
  ::farm::nurture::location::service::proto::InsertLocationRequest* release_reqinsertlocation();
  ::farm::nurture::location::service::proto::InsertLocationRequest* mutable_reqinsertlocation();
  void set_allocated_reqinsertlocation(::farm::nurture::location::service::proto::InsertLocationRequest* reqinsertlocation);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationRequest& _internal_reqinsertlocation() const;
  ::farm::nurture::location::service::proto::InsertLocationRequest* _internal_mutable_reqinsertlocation();
  public:
  void unsafe_arena_set_allocated_reqinsertlocation(
      ::farm::nurture::location::service::proto::InsertLocationRequest* reqinsertlocation);
  ::farm::nurture::location::service::proto::InsertLocationRequest* unsafe_arena_release_reqinsertlocation();

  // .farm.nurture.location.service.proto.BulkInsertLocationRequest reqInsertLocationBulk = 3;
  bool has_reqinsertlocationbulk() const;
  private:
  bool _internal_has_reqinsertlocationbulk() const;
  public:
  void clear_reqinsertlocationbulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& reqinsertlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationRequest* release_reqinsertlocationbulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationRequest* mutable_reqinsertlocationbulk();
  void set_allocated_reqinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationRequest* reqinsertlocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& _internal_reqinsertlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationRequest* _internal_mutable_reqinsertlocationbulk();
  public:
  void unsafe_arena_set_allocated_reqinsertlocationbulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationRequest* reqinsertlocationbulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationRequest* unsafe_arena_release_reqinsertlocationbulk();

  // .farm.nurture.location.service.proto.InsertLocationS2CellRequest reqInsertLocationS2Cell = 4;
  bool has_reqinsertlocations2cell() const;
  private:
  bool _internal_has_reqinsertlocations2cell() const;
  public:
  void clear_reqinsertlocations2cell();
  const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& reqinsertlocations2cell() const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* release_reqinsertlocations2cell();
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* mutable_reqinsertlocations2cell();
  void set_allocated_reqinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellRequest* reqinsertlocations2cell);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& _internal_reqinsertlocations2cell() const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* _internal_mutable_reqinsertlocations2cell();
  public:
  void unsafe_arena_set_allocated_reqinsertlocations2cell(
      ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* reqinsertlocations2cell);
  ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* unsafe_arena_release_reqinsertlocations2cell();

  // .farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest reqInsertLocationS2CellBulk = 5;
  bool has_reqinsertlocations2cellbulk() const;
  private:
  bool _internal_has_reqinsertlocations2cellbulk() const;
  public:
  void clear_reqinsertlocations2cellbulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& reqinsertlocations2cellbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* release_reqinsertlocations2cellbulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* mutable_reqinsertlocations2cellbulk();
  void set_allocated_reqinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* reqinsertlocations2cellbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& _internal_reqinsertlocations2cellbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* _internal_mutable_reqinsertlocations2cellbulk();
  public:
  void unsafe_arena_set_allocated_reqinsertlocations2cellbulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* reqinsertlocations2cellbulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* unsafe_arena_release_reqinsertlocations2cellbulk();

  // .farm.nurture.location.service.proto.InsertConfigRequest reqInsertConfig = 6;
  bool has_reqinsertconfig() const;
  private:
  bool _internal_has_reqinsertconfig() const;
  public:
  void clear_reqinsertconfig();
  const ::farm::nurture::location::service::proto::InsertConfigRequest& reqinsertconfig() const;
  ::farm::nurture::location::service::proto::InsertConfigRequest* release_reqinsertconfig();
  ::farm::nurture::location::service::proto::InsertConfigRequest* mutable_reqinsertconfig();
  void set_allocated_reqinsertconfig(::farm::nurture::location::service::proto::InsertConfigRequest* reqinsertconfig);
  private:
  const ::farm::nurture::location::service::proto::InsertConfigRequest& _internal_reqinsertconfig() const;
  ::farm::nurture::location::service::proto::InsertConfigRequest* _internal_mutable_reqinsertconfig();
  public:
  void unsafe_arena_set_allocated_reqinsertconfig(
      ::farm::nurture::location::service::proto::InsertConfigRequest* reqinsertconfig);
  ::farm::nurture::location::service::proto::InsertConfigRequest* unsafe_arena_release_reqinsertconfig();

  // .farm.nurture.location.service.proto.BulkInsertConfigRequest reqInsertConfigBulk = 7;
  bool has_reqinsertconfigbulk() const;
  private:
  bool _internal_has_reqinsertconfigbulk() const;
  public:
  void clear_reqinsertconfigbulk();
  const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& reqinsertconfigbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertConfigRequest* release_reqinsertconfigbulk();
  ::farm::nurture::location::service::proto::BulkInsertConfigRequest* mutable_reqinsertconfigbulk();
  void set_allocated_reqinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigRequest* reqinsertconfigbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& _internal_reqinsertconfigbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertConfigRequest* _internal_mutable_reqinsertconfigbulk();
  public:
  void unsafe_arena_set_allocated_reqinsertconfigbulk(
      ::farm::nurture::location::service::proto::BulkInsertConfigRequest* reqinsertconfigbulk);
  ::farm::nurture::location::service::proto::BulkInsertConfigRequest* unsafe_arena_release_reqinsertconfigbulk();

  // .farm.nurture.location.service.proto.FetchLocationByIdRequest reqFetchLocationById = 8;
  bool has_reqfetchlocationbyid() const;
  private:
  bool _internal_has_reqfetchlocationbyid() const;
  public:
  void clear_reqfetchlocationbyid();
  const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& reqfetchlocationbyid() const;
  ::farm::nurture::location::service::proto::FetchLocationByIdRequest* release_reqfetchlocationbyid();
  ::farm::nurture::location::service::proto::FetchLocationByIdRequest* mutable_reqfetchlocationbyid();
  void set_allocated_reqfetchlocationbyid(::farm::nurture::location::service::proto::FetchLocationByIdRequest* reqfetchlocationbyid);
  private:
  const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& _internal_reqfetchlocationbyid() const;
  ::farm::nurture::location::service::proto::FetchLocationByIdRequest* _internal_mutable_reqfetchlocationbyid();
  public:
  void unsafe_arena_set_allocated_reqfetchlocationbyid(
      ::farm::nurture::location::service::proto::FetchLocationByIdRequest* reqfetchlocationbyid);
  ::farm::nurture::location::service::proto::FetchLocationByIdRequest* unsafe_arena_release_reqfetchlocationbyid();

  // .farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest reqFetchLocationByCodeAndNamespace = 9;
  bool has_reqfetchlocationbycodeandnamespace() const;
  private:
  bool _internal_has_reqfetchlocationbycodeandnamespace() const;
  public:
  void clear_reqfetchlocationbycodeandnamespace();
  const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& reqfetchlocationbycodeandnamespace() const;
  ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* release_reqfetchlocationbycodeandnamespace();
  ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* mutable_reqfetchlocationbycodeandnamespace();
  void set_allocated_reqfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* reqfetchlocationbycodeandnamespace);
  private:
  const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& _internal_reqfetchlocationbycodeandnamespace() const;
  ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* _internal_mutable_reqfetchlocationbycodeandnamespace();
  public:
  void unsafe_arena_set_allocated_reqfetchlocationbycodeandnamespace(
      ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* reqfetchlocationbycodeandnamespace);
  ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* unsafe_arena_release_reqfetchlocationbycodeandnamespace();

  // .farm.nurture.location.service.proto.FetchS2CellByIdRequest reqFetchS2CellById = 10;
  bool has_reqfetchs2cellbyid() const;
  private:
  bool _internal_has_reqfetchs2cellbyid() const;
  public:
  void clear_reqfetchs2cellbyid();
  const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& reqfetchs2cellbyid() const;
  ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* release_reqfetchs2cellbyid();
  ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* mutable_reqfetchs2cellbyid();
  void set_allocated_reqfetchs2cellbyid(::farm::nurture::location::service::proto::FetchS2CellByIdRequest* reqfetchs2cellbyid);
  private:
  const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& _internal_reqfetchs2cellbyid() const;
  ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* _internal_mutable_reqfetchs2cellbyid();
  public:
  void unsafe_arena_set_allocated_reqfetchs2cellbyid(
      ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* reqfetchs2cellbyid);
  ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* unsafe_arena_release_reqfetchs2cellbyid();

  // .farm.nurture.location.service.proto.FetchS2CellByLocationRequest reqFetchS2CellByLocation = 11;
  bool has_reqfetchs2cellbylocation() const;
  private:
  bool _internal_has_reqfetchs2cellbylocation() const;
  public:
  void clear_reqfetchs2cellbylocation();
  const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& reqfetchs2cellbylocation() const;
  ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* release_reqfetchs2cellbylocation();
  ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* mutable_reqfetchs2cellbylocation();
  void set_allocated_reqfetchs2cellbylocation(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* reqfetchs2cellbylocation);
  private:
  const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& _internal_reqfetchs2cellbylocation() const;
  ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* _internal_mutable_reqfetchs2cellbylocation();
  public:
  void unsafe_arena_set_allocated_reqfetchs2cellbylocation(
      ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* reqfetchs2cellbylocation);
  ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* unsafe_arena_release_reqfetchs2cellbylocation();

  // .farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest reqFetchS2CellByLocationId = 12;
  bool has_reqfetchs2cellbylocationid() const;
  private:
  bool _internal_has_reqfetchs2cellbylocationid() const;
  public:
  void clear_reqfetchs2cellbylocationid();
  const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& reqfetchs2cellbylocationid() const;
  ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* release_reqfetchs2cellbylocationid();
  ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* mutable_reqfetchs2cellbylocationid();
  void set_allocated_reqfetchs2cellbylocationid(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* reqfetchs2cellbylocationid);
  private:
  const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& _internal_reqfetchs2cellbylocationid() const;
  ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* _internal_mutable_reqfetchs2cellbylocationid();
  public:
  void unsafe_arena_set_allocated_reqfetchs2cellbylocationid(
      ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* reqfetchs2cellbylocationid);
  ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* unsafe_arena_release_reqfetchs2cellbylocationid();

  // .farm.nurture.location.service.proto.UpdateLocationByIdRequest reqUpdateLocationById = 13;
  bool has_requpdatelocationbyid() const;
  private:
  bool _internal_has_requpdatelocationbyid() const;
  public:
  void clear_requpdatelocationbyid();
  const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& requpdatelocationbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* release_requpdatelocationbyid();
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* mutable_requpdatelocationbyid();
  void set_allocated_requpdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdRequest* requpdatelocationbyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& _internal_requpdatelocationbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* _internal_mutable_requpdatelocationbyid();
  public:
  void unsafe_arena_set_allocated_requpdatelocationbyid(
      ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* requpdatelocationbyid);
  ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* unsafe_arena_release_requpdatelocationbyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest reqUpdateLocationByIdBulk = 14;
  bool has_requpdatelocationbyidbulk() const;
  private:
  bool _internal_has_requpdatelocationbyidbulk() const;
  public:
  void clear_requpdatelocationbyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& requpdatelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* release_requpdatelocationbyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* mutable_requpdatelocationbyidbulk();
  void set_allocated_requpdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* requpdatelocationbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& _internal_requpdatelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* _internal_mutable_requpdatelocationbyidbulk();
  public:
  void unsafe_arena_set_allocated_requpdatelocationbyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* requpdatelocationbyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* unsafe_arena_release_requpdatelocationbyidbulk();

  // .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest reqUpdateLocationLabelById = 15;
  bool has_requpdatelocationlabelbyid() const;
  private:
  bool _internal_has_requpdatelocationlabelbyid() const;
  public:
  void clear_requpdatelocationlabelbyid();
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& requpdatelocationlabelbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* release_requpdatelocationlabelbyid();
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* mutable_requpdatelocationlabelbyid();
  void set_allocated_requpdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* requpdatelocationlabelbyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& _internal_requpdatelocationlabelbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* _internal_mutable_requpdatelocationlabelbyid();
  public:
  void unsafe_arena_set_allocated_requpdatelocationlabelbyid(
      ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* requpdatelocationlabelbyid);
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* unsafe_arena_release_requpdatelocationlabelbyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest reqUpdateLocationLabelByIdBulk = 16;
  bool has_requpdatelocationlabelbyidbulk() const;
  private:
  bool _internal_has_requpdatelocationlabelbyidbulk() const;
  public:
  void clear_requpdatelocationlabelbyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& requpdatelocationlabelbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* release_requpdatelocationlabelbyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* mutable_requpdatelocationlabelbyidbulk();
  void set_allocated_requpdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* requpdatelocationlabelbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& _internal_requpdatelocationlabelbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* _internal_mutable_requpdatelocationlabelbyidbulk();
  public:
  void unsafe_arena_set_allocated_requpdatelocationlabelbyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* requpdatelocationlabelbyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* unsafe_arena_release_requpdatelocationlabelbyidbulk();

  // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocation = 17;
  bool has_requpdatedeletes2cellbylocation() const;
  private:
  bool _internal_has_requpdatedeletes2cellbylocation() const;
  public:
  void clear_requpdatedeletes2cellbylocation();
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& requpdatedeletes2cellbylocation() const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* release_requpdatedeletes2cellbylocation();
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* mutable_requpdatedeletes2cellbylocation();
  void set_allocated_requpdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocation);
  private:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& _internal_requpdatedeletes2cellbylocation() const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* _internal_mutable_requpdatedeletes2cellbylocation();
  public:
  void unsafe_arena_set_allocated_requpdatedeletes2cellbylocation(
      ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocation);
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* unsafe_arena_release_requpdatedeletes2cellbylocation();

  // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocationBulk = 18;
  bool has_requpdatedeletes2cellbylocationbulk() const;
  private:
  bool _internal_has_requpdatedeletes2cellbylocationbulk() const;
  public:
  void clear_requpdatedeletes2cellbylocationbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& requpdatedeletes2cellbylocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* release_requpdatedeletes2cellbylocationbulk();
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* mutable_requpdatedeletes2cellbylocationbulk();
  void set_allocated_requpdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& _internal_requpdatedeletes2cellbylocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* _internal_mutable_requpdatedeletes2cellbylocationbulk();
  public:
  void unsafe_arena_set_allocated_requpdatedeletes2cellbylocationbulk(
      ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocationbulk);
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* unsafe_arena_release_requpdatedeletes2cellbylocationbulk();

  // .farm.nurture.location.service.proto.FetchConfigByIdRequest reqFetchConfigById = 19;
  bool has_reqfetchconfigbyid() const;
  private:
  bool _internal_has_reqfetchconfigbyid() const;
  public:
  void clear_reqfetchconfigbyid();
  const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& reqfetchconfigbyid() const;
  ::farm::nurture::location::service::proto::FetchConfigByIdRequest* release_reqfetchconfigbyid();
  ::farm::nurture::location::service::proto::FetchConfigByIdRequest* mutable_reqfetchconfigbyid();
  void set_allocated_reqfetchconfigbyid(::farm::nurture::location::service::proto::FetchConfigByIdRequest* reqfetchconfigbyid);
  private:
  const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& _internal_reqfetchconfigbyid() const;
  ::farm::nurture::location::service::proto::FetchConfigByIdRequest* _internal_mutable_reqfetchconfigbyid();
  public:
  void unsafe_arena_set_allocated_reqfetchconfigbyid(
      ::farm::nurture::location::service::proto::FetchConfigByIdRequest* reqfetchconfigbyid);
  ::farm::nurture::location::service::proto::FetchConfigByIdRequest* unsafe_arena_release_reqfetchconfigbyid();

  // .farm.nurture.location.service.proto.AddLocationRequest reqAddLocation = 20;
  bool has_reqaddlocation() const;
  private:
  bool _internal_has_reqaddlocation() const;
  public:
  void clear_reqaddlocation();
  const ::farm::nurture::location::service::proto::AddLocationRequest& reqaddlocation() const;
  ::farm::nurture::location::service::proto::AddLocationRequest* release_reqaddlocation();
  ::farm::nurture::location::service::proto::AddLocationRequest* mutable_reqaddlocation();
  void set_allocated_reqaddlocation(::farm::nurture::location::service::proto::AddLocationRequest* reqaddlocation);
  private:
  const ::farm::nurture::location::service::proto::AddLocationRequest& _internal_reqaddlocation() const;
  ::farm::nurture::location::service::proto::AddLocationRequest* _internal_mutable_reqaddlocation();
  public:
  void unsafe_arena_set_allocated_reqaddlocation(
      ::farm::nurture::location::service::proto::AddLocationRequest* reqaddlocation);
  ::farm::nurture::location::service::proto::AddLocationRequest* unsafe_arena_release_reqaddlocation();

  // .farm.nurture.location.service.proto.BulkAddLocationRequest reqAddLocationBulk = 21;
  bool has_reqaddlocationbulk() const;
  private:
  bool _internal_has_reqaddlocationbulk() const;
  public:
  void clear_reqaddlocationbulk();
  const ::farm::nurture::location::service::proto::BulkAddLocationRequest& reqaddlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkAddLocationRequest* release_reqaddlocationbulk();
  ::farm::nurture::location::service::proto::BulkAddLocationRequest* mutable_reqaddlocationbulk();
  void set_allocated_reqaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationRequest* reqaddlocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkAddLocationRequest& _internal_reqaddlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkAddLocationRequest* _internal_mutable_reqaddlocationbulk();
  public:
  void unsafe_arena_set_allocated_reqaddlocationbulk(
      ::farm::nurture::location::service::proto::BulkAddLocationRequest* reqaddlocationbulk);
  ::farm::nurture::location::service::proto::BulkAddLocationRequest* unsafe_arena_release_reqaddlocationbulk();

  // .farm.nurture.location.service.proto.UpdateLocationRequest reqUpdateLocation = 22;
  bool has_requpdatelocation() const;
  private:
  bool _internal_has_requpdatelocation() const;
  public:
  void clear_requpdatelocation();
  const ::farm::nurture::location::service::proto::UpdateLocationRequest& requpdatelocation() const;
  ::farm::nurture::location::service::proto::UpdateLocationRequest* release_requpdatelocation();
  ::farm::nurture::location::service::proto::UpdateLocationRequest* mutable_requpdatelocation();
  void set_allocated_requpdatelocation(::farm::nurture::location::service::proto::UpdateLocationRequest* requpdatelocation);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationRequest& _internal_requpdatelocation() const;
  ::farm::nurture::location::service::proto::UpdateLocationRequest* _internal_mutable_requpdatelocation();
  public:
  void unsafe_arena_set_allocated_requpdatelocation(
      ::farm::nurture::location::service::proto::UpdateLocationRequest* requpdatelocation);
  ::farm::nurture::location::service::proto::UpdateLocationRequest* unsafe_arena_release_requpdatelocation();

  // .farm.nurture.location.service.proto.BulkUpdateLocationRequest reqUpdateLocationBulk = 23;
  bool has_requpdatelocationbulk() const;
  private:
  bool _internal_has_requpdatelocationbulk() const;
  public:
  void clear_requpdatelocationbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& requpdatelocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* release_requpdatelocationbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* mutable_requpdatelocationbulk();
  void set_allocated_requpdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationRequest* requpdatelocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& _internal_requpdatelocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* _internal_mutable_requpdatelocationbulk();
  public:
  void unsafe_arena_set_allocated_requpdatelocationbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* requpdatelocationbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* unsafe_arena_release_requpdatelocationbulk();

  // .farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest reqGetLocationsWithBoundary = 24;
  bool has_reqgetlocationswithboundary() const;
  private:
  bool _internal_has_reqgetlocationswithboundary() const;
  public:
  void clear_reqgetlocationswithboundary();
  const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& reqgetlocationswithboundary() const;
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* release_reqgetlocationswithboundary();
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* mutable_reqgetlocationswithboundary();
  void set_allocated_reqgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* reqgetlocationswithboundary);
  private:
  const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& _internal_reqgetlocationswithboundary() const;
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* _internal_mutable_reqgetlocationswithboundary();
  public:
  void unsafe_arena_set_allocated_reqgetlocationswithboundary(
      ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* reqgetlocationswithboundary);
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* unsafe_arena_release_reqgetlocationswithboundary();

  // .farm.nurture.location.service.proto.GetLocationsRequest reqGetLocations = 25;
  bool has_reqgetlocations() const;
  private:
  bool _internal_has_reqgetlocations() const;
  public:
  void clear_reqgetlocations();
  const ::farm::nurture::location::service::proto::GetLocationsRequest& reqgetlocations() const;
  ::farm::nurture::location::service::proto::GetLocationsRequest* release_reqgetlocations();
  ::farm::nurture::location::service::proto::GetLocationsRequest* mutable_reqgetlocations();
  void set_allocated_reqgetlocations(::farm::nurture::location::service::proto::GetLocationsRequest* reqgetlocations);
  private:
  const ::farm::nurture::location::service::proto::GetLocationsRequest& _internal_reqgetlocations() const;
  ::farm::nurture::location::service::proto::GetLocationsRequest* _internal_mutable_reqgetlocations();
  public:
  void unsafe_arena_set_allocated_reqgetlocations(
      ::farm::nurture::location::service::proto::GetLocationsRequest* reqgetlocations);
  ::farm::nurture::location::service::proto::GetLocationsRequest* unsafe_arena_release_reqgetlocations();

  // .farm.nurture.location.service.proto.GetChildGeographiesRequest reqGetChildGeographies = 26;
  bool has_reqgetchildgeographies() const;
  private:
  bool _internal_has_reqgetchildgeographies() const;
  public:
  void clear_reqgetchildgeographies();
  const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& reqgetchildgeographies() const;
  ::farm::nurture::location::service::proto::GetChildGeographiesRequest* release_reqgetchildgeographies();
  ::farm::nurture::location::service::proto::GetChildGeographiesRequest* mutable_reqgetchildgeographies();
  void set_allocated_reqgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesRequest* reqgetchildgeographies);
  private:
  const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& _internal_reqgetchildgeographies() const;
  ::farm::nurture::location::service::proto::GetChildGeographiesRequest* _internal_mutable_reqgetchildgeographies();
  public:
  void unsafe_arena_set_allocated_reqgetchildgeographies(
      ::farm::nurture::location::service::proto::GetChildGeographiesRequest* reqgetchildgeographies);
  ::farm::nurture::location::service::proto::GetChildGeographiesRequest* unsafe_arena_release_reqgetchildgeographies();

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundary = 27;
  bool has_reqinsertlocationwithoutboundary() const;
  private:
  bool _internal_has_reqinsertlocationwithoutboundary() const;
  public:
  void clear_reqinsertlocationwithoutboundary();
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& reqinsertlocationwithoutboundary() const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* release_reqinsertlocationwithoutboundary();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* mutable_reqinsertlocationwithoutboundary();
  void set_allocated_reqinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundary);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& _internal_reqinsertlocationwithoutboundary() const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* _internal_mutable_reqinsertlocationwithoutboundary();
  public:
  void unsafe_arena_set_allocated_reqinsertlocationwithoutboundary(
      ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundary);
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* unsafe_arena_release_reqinsertlocationwithoutboundary();

  // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundaryBulk = 28;
  bool has_reqinsertlocationwithoutboundarybulk() const;
  private:
  bool _internal_has_reqinsertlocationwithoutboundarybulk() const;
  public:
  void clear_reqinsertlocationwithoutboundarybulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& reqinsertlocationwithoutboundarybulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* release_reqinsertlocationwithoutboundarybulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* mutable_reqinsertlocationwithoutboundarybulk();
  void set_allocated_reqinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundarybulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& _internal_reqinsertlocationwithoutboundarybulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* _internal_mutable_reqinsertlocationwithoutboundarybulk();
  public:
  void unsafe_arena_set_allocated_reqinsertlocationwithoutboundarybulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundarybulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* unsafe_arena_release_reqinsertlocationwithoutboundarybulk();

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryById = 29;
  bool has_requpdatelocationwithoutboundarybyid() const;
  private:
  bool _internal_has_requpdatelocationwithoutboundarybyid() const;
  public:
  void clear_requpdatelocationwithoutboundarybyid();
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& requpdatelocationwithoutboundarybyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* release_requpdatelocationwithoutboundarybyid();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* mutable_requpdatelocationwithoutboundarybyid();
  void set_allocated_requpdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& _internal_requpdatelocationwithoutboundarybyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* _internal_mutable_requpdatelocationwithoutboundarybyid();
  public:
  void unsafe_arena_set_allocated_requpdatelocationwithoutboundarybyid(
      ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyid);
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* unsafe_arena_release_requpdatelocationwithoutboundarybyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryByIdBulk = 30;
  bool has_requpdatelocationwithoutboundarybyidbulk() const;
  private:
  bool _internal_has_requpdatelocationwithoutboundarybyidbulk() const;
  public:
  void clear_requpdatelocationwithoutboundarybyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& requpdatelocationwithoutboundarybyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* release_requpdatelocationwithoutboundarybyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* mutable_requpdatelocationwithoutboundarybyidbulk();
  void set_allocated_requpdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& _internal_requpdatelocationwithoutboundarybyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* _internal_mutable_requpdatelocationwithoutboundarybyidbulk();
  public:
  void unsafe_arena_set_allocated_requpdatelocationwithoutboundarybyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* unsafe_arena_release_requpdatelocationwithoutboundarybyidbulk();

  // .farm.nurture.location.service.proto.DeleteLocationByIdRequest reqDeleteLocationById = 31;
  bool has_reqdeletelocationbyid() const;
  private:
  bool _internal_has_reqdeletelocationbyid() const;
  public:
  void clear_reqdeletelocationbyid();
  const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& reqdeletelocationbyid() const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* release_reqdeletelocationbyid();
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* mutable_reqdeletelocationbyid();
  void set_allocated_reqdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdRequest* reqdeletelocationbyid);
  private:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& _internal_reqdeletelocationbyid() const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* _internal_mutable_reqdeletelocationbyid();
  public:
  void unsafe_arena_set_allocated_reqdeletelocationbyid(
      ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* reqdeletelocationbyid);
  ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* unsafe_arena_release_reqdeletelocationbyid();

  // .farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest reqDeleteLocationByIdBulk = 32;
  bool has_reqdeletelocationbyidbulk() const;
  private:
  bool _internal_has_reqdeletelocationbyidbulk() const;
  public:
  void clear_reqdeletelocationbyidbulk();
  const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& reqdeletelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* release_reqdeletelocationbyidbulk();
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* mutable_reqdeletelocationbyidbulk();
  void set_allocated_reqdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* reqdeletelocationbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& _internal_reqdeletelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* _internal_mutable_reqdeletelocationbyidbulk();
  public:
  void unsafe_arena_set_allocated_reqdeletelocationbyidbulk(
      ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* reqdeletelocationbyidbulk);
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* unsafe_arena_release_reqdeletelocationbyidbulk();

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesRequest reqFetchDuplicateVillages = 33;
  bool has_reqfetchduplicatevillages() const;
  private:
  bool _internal_has_reqfetchduplicatevillages() const;
  public:
  void clear_reqfetchduplicatevillages();
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest& reqfetchduplicatevillages() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* release_reqfetchduplicatevillages();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* mutable_reqfetchduplicatevillages();
  void set_allocated_reqfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* reqfetchduplicatevillages);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest& _internal_reqfetchduplicatevillages() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* _internal_mutable_reqfetchduplicatevillages();
  public:
  void unsafe_arena_set_allocated_reqfetchduplicatevillages(
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* reqfetchduplicatevillages);
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* unsafe_arena_release_reqfetchduplicatevillages();

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest reqFetchDuplicateVillagesBySDTVLatLong = 34;
  bool has_reqfetchduplicatevillagesbysdtvlatlong() const;
  private:
  bool _internal_has_reqfetchduplicatevillagesbysdtvlatlong() const;
  public:
  void clear_reqfetchduplicatevillagesbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest& reqfetchduplicatevillagesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* release_reqfetchduplicatevillagesbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* mutable_reqfetchduplicatevillagesbysdtvlatlong();
  void set_allocated_reqfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* reqfetchduplicatevillagesbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest& _internal_reqfetchduplicatevillagesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* _internal_mutable_reqfetchduplicatevillagesbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_reqfetchduplicatevillagesbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* reqfetchduplicatevillagesbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* unsafe_arena_release_reqfetchduplicatevillagesbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest reqFetchDuplicateTehsilsBySDTVLatLong = 35;
  bool has_reqfetchduplicatetehsilsbysdtvlatlong() const;
  private:
  bool _internal_has_reqfetchduplicatetehsilsbysdtvlatlong() const;
  public:
  void clear_reqfetchduplicatetehsilsbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest& reqfetchduplicatetehsilsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* release_reqfetchduplicatetehsilsbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* mutable_reqfetchduplicatetehsilsbysdtvlatlong();
  void set_allocated_reqfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* reqfetchduplicatetehsilsbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest& _internal_reqfetchduplicatetehsilsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* _internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_reqfetchduplicatetehsilsbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* reqfetchduplicatetehsilsbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* unsafe_arena_release_reqfetchduplicatetehsilsbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest reqFetchDuplicateDistrictsBySDTVLatLong = 36;
  bool has_reqfetchduplicatedistrictsbysdtvlatlong() const;
  private:
  bool _internal_has_reqfetchduplicatedistrictsbysdtvlatlong() const;
  public:
  void clear_reqfetchduplicatedistrictsbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest& reqfetchduplicatedistrictsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* release_reqfetchduplicatedistrictsbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* mutable_reqfetchduplicatedistrictsbysdtvlatlong();
  void set_allocated_reqfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* reqfetchduplicatedistrictsbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest& _internal_reqfetchduplicatedistrictsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* _internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_reqfetchduplicatedistrictsbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* reqfetchduplicatedistrictsbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* unsafe_arena_release_reqfetchduplicatedistrictsbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest reqFetchDuplicateStatesBySDTVLatLong = 37;
  bool has_reqfetchduplicatestatesbysdtvlatlong() const;
  private:
  bool _internal_has_reqfetchduplicatestatesbysdtvlatlong() const;
  public:
  void clear_reqfetchduplicatestatesbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest& reqfetchduplicatestatesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* release_reqfetchduplicatestatesbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* mutable_reqfetchduplicatestatesbysdtvlatlong();
  void set_allocated_reqfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* reqfetchduplicatestatesbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest& _internal_reqfetchduplicatestatesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* _internal_mutable_reqfetchduplicatestatesbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_reqfetchduplicatestatesbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* reqfetchduplicatestatesbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* unsafe_arena_release_reqfetchduplicatestatesbysdtvlatlong();

  // .farm.nurture.location.service.proto.GetDuplicateGeographiesRequest reqGetDuplicateGeographies = 38;
  bool has_reqgetduplicategeographies() const;
  private:
  bool _internal_has_reqgetduplicategeographies() const;
  public:
  void clear_reqgetduplicategeographies();
  const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest& reqgetduplicategeographies() const;
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* release_reqgetduplicategeographies();
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* mutable_reqgetduplicategeographies();
  void set_allocated_reqgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* reqgetduplicategeographies);
  private:
  const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest& _internal_reqgetduplicategeographies() const;
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* _internal_mutable_reqgetduplicategeographies();
  public:
  void unsafe_arena_set_allocated_reqgetduplicategeographies(
      ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* reqgetduplicategeographies);
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* unsafe_arena_release_reqgetduplicategeographies();

  // .farm.nurture.location.service.proto.InsertVendorLocationDataRequest reqInsertVendorLocationData = 39;
  bool has_reqinsertvendorlocationdata() const;
  private:
  bool _internal_has_reqinsertvendorlocationdata() const;
  public:
  void clear_reqinsertvendorlocationdata();
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& reqinsertvendorlocationdata() const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* release_reqinsertvendorlocationdata();
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* mutable_reqinsertvendorlocationdata();
  void set_allocated_reqinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* reqinsertvendorlocationdata);
  private:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& _internal_reqinsertvendorlocationdata() const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* _internal_mutable_reqinsertvendorlocationdata();
  public:
  void unsafe_arena_set_allocated_reqinsertvendorlocationdata(
      ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* reqinsertvendorlocationdata);
  ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* unsafe_arena_release_reqinsertvendorlocationdata();

  // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest reqInsertVendorLocationDataBulk = 40;
  bool has_reqinsertvendorlocationdatabulk() const;
  private:
  bool _internal_has_reqinsertvendorlocationdatabulk() const;
  public:
  void clear_reqinsertvendorlocationdatabulk();
  const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest& reqinsertvendorlocationdatabulk() const;
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* release_reqinsertvendorlocationdatabulk();
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* mutable_reqinsertvendorlocationdatabulk();
  void set_allocated_reqinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* reqinsertvendorlocationdatabulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest& _internal_reqinsertvendorlocationdatabulk() const;
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* _internal_mutable_reqinsertvendorlocationdatabulk();
  public:
  void unsafe_arena_set_allocated_reqinsertvendorlocationdatabulk(
      ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* reqinsertvendorlocationdatabulk);
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* unsafe_arena_release_reqinsertvendorlocationdatabulk();

  // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest reqSearchVendorLocationsByGeohash = 41;
  bool has_reqsearchvendorlocationsbygeohash() const;
  private:
  bool _internal_has_reqsearchvendorlocationsbygeohash() const;
  public:
  void clear_reqsearchvendorlocationsbygeohash();
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest& reqsearchvendorlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* release_reqsearchvendorlocationsbygeohash();
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* mutable_reqsearchvendorlocationsbygeohash();
  void set_allocated_reqsearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* reqsearchvendorlocationsbygeohash);
  private:
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest& _internal_reqsearchvendorlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* _internal_mutable_reqsearchvendorlocationsbygeohash();
  public:
  void unsafe_arena_set_allocated_reqsearchvendorlocationsbygeohash(
      ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* reqsearchvendorlocationsbygeohash);
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* unsafe_arena_release_reqsearchvendorlocationsbygeohash();

  // .farm.nurture.location.service.proto.SearchLocationsByGeohashRequest reqSearchLocationsByGeohash = 42;
  bool has_reqsearchlocationsbygeohash() const;
  private:
  bool _internal_has_reqsearchlocationsbygeohash() const;
  public:
  void clear_reqsearchlocationsbygeohash();
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest& reqsearchlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* release_reqsearchlocationsbygeohash();
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* mutable_reqsearchlocationsbygeohash();
  void set_allocated_reqsearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* reqsearchlocationsbygeohash);
  private:
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest& _internal_reqsearchlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* _internal_mutable_reqsearchlocationsbygeohash();
  public:
  void unsafe_arena_set_allocated_reqsearchlocationsbygeohash(
      ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* reqsearchlocationsbygeohash);
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* unsafe_arena_release_reqsearchlocationsbygeohash();

  // .farm.nurture.location.service.proto.GetLocationDataByLatLngRequest reqGetLocationDataByLatLng = 43;
  bool has_reqgetlocationdatabylatlng() const;
  private:
  bool _internal_has_reqgetlocationdatabylatlng() const;
  public:
  void clear_reqgetlocationdatabylatlng();
  const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest& reqgetlocationdatabylatlng() const;
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* release_reqgetlocationdatabylatlng();
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* mutable_reqgetlocationdatabylatlng();
  void set_allocated_reqgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* reqgetlocationdatabylatlng);
  private:
  const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest& _internal_reqgetlocationdatabylatlng() const;
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* _internal_mutable_reqgetlocationdatabylatlng();
  public:
  void unsafe_arena_set_allocated_reqgetlocationdatabylatlng(
      ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* reqgetlocationdatabylatlng);
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* unsafe_arena_release_reqgetlocationdatabylatlng();

  // .farm.nurture.location.service.proto.AddVendorApiLedgerRequest reqAddVendorApiLedger = 44;
  bool has_reqaddvendorapiledger() const;
  private:
  bool _internal_has_reqaddvendorapiledger() const;
  public:
  void clear_reqaddvendorapiledger();
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& reqaddvendorapiledger() const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* release_reqaddvendorapiledger();
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* mutable_reqaddvendorapiledger();
  void set_allocated_reqaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* reqaddvendorapiledger);
  private:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& _internal_reqaddvendorapiledger() const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* _internal_mutable_reqaddvendorapiledger();
  public:
  void unsafe_arena_set_allocated_reqaddvendorapiledger(
      ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* reqaddvendorapiledger);
  ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* unsafe_arena_release_reqaddvendorapiledger();

  // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest reqAddVendorApiLedgerBulk = 45;
  bool has_reqaddvendorapiledgerbulk() const;
  private:
  bool _internal_has_reqaddvendorapiledgerbulk() const;
  public:
  void clear_reqaddvendorapiledgerbulk();
  const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest& reqaddvendorapiledgerbulk() const;
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* release_reqaddvendorapiledgerbulk();
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* mutable_reqaddvendorapiledgerbulk();
  void set_allocated_reqaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* reqaddvendorapiledgerbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest& _internal_reqaddvendorapiledgerbulk() const;
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* _internal_mutable_reqaddvendorapiledgerbulk();
  public:
  void unsafe_arena_set_allocated_reqaddvendorapiledgerbulk(
      ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* reqaddvendorapiledgerbulk);
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* unsafe_arena_release_reqaddvendorapiledgerbulk();

  void clear_ARequest();
  ARequestCase ARequest_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.Request)
 private:
  class _Internal;
  void set_has_reqinsertlocation();
  void set_has_reqinsertlocationbulk();
  void set_has_reqinsertlocations2cell();
  void set_has_reqinsertlocations2cellbulk();
  void set_has_reqinsertconfig();
  void set_has_reqinsertconfigbulk();
  void set_has_reqfetchlocationbyid();
  void set_has_reqfetchlocationbycodeandnamespace();
  void set_has_reqfetchs2cellbyid();
  void set_has_reqfetchs2cellbylocation();
  void set_has_reqfetchs2cellbylocationid();
  void set_has_requpdatelocationbyid();
  void set_has_requpdatelocationbyidbulk();
  void set_has_requpdatelocationlabelbyid();
  void set_has_requpdatelocationlabelbyidbulk();
  void set_has_requpdatedeletes2cellbylocation();
  void set_has_requpdatedeletes2cellbylocationbulk();
  void set_has_reqfetchconfigbyid();
  void set_has_reqaddlocation();
  void set_has_reqaddlocationbulk();
  void set_has_requpdatelocation();
  void set_has_requpdatelocationbulk();
  void set_has_reqgetlocationswithboundary();
  void set_has_reqgetlocations();
  void set_has_reqgetchildgeographies();
  void set_has_reqinsertlocationwithoutboundary();
  void set_has_reqinsertlocationwithoutboundarybulk();
  void set_has_requpdatelocationwithoutboundarybyid();
  void set_has_requpdatelocationwithoutboundarybyidbulk();
  void set_has_reqdeletelocationbyid();
  void set_has_reqdeletelocationbyidbulk();
  void set_has_reqfetchduplicatevillages();
  void set_has_reqfetchduplicatevillagesbysdtvlatlong();
  void set_has_reqfetchduplicatetehsilsbysdtvlatlong();
  void set_has_reqfetchduplicatedistrictsbysdtvlatlong();
  void set_has_reqfetchduplicatestatesbysdtvlatlong();
  void set_has_reqgetduplicategeographies();
  void set_has_reqinsertvendorlocationdata();
  void set_has_reqinsertvendorlocationdatabulk();
  void set_has_reqsearchvendorlocationsbygeohash();
  void set_has_reqsearchlocationsbygeohash();
  void set_has_reqgetlocationdatabylatlng();
  void set_has_reqaddvendorapiledger();
  void set_has_reqaddvendorapiledgerbulk();

  inline bool has_ARequest() const;
  inline void clear_has_ARequest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  union ARequestUnion {
    ARequestUnion() {}
    ::farm::nurture::location::service::proto::InsertLocationRequest* reqinsertlocation_;
    ::farm::nurture::location::service::proto::BulkInsertLocationRequest* reqinsertlocationbulk_;
    ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* reqinsertlocations2cell_;
    ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* reqinsertlocations2cellbulk_;
    ::farm::nurture::location::service::proto::InsertConfigRequest* reqinsertconfig_;
    ::farm::nurture::location::service::proto::BulkInsertConfigRequest* reqinsertconfigbulk_;
    ::farm::nurture::location::service::proto::FetchLocationByIdRequest* reqfetchlocationbyid_;
    ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* reqfetchlocationbycodeandnamespace_;
    ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* reqfetchs2cellbyid_;
    ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* reqfetchs2cellbylocation_;
    ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* reqfetchs2cellbylocationid_;
    ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* requpdatelocationbyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* requpdatelocationbyidbulk_;
    ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* requpdatelocationlabelbyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* requpdatelocationlabelbyidbulk_;
    ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocation_;
    ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocationbulk_;
    ::farm::nurture::location::service::proto::FetchConfigByIdRequest* reqfetchconfigbyid_;
    ::farm::nurture::location::service::proto::AddLocationRequest* reqaddlocation_;
    ::farm::nurture::location::service::proto::BulkAddLocationRequest* reqaddlocationbulk_;
    ::farm::nurture::location::service::proto::UpdateLocationRequest* requpdatelocation_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* requpdatelocationbulk_;
    ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* reqgetlocationswithboundary_;
    ::farm::nurture::location::service::proto::GetLocationsRequest* reqgetlocations_;
    ::farm::nurture::location::service::proto::GetChildGeographiesRequest* reqgetchildgeographies_;
    ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundary_;
    ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundarybulk_;
    ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyidbulk_;
    ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* reqdeletelocationbyid_;
    ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* reqdeletelocationbyidbulk_;
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* reqfetchduplicatevillages_;
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* reqfetchduplicatevillagesbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* reqfetchduplicatetehsilsbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* reqfetchduplicatedistrictsbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* reqfetchduplicatestatesbysdtvlatlong_;
    ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* reqgetduplicategeographies_;
    ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* reqinsertvendorlocationdata_;
    ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* reqinsertvendorlocationdatabulk_;
    ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* reqsearchvendorlocationsbygeohash_;
    ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* reqsearchlocationsbygeohash_;
    ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* reqgetlocationdatabylatlng_;
    ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* reqaddvendorapiledger_;
    ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* reqaddvendorapiledgerbulk_;
  } ARequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiResponses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.MultiResponses) */ {
 public:
  inline MultiResponses() : MultiResponses(nullptr) {}
  virtual ~MultiResponses();

  MultiResponses(const MultiResponses& from);
  MultiResponses(MultiResponses&& from) noexcept
    : MultiResponses() {
    *this = ::std::move(from);
  }

  inline MultiResponses& operator=(const MultiResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiResponses& operator=(MultiResponses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiResponses& default_instance();

  static inline const MultiResponses* internal_default_instance() {
    return reinterpret_cast<const MultiResponses*>(
               &_MultiResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(MultiResponses& a, MultiResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiResponses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiResponses* New() const final {
    return CreateMaybeMessage<MultiResponses>(nullptr);
  }

  MultiResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiResponses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiResponses& from);
  void MergeFrom(const MultiResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiResponses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.MultiResponses";
  }
  protected:
  explicit MultiResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .farm.nurture.location.service.proto.Response response = 2;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::farm::nurture::location::service::proto::Response* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Response >*
      mutable_response();
  private:
  const ::farm::nurture::location::service::proto::Response& _internal_response(int index) const;
  ::farm::nurture::location::service::proto::Response* _internal_add_response();
  public:
  const ::farm::nurture::location::service::proto::Response& response(int index) const;
  ::farm::nurture::location::service::proto::Response* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Response >&
      response() const;

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.MultiResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Response > response_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:farm.nurture.location.service.proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum AResponseCase {
    kResInsertLocation = 3,
    kResInsertLocationBulk = 4,
    kResInsertLocationS2Cell = 5,
    kResInsertLocationS2CellBulk = 6,
    kResInsertConfig = 7,
    kResInsertConfigBulk = 8,
    kResFetchLocationById = 9,
    kResFetchLocationByCodeAndNamespace = 10,
    kResFetchS2CellById = 11,
    kResFetchS2CellByLocation = 12,
    kResFetchS2CellByLocationId = 13,
    kResUpdateLocationById = 14,
    kResUpdateLocationByIdBulk = 15,
    kResUpdateLocationLabelById = 16,
    kResUpdateLocationLabelByIdBulk = 17,
    kResUpdateDeleteS2CellByLocation = 18,
    kResUpdateDeleteS2CellByLocationBulk = 19,
    kResFetchConfigById = 20,
    kResAddLocation = 21,
    kResAddLocationBulk = 22,
    kResUpdateLocation = 23,
    kResUpdateLocationBulk = 24,
    kResGetLocationsWithBoundary = 25,
    kResGetLocations = 26,
    kResGetChildGeographies = 27,
    kResInsertLocationWithoutBoundary = 28,
    kResInsertLocationWithoutBoundaryBulk = 29,
    kResUpdateLocationWithoutBoundaryById = 30,
    kResUpdateLocationWithoutBoundaryByIdBulk = 31,
    kResDeleteLocationById = 32,
    kResDeleteLocationByIdBulk = 33,
    kResFetchDuplicateVillages = 34,
    kResFetchDuplicateVillagesBySDTVLatLong = 35,
    kResFetchDuplicateTehsilsBySDTVLatLong = 36,
    kResFetchDuplicateDistrictsBySDTVLatLong = 37,
    kResFetchDuplicateStatesBySDTVLatLong = 38,
    kResGetDuplicateGeographies = 39,
    kResInsertVendorLocationData = 40,
    kResInsertVendorLocationDataBulk = 41,
    kResSearchVendorLocationsByGeohash = 42,
    kResSearchLocationsByGeohash = 43,
    kResGetLocationDataByLatLng = 44,
    kResAddVendorApiLedger = 45,
    kResAddVendorApiLedgerBulk = 46,
    ARESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "farm.nurture.location.service.proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocationService_2flocation_5fservice_2eproto);
    return ::descriptor_table_LocationService_2flocation_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kStatusFieldNumber = 2,
    kResInsertLocationFieldNumber = 3,
    kResInsertLocationBulkFieldNumber = 4,
    kResInsertLocationS2CellFieldNumber = 5,
    kResInsertLocationS2CellBulkFieldNumber = 6,
    kResInsertConfigFieldNumber = 7,
    kResInsertConfigBulkFieldNumber = 8,
    kResFetchLocationByIdFieldNumber = 9,
    kResFetchLocationByCodeAndNamespaceFieldNumber = 10,
    kResFetchS2CellByIdFieldNumber = 11,
    kResFetchS2CellByLocationFieldNumber = 12,
    kResFetchS2CellByLocationIdFieldNumber = 13,
    kResUpdateLocationByIdFieldNumber = 14,
    kResUpdateLocationByIdBulkFieldNumber = 15,
    kResUpdateLocationLabelByIdFieldNumber = 16,
    kResUpdateLocationLabelByIdBulkFieldNumber = 17,
    kResUpdateDeleteS2CellByLocationFieldNumber = 18,
    kResUpdateDeleteS2CellByLocationBulkFieldNumber = 19,
    kResFetchConfigByIdFieldNumber = 20,
    kResAddLocationFieldNumber = 21,
    kResAddLocationBulkFieldNumber = 22,
    kResUpdateLocationFieldNumber = 23,
    kResUpdateLocationBulkFieldNumber = 24,
    kResGetLocationsWithBoundaryFieldNumber = 25,
    kResGetLocationsFieldNumber = 26,
    kResGetChildGeographiesFieldNumber = 27,
    kResInsertLocationWithoutBoundaryFieldNumber = 28,
    kResInsertLocationWithoutBoundaryBulkFieldNumber = 29,
    kResUpdateLocationWithoutBoundaryByIdFieldNumber = 30,
    kResUpdateLocationWithoutBoundaryByIdBulkFieldNumber = 31,
    kResDeleteLocationByIdFieldNumber = 32,
    kResDeleteLocationByIdBulkFieldNumber = 33,
    kResFetchDuplicateVillagesFieldNumber = 34,
    kResFetchDuplicateVillagesBySDTVLatLongFieldNumber = 35,
    kResFetchDuplicateTehsilsBySDTVLatLongFieldNumber = 36,
    kResFetchDuplicateDistrictsBySDTVLatLongFieldNumber = 37,
    kResFetchDuplicateStatesBySDTVLatLongFieldNumber = 38,
    kResGetDuplicateGeographiesFieldNumber = 39,
    kResInsertVendorLocationDataFieldNumber = 40,
    kResInsertVendorLocationDataBulkFieldNumber = 41,
    kResSearchVendorLocationsByGeohashFieldNumber = 42,
    kResSearchLocationsByGeohashFieldNumber = 43,
    kResGetLocationDataByLatLngFieldNumber = 44,
    kResAddVendorApiLedgerFieldNumber = 45,
    kResAddVendorApiLedgerBulkFieldNumber = 46,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::farm::nurture::core::contracts::common::RequestStatusResult& status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* release_status();
  ::farm::nurture::core::contracts::common::RequestStatusResult* mutable_status();
  void set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status);
  private:
  const ::farm::nurture::core::contracts::common::RequestStatusResult& _internal_status() const;
  ::farm::nurture::core::contracts::common::RequestStatusResult* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::farm::nurture::core::contracts::common::RequestStatusResult* status);
  ::farm::nurture::core::contracts::common::RequestStatusResult* unsafe_arena_release_status();

  // .farm.nurture.location.service.proto.InsertLocationResponse resInsertLocation = 3;
  bool has_resinsertlocation() const;
  private:
  bool _internal_has_resinsertlocation() const;
  public:
  void clear_resinsertlocation();
  const ::farm::nurture::location::service::proto::InsertLocationResponse& resinsertlocation() const;
  ::farm::nurture::location::service::proto::InsertLocationResponse* release_resinsertlocation();
  ::farm::nurture::location::service::proto::InsertLocationResponse* mutable_resinsertlocation();
  void set_allocated_resinsertlocation(::farm::nurture::location::service::proto::InsertLocationResponse* resinsertlocation);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationResponse& _internal_resinsertlocation() const;
  ::farm::nurture::location::service::proto::InsertLocationResponse* _internal_mutable_resinsertlocation();
  public:
  void unsafe_arena_set_allocated_resinsertlocation(
      ::farm::nurture::location::service::proto::InsertLocationResponse* resinsertlocation);
  ::farm::nurture::location::service::proto::InsertLocationResponse* unsafe_arena_release_resinsertlocation();

  // .farm.nurture.location.service.proto.BulkInsertLocationResponse resInsertLocationBulk = 4;
  bool has_resinsertlocationbulk() const;
  private:
  bool _internal_has_resinsertlocationbulk() const;
  public:
  void clear_resinsertlocationbulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationResponse& resinsertlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationResponse* release_resinsertlocationbulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationResponse* mutable_resinsertlocationbulk();
  void set_allocated_resinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationResponse* resinsertlocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationResponse& _internal_resinsertlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationResponse* _internal_mutable_resinsertlocationbulk();
  public:
  void unsafe_arena_set_allocated_resinsertlocationbulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationResponse* resinsertlocationbulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationResponse* unsafe_arena_release_resinsertlocationbulk();

  // .farm.nurture.location.service.proto.InsertLocationS2CellResponse resInsertLocationS2Cell = 5;
  bool has_resinsertlocations2cell() const;
  private:
  bool _internal_has_resinsertlocations2cell() const;
  public:
  void clear_resinsertlocations2cell();
  const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& resinsertlocations2cell() const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* release_resinsertlocations2cell();
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* mutable_resinsertlocations2cell();
  void set_allocated_resinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resinsertlocations2cell);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& _internal_resinsertlocations2cell() const;
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* _internal_mutable_resinsertlocations2cell();
  public:
  void unsafe_arena_set_allocated_resinsertlocations2cell(
      ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resinsertlocations2cell);
  ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* unsafe_arena_release_resinsertlocations2cell();

  // .farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse resInsertLocationS2CellBulk = 6;
  bool has_resinsertlocations2cellbulk() const;
  private:
  bool _internal_has_resinsertlocations2cellbulk() const;
  public:
  void clear_resinsertlocations2cellbulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse& resinsertlocations2cellbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* release_resinsertlocations2cellbulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* mutable_resinsertlocations2cellbulk();
  void set_allocated_resinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resinsertlocations2cellbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse& _internal_resinsertlocations2cellbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* _internal_mutable_resinsertlocations2cellbulk();
  public:
  void unsafe_arena_set_allocated_resinsertlocations2cellbulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resinsertlocations2cellbulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* unsafe_arena_release_resinsertlocations2cellbulk();

  // .farm.nurture.location.service.proto.InsertConfigResponse resInsertConfig = 7;
  bool has_resinsertconfig() const;
  private:
  bool _internal_has_resinsertconfig() const;
  public:
  void clear_resinsertconfig();
  const ::farm::nurture::location::service::proto::InsertConfigResponse& resinsertconfig() const;
  ::farm::nurture::location::service::proto::InsertConfigResponse* release_resinsertconfig();
  ::farm::nurture::location::service::proto::InsertConfigResponse* mutable_resinsertconfig();
  void set_allocated_resinsertconfig(::farm::nurture::location::service::proto::InsertConfigResponse* resinsertconfig);
  private:
  const ::farm::nurture::location::service::proto::InsertConfigResponse& _internal_resinsertconfig() const;
  ::farm::nurture::location::service::proto::InsertConfigResponse* _internal_mutable_resinsertconfig();
  public:
  void unsafe_arena_set_allocated_resinsertconfig(
      ::farm::nurture::location::service::proto::InsertConfigResponse* resinsertconfig);
  ::farm::nurture::location::service::proto::InsertConfigResponse* unsafe_arena_release_resinsertconfig();

  // .farm.nurture.location.service.proto.BulkInsertConfigResponse resInsertConfigBulk = 8;
  bool has_resinsertconfigbulk() const;
  private:
  bool _internal_has_resinsertconfigbulk() const;
  public:
  void clear_resinsertconfigbulk();
  const ::farm::nurture::location::service::proto::BulkInsertConfigResponse& resinsertconfigbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertConfigResponse* release_resinsertconfigbulk();
  ::farm::nurture::location::service::proto::BulkInsertConfigResponse* mutable_resinsertconfigbulk();
  void set_allocated_resinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigResponse* resinsertconfigbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertConfigResponse& _internal_resinsertconfigbulk() const;
  ::farm::nurture::location::service::proto::BulkInsertConfigResponse* _internal_mutable_resinsertconfigbulk();
  public:
  void unsafe_arena_set_allocated_resinsertconfigbulk(
      ::farm::nurture::location::service::proto::BulkInsertConfigResponse* resinsertconfigbulk);
  ::farm::nurture::location::service::proto::BulkInsertConfigResponse* unsafe_arena_release_resinsertconfigbulk();

  // .farm.nurture.location.service.proto.Location resFetchLocationById = 9;
  bool has_resfetchlocationbyid() const;
  private:
  bool _internal_has_resfetchlocationbyid() const;
  public:
  void clear_resfetchlocationbyid();
  const ::farm::nurture::location::service::proto::Location& resfetchlocationbyid() const;
  ::farm::nurture::location::service::proto::Location* release_resfetchlocationbyid();
  ::farm::nurture::location::service::proto::Location* mutable_resfetchlocationbyid();
  void set_allocated_resfetchlocationbyid(::farm::nurture::location::service::proto::Location* resfetchlocationbyid);
  private:
  const ::farm::nurture::location::service::proto::Location& _internal_resfetchlocationbyid() const;
  ::farm::nurture::location::service::proto::Location* _internal_mutable_resfetchlocationbyid();
  public:
  void unsafe_arena_set_allocated_resfetchlocationbyid(
      ::farm::nurture::location::service::proto::Location* resfetchlocationbyid);
  ::farm::nurture::location::service::proto::Location* unsafe_arena_release_resfetchlocationbyid();

  // .farm.nurture.location.service.proto.Location resFetchLocationByCodeAndNamespace = 10;
  bool has_resfetchlocationbycodeandnamespace() const;
  private:
  bool _internal_has_resfetchlocationbycodeandnamespace() const;
  public:
  void clear_resfetchlocationbycodeandnamespace();
  const ::farm::nurture::location::service::proto::Location& resfetchlocationbycodeandnamespace() const;
  ::farm::nurture::location::service::proto::Location* release_resfetchlocationbycodeandnamespace();
  ::farm::nurture::location::service::proto::Location* mutable_resfetchlocationbycodeandnamespace();
  void set_allocated_resfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::Location* resfetchlocationbycodeandnamespace);
  private:
  const ::farm::nurture::location::service::proto::Location& _internal_resfetchlocationbycodeandnamespace() const;
  ::farm::nurture::location::service::proto::Location* _internal_mutable_resfetchlocationbycodeandnamespace();
  public:
  void unsafe_arena_set_allocated_resfetchlocationbycodeandnamespace(
      ::farm::nurture::location::service::proto::Location* resfetchlocationbycodeandnamespace);
  ::farm::nurture::location::service::proto::Location* unsafe_arena_release_resfetchlocationbycodeandnamespace();

  // .farm.nurture.location.service.proto.S2Cell resFetchS2CellById = 11;
  bool has_resfetchs2cellbyid() const;
  private:
  bool _internal_has_resfetchs2cellbyid() const;
  public:
  void clear_resfetchs2cellbyid();
  const ::farm::nurture::location::service::proto::S2Cell& resfetchs2cellbyid() const;
  ::farm::nurture::location::service::proto::S2Cell* release_resfetchs2cellbyid();
  ::farm::nurture::location::service::proto::S2Cell* mutable_resfetchs2cellbyid();
  void set_allocated_resfetchs2cellbyid(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbyid);
  private:
  const ::farm::nurture::location::service::proto::S2Cell& _internal_resfetchs2cellbyid() const;
  ::farm::nurture::location::service::proto::S2Cell* _internal_mutable_resfetchs2cellbyid();
  public:
  void unsafe_arena_set_allocated_resfetchs2cellbyid(
      ::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbyid);
  ::farm::nurture::location::service::proto::S2Cell* unsafe_arena_release_resfetchs2cellbyid();

  // .farm.nurture.location.service.proto.S2Cell resFetchS2CellByLocation = 12;
  bool has_resfetchs2cellbylocation() const;
  private:
  bool _internal_has_resfetchs2cellbylocation() const;
  public:
  void clear_resfetchs2cellbylocation();
  const ::farm::nurture::location::service::proto::S2Cell& resfetchs2cellbylocation() const;
  ::farm::nurture::location::service::proto::S2Cell* release_resfetchs2cellbylocation();
  ::farm::nurture::location::service::proto::S2Cell* mutable_resfetchs2cellbylocation();
  void set_allocated_resfetchs2cellbylocation(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbylocation);
  private:
  const ::farm::nurture::location::service::proto::S2Cell& _internal_resfetchs2cellbylocation() const;
  ::farm::nurture::location::service::proto::S2Cell* _internal_mutable_resfetchs2cellbylocation();
  public:
  void unsafe_arena_set_allocated_resfetchs2cellbylocation(
      ::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbylocation);
  ::farm::nurture::location::service::proto::S2Cell* unsafe_arena_release_resfetchs2cellbylocation();

  // .farm.nurture.location.service.proto.LocationS2Cells resFetchS2CellByLocationId = 13;
  bool has_resfetchs2cellbylocationid() const;
  private:
  bool _internal_has_resfetchs2cellbylocationid() const;
  public:
  void clear_resfetchs2cellbylocationid();
  const ::farm::nurture::location::service::proto::LocationS2Cells& resfetchs2cellbylocationid() const;
  ::farm::nurture::location::service::proto::LocationS2Cells* release_resfetchs2cellbylocationid();
  ::farm::nurture::location::service::proto::LocationS2Cells* mutable_resfetchs2cellbylocationid();
  void set_allocated_resfetchs2cellbylocationid(::farm::nurture::location::service::proto::LocationS2Cells* resfetchs2cellbylocationid);
  private:
  const ::farm::nurture::location::service::proto::LocationS2Cells& _internal_resfetchs2cellbylocationid() const;
  ::farm::nurture::location::service::proto::LocationS2Cells* _internal_mutable_resfetchs2cellbylocationid();
  public:
  void unsafe_arena_set_allocated_resfetchs2cellbylocationid(
      ::farm::nurture::location::service::proto::LocationS2Cells* resfetchs2cellbylocationid);
  ::farm::nurture::location::service::proto::LocationS2Cells* unsafe_arena_release_resfetchs2cellbylocationid();

  // .farm.nurture.location.service.proto.UpdateLocationByIdResponse resUpdateLocationById = 14;
  bool has_resupdatelocationbyid() const;
  private:
  bool _internal_has_resupdatelocationbyid() const;
  public:
  void clear_resupdatelocationbyid();
  const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& resupdatelocationbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* release_resupdatelocationbyid();
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* mutable_resupdatelocationbyid();
  void set_allocated_resupdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resupdatelocationbyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& _internal_resupdatelocationbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* _internal_mutable_resupdatelocationbyid();
  public:
  void unsafe_arena_set_allocated_resupdatelocationbyid(
      ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resupdatelocationbyid);
  ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* unsafe_arena_release_resupdatelocationbyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse resUpdateLocationByIdBulk = 15;
  bool has_resupdatelocationbyidbulk() const;
  private:
  bool _internal_has_resupdatelocationbyidbulk() const;
  public:
  void clear_resupdatelocationbyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse& resupdatelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* release_resupdatelocationbyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* mutable_resupdatelocationbyidbulk();
  void set_allocated_resupdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resupdatelocationbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse& _internal_resupdatelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* _internal_mutable_resupdatelocationbyidbulk();
  public:
  void unsafe_arena_set_allocated_resupdatelocationbyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resupdatelocationbyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* unsafe_arena_release_resupdatelocationbyidbulk();

  // .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse resUpdateLocationLabelById = 16;
  bool has_resupdatelocationlabelbyid() const;
  private:
  bool _internal_has_resupdatelocationlabelbyid() const;
  public:
  void clear_resupdatelocationlabelbyid();
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& resupdatelocationlabelbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* release_resupdatelocationlabelbyid();
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* mutable_resupdatelocationlabelbyid();
  void set_allocated_resupdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resupdatelocationlabelbyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& _internal_resupdatelocationlabelbyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* _internal_mutable_resupdatelocationlabelbyid();
  public:
  void unsafe_arena_set_allocated_resupdatelocationlabelbyid(
      ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resupdatelocationlabelbyid);
  ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* unsafe_arena_release_resupdatelocationlabelbyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse resUpdateLocationLabelByIdBulk = 17;
  bool has_resupdatelocationlabelbyidbulk() const;
  private:
  bool _internal_has_resupdatelocationlabelbyidbulk() const;
  public:
  void clear_resupdatelocationlabelbyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse& resupdatelocationlabelbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* release_resupdatelocationlabelbyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* mutable_resupdatelocationlabelbyidbulk();
  void set_allocated_resupdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resupdatelocationlabelbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse& _internal_resupdatelocationlabelbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* _internal_mutable_resupdatelocationlabelbyidbulk();
  public:
  void unsafe_arena_set_allocated_resupdatelocationlabelbyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resupdatelocationlabelbyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* unsafe_arena_release_resupdatelocationlabelbyidbulk();

  // .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocation = 18;
  bool has_resupdatedeletes2cellbylocation() const;
  private:
  bool _internal_has_resupdatedeletes2cellbylocation() const;
  public:
  void clear_resupdatedeletes2cellbylocation();
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& resupdatedeletes2cellbylocation() const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* release_resupdatedeletes2cellbylocation();
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* mutable_resupdatedeletes2cellbylocation();
  void set_allocated_resupdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocation);
  private:
  const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& _internal_resupdatedeletes2cellbylocation() const;
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* _internal_mutable_resupdatedeletes2cellbylocation();
  public:
  void unsafe_arena_set_allocated_resupdatedeletes2cellbylocation(
      ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocation);
  ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* unsafe_arena_release_resupdatedeletes2cellbylocation();

  // .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocationBulk = 19;
  bool has_resupdatedeletes2cellbylocationbulk() const;
  private:
  bool _internal_has_resupdatedeletes2cellbylocationbulk() const;
  public:
  void clear_resupdatedeletes2cellbylocationbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse& resupdatedeletes2cellbylocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* release_resupdatedeletes2cellbylocationbulk();
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* mutable_resupdatedeletes2cellbylocationbulk();
  void set_allocated_resupdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse& _internal_resupdatedeletes2cellbylocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* _internal_mutable_resupdatedeletes2cellbylocationbulk();
  public:
  void unsafe_arena_set_allocated_resupdatedeletes2cellbylocationbulk(
      ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocationbulk);
  ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* unsafe_arena_release_resupdatedeletes2cellbylocationbulk();

  // .farm.nurture.location.service.proto.Config resFetchConfigById = 20;
  bool has_resfetchconfigbyid() const;
  private:
  bool _internal_has_resfetchconfigbyid() const;
  public:
  void clear_resfetchconfigbyid();
  const ::farm::nurture::location::service::proto::Config& resfetchconfigbyid() const;
  ::farm::nurture::location::service::proto::Config* release_resfetchconfigbyid();
  ::farm::nurture::location::service::proto::Config* mutable_resfetchconfigbyid();
  void set_allocated_resfetchconfigbyid(::farm::nurture::location::service::proto::Config* resfetchconfigbyid);
  private:
  const ::farm::nurture::location::service::proto::Config& _internal_resfetchconfigbyid() const;
  ::farm::nurture::location::service::proto::Config* _internal_mutable_resfetchconfigbyid();
  public:
  void unsafe_arena_set_allocated_resfetchconfigbyid(
      ::farm::nurture::location::service::proto::Config* resfetchconfigbyid);
  ::farm::nurture::location::service::proto::Config* unsafe_arena_release_resfetchconfigbyid();

  // .farm.nurture.location.service.proto.AddLocationResponse resAddLocation = 21;
  bool has_resaddlocation() const;
  private:
  bool _internal_has_resaddlocation() const;
  public:
  void clear_resaddlocation();
  const ::farm::nurture::location::service::proto::AddLocationResponse& resaddlocation() const;
  ::farm::nurture::location::service::proto::AddLocationResponse* release_resaddlocation();
  ::farm::nurture::location::service::proto::AddLocationResponse* mutable_resaddlocation();
  void set_allocated_resaddlocation(::farm::nurture::location::service::proto::AddLocationResponse* resaddlocation);
  private:
  const ::farm::nurture::location::service::proto::AddLocationResponse& _internal_resaddlocation() const;
  ::farm::nurture::location::service::proto::AddLocationResponse* _internal_mutable_resaddlocation();
  public:
  void unsafe_arena_set_allocated_resaddlocation(
      ::farm::nurture::location::service::proto::AddLocationResponse* resaddlocation);
  ::farm::nurture::location::service::proto::AddLocationResponse* unsafe_arena_release_resaddlocation();

  // .farm.nurture.location.service.proto.BulkAddLocationResponse resAddLocationBulk = 22;
  bool has_resaddlocationbulk() const;
  private:
  bool _internal_has_resaddlocationbulk() const;
  public:
  void clear_resaddlocationbulk();
  const ::farm::nurture::location::service::proto::BulkAddLocationResponse& resaddlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkAddLocationResponse* release_resaddlocationbulk();
  ::farm::nurture::location::service::proto::BulkAddLocationResponse* mutable_resaddlocationbulk();
  void set_allocated_resaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationResponse* resaddlocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkAddLocationResponse& _internal_resaddlocationbulk() const;
  ::farm::nurture::location::service::proto::BulkAddLocationResponse* _internal_mutable_resaddlocationbulk();
  public:
  void unsafe_arena_set_allocated_resaddlocationbulk(
      ::farm::nurture::location::service::proto::BulkAddLocationResponse* resaddlocationbulk);
  ::farm::nurture::location::service::proto::BulkAddLocationResponse* unsafe_arena_release_resaddlocationbulk();

  // .farm.nurture.location.service.proto.UpdateLocationResponse resUpdateLocation = 23;
  bool has_resupdatelocation() const;
  private:
  bool _internal_has_resupdatelocation() const;
  public:
  void clear_resupdatelocation();
  const ::farm::nurture::location::service::proto::UpdateLocationResponse& resupdatelocation() const;
  ::farm::nurture::location::service::proto::UpdateLocationResponse* release_resupdatelocation();
  ::farm::nurture::location::service::proto::UpdateLocationResponse* mutable_resupdatelocation();
  void set_allocated_resupdatelocation(::farm::nurture::location::service::proto::UpdateLocationResponse* resupdatelocation);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationResponse& _internal_resupdatelocation() const;
  ::farm::nurture::location::service::proto::UpdateLocationResponse* _internal_mutable_resupdatelocation();
  public:
  void unsafe_arena_set_allocated_resupdatelocation(
      ::farm::nurture::location::service::proto::UpdateLocationResponse* resupdatelocation);
  ::farm::nurture::location::service::proto::UpdateLocationResponse* unsafe_arena_release_resupdatelocation();

  // .farm.nurture.location.service.proto.BulkUpdateLocationResponse resUpdateLocationBulk = 24;
  bool has_resupdatelocationbulk() const;
  private:
  bool _internal_has_resupdatelocationbulk() const;
  public:
  void clear_resupdatelocationbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse& resupdatelocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* release_resupdatelocationbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* mutable_resupdatelocationbulk();
  void set_allocated_resupdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resupdatelocationbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse& _internal_resupdatelocationbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* _internal_mutable_resupdatelocationbulk();
  public:
  void unsafe_arena_set_allocated_resupdatelocationbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resupdatelocationbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* unsafe_arena_release_resupdatelocationbulk();

  // .farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse resGetLocationsWithBoundary = 25;
  bool has_resgetlocationswithboundary() const;
  private:
  bool _internal_has_resgetlocationswithboundary() const;
  public:
  void clear_resgetlocationswithboundary();
  const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse& resgetlocationswithboundary() const;
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* release_resgetlocationswithboundary();
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* mutable_resgetlocationswithboundary();
  void set_allocated_resgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resgetlocationswithboundary);
  private:
  const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse& _internal_resgetlocationswithboundary() const;
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* _internal_mutable_resgetlocationswithboundary();
  public:
  void unsafe_arena_set_allocated_resgetlocationswithboundary(
      ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resgetlocationswithboundary);
  ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* unsafe_arena_release_resgetlocationswithboundary();

  // .farm.nurture.location.service.proto.GetLocationsResponse resGetLocations = 26;
  bool has_resgetlocations() const;
  private:
  bool _internal_has_resgetlocations() const;
  public:
  void clear_resgetlocations();
  const ::farm::nurture::location::service::proto::GetLocationsResponse& resgetlocations() const;
  ::farm::nurture::location::service::proto::GetLocationsResponse* release_resgetlocations();
  ::farm::nurture::location::service::proto::GetLocationsResponse* mutable_resgetlocations();
  void set_allocated_resgetlocations(::farm::nurture::location::service::proto::GetLocationsResponse* resgetlocations);
  private:
  const ::farm::nurture::location::service::proto::GetLocationsResponse& _internal_resgetlocations() const;
  ::farm::nurture::location::service::proto::GetLocationsResponse* _internal_mutable_resgetlocations();
  public:
  void unsafe_arena_set_allocated_resgetlocations(
      ::farm::nurture::location::service::proto::GetLocationsResponse* resgetlocations);
  ::farm::nurture::location::service::proto::GetLocationsResponse* unsafe_arena_release_resgetlocations();

  // .farm.nurture.location.service.proto.GetChildGeographiesResponse resGetChildGeographies = 27;
  bool has_resgetchildgeographies() const;
  private:
  bool _internal_has_resgetchildgeographies() const;
  public:
  void clear_resgetchildgeographies();
  const ::farm::nurture::location::service::proto::GetChildGeographiesResponse& resgetchildgeographies() const;
  ::farm::nurture::location::service::proto::GetChildGeographiesResponse* release_resgetchildgeographies();
  ::farm::nurture::location::service::proto::GetChildGeographiesResponse* mutable_resgetchildgeographies();
  void set_allocated_resgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesResponse* resgetchildgeographies);
  private:
  const ::farm::nurture::location::service::proto::GetChildGeographiesResponse& _internal_resgetchildgeographies() const;
  ::farm::nurture::location::service::proto::GetChildGeographiesResponse* _internal_mutable_resgetchildgeographies();
  public:
  void unsafe_arena_set_allocated_resgetchildgeographies(
      ::farm::nurture::location::service::proto::GetChildGeographiesResponse* resgetchildgeographies);
  ::farm::nurture::location::service::proto::GetChildGeographiesResponse* unsafe_arena_release_resgetchildgeographies();

  // .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundary = 28;
  bool has_resinsertlocationwithoutboundary() const;
  private:
  bool _internal_has_resinsertlocationwithoutboundary() const;
  public:
  void clear_resinsertlocationwithoutboundary();
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& resinsertlocationwithoutboundary() const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* release_resinsertlocationwithoutboundary();
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* mutable_resinsertlocationwithoutboundary();
  void set_allocated_resinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundary);
  private:
  const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& _internal_resinsertlocationwithoutboundary() const;
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* _internal_mutable_resinsertlocationwithoutboundary();
  public:
  void unsafe_arena_set_allocated_resinsertlocationwithoutboundary(
      ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundary);
  ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* unsafe_arena_release_resinsertlocationwithoutboundary();

  // .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundaryBulk = 29;
  bool has_resinsertlocationwithoutboundarybulk() const;
  private:
  bool _internal_has_resinsertlocationwithoutboundarybulk() const;
  public:
  void clear_resinsertlocationwithoutboundarybulk();
  const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse& resinsertlocationwithoutboundarybulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* release_resinsertlocationwithoutboundarybulk();
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* mutable_resinsertlocationwithoutboundarybulk();
  void set_allocated_resinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundarybulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse& _internal_resinsertlocationwithoutboundarybulk() const;
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* _internal_mutable_resinsertlocationwithoutboundarybulk();
  public:
  void unsafe_arena_set_allocated_resinsertlocationwithoutboundarybulk(
      ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundarybulk);
  ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* unsafe_arena_release_resinsertlocationwithoutboundarybulk();

  // .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryById = 30;
  bool has_resupdatelocationwithoutboundarybyid() const;
  private:
  bool _internal_has_resupdatelocationwithoutboundarybyid() const;
  public:
  void clear_resupdatelocationwithoutboundarybyid();
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& resupdatelocationwithoutboundarybyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* release_resupdatelocationwithoutboundarybyid();
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* mutable_resupdatelocationwithoutboundarybyid();
  void set_allocated_resupdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyid);
  private:
  const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& _internal_resupdatelocationwithoutboundarybyid() const;
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* _internal_mutable_resupdatelocationwithoutboundarybyid();
  public:
  void unsafe_arena_set_allocated_resupdatelocationwithoutboundarybyid(
      ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyid);
  ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* unsafe_arena_release_resupdatelocationwithoutboundarybyid();

  // .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryByIdBulk = 31;
  bool has_resupdatelocationwithoutboundarybyidbulk() const;
  private:
  bool _internal_has_resupdatelocationwithoutboundarybyidbulk() const;
  public:
  void clear_resupdatelocationwithoutboundarybyidbulk();
  const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse& resupdatelocationwithoutboundarybyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* release_resupdatelocationwithoutboundarybyidbulk();
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* mutable_resupdatelocationwithoutboundarybyidbulk();
  void set_allocated_resupdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse& _internal_resupdatelocationwithoutboundarybyidbulk() const;
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* _internal_mutable_resupdatelocationwithoutboundarybyidbulk();
  public:
  void unsafe_arena_set_allocated_resupdatelocationwithoutboundarybyidbulk(
      ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyidbulk);
  ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* unsafe_arena_release_resupdatelocationwithoutboundarybyidbulk();

  // .farm.nurture.location.service.proto.DeleteLocationByIdResponse resDeleteLocationById = 32;
  bool has_resdeletelocationbyid() const;
  private:
  bool _internal_has_resdeletelocationbyid() const;
  public:
  void clear_resdeletelocationbyid();
  const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& resdeletelocationbyid() const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* release_resdeletelocationbyid();
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* mutable_resdeletelocationbyid();
  void set_allocated_resdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resdeletelocationbyid);
  private:
  const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& _internal_resdeletelocationbyid() const;
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* _internal_mutable_resdeletelocationbyid();
  public:
  void unsafe_arena_set_allocated_resdeletelocationbyid(
      ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resdeletelocationbyid);
  ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* unsafe_arena_release_resdeletelocationbyid();

  // .farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse resDeleteLocationByIdBulk = 33;
  bool has_resdeletelocationbyidbulk() const;
  private:
  bool _internal_has_resdeletelocationbyidbulk() const;
  public:
  void clear_resdeletelocationbyidbulk();
  const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse& resdeletelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* release_resdeletelocationbyidbulk();
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* mutable_resdeletelocationbyidbulk();
  void set_allocated_resdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resdeletelocationbyidbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse& _internal_resdeletelocationbyidbulk() const;
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* _internal_mutable_resdeletelocationbyidbulk();
  public:
  void unsafe_arena_set_allocated_resdeletelocationbyidbulk(
      ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resdeletelocationbyidbulk);
  ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* unsafe_arena_release_resdeletelocationbyidbulk();

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesResponse resFetchDuplicateVillages = 34;
  bool has_resfetchduplicatevillages() const;
  private:
  bool _internal_has_resfetchduplicatevillages() const;
  public:
  void clear_resfetchduplicatevillages();
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse& resfetchduplicatevillages() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* release_resfetchduplicatevillages();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* mutable_resfetchduplicatevillages();
  void set_allocated_resfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* resfetchduplicatevillages);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse& _internal_resfetchduplicatevillages() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* _internal_mutable_resfetchduplicatevillages();
  public:
  void unsafe_arena_set_allocated_resfetchduplicatevillages(
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* resfetchduplicatevillages);
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* unsafe_arena_release_resfetchduplicatevillages();

  // .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse resFetchDuplicateVillagesBySDTVLatLong = 35;
  bool has_resfetchduplicatevillagesbysdtvlatlong() const;
  private:
  bool _internal_has_resfetchduplicatevillagesbysdtvlatlong() const;
  public:
  void clear_resfetchduplicatevillagesbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse& resfetchduplicatevillagesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* release_resfetchduplicatevillagesbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* mutable_resfetchduplicatevillagesbysdtvlatlong();
  void set_allocated_resfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* resfetchduplicatevillagesbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse& _internal_resfetchduplicatevillagesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* _internal_mutable_resfetchduplicatevillagesbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_resfetchduplicatevillagesbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* resfetchduplicatevillagesbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* unsafe_arena_release_resfetchduplicatevillagesbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse resFetchDuplicateTehsilsBySDTVLatLong = 36;
  bool has_resfetchduplicatetehsilsbysdtvlatlong() const;
  private:
  bool _internal_has_resfetchduplicatetehsilsbysdtvlatlong() const;
  public:
  void clear_resfetchduplicatetehsilsbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse& resfetchduplicatetehsilsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* release_resfetchduplicatetehsilsbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* mutable_resfetchduplicatetehsilsbysdtvlatlong();
  void set_allocated_resfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* resfetchduplicatetehsilsbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse& _internal_resfetchduplicatetehsilsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* _internal_mutable_resfetchduplicatetehsilsbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_resfetchduplicatetehsilsbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* resfetchduplicatetehsilsbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* unsafe_arena_release_resfetchduplicatetehsilsbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse resFetchDuplicateDistrictsBySDTVLatLong = 37;
  bool has_resfetchduplicatedistrictsbysdtvlatlong() const;
  private:
  bool _internal_has_resfetchduplicatedistrictsbysdtvlatlong() const;
  public:
  void clear_resfetchduplicatedistrictsbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse& resfetchduplicatedistrictsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* release_resfetchduplicatedistrictsbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* mutable_resfetchduplicatedistrictsbysdtvlatlong();
  void set_allocated_resfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* resfetchduplicatedistrictsbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse& _internal_resfetchduplicatedistrictsbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* _internal_mutable_resfetchduplicatedistrictsbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_resfetchduplicatedistrictsbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* resfetchduplicatedistrictsbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* unsafe_arena_release_resfetchduplicatedistrictsbysdtvlatlong();

  // .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse resFetchDuplicateStatesBySDTVLatLong = 38;
  bool has_resfetchduplicatestatesbysdtvlatlong() const;
  private:
  bool _internal_has_resfetchduplicatestatesbysdtvlatlong() const;
  public:
  void clear_resfetchduplicatestatesbysdtvlatlong();
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse& resfetchduplicatestatesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* release_resfetchduplicatestatesbysdtvlatlong();
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* mutable_resfetchduplicatestatesbysdtvlatlong();
  void set_allocated_resfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* resfetchduplicatestatesbysdtvlatlong);
  private:
  const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse& _internal_resfetchduplicatestatesbysdtvlatlong() const;
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* _internal_mutable_resfetchduplicatestatesbysdtvlatlong();
  public:
  void unsafe_arena_set_allocated_resfetchduplicatestatesbysdtvlatlong(
      ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* resfetchduplicatestatesbysdtvlatlong);
  ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* unsafe_arena_release_resfetchduplicatestatesbysdtvlatlong();

  // .farm.nurture.location.service.proto.GetDuplicateGeographiesResponse resGetDuplicateGeographies = 39;
  bool has_resgetduplicategeographies() const;
  private:
  bool _internal_has_resgetduplicategeographies() const;
  public:
  void clear_resgetduplicategeographies();
  const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse& resgetduplicategeographies() const;
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* release_resgetduplicategeographies();
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* mutable_resgetduplicategeographies();
  void set_allocated_resgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* resgetduplicategeographies);
  private:
  const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse& _internal_resgetduplicategeographies() const;
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* _internal_mutable_resgetduplicategeographies();
  public:
  void unsafe_arena_set_allocated_resgetduplicategeographies(
      ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* resgetduplicategeographies);
  ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* unsafe_arena_release_resgetduplicategeographies();

  // .farm.nurture.location.service.proto.InsertVendorLocationDataResponse resInsertVendorLocationData = 40;
  bool has_resinsertvendorlocationdata() const;
  private:
  bool _internal_has_resinsertvendorlocationdata() const;
  public:
  void clear_resinsertvendorlocationdata();
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& resinsertvendorlocationdata() const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* release_resinsertvendorlocationdata();
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* mutable_resinsertvendorlocationdata();
  void set_allocated_resinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* resinsertvendorlocationdata);
  private:
  const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& _internal_resinsertvendorlocationdata() const;
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* _internal_mutable_resinsertvendorlocationdata();
  public:
  void unsafe_arena_set_allocated_resinsertvendorlocationdata(
      ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* resinsertvendorlocationdata);
  ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* unsafe_arena_release_resinsertvendorlocationdata();

  // .farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse resInsertVendorLocationDataBulk = 41;
  bool has_resinsertvendorlocationdatabulk() const;
  private:
  bool _internal_has_resinsertvendorlocationdatabulk() const;
  public:
  void clear_resinsertvendorlocationdatabulk();
  const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse& resinsertvendorlocationdatabulk() const;
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* release_resinsertvendorlocationdatabulk();
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* mutable_resinsertvendorlocationdatabulk();
  void set_allocated_resinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* resinsertvendorlocationdatabulk);
  private:
  const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse& _internal_resinsertvendorlocationdatabulk() const;
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* _internal_mutable_resinsertvendorlocationdatabulk();
  public:
  void unsafe_arena_set_allocated_resinsertvendorlocationdatabulk(
      ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* resinsertvendorlocationdatabulk);
  ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* unsafe_arena_release_resinsertvendorlocationdatabulk();

  // .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse resSearchVendorLocationsByGeohash = 42;
  bool has_ressearchvendorlocationsbygeohash() const;
  private:
  bool _internal_has_ressearchvendorlocationsbygeohash() const;
  public:
  void clear_ressearchvendorlocationsbygeohash();
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse& ressearchvendorlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* release_ressearchvendorlocationsbygeohash();
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* mutable_ressearchvendorlocationsbygeohash();
  void set_allocated_ressearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* ressearchvendorlocationsbygeohash);
  private:
  const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse& _internal_ressearchvendorlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* _internal_mutable_ressearchvendorlocationsbygeohash();
  public:
  void unsafe_arena_set_allocated_ressearchvendorlocationsbygeohash(
      ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* ressearchvendorlocationsbygeohash);
  ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* unsafe_arena_release_ressearchvendorlocationsbygeohash();

  // .farm.nurture.location.service.proto.SearchLocationsByGeohashResponse resSearchLocationsByGeohash = 43;
  bool has_ressearchlocationsbygeohash() const;
  private:
  bool _internal_has_ressearchlocationsbygeohash() const;
  public:
  void clear_ressearchlocationsbygeohash();
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse& ressearchlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* release_ressearchlocationsbygeohash();
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* mutable_ressearchlocationsbygeohash();
  void set_allocated_ressearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* ressearchlocationsbygeohash);
  private:
  const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse& _internal_ressearchlocationsbygeohash() const;
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* _internal_mutable_ressearchlocationsbygeohash();
  public:
  void unsafe_arena_set_allocated_ressearchlocationsbygeohash(
      ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* ressearchlocationsbygeohash);
  ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* unsafe_arena_release_ressearchlocationsbygeohash();

  // .farm.nurture.location.service.proto.GetLocationDataByLatLngResponse resGetLocationDataByLatLng = 44;
  bool has_resgetlocationdatabylatlng() const;
  private:
  bool _internal_has_resgetlocationdatabylatlng() const;
  public:
  void clear_resgetlocationdatabylatlng();
  const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse& resgetlocationdatabylatlng() const;
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* release_resgetlocationdatabylatlng();
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* mutable_resgetlocationdatabylatlng();
  void set_allocated_resgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* resgetlocationdatabylatlng);
  private:
  const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse& _internal_resgetlocationdatabylatlng() const;
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* _internal_mutable_resgetlocationdatabylatlng();
  public:
  void unsafe_arena_set_allocated_resgetlocationdatabylatlng(
      ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* resgetlocationdatabylatlng);
  ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* unsafe_arena_release_resgetlocationdatabylatlng();

  // .farm.nurture.location.service.proto.AddVendorApiLedgerResponse resAddVendorApiLedger = 45;
  bool has_resaddvendorapiledger() const;
  private:
  bool _internal_has_resaddvendorapiledger() const;
  public:
  void clear_resaddvendorapiledger();
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& resaddvendorapiledger() const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* release_resaddvendorapiledger();
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* mutable_resaddvendorapiledger();
  void set_allocated_resaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* resaddvendorapiledger);
  private:
  const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& _internal_resaddvendorapiledger() const;
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* _internal_mutable_resaddvendorapiledger();
  public:
  void unsafe_arena_set_allocated_resaddvendorapiledger(
      ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* resaddvendorapiledger);
  ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* unsafe_arena_release_resaddvendorapiledger();

  // .farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse resAddVendorApiLedgerBulk = 46;
  bool has_resaddvendorapiledgerbulk() const;
  private:
  bool _internal_has_resaddvendorapiledgerbulk() const;
  public:
  void clear_resaddvendorapiledgerbulk();
  const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse& resaddvendorapiledgerbulk() const;
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* release_resaddvendorapiledgerbulk();
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* mutable_resaddvendorapiledgerbulk();
  void set_allocated_resaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* resaddvendorapiledgerbulk);
  private:
  const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse& _internal_resaddvendorapiledgerbulk() const;
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* _internal_mutable_resaddvendorapiledgerbulk();
  public:
  void unsafe_arena_set_allocated_resaddvendorapiledgerbulk(
      ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* resaddvendorapiledgerbulk);
  ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* unsafe_arena_release_resaddvendorapiledgerbulk();

  void clear_AResponse();
  AResponseCase AResponse_case() const;
  // @@protoc_insertion_point(class_scope:farm.nurture.location.service.proto.Response)
 private:
  class _Internal;
  void set_has_resinsertlocation();
  void set_has_resinsertlocationbulk();
  void set_has_resinsertlocations2cell();
  void set_has_resinsertlocations2cellbulk();
  void set_has_resinsertconfig();
  void set_has_resinsertconfigbulk();
  void set_has_resfetchlocationbyid();
  void set_has_resfetchlocationbycodeandnamespace();
  void set_has_resfetchs2cellbyid();
  void set_has_resfetchs2cellbylocation();
  void set_has_resfetchs2cellbylocationid();
  void set_has_resupdatelocationbyid();
  void set_has_resupdatelocationbyidbulk();
  void set_has_resupdatelocationlabelbyid();
  void set_has_resupdatelocationlabelbyidbulk();
  void set_has_resupdatedeletes2cellbylocation();
  void set_has_resupdatedeletes2cellbylocationbulk();
  void set_has_resfetchconfigbyid();
  void set_has_resaddlocation();
  void set_has_resaddlocationbulk();
  void set_has_resupdatelocation();
  void set_has_resupdatelocationbulk();
  void set_has_resgetlocationswithboundary();
  void set_has_resgetlocations();
  void set_has_resgetchildgeographies();
  void set_has_resinsertlocationwithoutboundary();
  void set_has_resinsertlocationwithoutboundarybulk();
  void set_has_resupdatelocationwithoutboundarybyid();
  void set_has_resupdatelocationwithoutboundarybyidbulk();
  void set_has_resdeletelocationbyid();
  void set_has_resdeletelocationbyidbulk();
  void set_has_resfetchduplicatevillages();
  void set_has_resfetchduplicatevillagesbysdtvlatlong();
  void set_has_resfetchduplicatetehsilsbysdtvlatlong();
  void set_has_resfetchduplicatedistrictsbysdtvlatlong();
  void set_has_resfetchduplicatestatesbysdtvlatlong();
  void set_has_resgetduplicategeographies();
  void set_has_resinsertvendorlocationdata();
  void set_has_resinsertvendorlocationdatabulk();
  void set_has_ressearchvendorlocationsbygeohash();
  void set_has_ressearchlocationsbygeohash();
  void set_has_resgetlocationdatabylatlng();
  void set_has_resaddvendorapiledger();
  void set_has_resaddvendorapiledgerbulk();

  inline bool has_AResponse() const;
  inline void clear_has_AResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::farm::nurture::core::contracts::common::RequestStatusResult* status_;
  union AResponseUnion {
    AResponseUnion() {}
    ::farm::nurture::location::service::proto::InsertLocationResponse* resinsertlocation_;
    ::farm::nurture::location::service::proto::BulkInsertLocationResponse* resinsertlocationbulk_;
    ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resinsertlocations2cell_;
    ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resinsertlocations2cellbulk_;
    ::farm::nurture::location::service::proto::InsertConfigResponse* resinsertconfig_;
    ::farm::nurture::location::service::proto::BulkInsertConfigResponse* resinsertconfigbulk_;
    ::farm::nurture::location::service::proto::Location* resfetchlocationbyid_;
    ::farm::nurture::location::service::proto::Location* resfetchlocationbycodeandnamespace_;
    ::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbyid_;
    ::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbylocation_;
    ::farm::nurture::location::service::proto::LocationS2Cells* resfetchs2cellbylocationid_;
    ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resupdatelocationbyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resupdatelocationbyidbulk_;
    ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resupdatelocationlabelbyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resupdatelocationlabelbyidbulk_;
    ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocation_;
    ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocationbulk_;
    ::farm::nurture::location::service::proto::Config* resfetchconfigbyid_;
    ::farm::nurture::location::service::proto::AddLocationResponse* resaddlocation_;
    ::farm::nurture::location::service::proto::BulkAddLocationResponse* resaddlocationbulk_;
    ::farm::nurture::location::service::proto::UpdateLocationResponse* resupdatelocation_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resupdatelocationbulk_;
    ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resgetlocationswithboundary_;
    ::farm::nurture::location::service::proto::GetLocationsResponse* resgetlocations_;
    ::farm::nurture::location::service::proto::GetChildGeographiesResponse* resgetchildgeographies_;
    ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundary_;
    ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundarybulk_;
    ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyid_;
    ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyidbulk_;
    ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resdeletelocationbyid_;
    ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resdeletelocationbyidbulk_;
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* resfetchduplicatevillages_;
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* resfetchduplicatevillagesbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* resfetchduplicatetehsilsbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* resfetchduplicatedistrictsbysdtvlatlong_;
    ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* resfetchduplicatestatesbysdtvlatlong_;
    ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* resgetduplicategeographies_;
    ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* resinsertvendorlocationdata_;
    ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* resinsertvendorlocationdatabulk_;
    ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* ressearchvendorlocationsbygeohash_;
    ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* ressearchlocationsbygeohash_;
    ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* resgetlocationdatabylatlng_;
    ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* resaddvendorapiledger_;
    ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* resaddvendorapiledgerbulk_;
  } AResponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_LocationService_2flocation_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsertLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool InsertLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool InsertLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void InsertLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void InsertLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.requestHeaders)
}

// int64 id = 2;
inline void InsertLocationRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.id)
  return _internal_id();
}
inline void InsertLocationRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void InsertLocationRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.id)
}

// string name = 3;
inline void InsertLocationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.name)
  return _internal_name();
}
inline void InsertLocationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.name)
}
inline std::string* InsertLocationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& InsertLocationRequest::_internal_name() const {
  return name_.Get();
}
inline void InsertLocationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.name)
}
inline void InsertLocationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.name)
}
inline void InsertLocationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.name)
}
inline std::string* InsertLocationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.name)
}

// string boundary = 4;
inline void InsertLocationRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
  return _internal_boundary();
}
inline void InsertLocationRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
}
inline std::string* InsertLocationRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& InsertLocationRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void InsertLocationRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
}
inline void InsertLocationRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
}
inline void InsertLocationRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
}
inline std::string* InsertLocationRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.boundary)
}

// double centerLatitude = 5;
inline void InsertLocationRequest::clear_centerlatitude() {
  centerlatitude_ = 0;
}
inline double InsertLocationRequest::_internal_centerlatitude() const {
  return centerlatitude_;
}
inline double InsertLocationRequest::centerlatitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.centerLatitude)
  return _internal_centerlatitude();
}
inline void InsertLocationRequest::_internal_set_centerlatitude(double value) {
  
  centerlatitude_ = value;
}
inline void InsertLocationRequest::set_centerlatitude(double value) {
  _internal_set_centerlatitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.centerLatitude)
}

// double centerLongitude = 6;
inline void InsertLocationRequest::clear_centerlongitude() {
  centerlongitude_ = 0;
}
inline double InsertLocationRequest::_internal_centerlongitude() const {
  return centerlongitude_;
}
inline double InsertLocationRequest::centerlongitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.centerLongitude)
  return _internal_centerlongitude();
}
inline void InsertLocationRequest::_internal_set_centerlongitude(double value) {
  
  centerlongitude_ = value;
}
inline void InsertLocationRequest::set_centerlongitude(double value) {
  _internal_set_centerlongitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.centerLongitude)
}

// double area = 7;
inline void InsertLocationRequest::clear_area() {
  area_ = 0;
}
inline double InsertLocationRequest::_internal_area() const {
  return area_;
}
inline double InsertLocationRequest::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.area)
  return _internal_area();
}
inline void InsertLocationRequest::_internal_set_area(double value) {
  
  area_ = value;
}
inline void InsertLocationRequest::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.area)
}

// string labels = 8;
inline void InsertLocationRequest::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.labels)
  return _internal_labels();
}
inline void InsertLocationRequest::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.labels)
}
inline std::string* InsertLocationRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.labels)
  return _internal_mutable_labels();
}
inline const std::string& InsertLocationRequest::_internal_labels() const {
  return labels_.Get();
}
inline void InsertLocationRequest::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.labels)
}
inline void InsertLocationRequest::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.labels)
}
inline void InsertLocationRequest::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.labels)
}
inline std::string* InsertLocationRequest::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.labels)
}

// string namespace = 9;
inline void InsertLocationRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
  return _internal_namespace_();
}
inline void InsertLocationRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
}
inline std::string* InsertLocationRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& InsertLocationRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void InsertLocationRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
}
inline void InsertLocationRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
}
inline void InsertLocationRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
}
inline std::string* InsertLocationRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.namespace)
}

// string code = 10;
inline void InsertLocationRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.code)
  return _internal_code();
}
inline void InsertLocationRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.code)
}
inline std::string* InsertLocationRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.code)
  return _internal_mutable_code();
}
inline const std::string& InsertLocationRequest::_internal_code() const {
  return code_.Get();
}
inline void InsertLocationRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.code)
}
inline void InsertLocationRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.code)
}
inline void InsertLocationRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.code)
}
inline std::string* InsertLocationRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.code)
}

// .farm.nurture.location.service.proto.InsertLocationRequest.Status status = 11;
inline void InsertLocationRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest_Status InsertLocationRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::InsertLocationRequest_Status >(status_);
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest_Status InsertLocationRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.status)
  return _internal_status();
}
inline void InsertLocationRequest::_internal_set_status(::farm::nurture::location::service::proto::InsertLocationRequest_Status value) {
  
  status_ = value;
}
inline void InsertLocationRequest::set_status(::farm::nurture::location::service::proto::InsertLocationRequest_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.status)
}

// string metadata = 12;
inline void InsertLocationRequest::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::metadata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
  return _internal_metadata();
}
inline void InsertLocationRequest::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
}
inline std::string* InsertLocationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& InsertLocationRequest::_internal_metadata() const {
  return metadata_.Get();
}
inline void InsertLocationRequest::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
}
inline void InsertLocationRequest::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
}
inline void InsertLocationRequest::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
}
inline std::string* InsertLocationRequest::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.metadata)
}

// int32 version = 13;
inline void InsertLocationRequest::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.version)
  return _internal_version();
}
inline void InsertLocationRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void InsertLocationRequest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.version)
}

// int32 minS2Level = 14;
inline void InsertLocationRequest::clear_mins2level() {
  mins2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::_internal_mins2level() const {
  return mins2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::mins2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.minS2Level)
  return _internal_mins2level();
}
inline void InsertLocationRequest::_internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins2level_ = value;
}
inline void InsertLocationRequest::set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.minS2Level)
}

// int32 maxS2Level = 15;
inline void InsertLocationRequest::clear_maxs2level() {
  maxs2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::_internal_maxs2level() const {
  return maxs2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationRequest::maxs2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.maxS2Level)
  return _internal_maxs2level();
}
inline void InsertLocationRequest::_internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxs2level_ = value;
}
inline void InsertLocationRequest::set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxs2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.maxS2Level)
}

// int64 createdByActorId = 16;
inline void InsertLocationRequest::clear_createdbyactorid() {
  createdbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::_internal_createdbyactorid() const {
  return createdbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::createdbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorId)
  return _internal_createdbyactorid();
}
inline void InsertLocationRequest::_internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdbyactorid_ = value;
}
inline void InsertLocationRequest::set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorId)
}

// string createdByActorType = 17;
inline void InsertLocationRequest::clear_createdbyactortype() {
  createdbyactortype_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::createdbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
  return _internal_createdbyactortype();
}
inline void InsertLocationRequest::set_createdbyactortype(const std::string& value) {
  _internal_set_createdbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
}
inline std::string* InsertLocationRequest::mutable_createdbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
  return _internal_mutable_createdbyactortype();
}
inline const std::string& InsertLocationRequest::_internal_createdbyactortype() const {
  return createdbyactortype_.Get();
}
inline void InsertLocationRequest::_internal_set_createdbyactortype(const std::string& value) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_createdbyactortype(std::string&& value) {
  
  createdbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
}
inline void InsertLocationRequest::set_createdbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
}
inline void InsertLocationRequest::set_createdbyactortype(const char* value,
    size_t size) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
}
inline std::string* InsertLocationRequest::_internal_mutable_createdbyactortype() {
  
  return createdbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_createdbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
  return createdbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_createdbyactortype(std::string* createdbyactortype) {
  if (createdbyactortype != nullptr) {
    
  } else {
    
  }
  createdbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.createdByActorType)
}

// int64 modifiedByActorId = 18;
inline void InsertLocationRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void InsertLocationRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void InsertLocationRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorId)
}

// string modifiedByActorType = 19;
inline void InsertLocationRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void InsertLocationRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
}
inline std::string* InsertLocationRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& InsertLocationRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void InsertLocationRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
}
inline void InsertLocationRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
}
inline void InsertLocationRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
}
inline std::string* InsertLocationRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.modifiedByActorType)
}

// .farm.nurture.location.service.proto.InsertLocationRequest.Visibility visibility = 20;
inline void InsertLocationRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility InsertLocationRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility InsertLocationRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.visibility)
  return _internal_visibility();
}
inline void InsertLocationRequest::_internal_set_visibility(::farm::nurture::location::service::proto::InsertLocationRequest_Visibility value) {
  
  visibility_ = value;
}
inline void InsertLocationRequest::set_visibility(::farm::nurture::location::service::proto::InsertLocationRequest_Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.visibility)
}

// string geographyUid = 21;
inline void InsertLocationRequest::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
  return _internal_geographyuid();
}
inline void InsertLocationRequest::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
}
inline std::string* InsertLocationRequest::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& InsertLocationRequest::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void InsertLocationRequest::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
}
inline void InsertLocationRequest::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
}
inline void InsertLocationRequest::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
}
inline std::string* InsertLocationRequest::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.geographyUid)
}

// string pincode = 22;
inline void InsertLocationRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
  return _internal_pincode();
}
inline void InsertLocationRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
}
inline std::string* InsertLocationRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& InsertLocationRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void InsertLocationRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
}
inline void InsertLocationRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
}
inline void InsertLocationRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
}
inline std::string* InsertLocationRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.pincode)
}

// string latLongGeohash = 23;
inline void InsertLocationRequest::clear_latlonggeohash() {
  latlonggeohash_.ClearToEmpty();
}
inline const std::string& InsertLocationRequest::latlonggeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
  return _internal_latlonggeohash();
}
inline void InsertLocationRequest::set_latlonggeohash(const std::string& value) {
  _internal_set_latlonggeohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
}
inline std::string* InsertLocationRequest::mutable_latlonggeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
  return _internal_mutable_latlonggeohash();
}
inline const std::string& InsertLocationRequest::_internal_latlonggeohash() const {
  return latlonggeohash_.Get();
}
inline void InsertLocationRequest::_internal_set_latlonggeohash(const std::string& value) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationRequest::set_latlonggeohash(std::string&& value) {
  
  latlonggeohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
}
inline void InsertLocationRequest::set_latlonggeohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
}
inline void InsertLocationRequest::set_latlonggeohash(const char* value,
    size_t size) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
}
inline std::string* InsertLocationRequest::_internal_mutable_latlonggeohash() {
  
  return latlonggeohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationRequest::release_latlonggeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
  return latlonggeohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationRequest::set_allocated_latlonggeohash(std::string* latlonggeohash) {
  if (latlonggeohash != nullptr) {
    
  } else {
    
  }
  latlonggeohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latlonggeohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationRequest.latLongGeohash)
}

// -------------------------------------------------------------------

// BulkInsertLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkInsertLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkInsertLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkInsertLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkInsertLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.InsertLocationRequest requests = 2;
inline int BulkInsertLocationRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkInsertLocationRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkInsertLocationRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* BulkInsertLocationRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationRequest >*
BulkInsertLocationRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationRequest& BulkInsertLocationRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationRequest& BulkInsertLocationRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* BulkInsertLocationRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* BulkInsertLocationRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationRequest >&
BulkInsertLocationRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InsertLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool InsertLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool InsertLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationResponse.status)
  return _internal_status();
}
inline void InsertLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationResponse.status)
  return _internal_mutable_status();
}
inline void InsertLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationResponse.status)
}

// int32 count = 2;
inline void InsertLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationResponse.count)
  return _internal_count();
}
inline void InsertLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void InsertLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationResponse.count)
}

// string recordId = 3;
inline void InsertLocationResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& InsertLocationResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
  return _internal_recordid();
}
inline void InsertLocationResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
}
inline std::string* InsertLocationResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& InsertLocationResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void InsertLocationResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
}
inline void InsertLocationResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
}
inline void InsertLocationResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
}
inline std::string* InsertLocationResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int InsertLocationResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int InsertLocationResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
InsertLocationResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.InsertLocationResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.InsertLocationResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
InsertLocationResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.InsertLocationResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkInsertLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkInsertLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkInsertLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationResponse.status)
  return _internal_status();
}
inline void BulkInsertLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationResponse.status)
  return _internal_mutable_status();
}
inline void BulkInsertLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationResponse.status)
}

// int32 count = 2;
inline void BulkInsertLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationResponse.count)
  return _internal_count();
}
inline void BulkInsertLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkInsertLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkInsertLocationResponse.count)
}

// repeated .farm.nurture.location.service.proto.InsertLocationResponse responses = 3;
inline int BulkInsertLocationResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkInsertLocationResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkInsertLocationResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* BulkInsertLocationResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationResponse >*
BulkInsertLocationResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationResponse& BulkInsertLocationResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationResponse& BulkInsertLocationResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* BulkInsertLocationResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* BulkInsertLocationResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationResponse >&
BulkInsertLocationResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// InsertLocationS2CellRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool InsertLocationS2CellRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool InsertLocationS2CellRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationS2CellRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationS2CellRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void InsertLocationS2CellRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationS2CellRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationS2CellRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationS2CellRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationS2CellRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void InsertLocationS2CellRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellRequest.requestHeaders)
}

// int64 locationId = 2;
inline void InsertLocationS2CellRequest::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.locationId)
  return _internal_locationid();
}
inline void InsertLocationS2CellRequest::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void InsertLocationS2CellRequest::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.locationId)
}

// string namespace = 3;
inline void InsertLocationS2CellRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& InsertLocationS2CellRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
  return _internal_namespace_();
}
inline void InsertLocationS2CellRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
}
inline std::string* InsertLocationS2CellRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& InsertLocationS2CellRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void InsertLocationS2CellRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationS2CellRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
}
inline void InsertLocationS2CellRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
}
inline void InsertLocationS2CellRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
}
inline std::string* InsertLocationS2CellRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationS2CellRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationS2CellRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellRequest.namespace)
}

// int64 s2CellId = 4;
inline void InsertLocationS2CellRequest::clear_s2cellid() {
  s2cellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s2cellid() const {
  return s2cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s2cellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s2CellId)
  return _internal_s2cellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s2cellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s2cellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s2CellId)
}

// int32 s2CellLevel = 5;
inline void InsertLocationS2CellRequest::clear_s2celllevel() {
  s2celllevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationS2CellRequest::_internal_s2celllevel() const {
  return s2celllevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationS2CellRequest::s2celllevel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s2CellLevel)
  return _internal_s2celllevel();
}
inline void InsertLocationS2CellRequest::_internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s2celllevel_ = value;
}
inline void InsertLocationS2CellRequest::set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s2celllevel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s2CellLevel)
}

// int64 s27LevelCellId = 6;
inline void InsertLocationS2CellRequest::clear_s27levelcellid() {
  s27levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s27levelcellid() const {
  return s27levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s27levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s27LevelCellId)
  return _internal_s27levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s27levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s27levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s27LevelCellId)
}

// int64 s28LevelCellId = 7;
inline void InsertLocationS2CellRequest::clear_s28levelcellid() {
  s28levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s28levelcellid() const {
  return s28levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s28levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s28LevelCellId)
  return _internal_s28levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s28levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s28levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s28LevelCellId)
}

// int64 s29LevelCellId = 8;
inline void InsertLocationS2CellRequest::clear_s29levelcellid() {
  s29levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s29levelcellid() const {
  return s29levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s29levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s29LevelCellId)
  return _internal_s29levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s29levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s29levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s29LevelCellId)
}

// int64 s210LevelCellId = 9;
inline void InsertLocationS2CellRequest::clear_s210levelcellid() {
  s210levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s210levelcellid() const {
  return s210levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s210levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s210LevelCellId)
  return _internal_s210levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s210levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s210levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s210LevelCellId)
}

// int64 s211LevelCellId = 10;
inline void InsertLocationS2CellRequest::clear_s211levelcellid() {
  s211levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s211levelcellid() const {
  return s211levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s211levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s211LevelCellId)
  return _internal_s211levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s211levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s211levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s211LevelCellId)
}

// int64 s212LevelCellId = 11;
inline void InsertLocationS2CellRequest::clear_s212levelcellid() {
  s212levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s212levelcellid() const {
  return s212levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s212levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s212LevelCellId)
  return _internal_s212levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s212levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s212levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s212LevelCellId)
}

// int64 s213LevelCellId = 12;
inline void InsertLocationS2CellRequest::clear_s213levelcellid() {
  s213levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s213levelcellid() const {
  return s213levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s213levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s213LevelCellId)
  return _internal_s213levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s213levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s213levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s213LevelCellId)
}

// int64 s214LevelCellId = 13;
inline void InsertLocationS2CellRequest::clear_s214levelcellid() {
  s214levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s214levelcellid() const {
  return s214levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s214levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s214LevelCellId)
  return _internal_s214levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s214levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s214levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s214LevelCellId)
}

// int64 s215LevelCellId = 14;
inline void InsertLocationS2CellRequest::clear_s215levelcellid() {
  s215levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s215levelcellid() const {
  return s215levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s215levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s215LevelCellId)
  return _internal_s215levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s215levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s215levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s215LevelCellId)
}

// int64 s216LevelCellId = 15;
inline void InsertLocationS2CellRequest::clear_s216levelcellid() {
  s216levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s216levelcellid() const {
  return s216levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s216levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s216LevelCellId)
  return _internal_s216levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s216levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s216levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s216LevelCellId)
}

// int64 s217LevelCellId = 16;
inline void InsertLocationS2CellRequest::clear_s217levelcellid() {
  s217levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s217levelcellid() const {
  return s217levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s217levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s217LevelCellId)
  return _internal_s217levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s217levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s217levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s217LevelCellId)
}

// int64 s218LevelCellId = 17;
inline void InsertLocationS2CellRequest::clear_s218levelcellid() {
  s218levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::_internal_s218levelcellid() const {
  return s218levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationS2CellRequest::s218levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s218LevelCellId)
  return _internal_s218levelcellid();
}
inline void InsertLocationS2CellRequest::_internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s218levelcellid_ = value;
}
inline void InsertLocationS2CellRequest::set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s218levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellRequest.s218LevelCellId)
}

// -------------------------------------------------------------------

// BulkInsertLocationS2CellRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkInsertLocationS2CellRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkInsertLocationS2CellRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationS2CellRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationS2CellRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkInsertLocationS2CellRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationS2CellRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationS2CellRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationS2CellRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationS2CellRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkInsertLocationS2CellRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.InsertLocationS2CellRequest requests = 2;
inline int BulkInsertLocationS2CellRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkInsertLocationS2CellRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkInsertLocationS2CellRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* BulkInsertLocationS2CellRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >*
BulkInsertLocationS2CellRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& BulkInsertLocationS2CellRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& BulkInsertLocationS2CellRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* BulkInsertLocationS2CellRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* BulkInsertLocationS2CellRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >&
BulkInsertLocationS2CellRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InsertLocationS2CellResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool InsertLocationS2CellResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool InsertLocationS2CellResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationS2CellResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationS2CellResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellResponse.status)
  return _internal_status();
}
inline void InsertLocationS2CellResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationS2CellResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationS2CellResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationS2CellResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationS2CellResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationS2CellResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationS2CellResponse.status)
  return _internal_mutable_status();
}
inline void InsertLocationS2CellResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellResponse.status)
}

// int32 count = 2;
inline void InsertLocationS2CellResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationS2CellResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationS2CellResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellResponse.count)
  return _internal_count();
}
inline void InsertLocationS2CellResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void InsertLocationS2CellResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellResponse.count)
}

// string recordId = 3;
inline void InsertLocationS2CellResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& InsertLocationS2CellResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
  return _internal_recordid();
}
inline void InsertLocationS2CellResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
}
inline std::string* InsertLocationS2CellResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& InsertLocationS2CellResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void InsertLocationS2CellResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationS2CellResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
}
inline void InsertLocationS2CellResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
}
inline void InsertLocationS2CellResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
}
inline std::string* InsertLocationS2CellResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationS2CellResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationS2CellResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationS2CellResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int InsertLocationS2CellResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int InsertLocationS2CellResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationS2CellResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
InsertLocationS2CellResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationS2CellResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationS2CellResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationS2CellResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationS2CellResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
InsertLocationS2CellResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.InsertLocationS2CellResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkInsertLocationS2CellResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkInsertLocationS2CellResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkInsertLocationS2CellResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationS2CellResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationS2CellResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status)
  return _internal_status();
}
inline void BulkInsertLocationS2CellResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationS2CellResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationS2CellResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationS2CellResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationS2CellResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status)
  return _internal_mutable_status();
}
inline void BulkInsertLocationS2CellResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.status)
}

// int32 count = 2;
inline void BulkInsertLocationS2CellResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationS2CellResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationS2CellResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.count)
  return _internal_count();
}
inline void BulkInsertLocationS2CellResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkInsertLocationS2CellResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.count)
}

// repeated .farm.nurture.location.service.proto.InsertLocationS2CellResponse responses = 3;
inline int BulkInsertLocationS2CellResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkInsertLocationS2CellResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkInsertLocationS2CellResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* BulkInsertLocationS2CellResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >*
BulkInsertLocationS2CellResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& BulkInsertLocationS2CellResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& BulkInsertLocationS2CellResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* BulkInsertLocationS2CellResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* BulkInsertLocationS2CellResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >&
BulkInsertLocationS2CellResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// InsertConfigRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool InsertConfigRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool InsertConfigRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertConfigRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertConfigRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void InsertConfigRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertConfigRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertConfigRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertConfigRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertConfigRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void InsertConfigRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertConfigRequest.requestHeaders)
}

// string key = 2;
inline void InsertConfigRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& InsertConfigRequest::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigRequest.key)
  return _internal_key();
}
inline void InsertConfigRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertConfigRequest.key)
}
inline std::string* InsertConfigRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigRequest.key)
  return _internal_mutable_key();
}
inline const std::string& InsertConfigRequest::_internal_key() const {
  return key_.Get();
}
inline void InsertConfigRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertConfigRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertConfigRequest.key)
}
inline void InsertConfigRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertConfigRequest.key)
}
inline void InsertConfigRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertConfigRequest.key)
}
inline std::string* InsertConfigRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertConfigRequest::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertConfigRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertConfigRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertConfigRequest.key)
}

// string value = 3;
inline void InsertConfigRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& InsertConfigRequest::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigRequest.value)
  return _internal_value();
}
inline void InsertConfigRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertConfigRequest.value)
}
inline std::string* InsertConfigRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigRequest.value)
  return _internal_mutable_value();
}
inline const std::string& InsertConfigRequest::_internal_value() const {
  return value_.Get();
}
inline void InsertConfigRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertConfigRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertConfigRequest.value)
}
inline void InsertConfigRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertConfigRequest.value)
}
inline void InsertConfigRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertConfigRequest.value)
}
inline std::string* InsertConfigRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertConfigRequest::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertConfigRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertConfigRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertConfigRequest.value)
}

// -------------------------------------------------------------------

// BulkInsertConfigRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkInsertConfigRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkInsertConfigRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertConfigRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertConfigRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkInsertConfigRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertConfigRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertConfigRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertConfigRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertConfigRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkInsertConfigRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertConfigRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.InsertConfigRequest requests = 2;
inline int BulkInsertConfigRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkInsertConfigRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkInsertConfigRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* BulkInsertConfigRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertConfigRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigRequest >*
BulkInsertConfigRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertConfigRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::InsertConfigRequest& BulkInsertConfigRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertConfigRequest& BulkInsertConfigRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertConfigRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* BulkInsertConfigRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* BulkInsertConfigRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertConfigRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigRequest >&
BulkInsertConfigRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertConfigRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InsertConfigResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool InsertConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool InsertConfigResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertConfigResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigResponse.status)
  return _internal_status();
}
inline void InsertConfigResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertConfigResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertConfigResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertConfigResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigResponse.status)
  return _internal_mutable_status();
}
inline void InsertConfigResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertConfigResponse.status)
}

// int32 count = 2;
inline void InsertConfigResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertConfigResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertConfigResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigResponse.count)
  return _internal_count();
}
inline void InsertConfigResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void InsertConfigResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertConfigResponse.count)
}

// string recordId = 3;
inline void InsertConfigResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& InsertConfigResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
  return _internal_recordid();
}
inline void InsertConfigResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
}
inline std::string* InsertConfigResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& InsertConfigResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void InsertConfigResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertConfigResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
}
inline void InsertConfigResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
}
inline void InsertConfigResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
}
inline std::string* InsertConfigResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertConfigResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertConfigResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertConfigResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int InsertConfigResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int InsertConfigResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertConfigResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertConfigResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
InsertConfigResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.InsertConfigResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertConfigResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertConfigResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertConfigResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertConfigResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertConfigResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.InsertConfigResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
InsertConfigResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.InsertConfigResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkInsertConfigResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkInsertConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkInsertConfigResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertConfigResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertConfigResponse.status)
  return _internal_status();
}
inline void BulkInsertConfigResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertConfigResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertConfigResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertConfigResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertConfigResponse.status)
  return _internal_mutable_status();
}
inline void BulkInsertConfigResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertConfigResponse.status)
}

// int32 count = 2;
inline void BulkInsertConfigResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertConfigResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertConfigResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertConfigResponse.count)
  return _internal_count();
}
inline void BulkInsertConfigResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkInsertConfigResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkInsertConfigResponse.count)
}

// repeated .farm.nurture.location.service.proto.InsertConfigResponse responses = 3;
inline int BulkInsertConfigResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkInsertConfigResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkInsertConfigResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* BulkInsertConfigResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertConfigResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigResponse >*
BulkInsertConfigResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertConfigResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::InsertConfigResponse& BulkInsertConfigResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertConfigResponse& BulkInsertConfigResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertConfigResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* BulkInsertConfigResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* BulkInsertConfigResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertConfigResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertConfigResponse >&
BulkInsertConfigResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertConfigResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// FetchLocationByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchLocationByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchLocationByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchLocationByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchLocationByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchLocationByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchLocationByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchLocationByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchLocationByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchLocationByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchLocationByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchLocationByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchLocationByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByIdRequest.isStaleAllowed)
}

// int64 id = 3;
inline void FetchLocationByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchLocationByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchLocationByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByIdRequest.id)
  return _internal_id();
}
inline void FetchLocationByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchLocationByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByIdRequest.id)
}

// string namespace = 4;
inline void FetchLocationByIdRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& FetchLocationByIdRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
  return _internal_namespace_();
}
inline void FetchLocationByIdRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
}
inline std::string* FetchLocationByIdRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& FetchLocationByIdRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void FetchLocationByIdRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchLocationByIdRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
}
inline void FetchLocationByIdRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
}
inline void FetchLocationByIdRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
}
inline std::string* FetchLocationByIdRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchLocationByIdRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchLocationByIdRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchLocationByIdRequest.namespace)
}

// -------------------------------------------------------------------

// LocationRecord

// int64 id = 1;
inline void LocationRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.id)
  return _internal_id();
}
inline void LocationRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LocationRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.id)
}

// string name = 2;
inline void LocationRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LocationRecord::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.name)
  return _internal_name();
}
inline void LocationRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.name)
}
inline std::string* LocationRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.name)
  return _internal_mutable_name();
}
inline const std::string& LocationRecord::_internal_name() const {
  return name_.Get();
}
inline void LocationRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.name)
}
inline void LocationRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.name)
}
inline void LocationRecord::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.name)
}
inline std::string* LocationRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.name)
}

// string boundary = 3;
inline void LocationRecord::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& LocationRecord::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.boundary)
  return _internal_boundary();
}
inline void LocationRecord::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.boundary)
}
inline std::string* LocationRecord::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& LocationRecord::_internal_boundary() const {
  return boundary_.Get();
}
inline void LocationRecord::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.boundary)
}
inline void LocationRecord::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.boundary)
}
inline void LocationRecord::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.boundary)
}
inline std::string* LocationRecord::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.boundary)
}

// double centerLatitude = 4;
inline void LocationRecord::clear_centerlatitude() {
  centerlatitude_ = 0;
}
inline double LocationRecord::_internal_centerlatitude() const {
  return centerlatitude_;
}
inline double LocationRecord::centerlatitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.centerLatitude)
  return _internal_centerlatitude();
}
inline void LocationRecord::_internal_set_centerlatitude(double value) {
  
  centerlatitude_ = value;
}
inline void LocationRecord::set_centerlatitude(double value) {
  _internal_set_centerlatitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.centerLatitude)
}

// double centerLongitude = 5;
inline void LocationRecord::clear_centerlongitude() {
  centerlongitude_ = 0;
}
inline double LocationRecord::_internal_centerlongitude() const {
  return centerlongitude_;
}
inline double LocationRecord::centerlongitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.centerLongitude)
  return _internal_centerlongitude();
}
inline void LocationRecord::_internal_set_centerlongitude(double value) {
  
  centerlongitude_ = value;
}
inline void LocationRecord::set_centerlongitude(double value) {
  _internal_set_centerlongitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.centerLongitude)
}

// double area = 6;
inline void LocationRecord::clear_area() {
  area_ = 0;
}
inline double LocationRecord::_internal_area() const {
  return area_;
}
inline double LocationRecord::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.area)
  return _internal_area();
}
inline void LocationRecord::_internal_set_area(double value) {
  
  area_ = value;
}
inline void LocationRecord::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.area)
}

// string labels = 7;
inline void LocationRecord::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& LocationRecord::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.labels)
  return _internal_labels();
}
inline void LocationRecord::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.labels)
}
inline std::string* LocationRecord::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.labels)
  return _internal_mutable_labels();
}
inline const std::string& LocationRecord::_internal_labels() const {
  return labels_.Get();
}
inline void LocationRecord::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.labels)
}
inline void LocationRecord::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.labels)
}
inline void LocationRecord::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.labels)
}
inline std::string* LocationRecord::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.labels)
}

// string namespace = 8;
inline void LocationRecord::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& LocationRecord::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.namespace)
  return _internal_namespace_();
}
inline void LocationRecord::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.namespace)
}
inline std::string* LocationRecord::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& LocationRecord::_internal_namespace_() const {
  return namespace__.Get();
}
inline void LocationRecord::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.namespace)
}
inline void LocationRecord::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.namespace)
}
inline void LocationRecord::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.namespace)
}
inline std::string* LocationRecord::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.namespace)
}

// string code = 9;
inline void LocationRecord::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& LocationRecord::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.code)
  return _internal_code();
}
inline void LocationRecord::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.code)
}
inline std::string* LocationRecord::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.code)
  return _internal_mutable_code();
}
inline const std::string& LocationRecord::_internal_code() const {
  return code_.Get();
}
inline void LocationRecord::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.code)
}
inline void LocationRecord::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.code)
}
inline void LocationRecord::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.code)
}
inline std::string* LocationRecord::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.code)
}

// string status = 10;
inline void LocationRecord::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& LocationRecord::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.status)
  return _internal_status();
}
inline void LocationRecord::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.status)
}
inline std::string* LocationRecord::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.status)
  return _internal_mutable_status();
}
inline const std::string& LocationRecord::_internal_status() const {
  return status_.Get();
}
inline void LocationRecord::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.status)
}
inline void LocationRecord::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.status)
}
inline void LocationRecord::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.status)
}
inline std::string* LocationRecord::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.status)
}

// string metadata = 11;
inline void LocationRecord::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& LocationRecord::metadata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.metadata)
  return _internal_metadata();
}
inline void LocationRecord::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.metadata)
}
inline std::string* LocationRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& LocationRecord::_internal_metadata() const {
  return metadata_.Get();
}
inline void LocationRecord::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.metadata)
}
inline void LocationRecord::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.metadata)
}
inline void LocationRecord::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.metadata)
}
inline std::string* LocationRecord::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.metadata)
}

// int32 version = 12;
inline void LocationRecord::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.version)
  return _internal_version();
}
inline void LocationRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void LocationRecord::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.version)
}

// int32 minS2Level = 13;
inline void LocationRecord::clear_mins2level() {
  mins2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::_internal_mins2level() const {
  return mins2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::mins2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.minS2Level)
  return _internal_mins2level();
}
inline void LocationRecord::_internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins2level_ = value;
}
inline void LocationRecord::set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.minS2Level)
}

// int32 maxS2Level = 14;
inline void LocationRecord::clear_maxs2level() {
  maxs2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::_internal_maxs2level() const {
  return maxs2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationRecord::maxs2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.maxS2Level)
  return _internal_maxs2level();
}
inline void LocationRecord::_internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxs2level_ = value;
}
inline void LocationRecord::set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxs2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.maxS2Level)
}

// int64 createdByActorId = 15;
inline void LocationRecord::clear_createdbyactorid() {
  createdbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_createdbyactorid() const {
  return createdbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::createdbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.createdByActorId)
  return _internal_createdbyactorid();
}
inline void LocationRecord::_internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdbyactorid_ = value;
}
inline void LocationRecord::set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.createdByActorId)
}

// string createdByActorType = 16;
inline void LocationRecord::clear_createdbyactortype() {
  createdbyactortype_.ClearToEmpty();
}
inline const std::string& LocationRecord::createdbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
  return _internal_createdbyactortype();
}
inline void LocationRecord::set_createdbyactortype(const std::string& value) {
  _internal_set_createdbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
}
inline std::string* LocationRecord::mutable_createdbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
  return _internal_mutable_createdbyactortype();
}
inline const std::string& LocationRecord::_internal_createdbyactortype() const {
  return createdbyactortype_.Get();
}
inline void LocationRecord::_internal_set_createdbyactortype(const std::string& value) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_createdbyactortype(std::string&& value) {
  
  createdbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
}
inline void LocationRecord::set_createdbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
}
inline void LocationRecord::set_createdbyactortype(const char* value,
    size_t size) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
}
inline std::string* LocationRecord::_internal_mutable_createdbyactortype() {
  
  return createdbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_createdbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
  return createdbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_createdbyactortype(std::string* createdbyactortype) {
  if (createdbyactortype != nullptr) {
    
  } else {
    
  }
  createdbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.createdByActorType)
}

// int64 modifiedByActorId = 17;
inline void LocationRecord::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void LocationRecord::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void LocationRecord::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.modifiedByActorId)
}

// string modifiedByActorType = 18;
inline void LocationRecord::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& LocationRecord::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void LocationRecord::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
}
inline std::string* LocationRecord::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& LocationRecord::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void LocationRecord::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
}
inline void LocationRecord::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
}
inline void LocationRecord::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
}
inline std::string* LocationRecord::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.modifiedByActorType)
}

// int64 createdAt = 19;
inline void LocationRecord::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.createdAt)
  return _internal_createdat();
}
inline void LocationRecord::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void LocationRecord::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.createdAt)
}

// int64 updatedAt = 20;
inline void LocationRecord::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.updatedAt)
  return _internal_updatedat();
}
inline void LocationRecord::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedat_ = value;
}
inline void LocationRecord::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.updatedAt)
}

// int64 deletedAt = 21;
inline void LocationRecord::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationRecord::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.deletedAt)
  return _internal_deletedat();
}
inline void LocationRecord::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void LocationRecord::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.deletedAt)
}

// string visibility = 22;
inline void LocationRecord::clear_visibility() {
  visibility_.ClearToEmpty();
}
inline const std::string& LocationRecord::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.visibility)
  return _internal_visibility();
}
inline void LocationRecord::set_visibility(const std::string& value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.visibility)
}
inline std::string* LocationRecord::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.visibility)
  return _internal_mutable_visibility();
}
inline const std::string& LocationRecord::_internal_visibility() const {
  return visibility_.Get();
}
inline void LocationRecord::_internal_set_visibility(const std::string& value) {
  
  visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_visibility(std::string&& value) {
  
  visibility_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.visibility)
}
inline void LocationRecord::set_visibility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.visibility)
}
inline void LocationRecord::set_visibility(const char* value,
    size_t size) {
  
  visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.visibility)
}
inline std::string* LocationRecord::_internal_mutable_visibility() {
  
  return visibility_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_visibility() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.visibility)
  return visibility_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_visibility(std::string* visibility) {
  if (visibility != nullptr) {
    
  } else {
    
  }
  visibility_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visibility,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.visibility)
}

// string geographyUid = 23;
inline void LocationRecord::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& LocationRecord::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.geographyUid)
  return _internal_geographyuid();
}
inline void LocationRecord::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.geographyUid)
}
inline std::string* LocationRecord::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& LocationRecord::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void LocationRecord::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.geographyUid)
}
inline void LocationRecord::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.geographyUid)
}
inline void LocationRecord::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.geographyUid)
}
inline std::string* LocationRecord::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.geographyUid)
}

// string pincode = 24;
inline void LocationRecord::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& LocationRecord::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.pincode)
  return _internal_pincode();
}
inline void LocationRecord::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.pincode)
}
inline std::string* LocationRecord::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& LocationRecord::_internal_pincode() const {
  return pincode_.Get();
}
inline void LocationRecord::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.pincode)
}
inline void LocationRecord::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.pincode)
}
inline void LocationRecord::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.pincode)
}
inline std::string* LocationRecord::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.pincode)
}

// string latLongGeohash = 25;
inline void LocationRecord::clear_latlonggeohash() {
  latlonggeohash_.ClearToEmpty();
}
inline const std::string& LocationRecord::latlonggeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
  return _internal_latlonggeohash();
}
inline void LocationRecord::set_latlonggeohash(const std::string& value) {
  _internal_set_latlonggeohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
}
inline std::string* LocationRecord::mutable_latlonggeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
  return _internal_mutable_latlonggeohash();
}
inline const std::string& LocationRecord::_internal_latlonggeohash() const {
  return latlonggeohash_.Get();
}
inline void LocationRecord::_internal_set_latlonggeohash(const std::string& value) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationRecord::set_latlonggeohash(std::string&& value) {
  
  latlonggeohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
}
inline void LocationRecord::set_latlonggeohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
}
inline void LocationRecord::set_latlonggeohash(const char* value,
    size_t size) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
}
inline std::string* LocationRecord::_internal_mutable_latlonggeohash() {
  
  return latlonggeohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationRecord::release_latlonggeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
  return latlonggeohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationRecord::set_allocated_latlonggeohash(std::string* latlonggeohash) {
  if (latlonggeohash != nullptr) {
    
  } else {
    
  }
  latlonggeohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latlonggeohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationRecord.latLongGeohash)
}

// -------------------------------------------------------------------

// Location

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool Location::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Location::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Location::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Location::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Location.status)
  return _internal_status();
}
inline void Location::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Location.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Location::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Location::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Location.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Location::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Location::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Location.status)
  return _internal_mutable_status();
}
inline void Location::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Location.status)
}

// int32 count = 2;
inline void Location::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Location.count)
  return _internal_count();
}
inline void Location::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Location::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Location.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int Location::_internal_attribs_size() const {
  return attribs_.size();
}
inline int Location::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* Location::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Location.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
Location::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.Location.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& Location::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& Location::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Location.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* Location::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* Location::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.Location.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
Location::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.Location.attribs)
  return attribs_;
}

// .farm.nurture.location.service.proto.LocationRecord records = 4;
inline bool Location::_internal_has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline bool Location::has_records() const {
  return _internal_has_records();
}
inline void Location::clear_records() {
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::farm::nurture::location::service::proto::LocationRecord& Location::_internal_records() const {
  const ::farm::nurture::location::service::proto::LocationRecord* p = records_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::location::service::proto::LocationRecord&>(
      ::farm::nurture::location::service::proto::_LocationRecord_default_instance_);
}
inline const ::farm::nurture::location::service::proto::LocationRecord& Location::records() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Location.records)
  return _internal_records();
}
inline void Location::unsafe_arena_set_allocated_records(
    ::farm::nurture::location::service::proto::LocationRecord* records) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(records_);
  }
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Location.records)
}
inline ::farm::nurture::location::service::proto::LocationRecord* Location::release_records() {
  
  ::farm::nurture::location::service::proto::LocationRecord* temp = records_;
  records_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::location::service::proto::LocationRecord* Location::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Location.records)
  
  ::farm::nurture::location::service::proto::LocationRecord* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::farm::nurture::location::service::proto::LocationRecord* Location::_internal_mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::location::service::proto::LocationRecord>(GetArena());
    records_ = p;
  }
  return records_;
}
inline ::farm::nurture::location::service::proto::LocationRecord* Location::mutable_records() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Location.records)
  return _internal_mutable_records();
}
inline void Location::set_allocated_records(::farm::nurture::location::service::proto::LocationRecord* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Location.records)
}

// -------------------------------------------------------------------

// FetchLocationByCodeAndNamespaceRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchLocationByCodeAndNamespaceRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchLocationByCodeAndNamespaceRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchLocationByCodeAndNamespaceRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchLocationByCodeAndNamespaceRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchLocationByCodeAndNamespaceRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByCodeAndNamespaceRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByCodeAndNamespaceRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByCodeAndNamespaceRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchLocationByCodeAndNamespaceRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchLocationByCodeAndNamespaceRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchLocationByCodeAndNamespaceRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchLocationByCodeAndNamespaceRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchLocationByCodeAndNamespaceRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchLocationByCodeAndNamespaceRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchLocationByCodeAndNamespaceRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.isStaleAllowed)
}

// string code = 3;
inline void FetchLocationByCodeAndNamespaceRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& FetchLocationByCodeAndNamespaceRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
  return _internal_code();
}
inline void FetchLocationByCodeAndNamespaceRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
  return _internal_mutable_code();
}
inline const std::string& FetchLocationByCodeAndNamespaceRequest::_internal_code() const {
  return code_.Get();
}
inline void FetchLocationByCodeAndNamespaceRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchLocationByCodeAndNamespaceRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
}
inline void FetchLocationByCodeAndNamespaceRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
}
inline void FetchLocationByCodeAndNamespaceRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchLocationByCodeAndNamespaceRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.code)
}

// string namespace = 4;
inline void FetchLocationByCodeAndNamespaceRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& FetchLocationByCodeAndNamespaceRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
  return _internal_namespace_();
}
inline void FetchLocationByCodeAndNamespaceRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& FetchLocationByCodeAndNamespaceRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void FetchLocationByCodeAndNamespaceRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchLocationByCodeAndNamespaceRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
}
inline void FetchLocationByCodeAndNamespaceRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
}
inline void FetchLocationByCodeAndNamespaceRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchLocationByCodeAndNamespaceRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchLocationByCodeAndNamespaceRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest.namespace)
}

// -------------------------------------------------------------------

// FetchS2CellByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchS2CellByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchS2CellByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchS2CellByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchS2CellByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchS2CellByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchS2CellByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchS2CellByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchS2CellByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchS2CellByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchS2CellByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByIdRequest.isStaleAllowed)
}

// int64 id = 3;
inline void FetchS2CellByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByIdRequest.id)
  return _internal_id();
}
inline void FetchS2CellByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchS2CellByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByIdRequest.id)
}

// -------------------------------------------------------------------

// S2CellRecord

// int64 id = 1;
inline void S2CellRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.id)
  return _internal_id();
}
inline void S2CellRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void S2CellRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.id)
}

// int64 locationId = 2;
inline void S2CellRecord::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.locationId)
  return _internal_locationid();
}
inline void S2CellRecord::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void S2CellRecord::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.locationId)
}

// int64 s2CellId = 3;
inline void S2CellRecord::clear_s2cellid() {
  s2cellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s2cellid() const {
  return s2cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s2cellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s2CellId)
  return _internal_s2cellid();
}
inline void S2CellRecord::_internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s2cellid_ = value;
}
inline void S2CellRecord::set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s2cellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s2CellId)
}

// int32 s2CellLevel = 4;
inline void S2CellRecord::clear_s2celllevel() {
  s2celllevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CellRecord::_internal_s2celllevel() const {
  return s2celllevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CellRecord::s2celllevel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s2CellLevel)
  return _internal_s2celllevel();
}
inline void S2CellRecord::_internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s2celllevel_ = value;
}
inline void S2CellRecord::set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s2celllevel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s2CellLevel)
}

// int64 s27LevelCellId = 5;
inline void S2CellRecord::clear_s27levelcellid() {
  s27levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s27levelcellid() const {
  return s27levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s27levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s27LevelCellId)
  return _internal_s27levelcellid();
}
inline void S2CellRecord::_internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s27levelcellid_ = value;
}
inline void S2CellRecord::set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s27levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s27LevelCellId)
}

// int64 s28LevelCellId = 6;
inline void S2CellRecord::clear_s28levelcellid() {
  s28levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s28levelcellid() const {
  return s28levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s28levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s28LevelCellId)
  return _internal_s28levelcellid();
}
inline void S2CellRecord::_internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s28levelcellid_ = value;
}
inline void S2CellRecord::set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s28levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s28LevelCellId)
}

// int64 s29LevelCellId = 7;
inline void S2CellRecord::clear_s29levelcellid() {
  s29levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s29levelcellid() const {
  return s29levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s29levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s29LevelCellId)
  return _internal_s29levelcellid();
}
inline void S2CellRecord::_internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s29levelcellid_ = value;
}
inline void S2CellRecord::set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s29levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s29LevelCellId)
}

// int64 s210LevelCellId = 8;
inline void S2CellRecord::clear_s210levelcellid() {
  s210levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s210levelcellid() const {
  return s210levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s210levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s210LevelCellId)
  return _internal_s210levelcellid();
}
inline void S2CellRecord::_internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s210levelcellid_ = value;
}
inline void S2CellRecord::set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s210levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s210LevelCellId)
}

// int64 s211LevelCellId = 9;
inline void S2CellRecord::clear_s211levelcellid() {
  s211levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s211levelcellid() const {
  return s211levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s211levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s211LevelCellId)
  return _internal_s211levelcellid();
}
inline void S2CellRecord::_internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s211levelcellid_ = value;
}
inline void S2CellRecord::set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s211levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s211LevelCellId)
}

// int64 s212LevelCellId = 10;
inline void S2CellRecord::clear_s212levelcellid() {
  s212levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s212levelcellid() const {
  return s212levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s212levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s212LevelCellId)
  return _internal_s212levelcellid();
}
inline void S2CellRecord::_internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s212levelcellid_ = value;
}
inline void S2CellRecord::set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s212levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s212LevelCellId)
}

// int64 s213LevelCellId = 11;
inline void S2CellRecord::clear_s213levelcellid() {
  s213levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s213levelcellid() const {
  return s213levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s213levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s213LevelCellId)
  return _internal_s213levelcellid();
}
inline void S2CellRecord::_internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s213levelcellid_ = value;
}
inline void S2CellRecord::set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s213levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s213LevelCellId)
}

// int64 s214LevelCellId = 12;
inline void S2CellRecord::clear_s214levelcellid() {
  s214levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s214levelcellid() const {
  return s214levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s214levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s214LevelCellId)
  return _internal_s214levelcellid();
}
inline void S2CellRecord::_internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s214levelcellid_ = value;
}
inline void S2CellRecord::set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s214levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s214LevelCellId)
}

// int64 s215LevelCellId = 13;
inline void S2CellRecord::clear_s215levelcellid() {
  s215levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s215levelcellid() const {
  return s215levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s215levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s215LevelCellId)
  return _internal_s215levelcellid();
}
inline void S2CellRecord::_internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s215levelcellid_ = value;
}
inline void S2CellRecord::set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s215levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s215LevelCellId)
}

// int64 s216LevelCellId = 14;
inline void S2CellRecord::clear_s216levelcellid() {
  s216levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s216levelcellid() const {
  return s216levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s216levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s216LevelCellId)
  return _internal_s216levelcellid();
}
inline void S2CellRecord::_internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s216levelcellid_ = value;
}
inline void S2CellRecord::set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s216levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s216LevelCellId)
}

// int64 s217LevelCellId = 15;
inline void S2CellRecord::clear_s217levelcellid() {
  s217levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s217levelcellid() const {
  return s217levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s217levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s217LevelCellId)
  return _internal_s217levelcellid();
}
inline void S2CellRecord::_internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s217levelcellid_ = value;
}
inline void S2CellRecord::set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s217levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s217LevelCellId)
}

// int64 s218LevelCellId = 16;
inline void S2CellRecord::clear_s218levelcellid() {
  s218levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_s218levelcellid() const {
  return s218levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::s218levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.s218LevelCellId)
  return _internal_s218levelcellid();
}
inline void S2CellRecord::_internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s218levelcellid_ = value;
}
inline void S2CellRecord::set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s218levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.s218LevelCellId)
}

// int64 createdAt = 17;
inline void S2CellRecord::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.createdAt)
  return _internal_createdat();
}
inline void S2CellRecord::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void S2CellRecord::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.createdAt)
}

// int64 updatedAt = 18;
inline void S2CellRecord::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.updatedAt)
  return _internal_updatedat();
}
inline void S2CellRecord::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedat_ = value;
}
inline void S2CellRecord::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.updatedAt)
}

// int64 deletedAt = 19;
inline void S2CellRecord::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2CellRecord::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2CellRecord.deletedAt)
  return _internal_deletedat();
}
inline void S2CellRecord::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void S2CellRecord::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2CellRecord.deletedAt)
}

// -------------------------------------------------------------------

// S2Cell

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool S2Cell::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool S2Cell::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& S2Cell::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& S2Cell::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2Cell.status)
  return _internal_status();
}
inline void S2Cell::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.S2Cell.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* S2Cell::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* S2Cell::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.S2Cell.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* S2Cell::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* S2Cell::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.S2Cell.status)
  return _internal_mutable_status();
}
inline void S2Cell::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.S2Cell.status)
}

// int32 count = 2;
inline void S2Cell::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2Cell::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2Cell::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2Cell.count)
  return _internal_count();
}
inline void S2Cell::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void S2Cell::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.S2Cell.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int S2Cell::_internal_attribs_size() const {
  return attribs_.size();
}
inline int S2Cell::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* S2Cell::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.S2Cell.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
S2Cell::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.S2Cell.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& S2Cell::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& S2Cell::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2Cell.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* S2Cell::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* S2Cell::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.S2Cell.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
S2Cell::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.S2Cell.attribs)
  return attribs_;
}

// .farm.nurture.location.service.proto.S2CellRecord records = 4;
inline bool S2Cell::_internal_has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline bool S2Cell::has_records() const {
  return _internal_has_records();
}
inline void S2Cell::clear_records() {
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::farm::nurture::location::service::proto::S2CellRecord& S2Cell::_internal_records() const {
  const ::farm::nurture::location::service::proto::S2CellRecord* p = records_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::location::service::proto::S2CellRecord&>(
      ::farm::nurture::location::service::proto::_S2CellRecord_default_instance_);
}
inline const ::farm::nurture::location::service::proto::S2CellRecord& S2Cell::records() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.S2Cell.records)
  return _internal_records();
}
inline void S2Cell::unsafe_arena_set_allocated_records(
    ::farm::nurture::location::service::proto::S2CellRecord* records) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(records_);
  }
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.S2Cell.records)
}
inline ::farm::nurture::location::service::proto::S2CellRecord* S2Cell::release_records() {
  
  ::farm::nurture::location::service::proto::S2CellRecord* temp = records_;
  records_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::location::service::proto::S2CellRecord* S2Cell::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.S2Cell.records)
  
  ::farm::nurture::location::service::proto::S2CellRecord* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::farm::nurture::location::service::proto::S2CellRecord* S2Cell::_internal_mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::location::service::proto::S2CellRecord>(GetArena());
    records_ = p;
  }
  return records_;
}
inline ::farm::nurture::location::service::proto::S2CellRecord* S2Cell::mutable_records() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.S2Cell.records)
  return _internal_mutable_records();
}
inline void S2Cell::set_allocated_records(::farm::nurture::location::service::proto::S2CellRecord* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.S2Cell.records)
}

// -------------------------------------------------------------------

// FetchS2CellByLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchS2CellByLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchS2CellByLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchS2CellByLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchS2CellByLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchS2CellByLocationRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchS2CellByLocationRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchS2CellByLocationRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchS2CellByLocationRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchS2CellByLocationRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.isStaleAllowed)
}

// int64 locationId = 3;
inline void FetchS2CellByLocationRequest::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationRequest::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationRequest::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.locationId)
  return _internal_locationid();
}
inline void FetchS2CellByLocationRequest::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void FetchS2CellByLocationRequest::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.locationId)
}

// int64 s2CellId = 4;
inline void FetchS2CellByLocationRequest::clear_s2cellid() {
  s2cellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationRequest::_internal_s2cellid() const {
  return s2cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationRequest::s2cellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.s2CellId)
  return _internal_s2cellid();
}
inline void FetchS2CellByLocationRequest::_internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s2cellid_ = value;
}
inline void FetchS2CellByLocationRequest::set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s2cellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.s2CellId)
}

// int32 s2CellLevel = 5;
inline void FetchS2CellByLocationRequest::clear_s2celllevel() {
  s2celllevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchS2CellByLocationRequest::_internal_s2celllevel() const {
  return s2celllevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchS2CellByLocationRequest::s2celllevel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.s2CellLevel)
  return _internal_s2celllevel();
}
inline void FetchS2CellByLocationRequest::_internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s2celllevel_ = value;
}
inline void FetchS2CellByLocationRequest::set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s2celllevel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationRequest.s2CellLevel)
}

// -------------------------------------------------------------------

// FetchS2CellByLocationIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchS2CellByLocationIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchS2CellByLocationIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByLocationIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchS2CellByLocationIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchS2CellByLocationIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchS2CellByLocationIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchS2CellByLocationIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchS2CellByLocationIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchS2CellByLocationIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchS2CellByLocationIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchS2CellByLocationIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchS2CellByLocationIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.isStaleAllowed)
}

// int64 locationId = 3;
inline void FetchS2CellByLocationIdRequest::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationIdRequest::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchS2CellByLocationIdRequest::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.locationId)
  return _internal_locationid();
}
inline void FetchS2CellByLocationIdRequest::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void FetchS2CellByLocationIdRequest::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest.locationId)
}

// -------------------------------------------------------------------

// LocationS2CellsRecord

// int64 id = 1;
inline void LocationS2CellsRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.id)
  return _internal_id();
}
inline void LocationS2CellsRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LocationS2CellsRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.id)
}

// int64 locationId = 2;
inline void LocationS2CellsRecord::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.locationId)
  return _internal_locationid();
}
inline void LocationS2CellsRecord::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void LocationS2CellsRecord::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.locationId)
}

// int64 s2CellId = 3;
inline void LocationS2CellsRecord::clear_s2cellid() {
  s2cellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s2cellid() const {
  return s2cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s2cellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s2CellId)
  return _internal_s2cellid();
}
inline void LocationS2CellsRecord::_internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s2cellid_ = value;
}
inline void LocationS2CellsRecord::set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s2cellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s2CellId)
}

// int32 s2CellLevel = 4;
inline void LocationS2CellsRecord::clear_s2celllevel() {
  s2celllevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationS2CellsRecord::_internal_s2celllevel() const {
  return s2celllevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationS2CellsRecord::s2celllevel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s2CellLevel)
  return _internal_s2celllevel();
}
inline void LocationS2CellsRecord::_internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s2celllevel_ = value;
}
inline void LocationS2CellsRecord::set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s2celllevel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s2CellLevel)
}

// int64 s27LevelCellId = 5;
inline void LocationS2CellsRecord::clear_s27levelcellid() {
  s27levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s27levelcellid() const {
  return s27levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s27levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s27LevelCellId)
  return _internal_s27levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s27levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s27levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s27levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s27LevelCellId)
}

// int64 s28LevelCellId = 6;
inline void LocationS2CellsRecord::clear_s28levelcellid() {
  s28levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s28levelcellid() const {
  return s28levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s28levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s28LevelCellId)
  return _internal_s28levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s28levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s28levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s28levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s28LevelCellId)
}

// int64 s29LevelCellId = 7;
inline void LocationS2CellsRecord::clear_s29levelcellid() {
  s29levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s29levelcellid() const {
  return s29levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s29levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s29LevelCellId)
  return _internal_s29levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s29levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s29levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s29levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s29LevelCellId)
}

// int64 s210LevelCellId = 8;
inline void LocationS2CellsRecord::clear_s210levelcellid() {
  s210levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s210levelcellid() const {
  return s210levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s210levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s210LevelCellId)
  return _internal_s210levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s210levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s210levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s210levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s210LevelCellId)
}

// int64 s211LevelCellId = 9;
inline void LocationS2CellsRecord::clear_s211levelcellid() {
  s211levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s211levelcellid() const {
  return s211levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s211levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s211LevelCellId)
  return _internal_s211levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s211levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s211levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s211levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s211LevelCellId)
}

// int64 s212LevelCellId = 10;
inline void LocationS2CellsRecord::clear_s212levelcellid() {
  s212levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s212levelcellid() const {
  return s212levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s212levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s212LevelCellId)
  return _internal_s212levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s212levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s212levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s212levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s212LevelCellId)
}

// int64 s213LevelCellId = 11;
inline void LocationS2CellsRecord::clear_s213levelcellid() {
  s213levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s213levelcellid() const {
  return s213levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s213levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s213LevelCellId)
  return _internal_s213levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s213levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s213levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s213levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s213LevelCellId)
}

// int64 s214LevelCellId = 12;
inline void LocationS2CellsRecord::clear_s214levelcellid() {
  s214levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s214levelcellid() const {
  return s214levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s214levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s214LevelCellId)
  return _internal_s214levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s214levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s214levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s214levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s214LevelCellId)
}

// int64 s215LevelCellId = 13;
inline void LocationS2CellsRecord::clear_s215levelcellid() {
  s215levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s215levelcellid() const {
  return s215levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s215levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s215LevelCellId)
  return _internal_s215levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s215levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s215levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s215levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s215LevelCellId)
}

// int64 s216LevelCellId = 14;
inline void LocationS2CellsRecord::clear_s216levelcellid() {
  s216levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s216levelcellid() const {
  return s216levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s216levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s216LevelCellId)
  return _internal_s216levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s216levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s216levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s216levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s216LevelCellId)
}

// int64 s217LevelCellId = 15;
inline void LocationS2CellsRecord::clear_s217levelcellid() {
  s217levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s217levelcellid() const {
  return s217levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s217levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s217LevelCellId)
  return _internal_s217levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s217levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s217levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s217levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s217LevelCellId)
}

// int64 s218LevelCellId = 16;
inline void LocationS2CellsRecord::clear_s218levelcellid() {
  s218levelcellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_s218levelcellid() const {
  return s218levelcellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::s218levelcellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.s218LevelCellId)
  return _internal_s218levelcellid();
}
inline void LocationS2CellsRecord::_internal_set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s218levelcellid_ = value;
}
inline void LocationS2CellsRecord::set_s218levelcellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s218levelcellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.s218LevelCellId)
}

// int64 createdAt = 17;
inline void LocationS2CellsRecord::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.createdAt)
  return _internal_createdat();
}
inline void LocationS2CellsRecord::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void LocationS2CellsRecord::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.createdAt)
}

// int64 updatedAt = 18;
inline void LocationS2CellsRecord::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.updatedAt)
  return _internal_updatedat();
}
inline void LocationS2CellsRecord::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedat_ = value;
}
inline void LocationS2CellsRecord::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.updatedAt)
}

// int64 deletedAt = 19;
inline void LocationS2CellsRecord::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationS2CellsRecord::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2CellsRecord.deletedAt)
  return _internal_deletedat();
}
inline void LocationS2CellsRecord::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void LocationS2CellsRecord::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2CellsRecord.deletedAt)
}

// -------------------------------------------------------------------

// LocationS2Cells

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool LocationS2Cells::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LocationS2Cells::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& LocationS2Cells::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& LocationS2Cells::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2Cells.status)
  return _internal_status();
}
inline void LocationS2Cells::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.LocationS2Cells.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* LocationS2Cells::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* LocationS2Cells::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationS2Cells.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* LocationS2Cells::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* LocationS2Cells::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationS2Cells.status)
  return _internal_mutable_status();
}
inline void LocationS2Cells::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationS2Cells.status)
}

// int32 count = 2;
inline void LocationS2Cells::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationS2Cells::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationS2Cells::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2Cells.count)
  return _internal_count();
}
inline void LocationS2Cells::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void LocationS2Cells::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationS2Cells.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int LocationS2Cells::_internal_attribs_size() const {
  return attribs_.size();
}
inline int LocationS2Cells::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* LocationS2Cells::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationS2Cells.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
LocationS2Cells::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LocationS2Cells.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& LocationS2Cells::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& LocationS2Cells::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2Cells.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* LocationS2Cells::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* LocationS2Cells::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LocationS2Cells.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
LocationS2Cells::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LocationS2Cells.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.LocationS2CellsRecord records = 4;
inline int LocationS2Cells::_internal_records_size() const {
  return records_.size();
}
inline int LocationS2Cells::records_size() const {
  return _internal_records_size();
}
inline void LocationS2Cells::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::LocationS2CellsRecord* LocationS2Cells::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationS2Cells.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationS2CellsRecord >*
LocationS2Cells::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LocationS2Cells.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::LocationS2CellsRecord& LocationS2Cells::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::LocationS2CellsRecord& LocationS2Cells::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationS2Cells.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::LocationS2CellsRecord* LocationS2Cells::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::LocationS2CellsRecord* LocationS2Cells::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LocationS2Cells.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationS2CellsRecord >&
LocationS2Cells::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LocationS2Cells.records)
  return records_;
}

// -------------------------------------------------------------------

// UpdateLocationByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateLocationByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateLocationByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateLocationByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateLocationByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.requestHeaders)
}

// string name = 2;
inline void UpdateLocationByIdRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
  return _internal_name();
}
inline void UpdateLocationByIdRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
}
inline std::string* UpdateLocationByIdRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateLocationByIdRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
}
inline void UpdateLocationByIdRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
}
inline void UpdateLocationByIdRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.name)
}

// string boundary = 3;
inline void UpdateLocationByIdRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
  return _internal_boundary();
}
inline void UpdateLocationByIdRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
}
inline std::string* UpdateLocationByIdRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& UpdateLocationByIdRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
}
inline void UpdateLocationByIdRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
}
inline void UpdateLocationByIdRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.boundary)
}

// double centerLatitude = 4;
inline void UpdateLocationByIdRequest::clear_centerlatitude() {
  centerlatitude_ = 0;
}
inline double UpdateLocationByIdRequest::_internal_centerlatitude() const {
  return centerlatitude_;
}
inline double UpdateLocationByIdRequest::centerlatitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.centerLatitude)
  return _internal_centerlatitude();
}
inline void UpdateLocationByIdRequest::_internal_set_centerlatitude(double value) {
  
  centerlatitude_ = value;
}
inline void UpdateLocationByIdRequest::set_centerlatitude(double value) {
  _internal_set_centerlatitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.centerLatitude)
}

// double centerLongitude = 5;
inline void UpdateLocationByIdRequest::clear_centerlongitude() {
  centerlongitude_ = 0;
}
inline double UpdateLocationByIdRequest::_internal_centerlongitude() const {
  return centerlongitude_;
}
inline double UpdateLocationByIdRequest::centerlongitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.centerLongitude)
  return _internal_centerlongitude();
}
inline void UpdateLocationByIdRequest::_internal_set_centerlongitude(double value) {
  
  centerlongitude_ = value;
}
inline void UpdateLocationByIdRequest::set_centerlongitude(double value) {
  _internal_set_centerlongitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.centerLongitude)
}

// double area = 6;
inline void UpdateLocationByIdRequest::clear_area() {
  area_ = 0;
}
inline double UpdateLocationByIdRequest::_internal_area() const {
  return area_;
}
inline double UpdateLocationByIdRequest::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.area)
  return _internal_area();
}
inline void UpdateLocationByIdRequest::_internal_set_area(double value) {
  
  area_ = value;
}
inline void UpdateLocationByIdRequest::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.area)
}

// string labels = 7;
inline void UpdateLocationByIdRequest::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
  return _internal_labels();
}
inline void UpdateLocationByIdRequest::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
}
inline std::string* UpdateLocationByIdRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
  return _internal_mutable_labels();
}
inline const std::string& UpdateLocationByIdRequest::_internal_labels() const {
  return labels_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
}
inline void UpdateLocationByIdRequest::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
}
inline void UpdateLocationByIdRequest::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.labels)
}

// string namespace = 8;
inline void UpdateLocationByIdRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
  return _internal_namespace_();
}
inline void UpdateLocationByIdRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
}
inline std::string* UpdateLocationByIdRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& UpdateLocationByIdRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
}
inline void UpdateLocationByIdRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
}
inline void UpdateLocationByIdRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.namespace)
}

// string code = 9;
inline void UpdateLocationByIdRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
  return _internal_code();
}
inline void UpdateLocationByIdRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
}
inline std::string* UpdateLocationByIdRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
  return _internal_mutable_code();
}
inline const std::string& UpdateLocationByIdRequest::_internal_code() const {
  return code_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
}
inline void UpdateLocationByIdRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
}
inline void UpdateLocationByIdRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.code)
}

// .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Status status = 10;
inline void UpdateLocationByIdRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status >(status_);
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status UpdateLocationByIdRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.status)
  return _internal_status();
}
inline void UpdateLocationByIdRequest::_internal_set_status(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status value) {
  
  status_ = value;
}
inline void UpdateLocationByIdRequest::set_status(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.status)
}

// string metadata = 11;
inline void UpdateLocationByIdRequest::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::metadata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
  return _internal_metadata();
}
inline void UpdateLocationByIdRequest::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
}
inline std::string* UpdateLocationByIdRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& UpdateLocationByIdRequest::_internal_metadata() const {
  return metadata_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
}
inline void UpdateLocationByIdRequest::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
}
inline void UpdateLocationByIdRequest::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.metadata)
}

// int32 newVersion = 12;
inline void UpdateLocationByIdRequest::clear_newversion() {
  newversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::_internal_newversion() const {
  return newversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::newversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.newVersion)
  return _internal_newversion();
}
inline void UpdateLocationByIdRequest::_internal_set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newversion_ = value;
}
inline void UpdateLocationByIdRequest::set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.newVersion)
}

// int32 minS2Level = 13;
inline void UpdateLocationByIdRequest::clear_mins2level() {
  mins2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::_internal_mins2level() const {
  return mins2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::mins2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.minS2Level)
  return _internal_mins2level();
}
inline void UpdateLocationByIdRequest::_internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins2level_ = value;
}
inline void UpdateLocationByIdRequest::set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.minS2Level)
}

// int32 maxS2Level = 14;
inline void UpdateLocationByIdRequest::clear_maxs2level() {
  maxs2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::_internal_maxs2level() const {
  return maxs2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::maxs2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.maxS2Level)
  return _internal_maxs2level();
}
inline void UpdateLocationByIdRequest::_internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxs2level_ = value;
}
inline void UpdateLocationByIdRequest::set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxs2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.maxS2Level)
}

// int64 modifiedByActorId = 15;
inline void UpdateLocationByIdRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationByIdRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationByIdRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void UpdateLocationByIdRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void UpdateLocationByIdRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorId)
}

// string modifiedByActorType = 16;
inline void UpdateLocationByIdRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void UpdateLocationByIdRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationByIdRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& UpdateLocationByIdRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
}
inline void UpdateLocationByIdRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
}
inline void UpdateLocationByIdRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.modifiedByActorType)
}

// .farm.nurture.location.service.proto.UpdateLocationByIdRequest.Visibility visibility = 17;
inline void UpdateLocationByIdRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility UpdateLocationByIdRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.visibility)
  return _internal_visibility();
}
inline void UpdateLocationByIdRequest::_internal_set_visibility(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility value) {
  
  visibility_ = value;
}
inline void UpdateLocationByIdRequest::set_visibility(::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.visibility)
}

// string geographyUid = 18;
inline void UpdateLocationByIdRequest::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
  return _internal_geographyuid();
}
inline void UpdateLocationByIdRequest::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
}
inline std::string* UpdateLocationByIdRequest::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& UpdateLocationByIdRequest::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
}
inline void UpdateLocationByIdRequest::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
}
inline void UpdateLocationByIdRequest::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.geographyUid)
}

// string pincode = 19;
inline void UpdateLocationByIdRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
  return _internal_pincode();
}
inline void UpdateLocationByIdRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
}
inline std::string* UpdateLocationByIdRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& UpdateLocationByIdRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
}
inline void UpdateLocationByIdRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
}
inline void UpdateLocationByIdRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.pincode)
}

// string latLongGeohash = 20;
inline void UpdateLocationByIdRequest::clear_latlonggeohash() {
  latlonggeohash_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdRequest::latlonggeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
  return _internal_latlonggeohash();
}
inline void UpdateLocationByIdRequest::set_latlonggeohash(const std::string& value) {
  _internal_set_latlonggeohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
}
inline std::string* UpdateLocationByIdRequest::mutable_latlonggeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
  return _internal_mutable_latlonggeohash();
}
inline const std::string& UpdateLocationByIdRequest::_internal_latlonggeohash() const {
  return latlonggeohash_.Get();
}
inline void UpdateLocationByIdRequest::_internal_set_latlonggeohash(const std::string& value) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdRequest::set_latlonggeohash(std::string&& value) {
  
  latlonggeohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
}
inline void UpdateLocationByIdRequest::set_latlonggeohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
}
inline void UpdateLocationByIdRequest::set_latlonggeohash(const char* value,
    size_t size) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
}
inline std::string* UpdateLocationByIdRequest::_internal_mutable_latlonggeohash() {
  
  return latlonggeohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdRequest::release_latlonggeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
  return latlonggeohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdRequest::set_allocated_latlonggeohash(std::string* latlonggeohash) {
  if (latlonggeohash != nullptr) {
    
  } else {
    
  }
  latlonggeohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latlonggeohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdRequest.latLongGeohash)
}

// int64 id = 21;
inline void UpdateLocationByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.id)
  return _internal_id();
}
inline void UpdateLocationByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateLocationByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.id)
}

// int32 oldVersion = 22;
inline void UpdateLocationByIdRequest::clear_oldversion() {
  oldversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::_internal_oldversion() const {
  return oldversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdRequest::oldversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdRequest.oldVersion)
  return _internal_oldversion();
}
inline void UpdateLocationByIdRequest::_internal_set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oldversion_ = value;
}
inline void UpdateLocationByIdRequest::set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oldversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdRequest.oldVersion)
}

// -------------------------------------------------------------------

// BulkUpdateLocationByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateLocationByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateLocationByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateLocationByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateLocationByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationByIdRequest requests = 2;
inline int BulkUpdateLocationByIdRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateLocationByIdRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateLocationByIdRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* BulkUpdateLocationByIdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >*
BulkUpdateLocationByIdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& BulkUpdateLocationByIdRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& BulkUpdateLocationByIdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* BulkUpdateLocationByIdRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* BulkUpdateLocationByIdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >&
BulkUpdateLocationByIdRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateLocationByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateLocationByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateLocationByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdResponse.status)
  return _internal_status();
}
inline void UpdateLocationByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdResponse.status)
  return _internal_mutable_status();
}
inline void UpdateLocationByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdResponse.status)
}

// int32 count = 2;
inline void UpdateLocationByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdResponse.count)
  return _internal_count();
}
inline void UpdateLocationByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateLocationByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdResponse.count)
}

// string recordId = 3;
inline void UpdateLocationByIdResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateLocationByIdResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
  return _internal_recordid();
}
inline void UpdateLocationByIdResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
}
inline std::string* UpdateLocationByIdResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateLocationByIdResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateLocationByIdResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationByIdResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
}
inline void UpdateLocationByIdResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
}
inline void UpdateLocationByIdResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
}
inline std::string* UpdateLocationByIdResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationByIdResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationByIdResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationByIdResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateLocationByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateLocationByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateLocationByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateLocationByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateLocationByIdResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateLocationByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateLocationByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateLocationByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status)
  return _internal_status();
}
inline void BulkUpdateLocationByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateLocationByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.status)
}

// int32 count = 2;
inline void BulkUpdateLocationByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.count)
  return _internal_count();
}
inline void BulkUpdateLocationByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateLocationByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.count)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationByIdResponse responses = 3;
inline int BulkUpdateLocationByIdResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateLocationByIdResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateLocationByIdResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* BulkUpdateLocationByIdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >*
BulkUpdateLocationByIdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& BulkUpdateLocationByIdResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& BulkUpdateLocationByIdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* BulkUpdateLocationByIdResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* BulkUpdateLocationByIdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >&
BulkUpdateLocationByIdResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// UpdateLocationLabelByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateLocationLabelByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateLocationLabelByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationLabelByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationLabelByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateLocationLabelByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationLabelByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationLabelByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationLabelByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationLabelByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateLocationLabelByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.requestHeaders)
}

// string labels = 2;
inline void UpdateLocationLabelByIdRequest::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& UpdateLocationLabelByIdRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
  return _internal_labels();
}
inline void UpdateLocationLabelByIdRequest::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
}
inline std::string* UpdateLocationLabelByIdRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
  return _internal_mutable_labels();
}
inline const std::string& UpdateLocationLabelByIdRequest::_internal_labels() const {
  return labels_.Get();
}
inline void UpdateLocationLabelByIdRequest::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationLabelByIdRequest::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
}
inline void UpdateLocationLabelByIdRequest::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
}
inline void UpdateLocationLabelByIdRequest::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
}
inline std::string* UpdateLocationLabelByIdRequest::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationLabelByIdRequest::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationLabelByIdRequest::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.labels)
}

// int64 modifiedByActorId = 3;
inline void UpdateLocationLabelByIdRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationLabelByIdRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationLabelByIdRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void UpdateLocationLabelByIdRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void UpdateLocationLabelByIdRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorId)
}

// string modifiedByActorType = 4;
inline void UpdateLocationLabelByIdRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& UpdateLocationLabelByIdRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void UpdateLocationLabelByIdRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationLabelByIdRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& UpdateLocationLabelByIdRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void UpdateLocationLabelByIdRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationLabelByIdRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
}
inline void UpdateLocationLabelByIdRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
}
inline void UpdateLocationLabelByIdRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationLabelByIdRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationLabelByIdRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationLabelByIdRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.modifiedByActorType)
}

// int64 id = 5;
inline void UpdateLocationLabelByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationLabelByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationLabelByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.id)
  return _internal_id();
}
inline void UpdateLocationLabelByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateLocationLabelByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest.id)
}

// -------------------------------------------------------------------

// BulkUpdateLocationLabelByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateLocationLabelByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateLocationLabelByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationLabelByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationLabelByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateLocationLabelByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationLabelByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationLabelByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationLabelByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationLabelByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateLocationLabelByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest requests = 2;
inline int BulkUpdateLocationLabelByIdRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateLocationLabelByIdRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateLocationLabelByIdRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* BulkUpdateLocationLabelByIdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >*
BulkUpdateLocationLabelByIdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& BulkUpdateLocationLabelByIdRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& BulkUpdateLocationLabelByIdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* BulkUpdateLocationLabelByIdRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* BulkUpdateLocationLabelByIdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >&
BulkUpdateLocationLabelByIdRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateLocationLabelByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateLocationLabelByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateLocationLabelByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationLabelByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationLabelByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status)
  return _internal_status();
}
inline void UpdateLocationLabelByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationLabelByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationLabelByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationLabelByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationLabelByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status)
  return _internal_mutable_status();
}
inline void UpdateLocationLabelByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.status)
}

// int32 count = 2;
inline void UpdateLocationLabelByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationLabelByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationLabelByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.count)
  return _internal_count();
}
inline void UpdateLocationLabelByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateLocationLabelByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.count)
}

// string recordId = 3;
inline void UpdateLocationLabelByIdResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateLocationLabelByIdResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
  return _internal_recordid();
}
inline void UpdateLocationLabelByIdResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
}
inline std::string* UpdateLocationLabelByIdResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateLocationLabelByIdResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateLocationLabelByIdResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationLabelByIdResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
}
inline void UpdateLocationLabelByIdResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
}
inline void UpdateLocationLabelByIdResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
}
inline std::string* UpdateLocationLabelByIdResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationLabelByIdResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationLabelByIdResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateLocationLabelByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateLocationLabelByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationLabelByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateLocationLabelByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationLabelByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationLabelByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationLabelByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationLabelByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateLocationLabelByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateLocationLabelByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateLocationLabelByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateLocationLabelByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationLabelByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationLabelByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status)
  return _internal_status();
}
inline void BulkUpdateLocationLabelByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationLabelByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationLabelByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationLabelByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationLabelByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateLocationLabelByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.status)
}

// int32 count = 2;
inline void BulkUpdateLocationLabelByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationLabelByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationLabelByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.count)
  return _internal_count();
}
inline void BulkUpdateLocationLabelByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateLocationLabelByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.count)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse responses = 3;
inline int BulkUpdateLocationLabelByIdResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateLocationLabelByIdResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateLocationLabelByIdResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* BulkUpdateLocationLabelByIdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >*
BulkUpdateLocationLabelByIdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& BulkUpdateLocationLabelByIdResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& BulkUpdateLocationLabelByIdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* BulkUpdateLocationLabelByIdResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* BulkUpdateLocationLabelByIdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >&
BulkUpdateLocationLabelByIdResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// UpdateDeleteS2CellByLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateDeleteS2CellByLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateDeleteS2CellByLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateDeleteS2CellByLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateDeleteS2CellByLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateDeleteS2CellByLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateDeleteS2CellByLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateDeleteS2CellByLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateDeleteS2CellByLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateDeleteS2CellByLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateDeleteS2CellByLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.requestHeaders)
}

// int64 deletedAt = 2;
inline void UpdateDeleteS2CellByLocationRequest::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.deletedAt)
  return _internal_deletedat();
}
inline void UpdateDeleteS2CellByLocationRequest::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void UpdateDeleteS2CellByLocationRequest::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.deletedAt)
}

// int64 locationId = 3;
inline void UpdateDeleteS2CellByLocationRequest::clear_locationid() {
  locationid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::locationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.locationId)
  return _internal_locationid();
}
inline void UpdateDeleteS2CellByLocationRequest::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  locationid_ = value;
}
inline void UpdateDeleteS2CellByLocationRequest::set_locationid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.locationId)
}

// int64 s2CellId = 4;
inline void UpdateDeleteS2CellByLocationRequest::clear_s2cellid() {
  s2cellid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::_internal_s2cellid() const {
  return s2cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateDeleteS2CellByLocationRequest::s2cellid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.s2CellId)
  return _internal_s2cellid();
}
inline void UpdateDeleteS2CellByLocationRequest::_internal_set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  s2cellid_ = value;
}
inline void UpdateDeleteS2CellByLocationRequest::set_s2cellid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_s2cellid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.s2CellId)
}

// int32 s2CellLevel = 5;
inline void UpdateDeleteS2CellByLocationRequest::clear_s2celllevel() {
  s2celllevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDeleteS2CellByLocationRequest::_internal_s2celllevel() const {
  return s2celllevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDeleteS2CellByLocationRequest::s2celllevel() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.s2CellLevel)
  return _internal_s2celllevel();
}
inline void UpdateDeleteS2CellByLocationRequest::_internal_set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s2celllevel_ = value;
}
inline void UpdateDeleteS2CellByLocationRequest::set_s2celllevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s2celllevel(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest.s2CellLevel)
}

// -------------------------------------------------------------------

// BulkUpdateDeleteS2CellByLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateDeleteS2CellByLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateDeleteS2CellByLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateDeleteS2CellByLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateDeleteS2CellByLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateDeleteS2CellByLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateDeleteS2CellByLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateDeleteS2CellByLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateDeleteS2CellByLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateDeleteS2CellByLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateDeleteS2CellByLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest requests = 2;
inline int BulkUpdateDeleteS2CellByLocationRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateDeleteS2CellByLocationRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateDeleteS2CellByLocationRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* BulkUpdateDeleteS2CellByLocationRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >*
BulkUpdateDeleteS2CellByLocationRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& BulkUpdateDeleteS2CellByLocationRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& BulkUpdateDeleteS2CellByLocationRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* BulkUpdateDeleteS2CellByLocationRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* BulkUpdateDeleteS2CellByLocationRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >&
BulkUpdateDeleteS2CellByLocationRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateDeleteS2CellByLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateDeleteS2CellByLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateDeleteS2CellByLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateDeleteS2CellByLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateDeleteS2CellByLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status)
  return _internal_status();
}
inline void UpdateDeleteS2CellByLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateDeleteS2CellByLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateDeleteS2CellByLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateDeleteS2CellByLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateDeleteS2CellByLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status)
  return _internal_mutable_status();
}
inline void UpdateDeleteS2CellByLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.status)
}

// int32 count = 2;
inline void UpdateDeleteS2CellByLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDeleteS2CellByLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDeleteS2CellByLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.count)
  return _internal_count();
}
inline void UpdateDeleteS2CellByLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateDeleteS2CellByLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.count)
}

// string recordId = 3;
inline void UpdateDeleteS2CellByLocationResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateDeleteS2CellByLocationResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
  return _internal_recordid();
}
inline void UpdateDeleteS2CellByLocationResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
}
inline std::string* UpdateDeleteS2CellByLocationResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateDeleteS2CellByLocationResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateDeleteS2CellByLocationResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateDeleteS2CellByLocationResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
}
inline void UpdateDeleteS2CellByLocationResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
}
inline void UpdateDeleteS2CellByLocationResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
}
inline std::string* UpdateDeleteS2CellByLocationResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateDeleteS2CellByLocationResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDeleteS2CellByLocationResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateDeleteS2CellByLocationResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateDeleteS2CellByLocationResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateDeleteS2CellByLocationResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateDeleteS2CellByLocationResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateDeleteS2CellByLocationResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateDeleteS2CellByLocationResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateDeleteS2CellByLocationResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateDeleteS2CellByLocationResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateDeleteS2CellByLocationResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateDeleteS2CellByLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateDeleteS2CellByLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateDeleteS2CellByLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateDeleteS2CellByLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateDeleteS2CellByLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status)
  return _internal_status();
}
inline void BulkUpdateDeleteS2CellByLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateDeleteS2CellByLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateDeleteS2CellByLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateDeleteS2CellByLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateDeleteS2CellByLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateDeleteS2CellByLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.status)
}

// int32 count = 2;
inline void BulkUpdateDeleteS2CellByLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateDeleteS2CellByLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateDeleteS2CellByLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.count)
  return _internal_count();
}
inline void BulkUpdateDeleteS2CellByLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateDeleteS2CellByLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.count)
}

// repeated .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse responses = 3;
inline int BulkUpdateDeleteS2CellByLocationResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateDeleteS2CellByLocationResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateDeleteS2CellByLocationResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* BulkUpdateDeleteS2CellByLocationResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >*
BulkUpdateDeleteS2CellByLocationResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& BulkUpdateDeleteS2CellByLocationResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& BulkUpdateDeleteS2CellByLocationResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* BulkUpdateDeleteS2CellByLocationResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* BulkUpdateDeleteS2CellByLocationResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >&
BulkUpdateDeleteS2CellByLocationResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// FetchConfigByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchConfigByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchConfigByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchConfigByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchConfigByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchConfigByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchConfigByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchConfigByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchConfigByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchConfigByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchConfigByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchConfigByIdRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchConfigByIdRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchConfigByIdRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchConfigByIdRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchConfigByIdRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchConfigByIdRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchConfigByIdRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchConfigByIdRequest.isStaleAllowed)
}

// int64 id = 3;
inline void FetchConfigByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchConfigByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchConfigByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchConfigByIdRequest.id)
  return _internal_id();
}
inline void FetchConfigByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchConfigByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchConfigByIdRequest.id)
}

// -------------------------------------------------------------------

// ConfigRecord

// int64 id = 1;
inline void ConfigRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.id)
  return _internal_id();
}
inline void ConfigRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ConfigRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.id)
}

// string key = 2;
inline void ConfigRecord::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ConfigRecord::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.key)
  return _internal_key();
}
inline void ConfigRecord::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.key)
}
inline std::string* ConfigRecord::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.ConfigRecord.key)
  return _internal_mutable_key();
}
inline const std::string& ConfigRecord::_internal_key() const {
  return key_.Get();
}
inline void ConfigRecord::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigRecord::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.ConfigRecord.key)
}
inline void ConfigRecord::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.ConfigRecord.key)
}
inline void ConfigRecord::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.ConfigRecord.key)
}
inline std::string* ConfigRecord::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigRecord::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.ConfigRecord.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRecord::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.ConfigRecord.key)
}

// string value = 3;
inline void ConfigRecord::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ConfigRecord::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.value)
  return _internal_value();
}
inline void ConfigRecord::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.value)
}
inline std::string* ConfigRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.ConfigRecord.value)
  return _internal_mutable_value();
}
inline const std::string& ConfigRecord::_internal_value() const {
  return value_.Get();
}
inline void ConfigRecord::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigRecord::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.ConfigRecord.value)
}
inline void ConfigRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.ConfigRecord.value)
}
inline void ConfigRecord::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.ConfigRecord.value)
}
inline std::string* ConfigRecord::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigRecord::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.ConfigRecord.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRecord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.ConfigRecord.value)
}

// int64 createdAt = 4;
inline void ConfigRecord::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::createdat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.createdAt)
  return _internal_createdat();
}
inline void ConfigRecord::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void ConfigRecord::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.createdAt)
}

// int64 updatedAt = 5;
inline void ConfigRecord::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::updatedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.updatedAt)
  return _internal_updatedat();
}
inline void ConfigRecord::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatedat_ = value;
}
inline void ConfigRecord::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.updatedAt)
}

// int64 deletedAt = 6;
inline void ConfigRecord::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecord::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.ConfigRecord.deletedAt)
  return _internal_deletedat();
}
inline void ConfigRecord::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void ConfigRecord::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.ConfigRecord.deletedAt)
}

// -------------------------------------------------------------------

// Config

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool Config::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Config::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Config::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Config::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Config.status)
  return _internal_status();
}
inline void Config::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Config.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Config::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Config::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Config.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Config::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Config::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Config.status)
  return _internal_mutable_status();
}
inline void Config::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Config.status)
}

// int32 count = 2;
inline void Config::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Config.count)
  return _internal_count();
}
inline void Config::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Config::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Config.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int Config::_internal_attribs_size() const {
  return attribs_.size();
}
inline int Config::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* Config::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Config.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
Config::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.Config.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& Config::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& Config::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Config.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* Config::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* Config::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.Config.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
Config::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.Config.attribs)
  return attribs_;
}

// .farm.nurture.location.service.proto.ConfigRecord records = 4;
inline bool Config::_internal_has_records() const {
  return this != internal_default_instance() && records_ != nullptr;
}
inline bool Config::has_records() const {
  return _internal_has_records();
}
inline void Config::clear_records() {
  if (GetArena() == nullptr && records_ != nullptr) {
    delete records_;
  }
  records_ = nullptr;
}
inline const ::farm::nurture::location::service::proto::ConfigRecord& Config::_internal_records() const {
  const ::farm::nurture::location::service::proto::ConfigRecord* p = records_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::location::service::proto::ConfigRecord&>(
      ::farm::nurture::location::service::proto::_ConfigRecord_default_instance_);
}
inline const ::farm::nurture::location::service::proto::ConfigRecord& Config::records() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Config.records)
  return _internal_records();
}
inline void Config::unsafe_arena_set_allocated_records(
    ::farm::nurture::location::service::proto::ConfigRecord* records) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(records_);
  }
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Config.records)
}
inline ::farm::nurture::location::service::proto::ConfigRecord* Config::release_records() {
  
  ::farm::nurture::location::service::proto::ConfigRecord* temp = records_;
  records_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::location::service::proto::ConfigRecord* Config::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Config.records)
  
  ::farm::nurture::location::service::proto::ConfigRecord* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::farm::nurture::location::service::proto::ConfigRecord* Config::_internal_mutable_records() {
  
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::location::service::proto::ConfigRecord>(GetArena());
    records_ = p;
  }
  return records_;
}
inline ::farm::nurture::location::service::proto::ConfigRecord* Config::mutable_records() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Config.records)
  return _internal_mutable_records();
}
inline void Config::set_allocated_records(::farm::nurture::location::service::proto::ConfigRecord* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    
  } else {
    
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Config.records)
}

// -------------------------------------------------------------------

// AddLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.requestHeaders)
}

// .farm.nurture.location.service.proto.Format format = 2;
inline void AddLocationRequest::clear_format() {
  format_ = 0;
}
inline ::farm::nurture::location::service::proto::Format AddLocationRequest::_internal_format() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(format_);
}
inline ::farm::nurture::location::service::proto::Format AddLocationRequest::format() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.format)
  return _internal_format();
}
inline void AddLocationRequest::_internal_set_format(::farm::nurture::location::service::proto::Format value) {
  
  format_ = value;
}
inline void AddLocationRequest::set_format(::farm::nurture::location::service::proto::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.format)
}

// string boundary = 3;
inline void AddLocationRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.boundary)
  return _internal_boundary();
}
inline void AddLocationRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.boundary)
}
inline std::string* AddLocationRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& AddLocationRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void AddLocationRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.boundary)
}
inline void AddLocationRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.boundary)
}
inline void AddLocationRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.boundary)
}
inline std::string* AddLocationRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.boundary)
}

// repeated .farm.nurture.location.service.proto.Label labels = 4;
inline int AddLocationRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int AddLocationRequest::labels_size() const {
  return _internal_labels_size();
}
inline void AddLocationRequest::clear_labels() {
  labels_.Clear();
}
inline ::farm::nurture::location::service::proto::Label* AddLocationRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
AddLocationRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.AddLocationRequest.labels)
  return &labels_;
}
inline const ::farm::nurture::location::service::proto::Label& AddLocationRequest::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Label& AddLocationRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.labels)
  return _internal_labels(index);
}
inline ::farm::nurture::location::service::proto::Label* AddLocationRequest::_internal_add_labels() {
  return labels_.Add();
}
inline ::farm::nurture::location::service::proto::Label* AddLocationRequest::add_labels() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.AddLocationRequest.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
AddLocationRequest::labels() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.AddLocationRequest.labels)
  return labels_;
}

// double center_latitude = 5;
inline void AddLocationRequest::clear_center_latitude() {
  center_latitude_ = 0;
}
inline double AddLocationRequest::_internal_center_latitude() const {
  return center_latitude_;
}
inline double AddLocationRequest::center_latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.center_latitude)
  return _internal_center_latitude();
}
inline void AddLocationRequest::_internal_set_center_latitude(double value) {
  
  center_latitude_ = value;
}
inline void AddLocationRequest::set_center_latitude(double value) {
  _internal_set_center_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.center_latitude)
}

// double center_longitude = 6;
inline void AddLocationRequest::clear_center_longitude() {
  center_longitude_ = 0;
}
inline double AddLocationRequest::_internal_center_longitude() const {
  return center_longitude_;
}
inline double AddLocationRequest::center_longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.center_longitude)
  return _internal_center_longitude();
}
inline void AddLocationRequest::_internal_set_center_longitude(double value) {
  
  center_longitude_ = value;
}
inline void AddLocationRequest::set_center_longitude(double value) {
  _internal_set_center_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.center_longitude)
}

// double area = 7;
inline void AddLocationRequest::clear_area() {
  area_ = 0;
}
inline double AddLocationRequest::_internal_area() const {
  return area_;
}
inline double AddLocationRequest::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.area)
  return _internal_area();
}
inline void AddLocationRequest::_internal_set_area(double value) {
  
  area_ = value;
}
inline void AddLocationRequest::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.area)
}

// string namespace = 8;
inline void AddLocationRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& AddLocationRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.namespace)
  return _internal_namespace_();
}
inline void AddLocationRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.namespace)
}
inline std::string* AddLocationRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& AddLocationRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void AddLocationRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.namespace)
}
inline void AddLocationRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.namespace)
}
inline void AddLocationRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.namespace)
}
inline std::string* AddLocationRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.namespace)
}

// .farm.nurture.location.service.proto.Status status = 9;
inline void AddLocationRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::Status AddLocationRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(status_);
}
inline ::farm::nurture::location::service::proto::Status AddLocationRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.status)
  return _internal_status();
}
inline void AddLocationRequest::_internal_set_status(::farm::nurture::location::service::proto::Status value) {
  
  status_ = value;
}
inline void AddLocationRequest::set_status(::farm::nurture::location::service::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.status)
}

// string name = 10;
inline void AddLocationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.name)
  return _internal_name();
}
inline void AddLocationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.name)
}
inline std::string* AddLocationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddLocationRequest::_internal_name() const {
  return name_.Get();
}
inline void AddLocationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.name)
}
inline void AddLocationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.name)
}
inline void AddLocationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.name)
}
inline std::string* AddLocationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.name)
}

// string code = 11;
inline void AddLocationRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.code)
  return _internal_code();
}
inline void AddLocationRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.code)
}
inline std::string* AddLocationRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.code)
  return _internal_mutable_code();
}
inline const std::string& AddLocationRequest::_internal_code() const {
  return code_.Get();
}
inline void AddLocationRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.code)
}
inline void AddLocationRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.code)
}
inline void AddLocationRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.code)
}
inline std::string* AddLocationRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.code)
}

// int64 id = 12;
inline void AddLocationRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLocationRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLocationRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.id)
  return _internal_id();
}
inline void AddLocationRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void AddLocationRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.id)
}

// int64 created_by_actor_id = 13;
inline void AddLocationRequest::clear_created_by_actor_id() {
  created_by_actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLocationRequest::_internal_created_by_actor_id() const {
  return created_by_actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLocationRequest::created_by_actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_id)
  return _internal_created_by_actor_id();
}
inline void AddLocationRequest::_internal_set_created_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_by_actor_id_ = value;
}
inline void AddLocationRequest::set_created_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_by_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_id)
}

// string created_by_actor_type = 14;
inline void AddLocationRequest::clear_created_by_actor_type() {
  created_by_actor_type_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::created_by_actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
  return _internal_created_by_actor_type();
}
inline void AddLocationRequest::set_created_by_actor_type(const std::string& value) {
  _internal_set_created_by_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
}
inline std::string* AddLocationRequest::mutable_created_by_actor_type() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
  return _internal_mutable_created_by_actor_type();
}
inline const std::string& AddLocationRequest::_internal_created_by_actor_type() const {
  return created_by_actor_type_.Get();
}
inline void AddLocationRequest::_internal_set_created_by_actor_type(const std::string& value) {
  
  created_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_created_by_actor_type(std::string&& value) {
  
  created_by_actor_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
}
inline void AddLocationRequest::set_created_by_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
}
inline void AddLocationRequest::set_created_by_actor_type(const char* value,
    size_t size) {
  
  created_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
}
inline std::string* AddLocationRequest::_internal_mutable_created_by_actor_type() {
  
  return created_by_actor_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_created_by_actor_type() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
  return created_by_actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_created_by_actor_type(std::string* created_by_actor_type) {
  if (created_by_actor_type != nullptr) {
    
  } else {
    
  }
  created_by_actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_by_actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.created_by_actor_type)
}

// .farm.nurture.location.service.proto.Visibility visibility = 15;
inline void AddLocationRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::Visibility AddLocationRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::Visibility AddLocationRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.visibility)
  return _internal_visibility();
}
inline void AddLocationRequest::_internal_set_visibility(::farm::nurture::location::service::proto::Visibility value) {
  
  visibility_ = value;
}
inline void AddLocationRequest::set_visibility(::farm::nurture::location::service::proto::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.visibility)
}

// string geography_uid = 16;
inline void AddLocationRequest::clear_geography_uid() {
  geography_uid_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::geography_uid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
  return _internal_geography_uid();
}
inline void AddLocationRequest::set_geography_uid(const std::string& value) {
  _internal_set_geography_uid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
}
inline std::string* AddLocationRequest::mutable_geography_uid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
  return _internal_mutable_geography_uid();
}
inline const std::string& AddLocationRequest::_internal_geography_uid() const {
  return geography_uid_.Get();
}
inline void AddLocationRequest::_internal_set_geography_uid(const std::string& value) {
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_geography_uid(std::string&& value) {
  
  geography_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
}
inline void AddLocationRequest::set_geography_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
}
inline void AddLocationRequest::set_geography_uid(const char* value,
    size_t size) {
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
}
inline std::string* AddLocationRequest::_internal_mutable_geography_uid() {
  
  return geography_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_geography_uid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
  return geography_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_geography_uid(std::string* geography_uid) {
  if (geography_uid != nullptr) {
    
  } else {
    
  }
  geography_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geography_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.geography_uid)
}

// string pincode = 17;
inline void AddLocationRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.pincode)
  return _internal_pincode();
}
inline void AddLocationRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.pincode)
}
inline std::string* AddLocationRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& AddLocationRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void AddLocationRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.pincode)
}
inline void AddLocationRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.pincode)
}
inline void AddLocationRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.pincode)
}
inline std::string* AddLocationRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.pincode)
}

// string lat_long_geohash = 18;
inline void AddLocationRequest::clear_lat_long_geohash() {
  lat_long_geohash_.ClearToEmpty();
}
inline const std::string& AddLocationRequest::lat_long_geohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
  return _internal_lat_long_geohash();
}
inline void AddLocationRequest::set_lat_long_geohash(const std::string& value) {
  _internal_set_lat_long_geohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
}
inline std::string* AddLocationRequest::mutable_lat_long_geohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
  return _internal_mutable_lat_long_geohash();
}
inline const std::string& AddLocationRequest::_internal_lat_long_geohash() const {
  return lat_long_geohash_.Get();
}
inline void AddLocationRequest::_internal_set_lat_long_geohash(const std::string& value) {
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationRequest::set_lat_long_geohash(std::string&& value) {
  
  lat_long_geohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
}
inline void AddLocationRequest::set_lat_long_geohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
}
inline void AddLocationRequest::set_lat_long_geohash(const char* value,
    size_t size) {
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
}
inline std::string* AddLocationRequest::_internal_mutable_lat_long_geohash() {
  
  return lat_long_geohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationRequest::release_lat_long_geohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
  return lat_long_geohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationRequest::set_allocated_lat_long_geohash(std::string* lat_long_geohash) {
  if (lat_long_geohash != nullptr) {
    
  } else {
    
  }
  lat_long_geohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lat_long_geohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationRequest.lat_long_geohash)
}

// -------------------------------------------------------------------

// Label

// string key = 1;
inline void Label::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Label::key() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Label.key)
  return _internal_key();
}
inline void Label::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Label.key)
}
inline std::string* Label::mutable_key() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Label.key)
  return _internal_mutable_key();
}
inline const std::string& Label::_internal_key() const {
  return key_.Get();
}
inline void Label::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Label::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.Label.key)
}
inline void Label::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.Label.key)
}
inline void Label::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.Label.key)
}
inline std::string* Label::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Label::release_key() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Label.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Label.key)
}

// string value = 2;
inline void Label::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Label::value() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Label.value)
  return _internal_value();
}
inline void Label::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Label.value)
}
inline std::string* Label::mutable_value() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Label.value)
  return _internal_mutable_value();
}
inline const std::string& Label::_internal_value() const {
  return value_.Get();
}
inline void Label::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Label::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.Label.value)
}
inline void Label::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.Label.value)
}
inline void Label::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.Label.value)
}
inline std::string* Label::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Label::release_value() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Label.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Label.value)
}

// bool deleteKey = 3;
inline void Label::clear_deletekey() {
  deletekey_ = false;
}
inline bool Label::_internal_deletekey() const {
  return deletekey_;
}
inline bool Label::deletekey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Label.deleteKey)
  return _internal_deletekey();
}
inline void Label::_internal_set_deletekey(bool value) {
  
  deletekey_ = value;
}
inline void Label::set_deletekey(bool value) {
  _internal_set_deletekey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Label.deleteKey)
}

// -------------------------------------------------------------------

// BulkAddLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkAddLocationRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.AddLocationRequest requests = 2;
inline int BulkAddLocationRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddLocationRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddLocationRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* BulkAddLocationRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddLocationRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationRequest >*
BulkAddLocationRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkAddLocationRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::AddLocationRequest& BulkAddLocationRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::AddLocationRequest& BulkAddLocationRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddLocationRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* BulkAddLocationRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* BulkAddLocationRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkAddLocationRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationRequest >&
BulkAddLocationRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkAddLocationRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationResponse.status)
  return _internal_status();
}
inline void AddLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.AddLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationResponse.status)
  return _internal_mutable_status();
}
inline void AddLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationResponse.status)
}

// int32 count = 2;
inline void AddLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationResponse.count)
  return _internal_count();
}
inline void AddLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationResponse.count)
}

// string recordId = 3;
inline void AddLocationResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddLocationResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationResponse.recordId)
  return _internal_recordid();
}
inline void AddLocationResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddLocationResponse.recordId)
}
inline std::string* AddLocationResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddLocationResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddLocationResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddLocationResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddLocationResponse.recordId)
}
inline void AddLocationResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddLocationResponse.recordId)
}
inline void AddLocationResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddLocationResponse.recordId)
}
inline std::string* AddLocationResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddLocationResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddLocationResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLocationResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddLocationResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddLocationResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddLocationResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddLocationResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddLocationResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddLocationResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.AddLocationResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddLocationResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddLocationResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddLocationResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddLocationResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddLocationResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.AddLocationResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddLocationResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.AddLocationResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddLocationResponse.status)
  return _internal_status();
}
inline void BulkAddLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkAddLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkAddLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddLocationResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkAddLocationResponse.status)
}

// int32 count = 2;
inline void BulkAddLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddLocationResponse.count)
  return _internal_count();
}
inline void BulkAddLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkAddLocationResponse.count)
}

// repeated .farm.nurture.location.service.proto.AddLocationResponse responses = 3;
inline int BulkAddLocationResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddLocationResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddLocationResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* BulkAddLocationResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddLocationResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationResponse >*
BulkAddLocationResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkAddLocationResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::AddLocationResponse& BulkAddLocationResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::AddLocationResponse& BulkAddLocationResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddLocationResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* BulkAddLocationResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* BulkAddLocationResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkAddLocationResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddLocationResponse >&
BulkAddLocationResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkAddLocationResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// UpdateLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.requestHeaders)
}

// .farm.nurture.location.service.proto.Format format = 2;
inline void UpdateLocationRequest::clear_format() {
  format_ = 0;
}
inline ::farm::nurture::location::service::proto::Format UpdateLocationRequest::_internal_format() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(format_);
}
inline ::farm::nurture::location::service::proto::Format UpdateLocationRequest::format() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.format)
  return _internal_format();
}
inline void UpdateLocationRequest::_internal_set_format(::farm::nurture::location::service::proto::Format value) {
  
  format_ = value;
}
inline void UpdateLocationRequest::set_format(::farm::nurture::location::service::proto::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.format)
}

// string boundary = 3;
inline void UpdateLocationRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
  return _internal_boundary();
}
inline void UpdateLocationRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
}
inline std::string* UpdateLocationRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& UpdateLocationRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void UpdateLocationRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
}
inline void UpdateLocationRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
}
inline void UpdateLocationRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
}
inline std::string* UpdateLocationRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.boundary)
}

// repeated .farm.nurture.location.service.proto.Label labels = 4;
inline int UpdateLocationRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int UpdateLocationRequest::labels_size() const {
  return _internal_labels_size();
}
inline void UpdateLocationRequest::clear_labels() {
  labels_.Clear();
}
inline ::farm::nurture::location::service::proto::Label* UpdateLocationRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
UpdateLocationRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateLocationRequest.labels)
  return &labels_;
}
inline const ::farm::nurture::location::service::proto::Label& UpdateLocationRequest::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Label& UpdateLocationRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.labels)
  return _internal_labels(index);
}
inline ::farm::nurture::location::service::proto::Label* UpdateLocationRequest::_internal_add_labels() {
  return labels_.Add();
}
inline ::farm::nurture::location::service::proto::Label* UpdateLocationRequest::add_labels() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateLocationRequest.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
UpdateLocationRequest::labels() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateLocationRequest.labels)
  return labels_;
}

// double center_latitude = 5;
inline void UpdateLocationRequest::clear_center_latitude() {
  center_latitude_ = 0;
}
inline double UpdateLocationRequest::_internal_center_latitude() const {
  return center_latitude_;
}
inline double UpdateLocationRequest::center_latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.center_latitude)
  return _internal_center_latitude();
}
inline void UpdateLocationRequest::_internal_set_center_latitude(double value) {
  
  center_latitude_ = value;
}
inline void UpdateLocationRequest::set_center_latitude(double value) {
  _internal_set_center_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.center_latitude)
}

// double center_longitude = 6;
inline void UpdateLocationRequest::clear_center_longitude() {
  center_longitude_ = 0;
}
inline double UpdateLocationRequest::_internal_center_longitude() const {
  return center_longitude_;
}
inline double UpdateLocationRequest::center_longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.center_longitude)
  return _internal_center_longitude();
}
inline void UpdateLocationRequest::_internal_set_center_longitude(double value) {
  
  center_longitude_ = value;
}
inline void UpdateLocationRequest::set_center_longitude(double value) {
  _internal_set_center_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.center_longitude)
}

// double area = 7;
inline void UpdateLocationRequest::clear_area() {
  area_ = 0;
}
inline double UpdateLocationRequest::_internal_area() const {
  return area_;
}
inline double UpdateLocationRequest::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.area)
  return _internal_area();
}
inline void UpdateLocationRequest::_internal_set_area(double value) {
  
  area_ = value;
}
inline void UpdateLocationRequest::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.area)
}

// string namespace = 8;
inline void UpdateLocationRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
  return _internal_namespace_();
}
inline void UpdateLocationRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
}
inline std::string* UpdateLocationRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& UpdateLocationRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void UpdateLocationRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
}
inline void UpdateLocationRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
}
inline void UpdateLocationRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
}
inline std::string* UpdateLocationRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.namespace)
}

// .farm.nurture.location.service.proto.Status status = 9;
inline void UpdateLocationRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::Status UpdateLocationRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(status_);
}
inline ::farm::nurture::location::service::proto::Status UpdateLocationRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.status)
  return _internal_status();
}
inline void UpdateLocationRequest::_internal_set_status(::farm::nurture::location::service::proto::Status value) {
  
  status_ = value;
}
inline void UpdateLocationRequest::set_status(::farm::nurture::location::service::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.status)
}

// string name = 10;
inline void UpdateLocationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.name)
  return _internal_name();
}
inline void UpdateLocationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.name)
}
inline std::string* UpdateLocationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateLocationRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateLocationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.name)
}
inline void UpdateLocationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.name)
}
inline void UpdateLocationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.name)
}
inline std::string* UpdateLocationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.name)
}

// int64 id = 11;
inline void UpdateLocationRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.id)
  return _internal_id();
}
inline void UpdateLocationRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateLocationRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.id)
}

// string code = 12;
inline void UpdateLocationRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.code)
  return _internal_code();
}
inline void UpdateLocationRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.code)
}
inline std::string* UpdateLocationRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.code)
  return _internal_mutable_code();
}
inline const std::string& UpdateLocationRequest::_internal_code() const {
  return code_.Get();
}
inline void UpdateLocationRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.code)
}
inline void UpdateLocationRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.code)
}
inline void UpdateLocationRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.code)
}
inline std::string* UpdateLocationRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.code)
}

// int64 modified_by_actor_id = 13;
inline void UpdateLocationRequest::clear_modified_by_actor_id() {
  modified_by_actor_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationRequest::_internal_modified_by_actor_id() const {
  return modified_by_actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationRequest::modified_by_actor_id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_id)
  return _internal_modified_by_actor_id();
}
inline void UpdateLocationRequest::_internal_set_modified_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modified_by_actor_id_ = value;
}
inline void UpdateLocationRequest::set_modified_by_actor_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modified_by_actor_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_id)
}

// string modified_by_actor_type = 14;
inline void UpdateLocationRequest::clear_modified_by_actor_type() {
  modified_by_actor_type_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::modified_by_actor_type() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
  return _internal_modified_by_actor_type();
}
inline void UpdateLocationRequest::set_modified_by_actor_type(const std::string& value) {
  _internal_set_modified_by_actor_type(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
}
inline std::string* UpdateLocationRequest::mutable_modified_by_actor_type() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
  return _internal_mutable_modified_by_actor_type();
}
inline const std::string& UpdateLocationRequest::_internal_modified_by_actor_type() const {
  return modified_by_actor_type_.Get();
}
inline void UpdateLocationRequest::_internal_set_modified_by_actor_type(const std::string& value) {
  
  modified_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_modified_by_actor_type(std::string&& value) {
  
  modified_by_actor_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
}
inline void UpdateLocationRequest::set_modified_by_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modified_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
}
inline void UpdateLocationRequest::set_modified_by_actor_type(const char* value,
    size_t size) {
  
  modified_by_actor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
}
inline std::string* UpdateLocationRequest::_internal_mutable_modified_by_actor_type() {
  
  return modified_by_actor_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_modified_by_actor_type() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
  return modified_by_actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_modified_by_actor_type(std::string* modified_by_actor_type) {
  if (modified_by_actor_type != nullptr) {
    
  } else {
    
  }
  modified_by_actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modified_by_actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.modified_by_actor_type)
}

// .farm.nurture.location.service.proto.Visibility visibility = 15;
inline void UpdateLocationRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::Visibility UpdateLocationRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::Visibility UpdateLocationRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.visibility)
  return _internal_visibility();
}
inline void UpdateLocationRequest::_internal_set_visibility(::farm::nurture::location::service::proto::Visibility value) {
  
  visibility_ = value;
}
inline void UpdateLocationRequest::set_visibility(::farm::nurture::location::service::proto::Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.visibility)
}

// string geography_uid = 16;
inline void UpdateLocationRequest::clear_geography_uid() {
  geography_uid_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::geography_uid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
  return _internal_geography_uid();
}
inline void UpdateLocationRequest::set_geography_uid(const std::string& value) {
  _internal_set_geography_uid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
}
inline std::string* UpdateLocationRequest::mutable_geography_uid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
  return _internal_mutable_geography_uid();
}
inline const std::string& UpdateLocationRequest::_internal_geography_uid() const {
  return geography_uid_.Get();
}
inline void UpdateLocationRequest::_internal_set_geography_uid(const std::string& value) {
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_geography_uid(std::string&& value) {
  
  geography_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
}
inline void UpdateLocationRequest::set_geography_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
}
inline void UpdateLocationRequest::set_geography_uid(const char* value,
    size_t size) {
  
  geography_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
}
inline std::string* UpdateLocationRequest::_internal_mutable_geography_uid() {
  
  return geography_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_geography_uid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
  return geography_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_geography_uid(std::string* geography_uid) {
  if (geography_uid != nullptr) {
    
  } else {
    
  }
  geography_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geography_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.geography_uid)
}

// string pincode = 17;
inline void UpdateLocationRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
  return _internal_pincode();
}
inline void UpdateLocationRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
}
inline std::string* UpdateLocationRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& UpdateLocationRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void UpdateLocationRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
}
inline void UpdateLocationRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
}
inline void UpdateLocationRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
}
inline std::string* UpdateLocationRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.pincode)
}

// string lat_long_geohash = 18;
inline void UpdateLocationRequest::clear_lat_long_geohash() {
  lat_long_geohash_.ClearToEmpty();
}
inline const std::string& UpdateLocationRequest::lat_long_geohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
  return _internal_lat_long_geohash();
}
inline void UpdateLocationRequest::set_lat_long_geohash(const std::string& value) {
  _internal_set_lat_long_geohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
}
inline std::string* UpdateLocationRequest::mutable_lat_long_geohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
  return _internal_mutable_lat_long_geohash();
}
inline const std::string& UpdateLocationRequest::_internal_lat_long_geohash() const {
  return lat_long_geohash_.Get();
}
inline void UpdateLocationRequest::_internal_set_lat_long_geohash(const std::string& value) {
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationRequest::set_lat_long_geohash(std::string&& value) {
  
  lat_long_geohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
}
inline void UpdateLocationRequest::set_lat_long_geohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
}
inline void UpdateLocationRequest::set_lat_long_geohash(const char* value,
    size_t size) {
  
  lat_long_geohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
}
inline std::string* UpdateLocationRequest::_internal_mutable_lat_long_geohash() {
  
  return lat_long_geohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationRequest::release_lat_long_geohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
  return lat_long_geohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationRequest::set_allocated_lat_long_geohash(std::string* lat_long_geohash) {
  if (lat_long_geohash != nullptr) {
    
  } else {
    
  }
  lat_long_geohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lat_long_geohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationRequest.lat_long_geohash)
}

// -------------------------------------------------------------------

// BulkUpdateLocationRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateLocationRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateLocationRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateLocationRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateLocationRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationRequest requests = 2;
inline int BulkUpdateLocationRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateLocationRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateLocationRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* BulkUpdateLocationRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationRequest >*
BulkUpdateLocationRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationRequest& BulkUpdateLocationRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationRequest& BulkUpdateLocationRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* BulkUpdateLocationRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* BulkUpdateLocationRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationRequest >&
BulkUpdateLocationRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationResponse.status)
  return _internal_status();
}
inline void UpdateLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationResponse.status)
  return _internal_mutable_status();
}
inline void UpdateLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationResponse.status)
}

// int32 count = 2;
inline void UpdateLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationResponse.count)
  return _internal_count();
}
inline void UpdateLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationResponse.count)
}

// string recordId = 3;
inline void UpdateLocationResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateLocationResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
  return _internal_recordid();
}
inline void UpdateLocationResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
}
inline std::string* UpdateLocationResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateLocationResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateLocationResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
}
inline void UpdateLocationResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
}
inline void UpdateLocationResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
}
inline std::string* UpdateLocationResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateLocationResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateLocationResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateLocationResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateLocationResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateLocationResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateLocationResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateLocationResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateLocationResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationResponse.status)
  return _internal_status();
}
inline void BulkUpdateLocationResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateLocationResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationResponse.status)
}

// int32 count = 2;
inline void BulkUpdateLocationResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationResponse.count)
  return _internal_count();
}
inline void BulkUpdateLocationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateLocationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkUpdateLocationResponse.count)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationResponse responses = 3;
inline int BulkUpdateLocationResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateLocationResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateLocationResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* BulkUpdateLocationResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationResponse >*
BulkUpdateLocationResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationResponse& BulkUpdateLocationResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationResponse& BulkUpdateLocationResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* BulkUpdateLocationResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* BulkUpdateLocationResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationResponse >&
BulkUpdateLocationResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// GetLocationsWithBoundaryRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetLocationsWithBoundaryRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetLocationsWithBoundaryRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationsWithBoundaryRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationsWithBoundaryRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetLocationsWithBoundaryRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsWithBoundaryRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsWithBoundaryRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsWithBoundaryRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsWithBoundaryRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetLocationsWithBoundaryRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetLocationsWithBoundaryRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetLocationsWithBoundaryRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetLocationsWithBoundaryRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.isStaleAllowed)
}

// .farm.nurture.location.service.proto.Format format = 3;
inline void GetLocationsWithBoundaryRequest::clear_format() {
  format_ = 0;
}
inline ::farm::nurture::location::service::proto::Format GetLocationsWithBoundaryRequest::_internal_format() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(format_);
}
inline ::farm::nurture::location::service::proto::Format GetLocationsWithBoundaryRequest::format() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.format)
  return _internal_format();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_format(::farm::nurture::location::service::proto::Format value) {
  
  format_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_format(::farm::nurture::location::service::proto::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.format)
}

// .farm.nurture.location.service.proto.LabelGroup labels = 4;
inline bool GetLocationsWithBoundaryRequest::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool GetLocationsWithBoundaryRequest::has_labels() const {
  return _internal_has_labels();
}
inline void GetLocationsWithBoundaryRequest::clear_labels() {
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
inline const ::farm::nurture::location::service::proto::LabelGroup& GetLocationsWithBoundaryRequest::_internal_labels() const {
  const ::farm::nurture::location::service::proto::LabelGroup* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::location::service::proto::LabelGroup&>(
      ::farm::nurture::location::service::proto::_LabelGroup_default_instance_);
}
inline const ::farm::nurture::location::service::proto::LabelGroup& GetLocationsWithBoundaryRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels)
  return _internal_labels();
}
inline void GetLocationsWithBoundaryRequest::unsafe_arena_set_allocated_labels(
    ::farm::nurture::location::service::proto::LabelGroup* labels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels)
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsWithBoundaryRequest::release_labels() {
  
  ::farm::nurture::location::service::proto::LabelGroup* temp = labels_;
  labels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsWithBoundaryRequest::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels)
  
  ::farm::nurture::location::service::proto::LabelGroup* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsWithBoundaryRequest::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::location::service::proto::LabelGroup>(GetArena());
    labels_ = p;
  }
  return labels_;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsWithBoundaryRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels)
  return _internal_mutable_labels();
}
inline void GetLocationsWithBoundaryRequest::set_allocated_labels(::farm::nurture::location::service::proto::LabelGroup* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete labels_;
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(labels);
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.labels)
}

// double latitude = 5;
inline void GetLocationsWithBoundaryRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetLocationsWithBoundaryRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetLocationsWithBoundaryRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.latitude)
  return _internal_latitude();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.latitude)
}

// double longitude = 6;
inline void GetLocationsWithBoundaryRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetLocationsWithBoundaryRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetLocationsWithBoundaryRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.longitude)
  return _internal_longitude();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.longitude)
}

// double radius = 7;
inline void GetLocationsWithBoundaryRequest::clear_radius() {
  radius_ = 0;
}
inline double GetLocationsWithBoundaryRequest::_internal_radius() const {
  return radius_;
}
inline double GetLocationsWithBoundaryRequest::radius() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.radius)
  return _internal_radius();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.radius)
}

// string namespace = 8;
inline void GetLocationsWithBoundaryRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& GetLocationsWithBoundaryRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
  return _internal_namespace_();
}
inline void GetLocationsWithBoundaryRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
}
inline std::string* GetLocationsWithBoundaryRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GetLocationsWithBoundaryRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationsWithBoundaryRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
}
inline void GetLocationsWithBoundaryRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
}
inline void GetLocationsWithBoundaryRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
}
inline std::string* GetLocationsWithBoundaryRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationsWithBoundaryRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationsWithBoundaryRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.namespace)
}

// .farm.nurture.location.service.proto.Status status = 9;
inline void GetLocationsWithBoundaryRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::Status GetLocationsWithBoundaryRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(status_);
}
inline ::farm::nurture::location::service::proto::Status GetLocationsWithBoundaryRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.status)
  return _internal_status();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_status(::farm::nurture::location::service::proto::Status value) {
  
  status_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_status(::farm::nurture::location::service::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.status)
}

// int64 pageSize = 10;
inline void GetLocationsWithBoundaryRequest::clear_pagesize() {
  pagesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsWithBoundaryRequest::_internal_pagesize() const {
  return pagesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsWithBoundaryRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.pageSize)
  return _internal_pagesize();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagesize_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagesize(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.pageSize)
}

// int64 pageNumber = 11;
inline void GetLocationsWithBoundaryRequest::clear_pagenumber() {
  pagenumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsWithBoundaryRequest::_internal_pagenumber() const {
  return pagenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsWithBoundaryRequest::pagenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.pageNumber)
  return _internal_pagenumber();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagenumber_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.pageNumber)
}

// string boundary = 12;
inline void GetLocationsWithBoundaryRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& GetLocationsWithBoundaryRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
  return _internal_boundary();
}
inline void GetLocationsWithBoundaryRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
}
inline std::string* GetLocationsWithBoundaryRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& GetLocationsWithBoundaryRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationsWithBoundaryRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
}
inline void GetLocationsWithBoundaryRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
}
inline void GetLocationsWithBoundaryRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
}
inline std::string* GetLocationsWithBoundaryRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationsWithBoundaryRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationsWithBoundaryRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.boundary)
}

// .farm.nurture.location.service.proto.Format polygonFormat = 13;
inline void GetLocationsWithBoundaryRequest::clear_polygonformat() {
  polygonformat_ = 0;
}
inline ::farm::nurture::location::service::proto::Format GetLocationsWithBoundaryRequest::_internal_polygonformat() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(polygonformat_);
}
inline ::farm::nurture::location::service::proto::Format GetLocationsWithBoundaryRequest::polygonformat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.polygonFormat)
  return _internal_polygonformat();
}
inline void GetLocationsWithBoundaryRequest::_internal_set_polygonformat(::farm::nurture::location::service::proto::Format value) {
  
  polygonformat_ = value;
}
inline void GetLocationsWithBoundaryRequest::set_polygonformat(::farm::nurture::location::service::proto::Format value) {
  _internal_set_polygonformat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest.polygonFormat)
}

// -------------------------------------------------------------------

// LabelGroup

// repeated .farm.nurture.location.service.proto.LabelOPP labelOpp = 1;
inline int LabelGroup::_internal_labelopp_size() const {
  return labelopp_.size();
}
inline int LabelGroup::labelopp_size() const {
  return _internal_labelopp_size();
}
inline void LabelGroup::clear_labelopp() {
  labelopp_.Clear();
}
inline ::farm::nurture::location::service::proto::LabelOPP* LabelGroup::mutable_labelopp(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LabelGroup.labelOpp)
  return labelopp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LabelOPP >*
LabelGroup::mutable_labelopp() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LabelGroup.labelOpp)
  return &labelopp_;
}
inline const ::farm::nurture::location::service::proto::LabelOPP& LabelGroup::_internal_labelopp(int index) const {
  return labelopp_.Get(index);
}
inline const ::farm::nurture::location::service::proto::LabelOPP& LabelGroup::labelopp(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LabelGroup.labelOpp)
  return _internal_labelopp(index);
}
inline ::farm::nurture::location::service::proto::LabelOPP* LabelGroup::_internal_add_labelopp() {
  return labelopp_.Add();
}
inline ::farm::nurture::location::service::proto::LabelOPP* LabelGroup::add_labelopp() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LabelGroup.labelOpp)
  return _internal_add_labelopp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LabelOPP >&
LabelGroup::labelopp() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LabelGroup.labelOpp)
  return labelopp_;
}

// -------------------------------------------------------------------

// LabelOPP

// string operator = 1;
inline void LabelOPP::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& LabelOPP::operator_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LabelOPP.operator)
  return _internal_operator_();
}
inline void LabelOPP::set_operator_(const std::string& value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LabelOPP.operator)
}
inline std::string* LabelOPP::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LabelOPP.operator)
  return _internal_mutable_operator_();
}
inline const std::string& LabelOPP::_internal_operator_() const {
  return operator__.Get();
}
inline void LabelOPP::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LabelOPP::set_operator_(std::string&& value) {
  
  operator__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LabelOPP.operator)
}
inline void LabelOPP::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LabelOPP.operator)
}
inline void LabelOPP::set_operator_(const char* value,
    size_t size) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LabelOPP.operator)
}
inline std::string* LabelOPP::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LabelOPP::release_operator_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LabelOPP.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelOPP::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LabelOPP.operator)
}

// repeated .farm.nurture.location.service.proto.Label label = 2;
inline int LabelOPP::_internal_label_size() const {
  return label_.size();
}
inline int LabelOPP::label_size() const {
  return _internal_label_size();
}
inline void LabelOPP::clear_label() {
  label_.Clear();
}
inline ::farm::nurture::location::service::proto::Label* LabelOPP::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LabelOPP.label)
  return label_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
LabelOPP::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LabelOPP.label)
  return &label_;
}
inline const ::farm::nurture::location::service::proto::Label& LabelOPP::_internal_label(int index) const {
  return label_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Label& LabelOPP::label(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LabelOPP.label)
  return _internal_label(index);
}
inline ::farm::nurture::location::service::proto::Label* LabelOPP::_internal_add_label() {
  return label_.Add();
}
inline ::farm::nurture::location::service::proto::Label* LabelOPP::add_label() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LabelOPP.label)
  return _internal_add_label();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
LabelOPP::label() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LabelOPP.label)
  return label_;
}

// -------------------------------------------------------------------

// GetLocationsWithBoundaryResponseRecord

// -------------------------------------------------------------------

// GetLocationsWithBoundaryResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetLocationsWithBoundaryResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetLocationsWithBoundaryResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationsWithBoundaryResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationsWithBoundaryResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status)
  return _internal_status();
}
inline void GetLocationsWithBoundaryResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsWithBoundaryResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsWithBoundaryResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsWithBoundaryResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsWithBoundaryResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status)
  return _internal_mutable_status();
}
inline void GetLocationsWithBoundaryResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.status)
}

// int32 count = 2;
inline void GetLocationsWithBoundaryResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationsWithBoundaryResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationsWithBoundaryResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.count)
  return _internal_count();
}
inline void GetLocationsWithBoundaryResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetLocationsWithBoundaryResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetLocationsWithBoundaryResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetLocationsWithBoundaryResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsWithBoundaryResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetLocationsWithBoundaryResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationsWithBoundaryResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationsWithBoundaryResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsWithBoundaryResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsWithBoundaryResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetLocationsWithBoundaryResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
inline int GetLocationsWithBoundaryResponse::_internal_locationwithboundary_size() const {
  return locationwithboundary_.size();
}
inline int GetLocationsWithBoundaryResponse::locationwithboundary_size() const {
  return _internal_locationwithboundary_size();
}
inline void GetLocationsWithBoundaryResponse::clear_locationwithboundary() {
  locationwithboundary_.Clear();
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetLocationsWithBoundaryResponse::mutable_locationwithboundary(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary)
  return locationwithboundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >*
GetLocationsWithBoundaryResponse::mutable_locationwithboundary() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary)
  return &locationwithboundary_;
}
inline const ::farm::nurture::location::service::proto::LocationWithBoundary& GetLocationsWithBoundaryResponse::_internal_locationwithboundary(int index) const {
  return locationwithboundary_.Get(index);
}
inline const ::farm::nurture::location::service::proto::LocationWithBoundary& GetLocationsWithBoundaryResponse::locationwithboundary(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary)
  return _internal_locationwithboundary(index);
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetLocationsWithBoundaryResponse::_internal_add_locationwithboundary() {
  return locationwithboundary_.Add();
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetLocationsWithBoundaryResponse::add_locationwithboundary() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary)
  return _internal_add_locationwithboundary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >&
GetLocationsWithBoundaryResponse::locationwithboundary() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse.locationWithBoundary)
  return locationwithboundary_;
}

// -------------------------------------------------------------------

// LocationWithBoundary

// int64 id = 1;
inline void LocationWithBoundary::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationWithBoundary::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationWithBoundary::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.id)
  return _internal_id();
}
inline void LocationWithBoundary::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LocationWithBoundary::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.id)
}

// string name = 2;
inline void LocationWithBoundary::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LocationWithBoundary::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.name)
  return _internal_name();
}
inline void LocationWithBoundary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.name)
}
inline std::string* LocationWithBoundary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithBoundary.name)
  return _internal_mutable_name();
}
inline const std::string& LocationWithBoundary::_internal_name() const {
  return name_.Get();
}
inline void LocationWithBoundary::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationWithBoundary::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationWithBoundary.name)
}
inline void LocationWithBoundary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationWithBoundary.name)
}
inline void LocationWithBoundary::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationWithBoundary.name)
}
inline std::string* LocationWithBoundary::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationWithBoundary::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationWithBoundary.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationWithBoundary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationWithBoundary.name)
}

// .farm.nurture.location.service.proto.Format format = 3;
inline void LocationWithBoundary::clear_format() {
  format_ = 0;
}
inline ::farm::nurture::location::service::proto::Format LocationWithBoundary::_internal_format() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(format_);
}
inline ::farm::nurture::location::service::proto::Format LocationWithBoundary::format() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.format)
  return _internal_format();
}
inline void LocationWithBoundary::_internal_set_format(::farm::nurture::location::service::proto::Format value) {
  
  format_ = value;
}
inline void LocationWithBoundary::set_format(::farm::nurture::location::service::proto::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.format)
}

// string boundary = 4;
inline void LocationWithBoundary::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& LocationWithBoundary::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
  return _internal_boundary();
}
inline void LocationWithBoundary::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
}
inline std::string* LocationWithBoundary::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& LocationWithBoundary::_internal_boundary() const {
  return boundary_.Get();
}
inline void LocationWithBoundary::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationWithBoundary::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
}
inline void LocationWithBoundary::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
}
inline void LocationWithBoundary::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
}
inline std::string* LocationWithBoundary::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationWithBoundary::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationWithBoundary::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationWithBoundary.boundary)
}

// repeated .farm.nurture.location.service.proto.Label labels = 5;
inline int LocationWithBoundary::_internal_labels_size() const {
  return labels_.size();
}
inline int LocationWithBoundary::labels_size() const {
  return _internal_labels_size();
}
inline void LocationWithBoundary::clear_labels() {
  labels_.Clear();
}
inline ::farm::nurture::location::service::proto::Label* LocationWithBoundary::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithBoundary.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
LocationWithBoundary::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LocationWithBoundary.labels)
  return &labels_;
}
inline const ::farm::nurture::location::service::proto::Label& LocationWithBoundary::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Label& LocationWithBoundary::labels(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.labels)
  return _internal_labels(index);
}
inline ::farm::nurture::location::service::proto::Label* LocationWithBoundary::_internal_add_labels() {
  return labels_.Add();
}
inline ::farm::nurture::location::service::proto::Label* LocationWithBoundary::add_labels() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LocationWithBoundary.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
LocationWithBoundary::labels() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LocationWithBoundary.labels)
  return labels_;
}

// double center_latitude = 6;
inline void LocationWithBoundary::clear_center_latitude() {
  center_latitude_ = 0;
}
inline double LocationWithBoundary::_internal_center_latitude() const {
  return center_latitude_;
}
inline double LocationWithBoundary::center_latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.center_latitude)
  return _internal_center_latitude();
}
inline void LocationWithBoundary::_internal_set_center_latitude(double value) {
  
  center_latitude_ = value;
}
inline void LocationWithBoundary::set_center_latitude(double value) {
  _internal_set_center_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.center_latitude)
}

// double center_longitude = 7;
inline void LocationWithBoundary::clear_center_longitude() {
  center_longitude_ = 0;
}
inline double LocationWithBoundary::_internal_center_longitude() const {
  return center_longitude_;
}
inline double LocationWithBoundary::center_longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.center_longitude)
  return _internal_center_longitude();
}
inline void LocationWithBoundary::_internal_set_center_longitude(double value) {
  
  center_longitude_ = value;
}
inline void LocationWithBoundary::set_center_longitude(double value) {
  _internal_set_center_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.center_longitude)
}

// double area = 8;
inline void LocationWithBoundary::clear_area() {
  area_ = 0;
}
inline double LocationWithBoundary::_internal_area() const {
  return area_;
}
inline double LocationWithBoundary::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.area)
  return _internal_area();
}
inline void LocationWithBoundary::_internal_set_area(double value) {
  
  area_ = value;
}
inline void LocationWithBoundary::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.area)
}

// string namespace = 9;
inline void LocationWithBoundary::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& LocationWithBoundary::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
  return _internal_namespace_();
}
inline void LocationWithBoundary::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
}
inline std::string* LocationWithBoundary::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& LocationWithBoundary::_internal_namespace_() const {
  return namespace__.Get();
}
inline void LocationWithBoundary::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationWithBoundary::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
}
inline void LocationWithBoundary::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
}
inline void LocationWithBoundary::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
}
inline std::string* LocationWithBoundary::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationWithBoundary::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationWithBoundary::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationWithBoundary.namespace)
}

// .farm.nurture.location.service.proto.Status locationStatus = 10;
inline void LocationWithBoundary::clear_locationstatus() {
  locationstatus_ = 0;
}
inline ::farm::nurture::location::service::proto::Status LocationWithBoundary::_internal_locationstatus() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(locationstatus_);
}
inline ::farm::nurture::location::service::proto::Status LocationWithBoundary::locationstatus() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithBoundary.locationStatus)
  return _internal_locationstatus();
}
inline void LocationWithBoundary::_internal_set_locationstatus(::farm::nurture::location::service::proto::Status value) {
  
  locationstatus_ = value;
}
inline void LocationWithBoundary::set_locationstatus(::farm::nurture::location::service::proto::Status value) {
  _internal_set_locationstatus(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithBoundary.locationStatus)
}

// -------------------------------------------------------------------

// GetLocationsRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetLocationsRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetLocationsRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationsRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationsRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetLocationsRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationsRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetLocationsRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetLocationsRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetLocationsRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetLocationsRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetLocationsRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetLocationsRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.isStaleAllowed)
}

// .farm.nurture.location.service.proto.LabelGroup labels = 3;
inline bool GetLocationsRequest::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool GetLocationsRequest::has_labels() const {
  return _internal_has_labels();
}
inline void GetLocationsRequest::clear_labels() {
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
inline const ::farm::nurture::location::service::proto::LabelGroup& GetLocationsRequest::_internal_labels() const {
  const ::farm::nurture::location::service::proto::LabelGroup* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::location::service::proto::LabelGroup&>(
      ::farm::nurture::location::service::proto::_LabelGroup_default_instance_);
}
inline const ::farm::nurture::location::service::proto::LabelGroup& GetLocationsRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.labels)
  return _internal_labels();
}
inline void GetLocationsRequest::unsafe_arena_set_allocated_labels(
    ::farm::nurture::location::service::proto::LabelGroup* labels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.labels)
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsRequest::release_labels() {
  
  ::farm::nurture::location::service::proto::LabelGroup* temp = labels_;
  labels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsRequest::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsRequest.labels)
  
  ::farm::nurture::location::service::proto::LabelGroup* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsRequest::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::location::service::proto::LabelGroup>(GetArena());
    labels_ = p;
  }
  return labels_;
}
inline ::farm::nurture::location::service::proto::LabelGroup* GetLocationsRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsRequest.labels)
  return _internal_mutable_labels();
}
inline void GetLocationsRequest::set_allocated_labels(::farm::nurture::location::service::proto::LabelGroup* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete labels_;
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(labels);
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.labels)
}

// double latitude = 4;
inline void GetLocationsRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetLocationsRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetLocationsRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.latitude)
  return _internal_latitude();
}
inline void GetLocationsRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetLocationsRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.latitude)
}

// double longitude = 5;
inline void GetLocationsRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetLocationsRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetLocationsRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.longitude)
  return _internal_longitude();
}
inline void GetLocationsRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetLocationsRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.longitude)
}

// double radius = 6;
inline void GetLocationsRequest::clear_radius() {
  radius_ = 0;
}
inline double GetLocationsRequest::_internal_radius() const {
  return radius_;
}
inline double GetLocationsRequest::radius() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.radius)
  return _internal_radius();
}
inline void GetLocationsRequest::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void GetLocationsRequest::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.radius)
}

// string namespace = 7;
inline void GetLocationsRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& GetLocationsRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
  return _internal_namespace_();
}
inline void GetLocationsRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
}
inline std::string* GetLocationsRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GetLocationsRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GetLocationsRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationsRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
}
inline void GetLocationsRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
}
inline void GetLocationsRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
}
inline std::string* GetLocationsRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationsRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationsRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.namespace)
}

// .farm.nurture.location.service.proto.Status status = 8;
inline void GetLocationsRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::Status GetLocationsRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(status_);
}
inline ::farm::nurture::location::service::proto::Status GetLocationsRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.status)
  return _internal_status();
}
inline void GetLocationsRequest::_internal_set_status(::farm::nurture::location::service::proto::Status value) {
  
  status_ = value;
}
inline void GetLocationsRequest::set_status(::farm::nurture::location::service::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.status)
}

// int64 pageSize = 9;
inline void GetLocationsRequest::clear_pagesize() {
  pagesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsRequest::_internal_pagesize() const {
  return pagesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.pageSize)
  return _internal_pagesize();
}
inline void GetLocationsRequest::_internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagesize_ = value;
}
inline void GetLocationsRequest::set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagesize(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.pageSize)
}

// int64 pageNumber = 10;
inline void GetLocationsRequest::clear_pagenumber() {
  pagenumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsRequest::_internal_pagenumber() const {
  return pagenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLocationsRequest::pagenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.pageNumber)
  return _internal_pagenumber();
}
inline void GetLocationsRequest::_internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagenumber_ = value;
}
inline void GetLocationsRequest::set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.pageNumber)
}

// string boundary = 11;
inline void GetLocationsRequest::clear_boundary() {
  boundary_.ClearToEmpty();
}
inline const std::string& GetLocationsRequest::boundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
  return _internal_boundary();
}
inline void GetLocationsRequest::set_boundary(const std::string& value) {
  _internal_set_boundary(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
}
inline std::string* GetLocationsRequest::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
  return _internal_mutable_boundary();
}
inline const std::string& GetLocationsRequest::_internal_boundary() const {
  return boundary_.Get();
}
inline void GetLocationsRequest::_internal_set_boundary(const std::string& value) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationsRequest::set_boundary(std::string&& value) {
  
  boundary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
}
inline void GetLocationsRequest::set_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
}
inline void GetLocationsRequest::set_boundary(const char* value,
    size_t size) {
  
  boundary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
}
inline std::string* GetLocationsRequest::_internal_mutable_boundary() {
  
  return boundary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationsRequest::release_boundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
  return boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationsRequest::set_allocated_boundary(std::string* boundary) {
  if (boundary != nullptr) {
    
  } else {
    
  }
  boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsRequest.boundary)
}

// .farm.nurture.location.service.proto.Format polygonFormat = 12;
inline void GetLocationsRequest::clear_polygonformat() {
  polygonformat_ = 0;
}
inline ::farm::nurture::location::service::proto::Format GetLocationsRequest::_internal_polygonformat() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(polygonformat_);
}
inline ::farm::nurture::location::service::proto::Format GetLocationsRequest::polygonformat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsRequest.polygonFormat)
  return _internal_polygonformat();
}
inline void GetLocationsRequest::_internal_set_polygonformat(::farm::nurture::location::service::proto::Format value) {
  
  polygonformat_ = value;
}
inline void GetLocationsRequest::set_polygonformat(::farm::nurture::location::service::proto::Format value) {
  _internal_set_polygonformat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsRequest.polygonFormat)
}

// -------------------------------------------------------------------

// GetLocationsResponseRecord

// -------------------------------------------------------------------

// GetLocationsResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetLocationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetLocationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationsResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationsResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsResponse.status)
  return _internal_status();
}
inline void GetLocationsResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationsResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationsResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsResponse.status)
  return _internal_mutable_status();
}
inline void GetLocationsResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationsResponse.status)
}

// int32 count = 2;
inline void GetLocationsResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationsResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationsResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsResponse.count)
  return _internal_count();
}
inline void GetLocationsResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetLocationsResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationsResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetLocationsResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetLocationsResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetLocationsResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetLocationsResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationsResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationsResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationsResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetLocationsResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetLocationsResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetLocationsResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.LocationWithoutBoundary locationWithoutBoundary = 4;
inline int GetLocationsResponse::_internal_locationwithoutboundary_size() const {
  return locationwithoutboundary_.size();
}
inline int GetLocationsResponse::locationwithoutboundary_size() const {
  return _internal_locationwithoutboundary_size();
}
inline void GetLocationsResponse::clear_locationwithoutboundary() {
  locationwithoutboundary_.Clear();
}
inline ::farm::nurture::location::service::proto::LocationWithoutBoundary* GetLocationsResponse::mutable_locationwithoutboundary(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary)
  return locationwithoutboundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithoutBoundary >*
GetLocationsResponse::mutable_locationwithoutboundary() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary)
  return &locationwithoutboundary_;
}
inline const ::farm::nurture::location::service::proto::LocationWithoutBoundary& GetLocationsResponse::_internal_locationwithoutboundary(int index) const {
  return locationwithoutboundary_.Get(index);
}
inline const ::farm::nurture::location::service::proto::LocationWithoutBoundary& GetLocationsResponse::locationwithoutboundary(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary)
  return _internal_locationwithoutboundary(index);
}
inline ::farm::nurture::location::service::proto::LocationWithoutBoundary* GetLocationsResponse::_internal_add_locationwithoutboundary() {
  return locationwithoutboundary_.Add();
}
inline ::farm::nurture::location::service::proto::LocationWithoutBoundary* GetLocationsResponse::add_locationwithoutboundary() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary)
  return _internal_add_locationwithoutboundary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithoutBoundary >&
GetLocationsResponse::locationwithoutboundary() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetLocationsResponse.locationWithoutBoundary)
  return locationwithoutboundary_;
}

// -------------------------------------------------------------------

// LocationWithoutBoundary

// int64 id = 1;
inline void LocationWithoutBoundary::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationWithoutBoundary::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocationWithoutBoundary::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.id)
  return _internal_id();
}
inline void LocationWithoutBoundary::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LocationWithoutBoundary::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.id)
}

// string name = 2;
inline void LocationWithoutBoundary::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LocationWithoutBoundary::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
  return _internal_name();
}
inline void LocationWithoutBoundary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
}
inline std::string* LocationWithoutBoundary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
  return _internal_mutable_name();
}
inline const std::string& LocationWithoutBoundary::_internal_name() const {
  return name_.Get();
}
inline void LocationWithoutBoundary::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationWithoutBoundary::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
}
inline void LocationWithoutBoundary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
}
inline void LocationWithoutBoundary::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
}
inline std::string* LocationWithoutBoundary::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationWithoutBoundary::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationWithoutBoundary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationWithoutBoundary.name)
}

// repeated .farm.nurture.location.service.proto.Label labels = 3;
inline int LocationWithoutBoundary::_internal_labels_size() const {
  return labels_.size();
}
inline int LocationWithoutBoundary::labels_size() const {
  return _internal_labels_size();
}
inline void LocationWithoutBoundary::clear_labels() {
  labels_.Clear();
}
inline ::farm::nurture::location::service::proto::Label* LocationWithoutBoundary::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithoutBoundary.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >*
LocationWithoutBoundary::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.LocationWithoutBoundary.labels)
  return &labels_;
}
inline const ::farm::nurture::location::service::proto::Label& LocationWithoutBoundary::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Label& LocationWithoutBoundary::labels(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.labels)
  return _internal_labels(index);
}
inline ::farm::nurture::location::service::proto::Label* LocationWithoutBoundary::_internal_add_labels() {
  return labels_.Add();
}
inline ::farm::nurture::location::service::proto::Label* LocationWithoutBoundary::add_labels() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.LocationWithoutBoundary.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Label >&
LocationWithoutBoundary::labels() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.LocationWithoutBoundary.labels)
  return labels_;
}

// double center_latitude = 4;
inline void LocationWithoutBoundary::clear_center_latitude() {
  center_latitude_ = 0;
}
inline double LocationWithoutBoundary::_internal_center_latitude() const {
  return center_latitude_;
}
inline double LocationWithoutBoundary::center_latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.center_latitude)
  return _internal_center_latitude();
}
inline void LocationWithoutBoundary::_internal_set_center_latitude(double value) {
  
  center_latitude_ = value;
}
inline void LocationWithoutBoundary::set_center_latitude(double value) {
  _internal_set_center_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.center_latitude)
}

// double center_longitude = 5;
inline void LocationWithoutBoundary::clear_center_longitude() {
  center_longitude_ = 0;
}
inline double LocationWithoutBoundary::_internal_center_longitude() const {
  return center_longitude_;
}
inline double LocationWithoutBoundary::center_longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.center_longitude)
  return _internal_center_longitude();
}
inline void LocationWithoutBoundary::_internal_set_center_longitude(double value) {
  
  center_longitude_ = value;
}
inline void LocationWithoutBoundary::set_center_longitude(double value) {
  _internal_set_center_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.center_longitude)
}

// double area = 6;
inline void LocationWithoutBoundary::clear_area() {
  area_ = 0;
}
inline double LocationWithoutBoundary::_internal_area() const {
  return area_;
}
inline double LocationWithoutBoundary::area() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.area)
  return _internal_area();
}
inline void LocationWithoutBoundary::_internal_set_area(double value) {
  
  area_ = value;
}
inline void LocationWithoutBoundary::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.area)
}

// string namespace = 7;
inline void LocationWithoutBoundary::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& LocationWithoutBoundary::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
  return _internal_namespace_();
}
inline void LocationWithoutBoundary::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
}
inline std::string* LocationWithoutBoundary::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& LocationWithoutBoundary::_internal_namespace_() const {
  return namespace__.Get();
}
inline void LocationWithoutBoundary::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocationWithoutBoundary::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
}
inline void LocationWithoutBoundary::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
}
inline void LocationWithoutBoundary::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
}
inline std::string* LocationWithoutBoundary::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocationWithoutBoundary::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocationWithoutBoundary::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.LocationWithoutBoundary.namespace)
}

// .farm.nurture.location.service.proto.Status locationStatus = 8;
inline void LocationWithoutBoundary::clear_locationstatus() {
  locationstatus_ = 0;
}
inline ::farm::nurture::location::service::proto::Status LocationWithoutBoundary::_internal_locationstatus() const {
  return static_cast< ::farm::nurture::location::service::proto::Status >(locationstatus_);
}
inline ::farm::nurture::location::service::proto::Status LocationWithoutBoundary::locationstatus() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.LocationWithoutBoundary.locationStatus)
  return _internal_locationstatus();
}
inline void LocationWithoutBoundary::_internal_set_locationstatus(::farm::nurture::location::service::proto::Status value) {
  
  locationstatus_ = value;
}
inline void LocationWithoutBoundary::set_locationstatus(::farm::nurture::location::service::proto::Status value) {
  _internal_set_locationstatus(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.LocationWithoutBoundary.locationStatus)
}

// -------------------------------------------------------------------

// GeographyDataType

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GeographyDataType::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GeographyDataType::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GeographyDataType::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GeographyDataType::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyDataType.requestHeaders)
  return _internal_requestheaders();
}
inline void GeographyDataType::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GeographyDataType.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GeographyDataType::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GeographyDataType::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GeographyDataType.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GeographyDataType::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GeographyDataType::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GeographyDataType.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GeographyDataType::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GeographyDataType.requestHeaders)
}

// .farm.nurture.location.service.proto.GeographyType geoType = 2;
inline void GeographyDataType::clear_geotype() {
  geotype_ = 0;
}
inline ::farm::nurture::location::service::proto::GeographyType GeographyDataType::_internal_geotype() const {
  return static_cast< ::farm::nurture::location::service::proto::GeographyType >(geotype_);
}
inline ::farm::nurture::location::service::proto::GeographyType GeographyDataType::geotype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyDataType.geoType)
  return _internal_geotype();
}
inline void GeographyDataType::_internal_set_geotype(::farm::nurture::location::service::proto::GeographyType value) {
  
  geotype_ = value;
}
inline void GeographyDataType::set_geotype(::farm::nurture::location::service::proto::GeographyType value) {
  _internal_set_geotype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GeographyDataType.geoType)
}

// .farm.nurture.location.service.proto.LabelKey labelKey = 3;
inline void GeographyDataType::clear_labelkey() {
  labelkey_ = 0;
}
inline ::farm::nurture::location::service::proto::LabelKey GeographyDataType::_internal_labelkey() const {
  return static_cast< ::farm::nurture::location::service::proto::LabelKey >(labelkey_);
}
inline ::farm::nurture::location::service::proto::LabelKey GeographyDataType::labelkey() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyDataType.labelKey)
  return _internal_labelkey();
}
inline void GeographyDataType::_internal_set_labelkey(::farm::nurture::location::service::proto::LabelKey value) {
  
  labelkey_ = value;
}
inline void GeographyDataType::set_labelkey(::farm::nurture::location::service::proto::LabelKey value) {
  _internal_set_labelkey(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GeographyDataType.labelKey)
}

// -------------------------------------------------------------------

// BulkGeographyDataType

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkGeographyDataType::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkGeographyDataType::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkGeographyDataType::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkGeographyDataType::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkGeographyDataType::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkGeographyDataType::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkGeographyDataType::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkGeographyDataType::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkGeographyDataType::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkGeographyDataType::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkGeographyDataType.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.GeographyDataType requests = 2;
inline int BulkGeographyDataType::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkGeographyDataType::requests_size() const {
  return _internal_requests_size();
}
inline void BulkGeographyDataType::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::GeographyDataType* BulkGeographyDataType::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkGeographyDataType.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyDataType >*
BulkGeographyDataType::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkGeographyDataType.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::GeographyDataType& BulkGeographyDataType::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::GeographyDataType& BulkGeographyDataType::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkGeographyDataType.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::GeographyDataType* BulkGeographyDataType::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::GeographyDataType* BulkGeographyDataType::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkGeographyDataType.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyDataType >&
BulkGeographyDataType::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkGeographyDataType.requests)
  return requests_;
}

// -------------------------------------------------------------------

// GeographyTypeMessageResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GeographyTypeMessageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GeographyTypeMessageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GeographyTypeMessageResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GeographyTypeMessageResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyTypeMessageResponse.status)
  return _internal_status();
}
inline void GeographyTypeMessageResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GeographyTypeMessageResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GeographyTypeMessageResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GeographyTypeMessageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GeographyTypeMessageResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GeographyTypeMessageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GeographyTypeMessageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GeographyTypeMessageResponse.status)
  return _internal_mutable_status();
}
inline void GeographyTypeMessageResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GeographyTypeMessageResponse.status)
}

// int32 count = 2;
inline void GeographyTypeMessageResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeographyTypeMessageResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeographyTypeMessageResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyTypeMessageResponse.count)
  return _internal_count();
}
inline void GeographyTypeMessageResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GeographyTypeMessageResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GeographyTypeMessageResponse.count)
}

// string recordId = 3;
inline void GeographyTypeMessageResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& GeographyTypeMessageResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
  return _internal_recordid();
}
inline void GeographyTypeMessageResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
}
inline std::string* GeographyTypeMessageResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& GeographyTypeMessageResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void GeographyTypeMessageResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographyTypeMessageResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
}
inline void GeographyTypeMessageResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
}
inline void GeographyTypeMessageResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
}
inline std::string* GeographyTypeMessageResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographyTypeMessageResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographyTypeMessageResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GeographyTypeMessageResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int GeographyTypeMessageResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GeographyTypeMessageResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GeographyTypeMessageResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GeographyTypeMessageResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GeographyTypeMessageResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GeographyTypeMessageResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GeographyTypeMessageResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GeographyTypeMessageResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GeographyTypeMessageResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GeographyTypeMessageResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkGeographyTypeMessageResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkGeographyTypeMessageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkGeographyTypeMessageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkGeographyTypeMessageResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkGeographyTypeMessageResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status)
  return _internal_status();
}
inline void BulkGeographyTypeMessageResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkGeographyTypeMessageResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkGeographyTypeMessageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkGeographyTypeMessageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkGeographyTypeMessageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status)
  return _internal_mutable_status();
}
inline void BulkGeographyTypeMessageResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.status)
}

// int32 count = 2;
inline void BulkGeographyTypeMessageResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkGeographyTypeMessageResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkGeographyTypeMessageResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.count)
  return _internal_count();
}
inline void BulkGeographyTypeMessageResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkGeographyTypeMessageResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.count)
}

// repeated .farm.nurture.location.service.proto.GeographyTypeMessageResponse responses = 3;
inline int BulkGeographyTypeMessageResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkGeographyTypeMessageResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkGeographyTypeMessageResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* BulkGeographyTypeMessageResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >*
BulkGeographyTypeMessageResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::GeographyTypeMessageResponse& BulkGeographyTypeMessageResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::GeographyTypeMessageResponse& BulkGeographyTypeMessageResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* BulkGeographyTypeMessageResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::GeographyTypeMessageResponse* BulkGeographyTypeMessageResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::GeographyTypeMessageResponse >&
BulkGeographyTypeMessageResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkGeographyTypeMessageResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// GetChildGeographiesRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetChildGeographiesRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetChildGeographiesRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetChildGeographiesRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetChildGeographiesRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetChildGeographiesRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetChildGeographiesRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetChildGeographiesRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetChildGeographiesRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetChildGeographiesRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetChildGeographiesRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetChildGeographiesRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetChildGeographiesRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetChildGeographiesRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetChildGeographiesRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetChildGeographiesRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.isStaleAllowed)
}

// int64 id = 3;
inline void GetChildGeographiesRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.id)
  return _internal_id();
}
inline void GetChildGeographiesRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetChildGeographiesRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.id)
}

// string namespace = 4;
inline void GetChildGeographiesRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& GetChildGeographiesRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
  return _internal_namespace_();
}
inline void GetChildGeographiesRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
}
inline std::string* GetChildGeographiesRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GetChildGeographiesRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GetChildGeographiesRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetChildGeographiesRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
}
inline void GetChildGeographiesRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
}
inline void GetChildGeographiesRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
}
inline std::string* GetChildGeographiesRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetChildGeographiesRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChildGeographiesRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesRequest.namespace)
}

// string code = 5;
inline void GetChildGeographiesRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& GetChildGeographiesRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
  return _internal_code();
}
inline void GetChildGeographiesRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
}
inline std::string* GetChildGeographiesRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
  return _internal_mutable_code();
}
inline const std::string& GetChildGeographiesRequest::_internal_code() const {
  return code_.Get();
}
inline void GetChildGeographiesRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetChildGeographiesRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
}
inline void GetChildGeographiesRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
}
inline void GetChildGeographiesRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
}
inline std::string* GetChildGeographiesRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetChildGeographiesRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChildGeographiesRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesRequest.code)
}

// .farm.nurture.location.service.proto.Format format = 6;
inline void GetChildGeographiesRequest::clear_format() {
  format_ = 0;
}
inline ::farm::nurture::location::service::proto::Format GetChildGeographiesRequest::_internal_format() const {
  return static_cast< ::farm::nurture::location::service::proto::Format >(format_);
}
inline ::farm::nurture::location::service::proto::Format GetChildGeographiesRequest::format() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.format)
  return _internal_format();
}
inline void GetChildGeographiesRequest::_internal_set_format(::farm::nurture::location::service::proto::Format value) {
  
  format_ = value;
}
inline void GetChildGeographiesRequest::set_format(::farm::nurture::location::service::proto::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.format)
}

// int64 pageSize = 7;
inline void GetChildGeographiesRequest::clear_pagesize() {
  pagesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::_internal_pagesize() const {
  return pagesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.pageSize)
  return _internal_pagesize();
}
inline void GetChildGeographiesRequest::_internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagesize_ = value;
}
inline void GetChildGeographiesRequest::set_pagesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagesize(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.pageSize)
}

// int64 pageNumber = 8;
inline void GetChildGeographiesRequest::clear_pagenumber() {
  pagenumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::_internal_pagenumber() const {
  return pagenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildGeographiesRequest::pagenumber() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesRequest.pageNumber)
  return _internal_pagenumber();
}
inline void GetChildGeographiesRequest::_internal_set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pagenumber_ = value;
}
inline void GetChildGeographiesRequest::set_pagenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pagenumber(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesRequest.pageNumber)
}

// -------------------------------------------------------------------

// GetChildGeographiesResponseRecord

// -------------------------------------------------------------------

// GetChildGeographiesResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetChildGeographiesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetChildGeographiesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetChildGeographiesResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetChildGeographiesResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesResponse.status)
  return _internal_status();
}
inline void GetChildGeographiesResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetChildGeographiesResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetChildGeographiesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetChildGeographiesResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetChildGeographiesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetChildGeographiesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesResponse.status)
  return _internal_mutable_status();
}
inline void GetChildGeographiesResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetChildGeographiesResponse.status)
}

// int32 count = 2;
inline void GetChildGeographiesResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChildGeographiesResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChildGeographiesResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesResponse.count)
  return _internal_count();
}
inline void GetChildGeographiesResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetChildGeographiesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetChildGeographiesResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetChildGeographiesResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetChildGeographiesResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetChildGeographiesResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetChildGeographiesResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetChildGeographiesResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetChildGeographiesResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetChildGeographiesResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetChildGeographiesResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetChildGeographiesResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetChildGeographiesResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.LocationWithBoundary locationWithBoundary = 4;
inline int GetChildGeographiesResponse::_internal_locationwithboundary_size() const {
  return locationwithboundary_.size();
}
inline int GetChildGeographiesResponse::locationwithboundary_size() const {
  return _internal_locationwithboundary_size();
}
inline void GetChildGeographiesResponse::clear_locationwithboundary() {
  locationwithboundary_.Clear();
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetChildGeographiesResponse::mutable_locationwithboundary(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary)
  return locationwithboundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >*
GetChildGeographiesResponse::mutable_locationwithboundary() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary)
  return &locationwithboundary_;
}
inline const ::farm::nurture::location::service::proto::LocationWithBoundary& GetChildGeographiesResponse::_internal_locationwithboundary(int index) const {
  return locationwithboundary_.Get(index);
}
inline const ::farm::nurture::location::service::proto::LocationWithBoundary& GetChildGeographiesResponse::locationwithboundary(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary)
  return _internal_locationwithboundary(index);
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetChildGeographiesResponse::_internal_add_locationwithboundary() {
  return locationwithboundary_.Add();
}
inline ::farm::nurture::location::service::proto::LocationWithBoundary* GetChildGeographiesResponse::add_locationwithboundary() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary)
  return _internal_add_locationwithboundary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::LocationWithBoundary >&
GetChildGeographiesResponse::locationwithboundary() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetChildGeographiesResponse.locationWithBoundary)
  return locationwithboundary_;
}

// -------------------------------------------------------------------

// InsertLocationWithoutBoundaryRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool InsertLocationWithoutBoundaryRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool InsertLocationWithoutBoundaryRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationWithoutBoundaryRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertLocationWithoutBoundaryRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void InsertLocationWithoutBoundaryRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationWithoutBoundaryRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationWithoutBoundaryRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationWithoutBoundaryRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertLocationWithoutBoundaryRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.requestHeaders)
}

// int64 id = 2;
inline void InsertLocationWithoutBoundaryRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.id)
  return _internal_id();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.id)
}

// string name = 3;
inline void InsertLocationWithoutBoundaryRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
  return _internal_name();
}
inline void InsertLocationWithoutBoundaryRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
  return _internal_mutable_name();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_name() const {
  return name_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
}
inline void InsertLocationWithoutBoundaryRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
}
inline void InsertLocationWithoutBoundaryRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.name)
}

// string labels = 4;
inline void InsertLocationWithoutBoundaryRequest::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
  return _internal_labels();
}
inline void InsertLocationWithoutBoundaryRequest::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
  return _internal_mutable_labels();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_labels() const {
  return labels_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
}
inline void InsertLocationWithoutBoundaryRequest::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
}
inline void InsertLocationWithoutBoundaryRequest::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.labels)
}

// string namespace = 5;
inline void InsertLocationWithoutBoundaryRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
  return _internal_namespace_();
}
inline void InsertLocationWithoutBoundaryRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
}
inline void InsertLocationWithoutBoundaryRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
}
inline void InsertLocationWithoutBoundaryRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.namespace)
}

// string code = 6;
inline void InsertLocationWithoutBoundaryRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
  return _internal_code();
}
inline void InsertLocationWithoutBoundaryRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
  return _internal_mutable_code();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_code() const {
  return code_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
}
inline void InsertLocationWithoutBoundaryRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
}
inline void InsertLocationWithoutBoundaryRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.code)
}

// .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Status status = 7;
inline void InsertLocationWithoutBoundaryRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status >(status_);
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status InsertLocationWithoutBoundaryRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.status)
  return _internal_status();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_status(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status value) {
  
  status_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_status(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.status)
}

// string metadata = 8;
inline void InsertLocationWithoutBoundaryRequest::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::metadata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
  return _internal_metadata();
}
inline void InsertLocationWithoutBoundaryRequest::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_metadata() const {
  return metadata_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
}
inline void InsertLocationWithoutBoundaryRequest::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
}
inline void InsertLocationWithoutBoundaryRequest::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.metadata)
}

// int32 version = 9;
inline void InsertLocationWithoutBoundaryRequest::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::version() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.version)
  return _internal_version();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.version)
}

// int32 minS2Level = 10;
inline void InsertLocationWithoutBoundaryRequest::clear_mins2level() {
  mins2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::_internal_mins2level() const {
  return mins2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::mins2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.minS2Level)
  return _internal_mins2level();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins2level_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.minS2Level)
}

// int32 maxS2Level = 11;
inline void InsertLocationWithoutBoundaryRequest::clear_maxs2level() {
  maxs2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::_internal_maxs2level() const {
  return maxs2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryRequest::maxs2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.maxS2Level)
  return _internal_maxs2level();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxs2level_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxs2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.maxS2Level)
}

// int64 createdByActorId = 12;
inline void InsertLocationWithoutBoundaryRequest::clear_createdbyactorid() {
  createdbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::_internal_createdbyactorid() const {
  return createdbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::createdbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorId)
  return _internal_createdbyactorid();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdbyactorid_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_createdbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorId)
}

// string createdByActorType = 13;
inline void InsertLocationWithoutBoundaryRequest::clear_createdbyactortype() {
  createdbyactortype_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::createdbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
  return _internal_createdbyactortype();
}
inline void InsertLocationWithoutBoundaryRequest::set_createdbyactortype(const std::string& value) {
  _internal_set_createdbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_createdbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
  return _internal_mutable_createdbyactortype();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_createdbyactortype() const {
  return createdbyactortype_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_createdbyactortype(const std::string& value) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_createdbyactortype(std::string&& value) {
  
  createdbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
}
inline void InsertLocationWithoutBoundaryRequest::set_createdbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
}
inline void InsertLocationWithoutBoundaryRequest::set_createdbyactortype(const char* value,
    size_t size) {
  
  createdbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_createdbyactortype() {
  
  return createdbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_createdbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
  return createdbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_createdbyactortype(std::string* createdbyactortype) {
  if (createdbyactortype != nullptr) {
    
  } else {
    
  }
  createdbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.createdByActorType)
}

// int64 modifiedByActorId = 14;
inline void InsertLocationWithoutBoundaryRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertLocationWithoutBoundaryRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorId)
}

// string modifiedByActorType = 15;
inline void InsertLocationWithoutBoundaryRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void InsertLocationWithoutBoundaryRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
}
inline void InsertLocationWithoutBoundaryRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
}
inline void InsertLocationWithoutBoundaryRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.modifiedByActorType)
}

// .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.Visibility visibility = 16;
inline void InsertLocationWithoutBoundaryRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility InsertLocationWithoutBoundaryRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.visibility)
  return _internal_visibility();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_visibility(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility value) {
  
  visibility_ = value;
}
inline void InsertLocationWithoutBoundaryRequest::set_visibility(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.visibility)
}

// string geographyUid = 17;
inline void InsertLocationWithoutBoundaryRequest::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
  return _internal_geographyuid();
}
inline void InsertLocationWithoutBoundaryRequest::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
}
inline void InsertLocationWithoutBoundaryRequest::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
}
inline void InsertLocationWithoutBoundaryRequest::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.geographyUid)
}

// string pincode = 18;
inline void InsertLocationWithoutBoundaryRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
  return _internal_pincode();
}
inline void InsertLocationWithoutBoundaryRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
}
inline void InsertLocationWithoutBoundaryRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
}
inline void InsertLocationWithoutBoundaryRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.pincode)
}

// string latLongGeohash = 19;
inline void InsertLocationWithoutBoundaryRequest::clear_latlonggeohash() {
  latlonggeohash_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::latlonggeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
  return _internal_latlonggeohash();
}
inline void InsertLocationWithoutBoundaryRequest::set_latlonggeohash(const std::string& value) {
  _internal_set_latlonggeohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
}
inline std::string* InsertLocationWithoutBoundaryRequest::mutable_latlonggeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
  return _internal_mutable_latlonggeohash();
}
inline const std::string& InsertLocationWithoutBoundaryRequest::_internal_latlonggeohash() const {
  return latlonggeohash_.Get();
}
inline void InsertLocationWithoutBoundaryRequest::_internal_set_latlonggeohash(const std::string& value) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_latlonggeohash(std::string&& value) {
  
  latlonggeohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
}
inline void InsertLocationWithoutBoundaryRequest::set_latlonggeohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
}
inline void InsertLocationWithoutBoundaryRequest::set_latlonggeohash(const char* value,
    size_t size) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
}
inline std::string* InsertLocationWithoutBoundaryRequest::_internal_mutable_latlonggeohash() {
  
  return latlonggeohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryRequest::release_latlonggeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
  return latlonggeohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryRequest::set_allocated_latlonggeohash(std::string* latlonggeohash) {
  if (latlonggeohash != nullptr) {
    
  } else {
    
  }
  latlonggeohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latlonggeohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest.latLongGeohash)
}

// -------------------------------------------------------------------

// BulkInsertLocationWithoutBoundaryRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkInsertLocationWithoutBoundaryRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkInsertLocationWithoutBoundaryRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationWithoutBoundaryRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertLocationWithoutBoundaryRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkInsertLocationWithoutBoundaryRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationWithoutBoundaryRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationWithoutBoundaryRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationWithoutBoundaryRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertLocationWithoutBoundaryRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkInsertLocationWithoutBoundaryRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest requests = 2;
inline int BulkInsertLocationWithoutBoundaryRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkInsertLocationWithoutBoundaryRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkInsertLocationWithoutBoundaryRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* BulkInsertLocationWithoutBoundaryRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >*
BulkInsertLocationWithoutBoundaryRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& BulkInsertLocationWithoutBoundaryRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& BulkInsertLocationWithoutBoundaryRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* BulkInsertLocationWithoutBoundaryRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* BulkInsertLocationWithoutBoundaryRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >&
BulkInsertLocationWithoutBoundaryRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InsertLocationWithoutBoundaryResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool InsertLocationWithoutBoundaryResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool InsertLocationWithoutBoundaryResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationWithoutBoundaryResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertLocationWithoutBoundaryResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status)
  return _internal_status();
}
inline void InsertLocationWithoutBoundaryResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationWithoutBoundaryResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationWithoutBoundaryResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationWithoutBoundaryResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertLocationWithoutBoundaryResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status)
  return _internal_mutable_status();
}
inline void InsertLocationWithoutBoundaryResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.status)
}

// int32 count = 2;
inline void InsertLocationWithoutBoundaryResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertLocationWithoutBoundaryResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.count)
  return _internal_count();
}
inline void InsertLocationWithoutBoundaryResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void InsertLocationWithoutBoundaryResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.count)
}

// string recordId = 3;
inline void InsertLocationWithoutBoundaryResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& InsertLocationWithoutBoundaryResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
  return _internal_recordid();
}
inline void InsertLocationWithoutBoundaryResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
}
inline std::string* InsertLocationWithoutBoundaryResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& InsertLocationWithoutBoundaryResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void InsertLocationWithoutBoundaryResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertLocationWithoutBoundaryResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
}
inline void InsertLocationWithoutBoundaryResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
}
inline void InsertLocationWithoutBoundaryResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
}
inline std::string* InsertLocationWithoutBoundaryResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertLocationWithoutBoundaryResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertLocationWithoutBoundaryResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int InsertLocationWithoutBoundaryResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int InsertLocationWithoutBoundaryResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationWithoutBoundaryResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
InsertLocationWithoutBoundaryResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationWithoutBoundaryResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertLocationWithoutBoundaryResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationWithoutBoundaryResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertLocationWithoutBoundaryResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
InsertLocationWithoutBoundaryResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkInsertLocationWithoutBoundaryResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkInsertLocationWithoutBoundaryResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkInsertLocationWithoutBoundaryResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationWithoutBoundaryResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertLocationWithoutBoundaryResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status)
  return _internal_status();
}
inline void BulkInsertLocationWithoutBoundaryResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationWithoutBoundaryResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationWithoutBoundaryResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationWithoutBoundaryResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertLocationWithoutBoundaryResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status)
  return _internal_mutable_status();
}
inline void BulkInsertLocationWithoutBoundaryResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.status)
}

// int32 count = 2;
inline void BulkInsertLocationWithoutBoundaryResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationWithoutBoundaryResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertLocationWithoutBoundaryResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.count)
  return _internal_count();
}
inline void BulkInsertLocationWithoutBoundaryResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkInsertLocationWithoutBoundaryResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.count)
}

// repeated .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse responses = 3;
inline int BulkInsertLocationWithoutBoundaryResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkInsertLocationWithoutBoundaryResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkInsertLocationWithoutBoundaryResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* BulkInsertLocationWithoutBoundaryResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >*
BulkInsertLocationWithoutBoundaryResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& BulkInsertLocationWithoutBoundaryResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& BulkInsertLocationWithoutBoundaryResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* BulkInsertLocationWithoutBoundaryResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* BulkInsertLocationWithoutBoundaryResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >&
BulkInsertLocationWithoutBoundaryResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// UpdateLocationWithoutBoundaryByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool UpdateLocationWithoutBoundaryByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool UpdateLocationWithoutBoundaryByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationWithoutBoundaryByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& UpdateLocationWithoutBoundaryByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationWithoutBoundaryByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationWithoutBoundaryByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* UpdateLocationWithoutBoundaryByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
}

// string name = 2;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
  return _internal_name();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.name)
}

// string labels = 3;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_labels() {
  labels_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::labels() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
  return _internal_labels();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_labels(const std::string& value) {
  _internal_set_labels(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
  return _internal_mutable_labels();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_labels() const {
  return labels_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_labels(const std::string& value) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_labels(std::string&& value) {
  
  labels_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_labels(const char* value,
    size_t size) {
  
  labels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_labels() {
  
  return labels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_labels() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
  return labels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_labels(std::string* labels) {
  if (labels != nullptr) {
    
  } else {
    
  }
  labels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.labels)
}

// string namespace = 4;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
  return _internal_namespace_();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.namespace)
}

// string code = 5;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::code() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
  return _internal_code();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
  return _internal_mutable_code();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_code() const {
  return code_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_code() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.code)
}

// .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Status status = 6;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_status() {
  status_ = 0;
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::_internal_status() const {
  return static_cast< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status >(status_);
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status UpdateLocationWithoutBoundaryByIdRequest::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.status)
  return _internal_status();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_status(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status value) {
  
  status_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_status(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.status)
}

// string metadata = 7;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::metadata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
  return _internal_metadata();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_metadata() const {
  return metadata_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.metadata)
}

// int32 newVersion = 8;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_newversion() {
  newversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::_internal_newversion() const {
  return newversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::newversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.newVersion)
  return _internal_newversion();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newversion_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_newversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.newVersion)
}

// int32 minS2Level = 9;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_mins2level() {
  mins2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::_internal_mins2level() const {
  return mins2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::mins2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.minS2Level)
  return _internal_mins2level();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins2level_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_mins2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.minS2Level)
}

// int32 maxS2Level = 10;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_maxs2level() {
  maxs2level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::_internal_maxs2level() const {
  return maxs2level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::maxs2level() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.maxS2Level)
  return _internal_maxs2level();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxs2level_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_maxs2level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxs2level(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.maxS2Level)
}

// int64 modifiedByActorId = 11;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationWithoutBoundaryByIdRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationWithoutBoundaryByIdRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorId)
}

// string modifiedByActorType = 12;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.modifiedByActorType)
}

// .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.Visibility visibility = 13;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_visibility() {
  visibility_ = 0;
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::_internal_visibility() const {
  return static_cast< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility >(visibility_);
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility UpdateLocationWithoutBoundaryByIdRequest::visibility() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.visibility)
  return _internal_visibility();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_visibility(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility value) {
  
  visibility_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_visibility(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.visibility)
}

// string geographyUid = 14;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_geographyuid() {
  geographyuid_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::geographyuid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
  return _internal_geographyuid();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_geographyuid(const std::string& value) {
  _internal_set_geographyuid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_geographyuid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
  return _internal_mutable_geographyuid();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_geographyuid() const {
  return geographyuid_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_geographyuid(const std::string& value) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_geographyuid(std::string&& value) {
  
  geographyuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_geographyuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_geographyuid(const char* value,
    size_t size) {
  
  geographyuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_geographyuid() {
  
  return geographyuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_geographyuid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
  return geographyuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_geographyuid(std::string* geographyuid) {
  if (geographyuid != nullptr) {
    
  } else {
    
  }
  geographyuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geographyuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.geographyUid)
}

// string pincode = 15;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_pincode() {
  pincode_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::pincode() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
  return _internal_pincode();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_pincode(const std::string& value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_pincode() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
  return _internal_mutable_pincode();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_pincode() const {
  return pincode_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_pincode(const std::string& value) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_pincode(std::string&& value) {
  
  pincode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_pincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_pincode(const char* value,
    size_t size) {
  
  pincode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_pincode() {
  
  return pincode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_pincode() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
  return pincode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_pincode(std::string* pincode) {
  if (pincode != nullptr) {
    
  } else {
    
  }
  pincode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pincode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.pincode)
}

// string latLongGeohash = 16;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_latlonggeohash() {
  latlonggeohash_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::latlonggeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
  return _internal_latlonggeohash();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_latlonggeohash(const std::string& value) {
  _internal_set_latlonggeohash(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::mutable_latlonggeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
  return _internal_mutable_latlonggeohash();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdRequest::_internal_latlonggeohash() const {
  return latlonggeohash_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_latlonggeohash(const std::string& value) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_latlonggeohash(std::string&& value) {
  
  latlonggeohash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_latlonggeohash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_latlonggeohash(const char* value,
    size_t size) {
  
  latlonggeohash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_latlonggeohash() {
  
  return latlonggeohash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdRequest::release_latlonggeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
  return latlonggeohash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_allocated_latlonggeohash(std::string* latlonggeohash) {
  if (latlonggeohash != nullptr) {
    
  } else {
    
  }
  latlonggeohash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latlonggeohash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.latLongGeohash)
}

// int64 id = 17;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationWithoutBoundaryByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateLocationWithoutBoundaryByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.id)
  return _internal_id();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.id)
}

// int32 oldVersion = 18;
inline void UpdateLocationWithoutBoundaryByIdRequest::clear_oldversion() {
  oldversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::_internal_oldversion() const {
  return oldversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdRequest::oldversion() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.oldVersion)
  return _internal_oldversion();
}
inline void UpdateLocationWithoutBoundaryByIdRequest::_internal_set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oldversion_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdRequest::set_oldversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oldversion(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest.oldVersion)
}

// -------------------------------------------------------------------

// BulkUpdateLocationWithoutBoundaryByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkUpdateLocationWithoutBoundaryByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkUpdateLocationWithoutBoundaryByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkUpdateLocationWithoutBoundaryByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationWithoutBoundaryByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationWithoutBoundaryByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkUpdateLocationWithoutBoundaryByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkUpdateLocationWithoutBoundaryByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest requests = 2;
inline int BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkUpdateLocationWithoutBoundaryByIdRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkUpdateLocationWithoutBoundaryByIdRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* BulkUpdateLocationWithoutBoundaryByIdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >*
BulkUpdateLocationWithoutBoundaryByIdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& BulkUpdateLocationWithoutBoundaryByIdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* BulkUpdateLocationWithoutBoundaryByIdRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* BulkUpdateLocationWithoutBoundaryByIdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >&
BulkUpdateLocationWithoutBoundaryByIdRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// UpdateLocationWithoutBoundaryByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool UpdateLocationWithoutBoundaryByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateLocationWithoutBoundaryByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationWithoutBoundaryByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& UpdateLocationWithoutBoundaryByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status)
  return _internal_status();
}
inline void UpdateLocationWithoutBoundaryByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationWithoutBoundaryByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationWithoutBoundaryByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationWithoutBoundaryByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* UpdateLocationWithoutBoundaryByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status)
  return _internal_mutable_status();
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.status)
}

// int32 count = 2;
inline void UpdateLocationWithoutBoundaryByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateLocationWithoutBoundaryByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.count)
  return _internal_count();
}
inline void UpdateLocationWithoutBoundaryByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.count)
}

// string recordId = 3;
inline void UpdateLocationWithoutBoundaryByIdResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
  return _internal_recordid();
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
}
inline std::string* UpdateLocationWithoutBoundaryByIdResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& UpdateLocationWithoutBoundaryByIdResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void UpdateLocationWithoutBoundaryByIdResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
}
inline std::string* UpdateLocationWithoutBoundaryByIdResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateLocationWithoutBoundaryByIdResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateLocationWithoutBoundaryByIdResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int UpdateLocationWithoutBoundaryByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int UpdateLocationWithoutBoundaryByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationWithoutBoundaryByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
UpdateLocationWithoutBoundaryByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationWithoutBoundaryByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& UpdateLocationWithoutBoundaryByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationWithoutBoundaryByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* UpdateLocationWithoutBoundaryByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
UpdateLocationWithoutBoundaryByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkUpdateLocationWithoutBoundaryByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkUpdateLocationWithoutBoundaryByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkUpdateLocationWithoutBoundaryByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status)
  return _internal_status();
}
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationWithoutBoundaryByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationWithoutBoundaryByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkUpdateLocationWithoutBoundaryByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status)
  return _internal_mutable_status();
}
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.status)
}

// int32 count = 2;
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkUpdateLocationWithoutBoundaryByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.count)
  return _internal_count();
}
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.count)
}

// repeated .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse responses = 3;
inline int BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkUpdateLocationWithoutBoundaryByIdResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkUpdateLocationWithoutBoundaryByIdResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* BulkUpdateLocationWithoutBoundaryByIdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >*
BulkUpdateLocationWithoutBoundaryByIdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& BulkUpdateLocationWithoutBoundaryByIdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* BulkUpdateLocationWithoutBoundaryByIdResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* BulkUpdateLocationWithoutBoundaryByIdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >&
BulkUpdateLocationWithoutBoundaryByIdResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// DeleteLocationByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool DeleteLocationByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool DeleteLocationByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& DeleteLocationByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& DeleteLocationByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void DeleteLocationByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteLocationByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteLocationByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteLocationByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* DeleteLocationByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void DeleteLocationByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdRequest.requestHeaders)
}

// int64 deletedAt = 2;
inline void DeleteLocationByIdRequest::clear_deletedat() {
  deletedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::_internal_deletedat() const {
  return deletedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::deletedat() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdRequest.deletedAt)
  return _internal_deletedat();
}
inline void DeleteLocationByIdRequest::_internal_set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletedat_ = value;
}
inline void DeleteLocationByIdRequest::set_deletedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletedat(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdRequest.deletedAt)
}

// int64 modifiedByActorId = 3;
inline void DeleteLocationByIdRequest::clear_modifiedbyactorid() {
  modifiedbyactorid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::_internal_modifiedbyactorid() const {
  return modifiedbyactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::modifiedbyactorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorId)
  return _internal_modifiedbyactorid();
}
inline void DeleteLocationByIdRequest::_internal_set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modifiedbyactorid_ = value;
}
inline void DeleteLocationByIdRequest::set_modifiedbyactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modifiedbyactorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorId)
}

// string modifiedByActorType = 4;
inline void DeleteLocationByIdRequest::clear_modifiedbyactortype() {
  modifiedbyactortype_.ClearToEmpty();
}
inline const std::string& DeleteLocationByIdRequest::modifiedbyactortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
  return _internal_modifiedbyactortype();
}
inline void DeleteLocationByIdRequest::set_modifiedbyactortype(const std::string& value) {
  _internal_set_modifiedbyactortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
}
inline std::string* DeleteLocationByIdRequest::mutable_modifiedbyactortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
  return _internal_mutable_modifiedbyactortype();
}
inline const std::string& DeleteLocationByIdRequest::_internal_modifiedbyactortype() const {
  return modifiedbyactortype_.Get();
}
inline void DeleteLocationByIdRequest::_internal_set_modifiedbyactortype(const std::string& value) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteLocationByIdRequest::set_modifiedbyactortype(std::string&& value) {
  
  modifiedbyactortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
}
inline void DeleteLocationByIdRequest::set_modifiedbyactortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
}
inline void DeleteLocationByIdRequest::set_modifiedbyactortype(const char* value,
    size_t size) {
  
  modifiedbyactortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
}
inline std::string* DeleteLocationByIdRequest::_internal_mutable_modifiedbyactortype() {
  
  return modifiedbyactortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteLocationByIdRequest::release_modifiedbyactortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
  return modifiedbyactortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteLocationByIdRequest::set_allocated_modifiedbyactortype(std::string* modifiedbyactortype) {
  if (modifiedbyactortype != nullptr) {
    
  } else {
    
  }
  modifiedbyactortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifiedbyactortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdRequest.modifiedByActorType)
}

// int64 id = 5;
inline void DeleteLocationByIdRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteLocationByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdRequest.id)
  return _internal_id();
}
inline void DeleteLocationByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteLocationByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdRequest.id)
}

// -------------------------------------------------------------------

// BulkDeleteLocationByIdRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkDeleteLocationByIdRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkDeleteLocationByIdRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkDeleteLocationByIdRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkDeleteLocationByIdRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkDeleteLocationByIdRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkDeleteLocationByIdRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkDeleteLocationByIdRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkDeleteLocationByIdRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkDeleteLocationByIdRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkDeleteLocationByIdRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.DeleteLocationByIdRequest requests = 2;
inline int BulkDeleteLocationByIdRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkDeleteLocationByIdRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkDeleteLocationByIdRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* BulkDeleteLocationByIdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >*
BulkDeleteLocationByIdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& BulkDeleteLocationByIdRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& BulkDeleteLocationByIdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* BulkDeleteLocationByIdRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* BulkDeleteLocationByIdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >&
BulkDeleteLocationByIdRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// DeleteLocationByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool DeleteLocationByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteLocationByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& DeleteLocationByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& DeleteLocationByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdResponse.status)
  return _internal_status();
}
inline void DeleteLocationByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* DeleteLocationByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* DeleteLocationByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.DeleteLocationByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* DeleteLocationByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* DeleteLocationByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.DeleteLocationByIdResponse.status)
  return _internal_mutable_status();
}
inline void DeleteLocationByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdResponse.status)
}

// int32 count = 2;
inline void DeleteLocationByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteLocationByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteLocationByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdResponse.count)
  return _internal_count();
}
inline void DeleteLocationByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void DeleteLocationByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdResponse.count)
}

// string recordId = 3;
inline void DeleteLocationByIdResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& DeleteLocationByIdResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
  return _internal_recordid();
}
inline void DeleteLocationByIdResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
}
inline std::string* DeleteLocationByIdResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& DeleteLocationByIdResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void DeleteLocationByIdResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteLocationByIdResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
}
inline void DeleteLocationByIdResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
}
inline void DeleteLocationByIdResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
}
inline std::string* DeleteLocationByIdResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteLocationByIdResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteLocationByIdResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.DeleteLocationByIdResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int DeleteLocationByIdResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int DeleteLocationByIdResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* DeleteLocationByIdResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
DeleteLocationByIdResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& DeleteLocationByIdResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& DeleteLocationByIdResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* DeleteLocationByIdResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* DeleteLocationByIdResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
DeleteLocationByIdResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.DeleteLocationByIdResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkDeleteLocationByIdResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkDeleteLocationByIdResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkDeleteLocationByIdResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkDeleteLocationByIdResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkDeleteLocationByIdResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status)
  return _internal_status();
}
inline void BulkDeleteLocationByIdResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkDeleteLocationByIdResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkDeleteLocationByIdResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkDeleteLocationByIdResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkDeleteLocationByIdResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status)
  return _internal_mutable_status();
}
inline void BulkDeleteLocationByIdResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.status)
}

// int32 count = 2;
inline void BulkDeleteLocationByIdResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkDeleteLocationByIdResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkDeleteLocationByIdResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.count)
  return _internal_count();
}
inline void BulkDeleteLocationByIdResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkDeleteLocationByIdResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.count)
}

// repeated .farm.nurture.location.service.proto.DeleteLocationByIdResponse responses = 3;
inline int BulkDeleteLocationByIdResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkDeleteLocationByIdResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkDeleteLocationByIdResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* BulkDeleteLocationByIdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >*
BulkDeleteLocationByIdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& BulkDeleteLocationByIdResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& BulkDeleteLocationByIdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* BulkDeleteLocationByIdResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* BulkDeleteLocationByIdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >&
BulkDeleteLocationByIdResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchDuplicateVillagesRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchDuplicateVillagesRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateVillagesRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateVillagesRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchDuplicateVillagesRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchDuplicateVillagesRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchDuplicateVillagesRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchDuplicateVillagesRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchDuplicateVillagesRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchDuplicateVillagesRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchDuplicateVillagesRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.isStaleAllowed)
}

// int64 id = 3;
inline void FetchDuplicateVillagesRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesRequest::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.id)
  return _internal_id();
}
inline void FetchDuplicateVillagesRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateVillagesRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.id)
}

// string name = 4;
inline void FetchDuplicateVillagesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
  return _internal_name();
}
inline void FetchDuplicateVillagesRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
}
inline std::string* FetchDuplicateVillagesRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FetchDuplicateVillagesRequest::_internal_name() const {
  return name_.Get();
}
inline void FetchDuplicateVillagesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
}
inline void FetchDuplicateVillagesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
}
inline void FetchDuplicateVillagesRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
}
inline std::string* FetchDuplicateVillagesRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesRequest.name)
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesResponseRecord

// int64 id = 1;
inline void FetchDuplicateVillagesResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord.id)
  return _internal_id();
}
inline void FetchDuplicateVillagesResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateVillagesResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord.id)
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FetchDuplicateVillagesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchDuplicateVillagesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateVillagesResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateVillagesResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status)
  return _internal_status();
}
inline void FetchDuplicateVillagesResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status)
  return _internal_mutable_status();
}
inline void FetchDuplicateVillagesResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.status)
}

// int32 count = 2;
inline void FetchDuplicateVillagesResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateVillagesResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateVillagesResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.count)
  return _internal_count();
}
inline void FetchDuplicateVillagesResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FetchDuplicateVillagesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FetchDuplicateVillagesResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FetchDuplicateVillagesResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FetchDuplicateVillagesResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateVillagesResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateVillagesResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FetchDuplicateVillagesResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesResponseRecord records = 4;
inline int FetchDuplicateVillagesResponse::_internal_records_size() const {
  return records_.size();
}
inline int FetchDuplicateVillagesResponse::records_size() const {
  return _internal_records_size();
}
inline void FetchDuplicateVillagesResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* FetchDuplicateVillagesResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >*
FetchDuplicateVillagesResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord& FetchDuplicateVillagesResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord& FetchDuplicateVillagesResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* FetchDuplicateVillagesResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord* FetchDuplicateVillagesResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponseRecord >&
FetchDuplicateVillagesResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateVillagesResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesBySDTVLatLongRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchDuplicateVillagesBySDTVLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchDuplicateVillagesBySDTVLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateVillagesBySDTVLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesBySDTVLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesBySDTVLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchDuplicateVillagesBySDTVLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchDuplicateVillagesBySDTVLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.isStaleAllowed)
}

// string countryStored = 3;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_countrystored() {
  countrystored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::countrystored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
  return _internal_countrystored();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_countrystored(const std::string& value) {
  _internal_set_countrystored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_countrystored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
  return _internal_mutable_countrystored();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_countrystored() const {
  return countrystored_.Get();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_countrystored(const std::string& value) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_countrystored(std::string&& value) {
  
  countrystored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_countrystored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_countrystored(const char* value,
    size_t size) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_countrystored() {
  
  return countrystored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::release_countrystored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
  return countrystored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_countrystored(std::string* countrystored) {
  if (countrystored != nullptr) {
    
  } else {
    
  }
  countrystored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrystored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.countryStored)
}

// string stateStored = 4;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_statestored() {
  statestored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::statestored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
  return _internal_statestored();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_statestored(const std::string& value) {
  _internal_set_statestored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_statestored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
  return _internal_mutable_statestored();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_statestored() const {
  return statestored_.Get();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_statestored(const std::string& value) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_statestored(std::string&& value) {
  
  statestored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_statestored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_statestored(const char* value,
    size_t size) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_statestored() {
  
  return statestored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::release_statestored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
  return statestored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_statestored(std::string* statestored) {
  if (statestored != nullptr) {
    
  } else {
    
  }
  statestored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statestored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.stateStored)
}

// string districtStored = 5;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_districtstored() {
  districtstored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::districtstored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
  return _internal_districtstored();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_districtstored(const std::string& value) {
  _internal_set_districtstored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_districtstored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
  return _internal_mutable_districtstored();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_districtstored() const {
  return districtstored_.Get();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_districtstored(const std::string& value) {
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_districtstored(std::string&& value) {
  
  districtstored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_districtstored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_districtstored(const char* value,
    size_t size) {
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_districtstored() {
  
  return districtstored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::release_districtstored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
  return districtstored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_districtstored(std::string* districtstored) {
  if (districtstored != nullptr) {
    
  } else {
    
  }
  districtstored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), districtstored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.districtStored)
}

// string tehsilStored = 6;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_tehsilstored() {
  tehsilstored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::tehsilstored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
  return _internal_tehsilstored();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_tehsilstored(const std::string& value) {
  _internal_set_tehsilstored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_tehsilstored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
  return _internal_mutable_tehsilstored();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_tehsilstored() const {
  return tehsilstored_.Get();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_tehsilstored(const std::string& value) {
  
  tehsilstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_tehsilstored(std::string&& value) {
  
  tehsilstored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_tehsilstored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsilstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_tehsilstored(const char* value,
    size_t size) {
  
  tehsilstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_tehsilstored() {
  
  return tehsilstored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::release_tehsilstored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
  return tehsilstored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_tehsilstored(std::string* tehsilstored) {
  if (tehsilstored != nullptr) {
    
  } else {
    
  }
  tehsilstored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsilstored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.tehsilStored)
}

// string name = 7;
inline void FetchDuplicateVillagesBySDTVLatLongRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
  return _internal_name();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FetchDuplicateVillagesBySDTVLatLongRequest::_internal_name() const {
  return name_.Get();
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateVillagesBySDTVLatLongRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateVillagesBySDTVLatLongRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest.name)
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesBySDTVLatLongResponseRecord

// int64 id = 1;
inline void FetchDuplicateVillagesBySDTVLatLongResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesBySDTVLatLongResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateVillagesBySDTVLatLongResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord.id)
  return _internal_id();
}
inline void FetchDuplicateVillagesBySDTVLatLongResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateVillagesBySDTVLatLongResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord.id)
}

// -------------------------------------------------------------------

// FetchDuplicateVillagesBySDTVLatLongResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FetchDuplicateVillagesBySDTVLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchDuplicateVillagesBySDTVLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateVillagesBySDTVLatLongResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateVillagesBySDTVLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status)
  return _internal_status();
}
inline void FetchDuplicateVillagesBySDTVLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesBySDTVLatLongResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesBySDTVLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesBySDTVLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateVillagesBySDTVLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status)
  return _internal_mutable_status();
}
inline void FetchDuplicateVillagesBySDTVLatLongResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.status)
}

// int32 count = 2;
inline void FetchDuplicateVillagesBySDTVLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateVillagesBySDTVLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateVillagesBySDTVLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.count)
  return _internal_count();
}
inline void FetchDuplicateVillagesBySDTVLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FetchDuplicateVillagesBySDTVLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FetchDuplicateVillagesBySDTVLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FetchDuplicateVillagesBySDTVLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesBySDTVLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FetchDuplicateVillagesBySDTVLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateVillagesBySDTVLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateVillagesBySDTVLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesBySDTVLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateVillagesBySDTVLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FetchDuplicateVillagesBySDTVLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponseRecord records = 4;
inline int FetchDuplicateVillagesBySDTVLatLongResponse::_internal_records_size() const {
  return records_.size();
}
inline int FetchDuplicateVillagesBySDTVLatLongResponse::records_size() const {
  return _internal_records_size();
}
inline void FetchDuplicateVillagesBySDTVLatLongResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* FetchDuplicateVillagesBySDTVLatLongResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >*
FetchDuplicateVillagesBySDTVLatLongResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord& FetchDuplicateVillagesBySDTVLatLongResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord& FetchDuplicateVillagesBySDTVLatLongResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* FetchDuplicateVillagesBySDTVLatLongResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord* FetchDuplicateVillagesBySDTVLatLongResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponseRecord >&
FetchDuplicateVillagesBySDTVLatLongResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// FetchDuplicateTehsilsBySDTVLatLongRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchDuplicateTehsilsBySDTVLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateTehsilsBySDTVLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateTehsilsBySDTVLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateTehsilsBySDTVLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateTehsilsBySDTVLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchDuplicateTehsilsBySDTVLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.isStaleAllowed)
}

// string countryStored = 3;
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_countrystored() {
  countrystored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::countrystored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
  return _internal_countrystored();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_countrystored(const std::string& value) {
  _internal_set_countrystored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::mutable_countrystored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
  return _internal_mutable_countrystored();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_countrystored() const {
  return countrystored_.Get();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_set_countrystored(const std::string& value) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_countrystored(std::string&& value) {
  
  countrystored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_countrystored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_countrystored(const char* value,
    size_t size) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_mutable_countrystored() {
  
  return countrystored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::release_countrystored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
  return countrystored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_allocated_countrystored(std::string* countrystored) {
  if (countrystored != nullptr) {
    
  } else {
    
  }
  countrystored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrystored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.countryStored)
}

// string stateStored = 4;
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_statestored() {
  statestored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::statestored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
  return _internal_statestored();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_statestored(const std::string& value) {
  _internal_set_statestored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::mutable_statestored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
  return _internal_mutable_statestored();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_statestored() const {
  return statestored_.Get();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_set_statestored(const std::string& value) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_statestored(std::string&& value) {
  
  statestored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_statestored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_statestored(const char* value,
    size_t size) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_mutable_statestored() {
  
  return statestored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::release_statestored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
  return statestored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_allocated_statestored(std::string* statestored) {
  if (statestored != nullptr) {
    
  } else {
    
  }
  statestored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statestored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.stateStored)
}

// string districtStored = 5;
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_districtstored() {
  districtstored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::districtstored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
  return _internal_districtstored();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_districtstored(const std::string& value) {
  _internal_set_districtstored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::mutable_districtstored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
  return _internal_mutable_districtstored();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_districtstored() const {
  return districtstored_.Get();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_set_districtstored(const std::string& value) {
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_districtstored(std::string&& value) {
  
  districtstored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_districtstored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_districtstored(const char* value,
    size_t size) {
  
  districtstored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_mutable_districtstored() {
  
  return districtstored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::release_districtstored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
  return districtstored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_allocated_districtstored(std::string* districtstored) {
  if (districtstored != nullptr) {
    
  } else {
    
  }
  districtstored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), districtstored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.districtStored)
}

// string name = 6;
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
  return _internal_name();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_name() const {
  return name_.Get();
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateTehsilsBySDTVLatLongRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateTehsilsBySDTVLatLongRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest.name)
}

// -------------------------------------------------------------------

// FetchDuplicateTehsilsBySDTVLatLongResponseRecord

// int64 id = 1;
inline void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateTehsilsBySDTVLatLongResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateTehsilsBySDTVLatLongResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord.id)
  return _internal_id();
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord.id)
}

// -------------------------------------------------------------------

// FetchDuplicateTehsilsBySDTVLatLongResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchDuplicateTehsilsBySDTVLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateTehsilsBySDTVLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status)
  return _internal_status();
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateTehsilsBySDTVLatLongResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateTehsilsBySDTVLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateTehsilsBySDTVLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status)
  return _internal_mutable_status();
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.status)
}

// int32 count = 2;
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateTehsilsBySDTVLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.count)
  return _internal_count();
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FetchDuplicateTehsilsBySDTVLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateTehsilsBySDTVLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FetchDuplicateTehsilsBySDTVLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateTehsilsBySDTVLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateTehsilsBySDTVLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FetchDuplicateTehsilsBySDTVLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponseRecord records = 4;
inline int FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_records_size() const {
  return records_.size();
}
inline int FetchDuplicateTehsilsBySDTVLatLongResponse::records_size() const {
  return _internal_records_size();
}
inline void FetchDuplicateTehsilsBySDTVLatLongResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* FetchDuplicateTehsilsBySDTVLatLongResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >*
FetchDuplicateTehsilsBySDTVLatLongResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord& FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord& FetchDuplicateTehsilsBySDTVLatLongResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* FetchDuplicateTehsilsBySDTVLatLongResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord* FetchDuplicateTehsilsBySDTVLatLongResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponseRecord >&
FetchDuplicateTehsilsBySDTVLatLongResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// FetchDuplicateDistrictsBySDTVLatLongRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchDuplicateDistrictsBySDTVLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateDistrictsBySDTVLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateDistrictsBySDTVLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateDistrictsBySDTVLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateDistrictsBySDTVLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchDuplicateDistrictsBySDTVLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.isStaleAllowed)
}

// string countryStored = 3;
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::clear_countrystored() {
  countrystored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::countrystored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
  return _internal_countrystored();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_countrystored(const std::string& value) {
  _internal_set_countrystored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::mutable_countrystored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
  return _internal_mutable_countrystored();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_countrystored() const {
  return countrystored_.Get();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_set_countrystored(const std::string& value) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_countrystored(std::string&& value) {
  
  countrystored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_countrystored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_countrystored(const char* value,
    size_t size) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_mutable_countrystored() {
  
  return countrystored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::release_countrystored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
  return countrystored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_allocated_countrystored(std::string* countrystored) {
  if (countrystored != nullptr) {
    
  } else {
    
  }
  countrystored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrystored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.countryStored)
}

// string stateStored = 4;
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::clear_statestored() {
  statestored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::statestored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
  return _internal_statestored();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_statestored(const std::string& value) {
  _internal_set_statestored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::mutable_statestored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
  return _internal_mutable_statestored();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_statestored() const {
  return statestored_.Get();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_set_statestored(const std::string& value) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_statestored(std::string&& value) {
  
  statestored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_statestored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_statestored(const char* value,
    size_t size) {
  
  statestored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_mutable_statestored() {
  
  return statestored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::release_statestored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
  return statestored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_allocated_statestored(std::string* statestored) {
  if (statestored != nullptr) {
    
  } else {
    
  }
  statestored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statestored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.stateStored)
}

// string name = 5;
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
  return _internal_name();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_name() const {
  return name_.Get();
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateDistrictsBySDTVLatLongRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateDistrictsBySDTVLatLongRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest.name)
}

// -------------------------------------------------------------------

// FetchDuplicateDistrictsBySDTVLatLongResponseRecord

// int64 id = 1;
inline void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateDistrictsBySDTVLatLongResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateDistrictsBySDTVLatLongResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord.id)
  return _internal_id();
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord.id)
}

// -------------------------------------------------------------------

// FetchDuplicateDistrictsBySDTVLatLongResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchDuplicateDistrictsBySDTVLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateDistrictsBySDTVLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status)
  return _internal_status();
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateDistrictsBySDTVLatLongResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateDistrictsBySDTVLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateDistrictsBySDTVLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status)
  return _internal_mutable_status();
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.status)
}

// int32 count = 2;
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateDistrictsBySDTVLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.count)
  return _internal_count();
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FetchDuplicateDistrictsBySDTVLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateDistrictsBySDTVLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FetchDuplicateDistrictsBySDTVLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateDistrictsBySDTVLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateDistrictsBySDTVLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FetchDuplicateDistrictsBySDTVLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponseRecord records = 4;
inline int FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_records_size() const {
  return records_.size();
}
inline int FetchDuplicateDistrictsBySDTVLatLongResponse::records_size() const {
  return _internal_records_size();
}
inline void FetchDuplicateDistrictsBySDTVLatLongResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* FetchDuplicateDistrictsBySDTVLatLongResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >*
FetchDuplicateDistrictsBySDTVLatLongResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord& FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord& FetchDuplicateDistrictsBySDTVLatLongResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* FetchDuplicateDistrictsBySDTVLatLongResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord* FetchDuplicateDistrictsBySDTVLatLongResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponseRecord >&
FetchDuplicateDistrictsBySDTVLatLongResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// FetchDuplicateStatesBySDTVLatLongRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool FetchDuplicateStatesBySDTVLatLongRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool FetchDuplicateStatesBySDTVLatLongRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateStatesBySDTVLatLongRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& FetchDuplicateStatesBySDTVLatLongRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateStatesBySDTVLatLongRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateStatesBySDTVLatLongRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateStatesBySDTVLatLongRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* FetchDuplicateStatesBySDTVLatLongRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void FetchDuplicateStatesBySDTVLatLongRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool FetchDuplicateStatesBySDTVLatLongRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool FetchDuplicateStatesBySDTVLatLongRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.isStaleAllowed)
}

// string countryStored = 3;
inline void FetchDuplicateStatesBySDTVLatLongRequest::clear_countrystored() {
  countrystored_.ClearToEmpty();
}
inline const std::string& FetchDuplicateStatesBySDTVLatLongRequest::countrystored() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
  return _internal_countrystored();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_countrystored(const std::string& value) {
  _internal_set_countrystored(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::mutable_countrystored() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
  return _internal_mutable_countrystored();
}
inline const std::string& FetchDuplicateStatesBySDTVLatLongRequest::_internal_countrystored() const {
  return countrystored_.Get();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::_internal_set_countrystored(const std::string& value) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_countrystored(std::string&& value) {
  
  countrystored_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_countrystored(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_countrystored(const char* value,
    size_t size) {
  
  countrystored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::_internal_mutable_countrystored() {
  
  return countrystored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::release_countrystored() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
  return countrystored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_allocated_countrystored(std::string* countrystored) {
  if (countrystored != nullptr) {
    
  } else {
    
  }
  countrystored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrystored,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.countryStored)
}

// string name = 4;
inline void FetchDuplicateStatesBySDTVLatLongRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FetchDuplicateStatesBySDTVLatLongRequest::name() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
  return _internal_name();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
  return _internal_mutable_name();
}
inline const std::string& FetchDuplicateStatesBySDTVLatLongRequest::_internal_name() const {
  return name_.Get();
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchDuplicateStatesBySDTVLatLongRequest::release_name() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchDuplicateStatesBySDTVLatLongRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest.name)
}

// -------------------------------------------------------------------

// FetchDuplicateStatesBySDTVLatLongResponseRecord

// int64 id = 1;
inline void FetchDuplicateStatesBySDTVLatLongResponseRecord::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateStatesBySDTVLatLongResponseRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchDuplicateStatesBySDTVLatLongResponseRecord::id() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord.id)
  return _internal_id();
}
inline void FetchDuplicateStatesBySDTVLatLongResponseRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void FetchDuplicateStatesBySDTVLatLongResponseRecord::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord.id)
}

// -------------------------------------------------------------------

// FetchDuplicateStatesBySDTVLatLongResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool FetchDuplicateStatesBySDTVLatLongResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchDuplicateStatesBySDTVLatLongResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateStatesBySDTVLatLongResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& FetchDuplicateStatesBySDTVLatLongResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status)
  return _internal_status();
}
inline void FetchDuplicateStatesBySDTVLatLongResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateStatesBySDTVLatLongResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateStatesBySDTVLatLongResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateStatesBySDTVLatLongResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* FetchDuplicateStatesBySDTVLatLongResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status)
  return _internal_mutable_status();
}
inline void FetchDuplicateStatesBySDTVLatLongResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.status)
}

// int32 count = 2;
inline void FetchDuplicateStatesBySDTVLatLongResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateStatesBySDTVLatLongResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchDuplicateStatesBySDTVLatLongResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.count)
  return _internal_count();
}
inline void FetchDuplicateStatesBySDTVLatLongResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void FetchDuplicateStatesBySDTVLatLongResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int FetchDuplicateStatesBySDTVLatLongResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int FetchDuplicateStatesBySDTVLatLongResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateStatesBySDTVLatLongResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
FetchDuplicateStatesBySDTVLatLongResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateStatesBySDTVLatLongResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& FetchDuplicateStatesBySDTVLatLongResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateStatesBySDTVLatLongResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* FetchDuplicateStatesBySDTVLatLongResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
FetchDuplicateStatesBySDTVLatLongResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponseRecord records = 4;
inline int FetchDuplicateStatesBySDTVLatLongResponse::_internal_records_size() const {
  return records_.size();
}
inline int FetchDuplicateStatesBySDTVLatLongResponse::records_size() const {
  return _internal_records_size();
}
inline void FetchDuplicateStatesBySDTVLatLongResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* FetchDuplicateStatesBySDTVLatLongResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >*
FetchDuplicateStatesBySDTVLatLongResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord& FetchDuplicateStatesBySDTVLatLongResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord& FetchDuplicateStatesBySDTVLatLongResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* FetchDuplicateStatesBySDTVLatLongResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord* FetchDuplicateStatesBySDTVLatLongResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponseRecord >&
FetchDuplicateStatesBySDTVLatLongResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetDuplicateGeographiesRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetDuplicateGeographiesRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetDuplicateGeographiesRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetDuplicateGeographiesRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetDuplicateGeographiesRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetDuplicateGeographiesRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDuplicateGeographiesRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDuplicateGeographiesRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDuplicateGeographiesRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetDuplicateGeographiesRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetDuplicateGeographiesRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetDuplicateGeographiesRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetDuplicateGeographiesRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetDuplicateGeographiesRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetDuplicateGeographiesRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetDuplicateGeographiesRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.isStaleAllowed)
}

// double latitude = 4;
inline void GetDuplicateGeographiesRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetDuplicateGeographiesRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetDuplicateGeographiesRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.latitude)
  return _internal_latitude();
}
inline void GetDuplicateGeographiesRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetDuplicateGeographiesRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.latitude)
}

// double longitude = 5;
inline void GetDuplicateGeographiesRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetDuplicateGeographiesRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetDuplicateGeographiesRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.longitude)
  return _internal_longitude();
}
inline void GetDuplicateGeographiesRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetDuplicateGeographiesRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.longitude)
}

// string country = 6;
inline void GetDuplicateGeographiesRequest::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& GetDuplicateGeographiesRequest::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
  return _internal_country();
}
inline void GetDuplicateGeographiesRequest::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
}
inline std::string* GetDuplicateGeographiesRequest::mutable_country() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
  return _internal_mutable_country();
}
inline const std::string& GetDuplicateGeographiesRequest::_internal_country() const {
  return country_.Get();
}
inline void GetDuplicateGeographiesRequest::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDuplicateGeographiesRequest::set_country(std::string&& value) {
  
  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
}
inline void GetDuplicateGeographiesRequest::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
}
inline void GetDuplicateGeographiesRequest::set_country(const char* value,
    size_t size) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
}
inline std::string* GetDuplicateGeographiesRequest::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDuplicateGeographiesRequest::release_country() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDuplicateGeographiesRequest::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.country)
}

// string state = 7;
inline void GetDuplicateGeographiesRequest::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GetDuplicateGeographiesRequest::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
  return _internal_state();
}
inline void GetDuplicateGeographiesRequest::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
}
inline std::string* GetDuplicateGeographiesRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
  return _internal_mutable_state();
}
inline const std::string& GetDuplicateGeographiesRequest::_internal_state() const {
  return state_.Get();
}
inline void GetDuplicateGeographiesRequest::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDuplicateGeographiesRequest::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
}
inline void GetDuplicateGeographiesRequest::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
}
inline void GetDuplicateGeographiesRequest::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
}
inline std::string* GetDuplicateGeographiesRequest::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDuplicateGeographiesRequest::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDuplicateGeographiesRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.state)
}

// string district = 8;
inline void GetDuplicateGeographiesRequest::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& GetDuplicateGeographiesRequest::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
  return _internal_district();
}
inline void GetDuplicateGeographiesRequest::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
}
inline std::string* GetDuplicateGeographiesRequest::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
  return _internal_mutable_district();
}
inline const std::string& GetDuplicateGeographiesRequest::_internal_district() const {
  return district_.Get();
}
inline void GetDuplicateGeographiesRequest::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDuplicateGeographiesRequest::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
}
inline void GetDuplicateGeographiesRequest::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
}
inline void GetDuplicateGeographiesRequest::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
}
inline std::string* GetDuplicateGeographiesRequest::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDuplicateGeographiesRequest::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDuplicateGeographiesRequest::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.district)
}

// string tehsil = 9;
inline void GetDuplicateGeographiesRequest::clear_tehsil() {
  tehsil_.ClearToEmpty();
}
inline const std::string& GetDuplicateGeographiesRequest::tehsil() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
  return _internal_tehsil();
}
inline void GetDuplicateGeographiesRequest::set_tehsil(const std::string& value) {
  _internal_set_tehsil(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
}
inline std::string* GetDuplicateGeographiesRequest::mutable_tehsil() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
  return _internal_mutable_tehsil();
}
inline const std::string& GetDuplicateGeographiesRequest::_internal_tehsil() const {
  return tehsil_.Get();
}
inline void GetDuplicateGeographiesRequest::_internal_set_tehsil(const std::string& value) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDuplicateGeographiesRequest::set_tehsil(std::string&& value) {
  
  tehsil_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
}
inline void GetDuplicateGeographiesRequest::set_tehsil(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
}
inline void GetDuplicateGeographiesRequest::set_tehsil(const char* value,
    size_t size) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
}
inline std::string* GetDuplicateGeographiesRequest::_internal_mutable_tehsil() {
  
  return tehsil_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDuplicateGeographiesRequest::release_tehsil() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
  return tehsil_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDuplicateGeographiesRequest::set_allocated_tehsil(std::string* tehsil) {
  if (tehsil != nullptr) {
    
  } else {
    
  }
  tehsil_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsil,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.tehsil)
}

// string village = 10;
inline void GetDuplicateGeographiesRequest::clear_village() {
  village_.ClearToEmpty();
}
inline const std::string& GetDuplicateGeographiesRequest::village() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
  return _internal_village();
}
inline void GetDuplicateGeographiesRequest::set_village(const std::string& value) {
  _internal_set_village(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
}
inline std::string* GetDuplicateGeographiesRequest::mutable_village() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
  return _internal_mutable_village();
}
inline const std::string& GetDuplicateGeographiesRequest::_internal_village() const {
  return village_.Get();
}
inline void GetDuplicateGeographiesRequest::_internal_set_village(const std::string& value) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDuplicateGeographiesRequest::set_village(std::string&& value) {
  
  village_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
}
inline void GetDuplicateGeographiesRequest::set_village(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
}
inline void GetDuplicateGeographiesRequest::set_village(const char* value,
    size_t size) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
}
inline std::string* GetDuplicateGeographiesRequest::_internal_mutable_village() {
  
  return village_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDuplicateGeographiesRequest::release_village() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
  return village_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDuplicateGeographiesRequest::set_allocated_village(std::string* village) {
  if (village != nullptr) {
    
  } else {
    
  }
  village_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), village,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.village)
}

// .farm.nurture.location.service.proto.GeographyType geoType = 11;
inline void GetDuplicateGeographiesRequest::clear_geotype() {
  geotype_ = 0;
}
inline ::farm::nurture::location::service::proto::GeographyType GetDuplicateGeographiesRequest::_internal_geotype() const {
  return static_cast< ::farm::nurture::location::service::proto::GeographyType >(geotype_);
}
inline ::farm::nurture::location::service::proto::GeographyType GetDuplicateGeographiesRequest::geotype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.geoType)
  return _internal_geotype();
}
inline void GetDuplicateGeographiesRequest::_internal_set_geotype(::farm::nurture::location::service::proto::GeographyType value) {
  
  geotype_ = value;
}
inline void GetDuplicateGeographiesRequest::set_geotype(::farm::nurture::location::service::proto::GeographyType value) {
  _internal_set_geotype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesRequest.geoType)
}

// -------------------------------------------------------------------

// GetDuplicateGeographiesResponseRecord

// -------------------------------------------------------------------

// GetDuplicateGeographiesResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetDuplicateGeographiesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetDuplicateGeographiesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetDuplicateGeographiesResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetDuplicateGeographiesResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status)
  return _internal_status();
}
inline void GetDuplicateGeographiesResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDuplicateGeographiesResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDuplicateGeographiesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDuplicateGeographiesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetDuplicateGeographiesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status)
  return _internal_mutable_status();
}
inline void GetDuplicateGeographiesResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.status)
}

// int32 count = 2;
inline void GetDuplicateGeographiesResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDuplicateGeographiesResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDuplicateGeographiesResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.count)
  return _internal_count();
}
inline void GetDuplicateGeographiesResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetDuplicateGeographiesResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetDuplicateGeographiesResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetDuplicateGeographiesResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDuplicateGeographiesResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetDuplicateGeographiesResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetDuplicateGeographiesResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetDuplicateGeographiesResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDuplicateGeographiesResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetDuplicateGeographiesResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetDuplicateGeographiesResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.attribs)
  return attribs_;
}

// repeated int64 id = 4;
inline int GetDuplicateGeographiesResponse::_internal_id_size() const {
  return id_.size();
}
inline int GetDuplicateGeographiesResponse::id_size() const {
  return _internal_id_size();
}
inline void GetDuplicateGeographiesResponse::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDuplicateGeographiesResponse::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDuplicateGeographiesResponse::id(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.id)
  return _internal_id(index);
}
inline void GetDuplicateGeographiesResponse::set_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.id)
}
inline void GetDuplicateGeographiesResponse::_internal_add_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  id_.Add(value);
}
inline void GetDuplicateGeographiesResponse::add_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetDuplicateGeographiesResponse::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetDuplicateGeographiesResponse::id() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetDuplicateGeographiesResponse::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetDuplicateGeographiesResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetDuplicateGeographiesResponse.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// InsertVendorLocationDataRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool InsertVendorLocationDataRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool InsertVendorLocationDataRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertVendorLocationDataRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& InsertVendorLocationDataRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void InsertVendorLocationDataRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertVendorLocationDataRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertVendorLocationDataRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertVendorLocationDataRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* InsertVendorLocationDataRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void InsertVendorLocationDataRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.requestHeaders)
}

// string vendorId = 2;
inline void InsertVendorLocationDataRequest::clear_vendorid() {
  vendorid_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::vendorid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
  return _internal_vendorid();
}
inline void InsertVendorLocationDataRequest::set_vendorid(const std::string& value) {
  _internal_set_vendorid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
}
inline std::string* InsertVendorLocationDataRequest::mutable_vendorid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
  return _internal_mutable_vendorid();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_vendorid() const {
  return vendorid_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_vendorid(const std::string& value) {
  
  vendorid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_vendorid(std::string&& value) {
  
  vendorid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
}
inline void InsertVendorLocationDataRequest::set_vendorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendorid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
}
inline void InsertVendorLocationDataRequest::set_vendorid(const char* value,
    size_t size) {
  
  vendorid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_vendorid() {
  
  return vendorid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_vendorid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
  return vendorid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_vendorid(std::string* vendorid) {
  if (vendorid != nullptr) {
    
  } else {
    
  }
  vendorid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendorid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorId)
}

// string vendorType = 3;
inline void InsertVendorLocationDataRequest::clear_vendortype() {
  vendortype_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::vendortype() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
  return _internal_vendortype();
}
inline void InsertVendorLocationDataRequest::set_vendortype(const std::string& value) {
  _internal_set_vendortype(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
}
inline std::string* InsertVendorLocationDataRequest::mutable_vendortype() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
  return _internal_mutable_vendortype();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_vendortype() const {
  return vendortype_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_vendortype(const std::string& value) {
  
  vendortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_vendortype(std::string&& value) {
  
  vendortype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
}
inline void InsertVendorLocationDataRequest::set_vendortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
}
inline void InsertVendorLocationDataRequest::set_vendortype(const char* value,
    size_t size) {
  
  vendortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_vendortype() {
  
  return vendortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_vendortype() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
  return vendortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_vendortype(std::string* vendortype) {
  if (vendortype != nullptr) {
    
  } else {
    
  }
  vendortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendortype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorType)
}

// string geohash7 = 4;
inline void InsertVendorLocationDataRequest::clear_geohash7() {
  geohash7_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::geohash7() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
  return _internal_geohash7();
}
inline void InsertVendorLocationDataRequest::set_geohash7(const std::string& value) {
  _internal_set_geohash7(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
}
inline std::string* InsertVendorLocationDataRequest::mutable_geohash7() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
  return _internal_mutable_geohash7();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_geohash7() const {
  return geohash7_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_geohash7(const std::string& value) {
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_geohash7(std::string&& value) {
  
  geohash7_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
}
inline void InsertVendorLocationDataRequest::set_geohash7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
}
inline void InsertVendorLocationDataRequest::set_geohash7(const char* value,
    size_t size) {
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_geohash7() {
  
  return geohash7_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_geohash7() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
  return geohash7_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_geohash7(std::string* geohash7) {
  if (geohash7 != nullptr) {
    
  } else {
    
  }
  geohash7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash7,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash7)
}

// string geohash6 = 5;
inline void InsertVendorLocationDataRequest::clear_geohash6() {
  geohash6_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::geohash6() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
  return _internal_geohash6();
}
inline void InsertVendorLocationDataRequest::set_geohash6(const std::string& value) {
  _internal_set_geohash6(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
}
inline std::string* InsertVendorLocationDataRequest::mutable_geohash6() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
  return _internal_mutable_geohash6();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_geohash6() const {
  return geohash6_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_geohash6(const std::string& value) {
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_geohash6(std::string&& value) {
  
  geohash6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
}
inline void InsertVendorLocationDataRequest::set_geohash6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
}
inline void InsertVendorLocationDataRequest::set_geohash6(const char* value,
    size_t size) {
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_geohash6() {
  
  return geohash6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_geohash6() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
  return geohash6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_geohash6(std::string* geohash6) {
  if (geohash6 != nullptr) {
    
  } else {
    
  }
  geohash6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.geohash6)
}

// double latitude = 6;
inline void InsertVendorLocationDataRequest::clear_latitude() {
  latitude_ = 0;
}
inline double InsertVendorLocationDataRequest::_internal_latitude() const {
  return latitude_;
}
inline double InsertVendorLocationDataRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.latitude)
  return _internal_latitude();
}
inline void InsertVendorLocationDataRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void InsertVendorLocationDataRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.latitude)
}

// double longitude = 7;
inline void InsertVendorLocationDataRequest::clear_longitude() {
  longitude_ = 0;
}
inline double InsertVendorLocationDataRequest::_internal_longitude() const {
  return longitude_;
}
inline double InsertVendorLocationDataRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.longitude)
  return _internal_longitude();
}
inline void InsertVendorLocationDataRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void InsertVendorLocationDataRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.longitude)
}

// string village = 8;
inline void InsertVendorLocationDataRequest::clear_village() {
  village_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::village() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
  return _internal_village();
}
inline void InsertVendorLocationDataRequest::set_village(const std::string& value) {
  _internal_set_village(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
}
inline std::string* InsertVendorLocationDataRequest::mutable_village() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
  return _internal_mutable_village();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_village() const {
  return village_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_village(const std::string& value) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_village(std::string&& value) {
  
  village_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
}
inline void InsertVendorLocationDataRequest::set_village(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
}
inline void InsertVendorLocationDataRequest::set_village(const char* value,
    size_t size) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_village() {
  
  return village_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_village() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
  return village_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_village(std::string* village) {
  if (village != nullptr) {
    
  } else {
    
  }
  village_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), village,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.village)
}

// string tehsil = 9;
inline void InsertVendorLocationDataRequest::clear_tehsil() {
  tehsil_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::tehsil() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
  return _internal_tehsil();
}
inline void InsertVendorLocationDataRequest::set_tehsil(const std::string& value) {
  _internal_set_tehsil(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
}
inline std::string* InsertVendorLocationDataRequest::mutable_tehsil() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
  return _internal_mutable_tehsil();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_tehsil() const {
  return tehsil_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_tehsil(const std::string& value) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_tehsil(std::string&& value) {
  
  tehsil_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
}
inline void InsertVendorLocationDataRequest::set_tehsil(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
}
inline void InsertVendorLocationDataRequest::set_tehsil(const char* value,
    size_t size) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_tehsil() {
  
  return tehsil_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_tehsil() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
  return tehsil_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_tehsil(std::string* tehsil) {
  if (tehsil != nullptr) {
    
  } else {
    
  }
  tehsil_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsil,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.tehsil)
}

// string district = 10;
inline void InsertVendorLocationDataRequest::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
  return _internal_district();
}
inline void InsertVendorLocationDataRequest::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
}
inline std::string* InsertVendorLocationDataRequest::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
  return _internal_mutable_district();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_district() const {
  return district_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
}
inline void InsertVendorLocationDataRequest::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
}
inline void InsertVendorLocationDataRequest::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.district)
}

// string state = 11;
inline void InsertVendorLocationDataRequest::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
  return _internal_state();
}
inline void InsertVendorLocationDataRequest::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
}
inline std::string* InsertVendorLocationDataRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
  return _internal_mutable_state();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_state() const {
  return state_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
}
inline void InsertVendorLocationDataRequest::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
}
inline void InsertVendorLocationDataRequest::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.state)
}

// string country = 12;
inline void InsertVendorLocationDataRequest::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
  return _internal_country();
}
inline void InsertVendorLocationDataRequest::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
}
inline std::string* InsertVendorLocationDataRequest::mutable_country() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
  return _internal_mutable_country();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_country() const {
  return country_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_country(std::string&& value) {
  
  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
}
inline void InsertVendorLocationDataRequest::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
}
inline void InsertVendorLocationDataRequest::set_country(const char* value,
    size_t size) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_country() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.country)
}

// string vendorResponse = 13;
inline void InsertVendorLocationDataRequest::clear_vendorresponse() {
  vendorresponse_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataRequest::vendorresponse() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
  return _internal_vendorresponse();
}
inline void InsertVendorLocationDataRequest::set_vendorresponse(const std::string& value) {
  _internal_set_vendorresponse(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
}
inline std::string* InsertVendorLocationDataRequest::mutable_vendorresponse() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
  return _internal_mutable_vendorresponse();
}
inline const std::string& InsertVendorLocationDataRequest::_internal_vendorresponse() const {
  return vendorresponse_.Get();
}
inline void InsertVendorLocationDataRequest::_internal_set_vendorresponse(const std::string& value) {
  
  vendorresponse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataRequest::set_vendorresponse(std::string&& value) {
  
  vendorresponse_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
}
inline void InsertVendorLocationDataRequest::set_vendorresponse(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendorresponse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
}
inline void InsertVendorLocationDataRequest::set_vendorresponse(const char* value,
    size_t size) {
  
  vendorresponse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
}
inline std::string* InsertVendorLocationDataRequest::_internal_mutable_vendorresponse() {
  
  return vendorresponse_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataRequest::release_vendorresponse() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
  return vendorresponse_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataRequest::set_allocated_vendorresponse(std::string* vendorresponse) {
  if (vendorresponse != nullptr) {
    
  } else {
    
  }
  vendorresponse_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendorresponse,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataRequest.vendorResponse)
}

// -------------------------------------------------------------------

// BulkInsertVendorLocationDataRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkInsertVendorLocationDataRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkInsertVendorLocationDataRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertVendorLocationDataRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkInsertVendorLocationDataRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkInsertVendorLocationDataRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertVendorLocationDataRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertVendorLocationDataRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertVendorLocationDataRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkInsertVendorLocationDataRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkInsertVendorLocationDataRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.InsertVendorLocationDataRequest requests = 2;
inline int BulkInsertVendorLocationDataRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkInsertVendorLocationDataRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkInsertVendorLocationDataRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* BulkInsertVendorLocationDataRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >*
BulkInsertVendorLocationDataRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& BulkInsertVendorLocationDataRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& BulkInsertVendorLocationDataRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* BulkInsertVendorLocationDataRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* BulkInsertVendorLocationDataRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >&
BulkInsertVendorLocationDataRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InsertVendorLocationDataResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool InsertVendorLocationDataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool InsertVendorLocationDataResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertVendorLocationDataResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& InsertVendorLocationDataResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status)
  return _internal_status();
}
inline void InsertVendorLocationDataResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertVendorLocationDataResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertVendorLocationDataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertVendorLocationDataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* InsertVendorLocationDataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status)
  return _internal_mutable_status();
}
inline void InsertVendorLocationDataResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.status)
}

// int32 count = 2;
inline void InsertVendorLocationDataResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertVendorLocationDataResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertVendorLocationDataResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.count)
  return _internal_count();
}
inline void InsertVendorLocationDataResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void InsertVendorLocationDataResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.count)
}

// string recordId = 3;
inline void InsertVendorLocationDataResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& InsertVendorLocationDataResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
  return _internal_recordid();
}
inline void InsertVendorLocationDataResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
}
inline std::string* InsertVendorLocationDataResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& InsertVendorLocationDataResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void InsertVendorLocationDataResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertVendorLocationDataResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
}
inline void InsertVendorLocationDataResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
}
inline void InsertVendorLocationDataResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
}
inline std::string* InsertVendorLocationDataResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertVendorLocationDataResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertVendorLocationDataResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int InsertVendorLocationDataResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int InsertVendorLocationDataResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertVendorLocationDataResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
InsertVendorLocationDataResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertVendorLocationDataResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& InsertVendorLocationDataResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertVendorLocationDataResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* InsertVendorLocationDataResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
InsertVendorLocationDataResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.InsertVendorLocationDataResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkInsertVendorLocationDataResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkInsertVendorLocationDataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkInsertVendorLocationDataResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertVendorLocationDataResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkInsertVendorLocationDataResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status)
  return _internal_status();
}
inline void BulkInsertVendorLocationDataResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertVendorLocationDataResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertVendorLocationDataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertVendorLocationDataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkInsertVendorLocationDataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status)
  return _internal_mutable_status();
}
inline void BulkInsertVendorLocationDataResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.status)
}

// int32 count = 2;
inline void BulkInsertVendorLocationDataResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertVendorLocationDataResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkInsertVendorLocationDataResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.count)
  return _internal_count();
}
inline void BulkInsertVendorLocationDataResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkInsertVendorLocationDataResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.count)
}

// repeated .farm.nurture.location.service.proto.InsertVendorLocationDataResponse responses = 3;
inline int BulkInsertVendorLocationDataResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkInsertVendorLocationDataResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkInsertVendorLocationDataResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* BulkInsertVendorLocationDataResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >*
BulkInsertVendorLocationDataResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& BulkInsertVendorLocationDataResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& BulkInsertVendorLocationDataResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* BulkInsertVendorLocationDataResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* BulkInsertVendorLocationDataResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >&
BulkInsertVendorLocationDataResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// SearchVendorLocationsByGeohashRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool SearchVendorLocationsByGeohashRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool SearchVendorLocationsByGeohashRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& SearchVendorLocationsByGeohashRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& SearchVendorLocationsByGeohashRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void SearchVendorLocationsByGeohashRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchVendorLocationsByGeohashRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchVendorLocationsByGeohashRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchVendorLocationsByGeohashRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchVendorLocationsByGeohashRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void SearchVendorLocationsByGeohashRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void SearchVendorLocationsByGeohashRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool SearchVendorLocationsByGeohashRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool SearchVendorLocationsByGeohashRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void SearchVendorLocationsByGeohashRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void SearchVendorLocationsByGeohashRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.isStaleAllowed)
}

// string geohash7 = 3;
inline void SearchVendorLocationsByGeohashRequest::clear_geohash7() {
  geohash7_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashRequest::geohash7() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
  return _internal_geohash7();
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash7(const std::string& value) {
  _internal_set_geohash7(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
}
inline std::string* SearchVendorLocationsByGeohashRequest::mutable_geohash7() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
  return _internal_mutable_geohash7();
}
inline const std::string& SearchVendorLocationsByGeohashRequest::_internal_geohash7() const {
  return geohash7_.Get();
}
inline void SearchVendorLocationsByGeohashRequest::_internal_set_geohash7(const std::string& value) {
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash7(std::string&& value) {
  
  geohash7_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash7(const char* value,
    size_t size) {
  
  geohash7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
}
inline std::string* SearchVendorLocationsByGeohashRequest::_internal_mutable_geohash7() {
  
  return geohash7_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashRequest::release_geohash7() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
  return geohash7_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashRequest::set_allocated_geohash7(std::string* geohash7) {
  if (geohash7 != nullptr) {
    
  } else {
    
  }
  geohash7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash7,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash7)
}

// string geohash6 = 4;
inline void SearchVendorLocationsByGeohashRequest::clear_geohash6() {
  geohash6_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashRequest::geohash6() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
  return _internal_geohash6();
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash6(const std::string& value) {
  _internal_set_geohash6(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
}
inline std::string* SearchVendorLocationsByGeohashRequest::mutable_geohash6() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
  return _internal_mutable_geohash6();
}
inline const std::string& SearchVendorLocationsByGeohashRequest::_internal_geohash6() const {
  return geohash6_.Get();
}
inline void SearchVendorLocationsByGeohashRequest::_internal_set_geohash6(const std::string& value) {
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash6(std::string&& value) {
  
  geohash6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
}
inline void SearchVendorLocationsByGeohashRequest::set_geohash6(const char* value,
    size_t size) {
  
  geohash6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
}
inline std::string* SearchVendorLocationsByGeohashRequest::_internal_mutable_geohash6() {
  
  return geohash6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashRequest::release_geohash6() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
  return geohash6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashRequest::set_allocated_geohash6(std::string* geohash6) {
  if (geohash6 != nullptr) {
    
  } else {
    
  }
  geohash6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest.geohash6)
}

// -------------------------------------------------------------------

// SearchVendorLocationsByGeohashResponseRecord

// double latitude = 1;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_latitude() {
  latitude_ = 0;
}
inline double SearchVendorLocationsByGeohashResponseRecord::_internal_latitude() const {
  return latitude_;
}
inline double SearchVendorLocationsByGeohashResponseRecord::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.latitude)
  return _internal_latitude();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.latitude)
}

// double longitude = 2;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_longitude() {
  longitude_ = 0;
}
inline double SearchVendorLocationsByGeohashResponseRecord::_internal_longitude() const {
  return longitude_;
}
inline double SearchVendorLocationsByGeohashResponseRecord::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.longitude)
  return _internal_longitude();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.longitude)
}

// string village = 3;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_village() {
  village_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::village() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
  return _internal_village();
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_village(const std::string& value) {
  _internal_set_village(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::mutable_village() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
  return _internal_mutable_village();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::_internal_village() const {
  return village_.Get();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_village(const std::string& value) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_village(std::string&& value) {
  
  village_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_village(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_village(const char* value,
    size_t size) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::_internal_mutable_village() {
  
  return village_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::release_village() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
  return village_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_allocated_village(std::string* village) {
  if (village != nullptr) {
    
  } else {
    
  }
  village_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), village,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.village)
}

// string tehsil = 4;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_tehsil() {
  tehsil_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::tehsil() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
  return _internal_tehsil();
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_tehsil(const std::string& value) {
  _internal_set_tehsil(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::mutable_tehsil() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
  return _internal_mutable_tehsil();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::_internal_tehsil() const {
  return tehsil_.Get();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_tehsil(const std::string& value) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_tehsil(std::string&& value) {
  
  tehsil_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_tehsil(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_tehsil(const char* value,
    size_t size) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::_internal_mutable_tehsil() {
  
  return tehsil_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::release_tehsil() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
  return tehsil_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_allocated_tehsil(std::string* tehsil) {
  if (tehsil != nullptr) {
    
  } else {
    
  }
  tehsil_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsil,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.tehsil)
}

// string district = 5;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
  return _internal_district();
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
  return _internal_mutable_district();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::_internal_district() const {
  return district_.Get();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.district)
}

// string state = 6;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
  return _internal_state();
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
  return _internal_mutable_state();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::_internal_state() const {
  return state_.Get();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.state)
}

// string country = 7;
inline void SearchVendorLocationsByGeohashResponseRecord::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
  return _internal_country();
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::mutable_country() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
  return _internal_mutable_country();
}
inline const std::string& SearchVendorLocationsByGeohashResponseRecord::_internal_country() const {
  return country_.Get();
}
inline void SearchVendorLocationsByGeohashResponseRecord::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_country(std::string&& value) {
  
  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_country(const char* value,
    size_t size) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchVendorLocationsByGeohashResponseRecord::release_country() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchVendorLocationsByGeohashResponseRecord::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord.country)
}

// -------------------------------------------------------------------

// SearchVendorLocationsByGeohashResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool SearchVendorLocationsByGeohashResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SearchVendorLocationsByGeohashResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& SearchVendorLocationsByGeohashResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& SearchVendorLocationsByGeohashResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status)
  return _internal_status();
}
inline void SearchVendorLocationsByGeohashResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchVendorLocationsByGeohashResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchVendorLocationsByGeohashResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchVendorLocationsByGeohashResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchVendorLocationsByGeohashResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status)
  return _internal_mutable_status();
}
inline void SearchVendorLocationsByGeohashResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.status)
}

// int32 count = 2;
inline void SearchVendorLocationsByGeohashResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchVendorLocationsByGeohashResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchVendorLocationsByGeohashResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.count)
  return _internal_count();
}
inline void SearchVendorLocationsByGeohashResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SearchVendorLocationsByGeohashResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int SearchVendorLocationsByGeohashResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int SearchVendorLocationsByGeohashResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchVendorLocationsByGeohashResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
SearchVendorLocationsByGeohashResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& SearchVendorLocationsByGeohashResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& SearchVendorLocationsByGeohashResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchVendorLocationsByGeohashResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchVendorLocationsByGeohashResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
SearchVendorLocationsByGeohashResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponseRecord records = 4;
inline int SearchVendorLocationsByGeohashResponse::_internal_records_size() const {
  return records_.size();
}
inline int SearchVendorLocationsByGeohashResponse::records_size() const {
  return _internal_records_size();
}
inline void SearchVendorLocationsByGeohashResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* SearchVendorLocationsByGeohashResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >*
SearchVendorLocationsByGeohashResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord& SearchVendorLocationsByGeohashResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord& SearchVendorLocationsByGeohashResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* SearchVendorLocationsByGeohashResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord* SearchVendorLocationsByGeohashResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponseRecord >&
SearchVendorLocationsByGeohashResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// SearchLocationsByGeohashRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool SearchLocationsByGeohashRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool SearchLocationsByGeohashRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& SearchLocationsByGeohashRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& SearchLocationsByGeohashRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void SearchLocationsByGeohashRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchLocationsByGeohashRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchLocationsByGeohashRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchLocationsByGeohashRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* SearchLocationsByGeohashRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void SearchLocationsByGeohashRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void SearchLocationsByGeohashRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool SearchLocationsByGeohashRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool SearchLocationsByGeohashRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void SearchLocationsByGeohashRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void SearchLocationsByGeohashRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.isStaleAllowed)
}

// string geohash8 = 3;
inline void SearchLocationsByGeohashRequest::clear_geohash8() {
  geohash8_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashRequest::geohash8() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
  return _internal_geohash8();
}
inline void SearchLocationsByGeohashRequest::set_geohash8(const std::string& value) {
  _internal_set_geohash8(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
}
inline std::string* SearchLocationsByGeohashRequest::mutable_geohash8() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
  return _internal_mutable_geohash8();
}
inline const std::string& SearchLocationsByGeohashRequest::_internal_geohash8() const {
  return geohash8_.Get();
}
inline void SearchLocationsByGeohashRequest::_internal_set_geohash8(const std::string& value) {
  
  geohash8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashRequest::set_geohash8(std::string&& value) {
  
  geohash8_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
}
inline void SearchLocationsByGeohashRequest::set_geohash8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geohash8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
}
inline void SearchLocationsByGeohashRequest::set_geohash8(const char* value,
    size_t size) {
  
  geohash8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
}
inline std::string* SearchLocationsByGeohashRequest::_internal_mutable_geohash8() {
  
  return geohash8_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashRequest::release_geohash8() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
  return geohash8_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashRequest::set_allocated_geohash8(std::string* geohash8) {
  if (geohash8 != nullptr) {
    
  } else {
    
  }
  geohash8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geohash8,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashRequest.geohash8)
}

// -------------------------------------------------------------------

// SearchLocationsByGeohashResponseRecord

// double latitude = 1;
inline void SearchLocationsByGeohashResponseRecord::clear_latitude() {
  latitude_ = 0;
}
inline double SearchLocationsByGeohashResponseRecord::_internal_latitude() const {
  return latitude_;
}
inline double SearchLocationsByGeohashResponseRecord::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.latitude)
  return _internal_latitude();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void SearchLocationsByGeohashResponseRecord::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.latitude)
}

// double longitude = 2;
inline void SearchLocationsByGeohashResponseRecord::clear_longitude() {
  longitude_ = 0;
}
inline double SearchLocationsByGeohashResponseRecord::_internal_longitude() const {
  return longitude_;
}
inline double SearchLocationsByGeohashResponseRecord::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.longitude)
  return _internal_longitude();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void SearchLocationsByGeohashResponseRecord::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.longitude)
}

// string village = 3;
inline void SearchLocationsByGeohashResponseRecord::clear_village() {
  village_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::village() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
  return _internal_village();
}
inline void SearchLocationsByGeohashResponseRecord::set_village(const std::string& value) {
  _internal_set_village(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
}
inline std::string* SearchLocationsByGeohashResponseRecord::mutable_village() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
  return _internal_mutable_village();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::_internal_village() const {
  return village_.Get();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_village(const std::string& value) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_village(std::string&& value) {
  
  village_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
}
inline void SearchLocationsByGeohashResponseRecord::set_village(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
}
inline void SearchLocationsByGeohashResponseRecord::set_village(const char* value,
    size_t size) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
}
inline std::string* SearchLocationsByGeohashResponseRecord::_internal_mutable_village() {
  
  return village_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashResponseRecord::release_village() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
  return village_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_allocated_village(std::string* village) {
  if (village != nullptr) {
    
  } else {
    
  }
  village_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), village,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.village)
}

// string tehsil = 4;
inline void SearchLocationsByGeohashResponseRecord::clear_tehsil() {
  tehsil_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::tehsil() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
  return _internal_tehsil();
}
inline void SearchLocationsByGeohashResponseRecord::set_tehsil(const std::string& value) {
  _internal_set_tehsil(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
}
inline std::string* SearchLocationsByGeohashResponseRecord::mutable_tehsil() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
  return _internal_mutable_tehsil();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::_internal_tehsil() const {
  return tehsil_.Get();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_tehsil(const std::string& value) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_tehsil(std::string&& value) {
  
  tehsil_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
}
inline void SearchLocationsByGeohashResponseRecord::set_tehsil(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
}
inline void SearchLocationsByGeohashResponseRecord::set_tehsil(const char* value,
    size_t size) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
}
inline std::string* SearchLocationsByGeohashResponseRecord::_internal_mutable_tehsil() {
  
  return tehsil_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashResponseRecord::release_tehsil() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
  return tehsil_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_allocated_tehsil(std::string* tehsil) {
  if (tehsil != nullptr) {
    
  } else {
    
  }
  tehsil_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsil,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.tehsil)
}

// string district = 5;
inline void SearchLocationsByGeohashResponseRecord::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
  return _internal_district();
}
inline void SearchLocationsByGeohashResponseRecord::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
}
inline std::string* SearchLocationsByGeohashResponseRecord::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
  return _internal_mutable_district();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::_internal_district() const {
  return district_.Get();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
}
inline void SearchLocationsByGeohashResponseRecord::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
}
inline void SearchLocationsByGeohashResponseRecord::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
}
inline std::string* SearchLocationsByGeohashResponseRecord::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashResponseRecord::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.district)
}

// string state = 6;
inline void SearchLocationsByGeohashResponseRecord::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
  return _internal_state();
}
inline void SearchLocationsByGeohashResponseRecord::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
}
inline std::string* SearchLocationsByGeohashResponseRecord::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
  return _internal_mutable_state();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::_internal_state() const {
  return state_.Get();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
}
inline void SearchLocationsByGeohashResponseRecord::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
}
inline void SearchLocationsByGeohashResponseRecord::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
}
inline std::string* SearchLocationsByGeohashResponseRecord::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashResponseRecord::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.state)
}

// string country = 7;
inline void SearchLocationsByGeohashResponseRecord::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
  return _internal_country();
}
inline void SearchLocationsByGeohashResponseRecord::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
}
inline std::string* SearchLocationsByGeohashResponseRecord::mutable_country() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
  return _internal_mutable_country();
}
inline const std::string& SearchLocationsByGeohashResponseRecord::_internal_country() const {
  return country_.Get();
}
inline void SearchLocationsByGeohashResponseRecord::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_country(std::string&& value) {
  
  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
}
inline void SearchLocationsByGeohashResponseRecord::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
}
inline void SearchLocationsByGeohashResponseRecord::set_country(const char* value,
    size_t size) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
}
inline std::string* SearchLocationsByGeohashResponseRecord::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchLocationsByGeohashResponseRecord::release_country() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchLocationsByGeohashResponseRecord::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord.country)
}

// -------------------------------------------------------------------

// SearchLocationsByGeohashResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool SearchLocationsByGeohashResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SearchLocationsByGeohashResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& SearchLocationsByGeohashResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& SearchLocationsByGeohashResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status)
  return _internal_status();
}
inline void SearchLocationsByGeohashResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchLocationsByGeohashResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchLocationsByGeohashResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchLocationsByGeohashResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* SearchLocationsByGeohashResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status)
  return _internal_mutable_status();
}
inline void SearchLocationsByGeohashResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.status)
}

// int32 count = 2;
inline void SearchLocationsByGeohashResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchLocationsByGeohashResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchLocationsByGeohashResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.count)
  return _internal_count();
}
inline void SearchLocationsByGeohashResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SearchLocationsByGeohashResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int SearchLocationsByGeohashResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int SearchLocationsByGeohashResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchLocationsByGeohashResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
SearchLocationsByGeohashResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& SearchLocationsByGeohashResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& SearchLocationsByGeohashResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchLocationsByGeohashResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* SearchLocationsByGeohashResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
SearchLocationsByGeohashResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.attribs)
  return attribs_;
}

// repeated .farm.nurture.location.service.proto.SearchLocationsByGeohashResponseRecord records = 4;
inline int SearchLocationsByGeohashResponse::_internal_records_size() const {
  return records_.size();
}
inline int SearchLocationsByGeohashResponse::records_size() const {
  return _internal_records_size();
}
inline void SearchLocationsByGeohashResponse::clear_records() {
  records_.Clear();
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* SearchLocationsByGeohashResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >*
SearchLocationsByGeohashResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records)
  return &records_;
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord& SearchLocationsByGeohashResponse::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord& SearchLocationsByGeohashResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records)
  return _internal_records(index);
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* SearchLocationsByGeohashResponse::_internal_add_records() {
  return records_.Add();
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord* SearchLocationsByGeohashResponse::add_records() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponseRecord >&
SearchLocationsByGeohashResponse::records() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.SearchLocationsByGeohashResponse.records)
  return records_;
}

// -------------------------------------------------------------------

// GetLocationDataByLatLngRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool GetLocationDataByLatLngRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool GetLocationDataByLatLngRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationDataByLatLngRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& GetLocationDataByLatLngRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void GetLocationDataByLatLngRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationDataByLatLngRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationDataByLatLngRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationDataByLatLngRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* GetLocationDataByLatLngRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void GetLocationDataByLatLngRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.requestHeaders)
}

// bool isStaleAllowed = 2;
inline void GetLocationDataByLatLngRequest::clear_isstaleallowed() {
  isstaleallowed_ = false;
}
inline bool GetLocationDataByLatLngRequest::_internal_isstaleallowed() const {
  return isstaleallowed_;
}
inline bool GetLocationDataByLatLngRequest::isstaleallowed() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.isStaleAllowed)
  return _internal_isstaleallowed();
}
inline void GetLocationDataByLatLngRequest::_internal_set_isstaleallowed(bool value) {
  
  isstaleallowed_ = value;
}
inline void GetLocationDataByLatLngRequest::set_isstaleallowed(bool value) {
  _internal_set_isstaleallowed(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.isStaleAllowed)
}

// double latitude = 4;
inline void GetLocationDataByLatLngRequest::clear_latitude() {
  latitude_ = 0;
}
inline double GetLocationDataByLatLngRequest::_internal_latitude() const {
  return latitude_;
}
inline double GetLocationDataByLatLngRequest::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.latitude)
  return _internal_latitude();
}
inline void GetLocationDataByLatLngRequest::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetLocationDataByLatLngRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.latitude)
}

// double longitude = 5;
inline void GetLocationDataByLatLngRequest::clear_longitude() {
  longitude_ = 0;
}
inline double GetLocationDataByLatLngRequest::_internal_longitude() const {
  return longitude_;
}
inline double GetLocationDataByLatLngRequest::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.longitude)
  return _internal_longitude();
}
inline void GetLocationDataByLatLngRequest::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetLocationDataByLatLngRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngRequest.longitude)
}

// -------------------------------------------------------------------

// GetLocationDataByLatLngResponseRecord

// -------------------------------------------------------------------

// GetLocationDataByLatLngResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool GetLocationDataByLatLngResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetLocationDataByLatLngResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationDataByLatLngResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& GetLocationDataByLatLngResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status)
  return _internal_status();
}
inline void GetLocationDataByLatLngResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationDataByLatLngResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationDataByLatLngResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationDataByLatLngResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* GetLocationDataByLatLngResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status)
  return _internal_mutable_status();
}
inline void GetLocationDataByLatLngResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.status)
}

// int32 count = 2;
inline void GetLocationDataByLatLngResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationDataByLatLngResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocationDataByLatLngResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.count)
  return _internal_count();
}
inline void GetLocationDataByLatLngResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetLocationDataByLatLngResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.count)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 3;
inline int GetLocationDataByLatLngResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int GetLocationDataByLatLngResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationDataByLatLngResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
GetLocationDataByLatLngResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationDataByLatLngResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& GetLocationDataByLatLngResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationDataByLatLngResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* GetLocationDataByLatLngResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
GetLocationDataByLatLngResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.attribs)
  return attribs_;
}

// double latitude = 4;
inline void GetLocationDataByLatLngResponse::clear_latitude() {
  latitude_ = 0;
}
inline double GetLocationDataByLatLngResponse::_internal_latitude() const {
  return latitude_;
}
inline double GetLocationDataByLatLngResponse::latitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.latitude)
  return _internal_latitude();
}
inline void GetLocationDataByLatLngResponse::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GetLocationDataByLatLngResponse::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.latitude)
}

// double longitude = 5;
inline void GetLocationDataByLatLngResponse::clear_longitude() {
  longitude_ = 0;
}
inline double GetLocationDataByLatLngResponse::_internal_longitude() const {
  return longitude_;
}
inline double GetLocationDataByLatLngResponse::longitude() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.longitude)
  return _internal_longitude();
}
inline void GetLocationDataByLatLngResponse::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GetLocationDataByLatLngResponse::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.longitude)
}

// string village = 6;
inline void GetLocationDataByLatLngResponse::clear_village() {
  village_.ClearToEmpty();
}
inline const std::string& GetLocationDataByLatLngResponse::village() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
  return _internal_village();
}
inline void GetLocationDataByLatLngResponse::set_village(const std::string& value) {
  _internal_set_village(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
}
inline std::string* GetLocationDataByLatLngResponse::mutable_village() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
  return _internal_mutable_village();
}
inline const std::string& GetLocationDataByLatLngResponse::_internal_village() const {
  return village_.Get();
}
inline void GetLocationDataByLatLngResponse::_internal_set_village(const std::string& value) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationDataByLatLngResponse::set_village(std::string&& value) {
  
  village_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
}
inline void GetLocationDataByLatLngResponse::set_village(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
}
inline void GetLocationDataByLatLngResponse::set_village(const char* value,
    size_t size) {
  
  village_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
}
inline std::string* GetLocationDataByLatLngResponse::_internal_mutable_village() {
  
  return village_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationDataByLatLngResponse::release_village() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
  return village_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationDataByLatLngResponse::set_allocated_village(std::string* village) {
  if (village != nullptr) {
    
  } else {
    
  }
  village_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), village,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.village)
}

// string tehsil = 7;
inline void GetLocationDataByLatLngResponse::clear_tehsil() {
  tehsil_.ClearToEmpty();
}
inline const std::string& GetLocationDataByLatLngResponse::tehsil() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
  return _internal_tehsil();
}
inline void GetLocationDataByLatLngResponse::set_tehsil(const std::string& value) {
  _internal_set_tehsil(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
}
inline std::string* GetLocationDataByLatLngResponse::mutable_tehsil() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
  return _internal_mutable_tehsil();
}
inline const std::string& GetLocationDataByLatLngResponse::_internal_tehsil() const {
  return tehsil_.Get();
}
inline void GetLocationDataByLatLngResponse::_internal_set_tehsil(const std::string& value) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationDataByLatLngResponse::set_tehsil(std::string&& value) {
  
  tehsil_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
}
inline void GetLocationDataByLatLngResponse::set_tehsil(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
}
inline void GetLocationDataByLatLngResponse::set_tehsil(const char* value,
    size_t size) {
  
  tehsil_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
}
inline std::string* GetLocationDataByLatLngResponse::_internal_mutable_tehsil() {
  
  return tehsil_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationDataByLatLngResponse::release_tehsil() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
  return tehsil_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationDataByLatLngResponse::set_allocated_tehsil(std::string* tehsil) {
  if (tehsil != nullptr) {
    
  } else {
    
  }
  tehsil_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tehsil,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.tehsil)
}

// string district = 8;
inline void GetLocationDataByLatLngResponse::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& GetLocationDataByLatLngResponse::district() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
  return _internal_district();
}
inline void GetLocationDataByLatLngResponse::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
}
inline std::string* GetLocationDataByLatLngResponse::mutable_district() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
  return _internal_mutable_district();
}
inline const std::string& GetLocationDataByLatLngResponse::_internal_district() const {
  return district_.Get();
}
inline void GetLocationDataByLatLngResponse::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationDataByLatLngResponse::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
}
inline void GetLocationDataByLatLngResponse::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
}
inline void GetLocationDataByLatLngResponse::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
}
inline std::string* GetLocationDataByLatLngResponse::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationDataByLatLngResponse::release_district() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationDataByLatLngResponse::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.district)
}

// string state = 9;
inline void GetLocationDataByLatLngResponse::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GetLocationDataByLatLngResponse::state() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
  return _internal_state();
}
inline void GetLocationDataByLatLngResponse::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
}
inline std::string* GetLocationDataByLatLngResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
  return _internal_mutable_state();
}
inline const std::string& GetLocationDataByLatLngResponse::_internal_state() const {
  return state_.Get();
}
inline void GetLocationDataByLatLngResponse::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationDataByLatLngResponse::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
}
inline void GetLocationDataByLatLngResponse::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
}
inline void GetLocationDataByLatLngResponse::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
}
inline std::string* GetLocationDataByLatLngResponse::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationDataByLatLngResponse::release_state() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationDataByLatLngResponse::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.state)
}

// string country = 10;
inline void GetLocationDataByLatLngResponse::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& GetLocationDataByLatLngResponse::country() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
  return _internal_country();
}
inline void GetLocationDataByLatLngResponse::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
}
inline std::string* GetLocationDataByLatLngResponse::mutable_country() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
  return _internal_mutable_country();
}
inline const std::string& GetLocationDataByLatLngResponse::_internal_country() const {
  return country_.Get();
}
inline void GetLocationDataByLatLngResponse::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLocationDataByLatLngResponse::set_country(std::string&& value) {
  
  country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
}
inline void GetLocationDataByLatLngResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
}
inline void GetLocationDataByLatLngResponse::set_country(const char* value,
    size_t size) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
}
inline std::string* GetLocationDataByLatLngResponse::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLocationDataByLatLngResponse::release_country() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocationDataByLatLngResponse::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.GetLocationDataByLatLngResponse.country)
}

// -------------------------------------------------------------------

// AddVendorApiLedgerRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool AddVendorApiLedgerRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool AddVendorApiLedgerRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddVendorApiLedgerRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& AddVendorApiLedgerRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void AddVendorApiLedgerRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddVendorApiLedgerRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddVendorApiLedgerRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddVendorApiLedgerRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* AddVendorApiLedgerRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void AddVendorApiLedgerRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.requestHeaders)
}

// string vendor = 2;
inline void AddVendorApiLedgerRequest::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& AddVendorApiLedgerRequest::vendor() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
  return _internal_vendor();
}
inline void AddVendorApiLedgerRequest::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
}
inline std::string* AddVendorApiLedgerRequest::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& AddVendorApiLedgerRequest::_internal_vendor() const {
  return vendor_.Get();
}
inline void AddVendorApiLedgerRequest::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddVendorApiLedgerRequest::set_vendor(std::string&& value) {
  
  vendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
}
inline void AddVendorApiLedgerRequest::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
}
inline void AddVendorApiLedgerRequest::set_vendor(const char* value,
    size_t size) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
}
inline std::string* AddVendorApiLedgerRequest::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddVendorApiLedgerRequest::release_vendor() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddVendorApiLedgerRequest::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.vendor)
}

// string apiName = 3;
inline void AddVendorApiLedgerRequest::clear_apiname() {
  apiname_.ClearToEmpty();
}
inline const std::string& AddVendorApiLedgerRequest::apiname() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
  return _internal_apiname();
}
inline void AddVendorApiLedgerRequest::set_apiname(const std::string& value) {
  _internal_set_apiname(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
}
inline std::string* AddVendorApiLedgerRequest::mutable_apiname() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
  return _internal_mutable_apiname();
}
inline const std::string& AddVendorApiLedgerRequest::_internal_apiname() const {
  return apiname_.Get();
}
inline void AddVendorApiLedgerRequest::_internal_set_apiname(const std::string& value) {
  
  apiname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddVendorApiLedgerRequest::set_apiname(std::string&& value) {
  
  apiname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
}
inline void AddVendorApiLedgerRequest::set_apiname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apiname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
}
inline void AddVendorApiLedgerRequest::set_apiname(const char* value,
    size_t size) {
  
  apiname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
}
inline std::string* AddVendorApiLedgerRequest::_internal_mutable_apiname() {
  
  return apiname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddVendorApiLedgerRequest::release_apiname() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
  return apiname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddVendorApiLedgerRequest::set_allocated_apiname(std::string* apiname) {
  if (apiname != nullptr) {
    
  } else {
    
  }
  apiname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apiname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.apiName)
}

// string responseStatus = 4;
inline void AddVendorApiLedgerRequest::clear_responsestatus() {
  responsestatus_.ClearToEmpty();
}
inline const std::string& AddVendorApiLedgerRequest::responsestatus() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
  return _internal_responsestatus();
}
inline void AddVendorApiLedgerRequest::set_responsestatus(const std::string& value) {
  _internal_set_responsestatus(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
}
inline std::string* AddVendorApiLedgerRequest::mutable_responsestatus() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
  return _internal_mutable_responsestatus();
}
inline const std::string& AddVendorApiLedgerRequest::_internal_responsestatus() const {
  return responsestatus_.Get();
}
inline void AddVendorApiLedgerRequest::_internal_set_responsestatus(const std::string& value) {
  
  responsestatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddVendorApiLedgerRequest::set_responsestatus(std::string&& value) {
  
  responsestatus_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
}
inline void AddVendorApiLedgerRequest::set_responsestatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  responsestatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
}
inline void AddVendorApiLedgerRequest::set_responsestatus(const char* value,
    size_t size) {
  
  responsestatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
}
inline std::string* AddVendorApiLedgerRequest::_internal_mutable_responsestatus() {
  
  return responsestatus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddVendorApiLedgerRequest::release_responsestatus() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
  return responsestatus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddVendorApiLedgerRequest::set_allocated_responsestatus(std::string* responsestatus) {
  if (responsestatus != nullptr) {
    
  } else {
    
  }
  responsestatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsestatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.responseStatus)
}

// string params = 5;
inline void AddVendorApiLedgerRequest::clear_params() {
  params_.ClearToEmpty();
}
inline const std::string& AddVendorApiLedgerRequest::params() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
  return _internal_params();
}
inline void AddVendorApiLedgerRequest::set_params(const std::string& value) {
  _internal_set_params(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
}
inline std::string* AddVendorApiLedgerRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
  return _internal_mutable_params();
}
inline const std::string& AddVendorApiLedgerRequest::_internal_params() const {
  return params_.Get();
}
inline void AddVendorApiLedgerRequest::_internal_set_params(const std::string& value) {
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddVendorApiLedgerRequest::set_params(std::string&& value) {
  
  params_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
}
inline void AddVendorApiLedgerRequest::set_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
}
inline void AddVendorApiLedgerRequest::set_params(const char* value,
    size_t size) {
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
}
inline std::string* AddVendorApiLedgerRequest::_internal_mutable_params() {
  
  return params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddVendorApiLedgerRequest::release_params() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
  return params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddVendorApiLedgerRequest::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerRequest.params)
}

// -------------------------------------------------------------------

// BulkAddVendorApiLedgerRequest

// .farm.nurture.core.contracts.common.RequestHeaders requestHeaders = 1;
inline bool BulkAddVendorApiLedgerRequest::_internal_has_requestheaders() const {
  return this != internal_default_instance() && requestheaders_ != nullptr;
}
inline bool BulkAddVendorApiLedgerRequest::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddVendorApiLedgerRequest::_internal_requestheaders() const {
  const ::farm::nurture::core::contracts::common::RequestHeaders* p = requestheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestHeaders&>(
      ::farm::nurture::core::contracts::common::_RequestHeaders_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestHeaders& BulkAddVendorApiLedgerRequest::requestheaders() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders)
  return _internal_requestheaders();
}
inline void BulkAddVendorApiLedgerRequest::unsafe_arena_set_allocated_requestheaders(
    ::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  requestheaders_ = requestheaders;
  if (requestheaders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders)
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddVendorApiLedgerRequest::release_requestheaders() {
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddVendorApiLedgerRequest::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders)
  
  ::farm::nurture::core::contracts::common::RequestHeaders* temp = requestheaders_;
  requestheaders_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddVendorApiLedgerRequest::_internal_mutable_requestheaders() {
  
  if (requestheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestHeaders>(GetArena());
    requestheaders_ = p;
  }
  return requestheaders_;
}
inline ::farm::nurture::core::contracts::common::RequestHeaders* BulkAddVendorApiLedgerRequest::mutable_requestheaders() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders)
  return _internal_mutable_requestheaders();
}
inline void BulkAddVendorApiLedgerRequest::set_allocated_requestheaders(::farm::nurture::core::contracts::common::RequestHeaders* requestheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders_);
  }
  if (requestheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestheaders)->GetArena();
    if (message_arena != submessage_arena) {
      requestheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestheaders, submessage_arena);
    }
    
  } else {
    
  }
  requestheaders_ = requestheaders;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requestHeaders)
}

// repeated .farm.nurture.location.service.proto.AddVendorApiLedgerRequest requests = 2;
inline int BulkAddVendorApiLedgerRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BulkAddVendorApiLedgerRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BulkAddVendorApiLedgerRequest::clear_requests() {
  requests_.Clear();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* BulkAddVendorApiLedgerRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >*
BulkAddVendorApiLedgerRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests)
  return &requests_;
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& BulkAddVendorApiLedgerRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& BulkAddVendorApiLedgerRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests)
  return _internal_requests(index);
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* BulkAddVendorApiLedgerRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* BulkAddVendorApiLedgerRequest::add_requests() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >&
BulkAddVendorApiLedgerRequest::requests() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// AddVendorApiLedgerResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool AddVendorApiLedgerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddVendorApiLedgerResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddVendorApiLedgerResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& AddVendorApiLedgerResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status)
  return _internal_status();
}
inline void AddVendorApiLedgerResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddVendorApiLedgerResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddVendorApiLedgerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddVendorApiLedgerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* AddVendorApiLedgerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status)
  return _internal_mutable_status();
}
inline void AddVendorApiLedgerResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.status)
}

// int32 count = 2;
inline void AddVendorApiLedgerResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddVendorApiLedgerResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddVendorApiLedgerResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.count)
  return _internal_count();
}
inline void AddVendorApiLedgerResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AddVendorApiLedgerResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.count)
}

// string recordId = 3;
inline void AddVendorApiLedgerResponse::clear_recordid() {
  recordid_.ClearToEmpty();
}
inline const std::string& AddVendorApiLedgerResponse::recordid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
  return _internal_recordid();
}
inline void AddVendorApiLedgerResponse::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
}
inline std::string* AddVendorApiLedgerResponse::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddVendorApiLedgerResponse::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddVendorApiLedgerResponse::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddVendorApiLedgerResponse::set_recordid(std::string&& value) {
  
  recordid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
}
inline void AddVendorApiLedgerResponse::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
}
inline void AddVendorApiLedgerResponse::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
}
inline std::string* AddVendorApiLedgerResponse::_internal_mutable_recordid() {
  
  return recordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddVendorApiLedgerResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddVendorApiLedgerResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.recordId)
}

// repeated .farm.nurture.core.contracts.common.Attribs attribs = 4;
inline int AddVendorApiLedgerResponse::_internal_attribs_size() const {
  return attribs_.size();
}
inline int AddVendorApiLedgerResponse::attribs_size() const {
  return _internal_attribs_size();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddVendorApiLedgerResponse::mutable_attribs(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs)
  return attribs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >*
AddVendorApiLedgerResponse::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs)
  return &attribs_;
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddVendorApiLedgerResponse::_internal_attribs(int index) const {
  return attribs_.Get(index);
}
inline const ::farm::nurture::core::contracts::common::Attribs& AddVendorApiLedgerResponse::attribs(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs)
  return _internal_attribs(index);
}
inline ::farm::nurture::core::contracts::common::Attribs* AddVendorApiLedgerResponse::_internal_add_attribs() {
  return attribs_.Add();
}
inline ::farm::nurture::core::contracts::common::Attribs* AddVendorApiLedgerResponse::add_attribs() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs)
  return _internal_add_attribs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::core::contracts::common::Attribs >&
AddVendorApiLedgerResponse::attribs() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.AddVendorApiLedgerResponse.attribs)
  return attribs_;
}

// -------------------------------------------------------------------

// BulkAddVendorApiLedgerResponse

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool BulkAddVendorApiLedgerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BulkAddVendorApiLedgerResponse::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddVendorApiLedgerResponse::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& BulkAddVendorApiLedgerResponse::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status)
  return _internal_status();
}
inline void BulkAddVendorApiLedgerResponse::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddVendorApiLedgerResponse::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddVendorApiLedgerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddVendorApiLedgerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* BulkAddVendorApiLedgerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status)
  return _internal_mutable_status();
}
inline void BulkAddVendorApiLedgerResponse::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.status)
}

// int32 count = 2;
inline void BulkAddVendorApiLedgerResponse::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddVendorApiLedgerResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkAddVendorApiLedgerResponse::count() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.count)
  return _internal_count();
}
inline void BulkAddVendorApiLedgerResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void BulkAddVendorApiLedgerResponse::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.count)
}

// repeated .farm.nurture.location.service.proto.AddVendorApiLedgerResponse responses = 3;
inline int BulkAddVendorApiLedgerResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BulkAddVendorApiLedgerResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BulkAddVendorApiLedgerResponse::clear_responses() {
  responses_.Clear();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* BulkAddVendorApiLedgerResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >*
BulkAddVendorApiLedgerResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses)
  return &responses_;
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& BulkAddVendorApiLedgerResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& BulkAddVendorApiLedgerResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses)
  return _internal_responses(index);
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* BulkAddVendorApiLedgerResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* BulkAddVendorApiLedgerResponse::add_responses() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >&
BulkAddVendorApiLedgerResponse::responses() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// MultiRequests

// bool onTxn = 1;
inline void MultiRequests::clear_ontxn() {
  ontxn_ = false;
}
inline bool MultiRequests::_internal_ontxn() const {
  return ontxn_;
}
inline bool MultiRequests::ontxn() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.MultiRequests.onTxn)
  return _internal_ontxn();
}
inline void MultiRequests::_internal_set_ontxn(bool value) {
  
  ontxn_ = value;
}
inline void MultiRequests::set_ontxn(bool value) {
  _internal_set_ontxn(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.MultiRequests.onTxn)
}

// repeated .farm.nurture.location.service.proto.Request request = 2;
inline int MultiRequests::_internal_request_size() const {
  return request_.size();
}
inline int MultiRequests::request_size() const {
  return _internal_request_size();
}
inline void MultiRequests::clear_request() {
  request_.Clear();
}
inline ::farm::nurture::location::service::proto::Request* MultiRequests::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.MultiRequests.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Request >*
MultiRequests::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.MultiRequests.request)
  return &request_;
}
inline const ::farm::nurture::location::service::proto::Request& MultiRequests::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Request& MultiRequests::request(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.MultiRequests.request)
  return _internal_request(index);
}
inline ::farm::nurture::location::service::proto::Request* MultiRequests::_internal_add_request() {
  return request_.Add();
}
inline ::farm::nurture::location::service::proto::Request* MultiRequests::add_request() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.MultiRequests.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Request >&
MultiRequests::request() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.MultiRequests.request)
  return request_;
}

// -------------------------------------------------------------------

// Request

// string index = 1;
inline void Request::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Request::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.index)
  return _internal_index();
}
inline void Request::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Request.index)
}
inline std::string* Request::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.index)
  return _internal_mutable_index();
}
inline const std::string& Request::_internal_index() const {
  return index_.Get();
}
inline void Request::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.Request.index)
}
inline void Request::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.Request.index)
}
inline void Request::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.Request.index)
}
inline std::string* Request::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Request.index)
}

// .farm.nurture.location.service.proto.InsertLocationRequest reqInsertLocation = 2;
inline bool Request::_internal_has_reqinsertlocation() const {
  return ARequest_case() == kReqInsertLocation;
}
inline bool Request::has_reqinsertlocation() const {
  return _internal_has_reqinsertlocation();
}
inline void Request::set_has_reqinsertlocation() {
  _oneof_case_[0] = kReqInsertLocation;
}
inline void Request::clear_reqinsertlocation() {
  if (_internal_has_reqinsertlocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* Request::release_reqinsertlocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocation)
  if (_internal_has_reqinsertlocation()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::InsertLocationRequest* temp = ARequest_.reqinsertlocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationRequest& Request::_internal_reqinsertlocation() const {
  return _internal_has_reqinsertlocation()
      ? *ARequest_.reqinsertlocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationRequest&>(::farm::nurture::location::service::proto::_InsertLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationRequest& Request::reqinsertlocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocation)
  return _internal_reqinsertlocation();
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* Request::unsafe_arena_release_reqinsertlocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocation)
  if (_internal_has_reqinsertlocation()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::InsertLocationRequest* temp = ARequest_.reqinsertlocation_;
    ARequest_.reqinsertlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocation(::farm::nurture::location::service::proto::InsertLocationRequest* reqinsertlocation) {
  clear_ARequest();
  if (reqinsertlocation) {
    set_has_reqinsertlocation();
    ARequest_.reqinsertlocation_ = reqinsertlocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocation)
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* Request::_internal_mutable_reqinsertlocation() {
  if (!_internal_has_reqinsertlocation()) {
    clear_ARequest();
    set_has_reqinsertlocation();
    ARequest_.reqinsertlocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationRequest >(GetArena());
  }
  return ARequest_.reqinsertlocation_;
}
inline ::farm::nurture::location::service::proto::InsertLocationRequest* Request::mutable_reqinsertlocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocation)
  return _internal_mutable_reqinsertlocation();
}

// .farm.nurture.location.service.proto.BulkInsertLocationRequest reqInsertLocationBulk = 3;
inline bool Request::_internal_has_reqinsertlocationbulk() const {
  return ARequest_case() == kReqInsertLocationBulk;
}
inline bool Request::has_reqinsertlocationbulk() const {
  return _internal_has_reqinsertlocationbulk();
}
inline void Request::set_has_reqinsertlocationbulk() {
  _oneof_case_[0] = kReqInsertLocationBulk;
}
inline void Request::clear_reqinsertlocationbulk() {
  if (_internal_has_reqinsertlocationbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocationbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Request::release_reqinsertlocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
  if (_internal_has_reqinsertlocationbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkInsertLocationRequest* temp = ARequest_.reqinsertlocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& Request::_internal_reqinsertlocationbulk() const {
  return _internal_has_reqinsertlocationbulk()
      ? *ARequest_.reqinsertlocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationRequest&>(::farm::nurture::location::service::proto::_BulkInsertLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationRequest& Request::reqinsertlocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
  return _internal_reqinsertlocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Request::unsafe_arena_release_reqinsertlocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
  if (_internal_has_reqinsertlocationbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkInsertLocationRequest* temp = ARequest_.reqinsertlocationbulk_;
    ARequest_.reqinsertlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationRequest* reqinsertlocationbulk) {
  clear_ARequest();
  if (reqinsertlocationbulk) {
    set_has_reqinsertlocationbulk();
    ARequest_.reqinsertlocationbulk_ = reqinsertlocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Request::_internal_mutable_reqinsertlocationbulk() {
  if (!_internal_has_reqinsertlocationbulk()) {
    clear_ARequest();
    set_has_reqinsertlocationbulk();
    ARequest_.reqinsertlocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationRequest >(GetArena());
  }
  return ARequest_.reqinsertlocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationRequest* Request::mutable_reqinsertlocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocationBulk)
  return _internal_mutable_reqinsertlocationbulk();
}

// .farm.nurture.location.service.proto.InsertLocationS2CellRequest reqInsertLocationS2Cell = 4;
inline bool Request::_internal_has_reqinsertlocations2cell() const {
  return ARequest_case() == kReqInsertLocationS2Cell;
}
inline bool Request::has_reqinsertlocations2cell() const {
  return _internal_has_reqinsertlocations2cell();
}
inline void Request::set_has_reqinsertlocations2cell() {
  _oneof_case_[0] = kReqInsertLocationS2Cell;
}
inline void Request::clear_reqinsertlocations2cell() {
  if (_internal_has_reqinsertlocations2cell()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocations2cell_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Request::release_reqinsertlocations2cell() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
  if (_internal_has_reqinsertlocations2cell()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* temp = ARequest_.reqinsertlocations2cell_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocations2cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& Request::_internal_reqinsertlocations2cell() const {
  return _internal_has_reqinsertlocations2cell()
      ? *ARequest_.reqinsertlocations2cell_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest&>(::farm::nurture::location::service::proto::_InsertLocationS2CellRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellRequest& Request::reqinsertlocations2cell() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
  return _internal_reqinsertlocations2cell();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Request::unsafe_arena_release_reqinsertlocations2cell() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
  if (_internal_has_reqinsertlocations2cell()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* temp = ARequest_.reqinsertlocations2cell_;
    ARequest_.reqinsertlocations2cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellRequest* reqinsertlocations2cell) {
  clear_ARequest();
  if (reqinsertlocations2cell) {
    set_has_reqinsertlocations2cell();
    ARequest_.reqinsertlocations2cell_ = reqinsertlocations2cell;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Request::_internal_mutable_reqinsertlocations2cell() {
  if (!_internal_has_reqinsertlocations2cell()) {
    clear_ARequest();
    set_has_reqinsertlocations2cell();
    ARequest_.reqinsertlocations2cell_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationS2CellRequest >(GetArena());
  }
  return ARequest_.reqinsertlocations2cell_;
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellRequest* Request::mutable_reqinsertlocations2cell() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocationS2Cell)
  return _internal_mutable_reqinsertlocations2cell();
}

// .farm.nurture.location.service.proto.BulkInsertLocationS2CellRequest reqInsertLocationS2CellBulk = 5;
inline bool Request::_internal_has_reqinsertlocations2cellbulk() const {
  return ARequest_case() == kReqInsertLocationS2CellBulk;
}
inline bool Request::has_reqinsertlocations2cellbulk() const {
  return _internal_has_reqinsertlocations2cellbulk();
}
inline void Request::set_has_reqinsertlocations2cellbulk() {
  _oneof_case_[0] = kReqInsertLocationS2CellBulk;
}
inline void Request::clear_reqinsertlocations2cellbulk() {
  if (_internal_has_reqinsertlocations2cellbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocations2cellbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Request::release_reqinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
  if (_internal_has_reqinsertlocations2cellbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* temp = ARequest_.reqinsertlocations2cellbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocations2cellbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& Request::_internal_reqinsertlocations2cellbulk() const {
  return _internal_has_reqinsertlocations2cellbulk()
      ? *ARequest_.reqinsertlocations2cellbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest&>(::farm::nurture::location::service::proto::_BulkInsertLocationS2CellRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest& Request::reqinsertlocations2cellbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
  return _internal_reqinsertlocations2cellbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Request::unsafe_arena_release_reqinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
  if (_internal_has_reqinsertlocations2cellbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* temp = ARequest_.reqinsertlocations2cellbulk_;
    ARequest_.reqinsertlocations2cellbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* reqinsertlocations2cellbulk) {
  clear_ARequest();
  if (reqinsertlocations2cellbulk) {
    set_has_reqinsertlocations2cellbulk();
    ARequest_.reqinsertlocations2cellbulk_ = reqinsertlocations2cellbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Request::_internal_mutable_reqinsertlocations2cellbulk() {
  if (!_internal_has_reqinsertlocations2cellbulk()) {
    clear_ARequest();
    set_has_reqinsertlocations2cellbulk();
    ARequest_.reqinsertlocations2cellbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest >(GetArena());
  }
  return ARequest_.reqinsertlocations2cellbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellRequest* Request::mutable_reqinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocationS2CellBulk)
  return _internal_mutable_reqinsertlocations2cellbulk();
}

// .farm.nurture.location.service.proto.InsertConfigRequest reqInsertConfig = 6;
inline bool Request::_internal_has_reqinsertconfig() const {
  return ARequest_case() == kReqInsertConfig;
}
inline bool Request::has_reqinsertconfig() const {
  return _internal_has_reqinsertconfig();
}
inline void Request::set_has_reqinsertconfig() {
  _oneof_case_[0] = kReqInsertConfig;
}
inline void Request::clear_reqinsertconfig() {
  if (_internal_has_reqinsertconfig()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertconfig_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* Request::release_reqinsertconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertConfig)
  if (_internal_has_reqinsertconfig()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::InsertConfigRequest* temp = ARequest_.reqinsertconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertConfigRequest& Request::_internal_reqinsertconfig() const {
  return _internal_has_reqinsertconfig()
      ? *ARequest_.reqinsertconfig_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertConfigRequest&>(::farm::nurture::location::service::proto::_InsertConfigRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertConfigRequest& Request::reqinsertconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertConfig)
  return _internal_reqinsertconfig();
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* Request::unsafe_arena_release_reqinsertconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertConfig)
  if (_internal_has_reqinsertconfig()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::InsertConfigRequest* temp = ARequest_.reqinsertconfig_;
    ARequest_.reqinsertconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertconfig(::farm::nurture::location::service::proto::InsertConfigRequest* reqinsertconfig) {
  clear_ARequest();
  if (reqinsertconfig) {
    set_has_reqinsertconfig();
    ARequest_.reqinsertconfig_ = reqinsertconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertConfig)
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* Request::_internal_mutable_reqinsertconfig() {
  if (!_internal_has_reqinsertconfig()) {
    clear_ARequest();
    set_has_reqinsertconfig();
    ARequest_.reqinsertconfig_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertConfigRequest >(GetArena());
  }
  return ARequest_.reqinsertconfig_;
}
inline ::farm::nurture::location::service::proto::InsertConfigRequest* Request::mutable_reqinsertconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertConfig)
  return _internal_mutable_reqinsertconfig();
}

// .farm.nurture.location.service.proto.BulkInsertConfigRequest reqInsertConfigBulk = 7;
inline bool Request::_internal_has_reqinsertconfigbulk() const {
  return ARequest_case() == kReqInsertConfigBulk;
}
inline bool Request::has_reqinsertconfigbulk() const {
  return _internal_has_reqinsertconfigbulk();
}
inline void Request::set_has_reqinsertconfigbulk() {
  _oneof_case_[0] = kReqInsertConfigBulk;
}
inline void Request::clear_reqinsertconfigbulk() {
  if (_internal_has_reqinsertconfigbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertconfigbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Request::release_reqinsertconfigbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
  if (_internal_has_reqinsertconfigbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkInsertConfigRequest* temp = ARequest_.reqinsertconfigbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& Request::_internal_reqinsertconfigbulk() const {
  return _internal_has_reqinsertconfigbulk()
      ? *ARequest_.reqinsertconfigbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertConfigRequest&>(::farm::nurture::location::service::proto::_BulkInsertConfigRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertConfigRequest& Request::reqinsertconfigbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
  return _internal_reqinsertconfigbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Request::unsafe_arena_release_reqinsertconfigbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
  if (_internal_has_reqinsertconfigbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkInsertConfigRequest* temp = ARequest_.reqinsertconfigbulk_;
    ARequest_.reqinsertconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigRequest* reqinsertconfigbulk) {
  clear_ARequest();
  if (reqinsertconfigbulk) {
    set_has_reqinsertconfigbulk();
    ARequest_.reqinsertconfigbulk_ = reqinsertconfigbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Request::_internal_mutable_reqinsertconfigbulk() {
  if (!_internal_has_reqinsertconfigbulk()) {
    clear_ARequest();
    set_has_reqinsertconfigbulk();
    ARequest_.reqinsertconfigbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertConfigRequest >(GetArena());
  }
  return ARequest_.reqinsertconfigbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigRequest* Request::mutable_reqinsertconfigbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertConfigBulk)
  return _internal_mutable_reqinsertconfigbulk();
}

// .farm.nurture.location.service.proto.FetchLocationByIdRequest reqFetchLocationById = 8;
inline bool Request::_internal_has_reqfetchlocationbyid() const {
  return ARequest_case() == kReqFetchLocationById;
}
inline bool Request::has_reqfetchlocationbyid() const {
  return _internal_has_reqfetchlocationbyid();
}
inline void Request::set_has_reqfetchlocationbyid() {
  _oneof_case_[0] = kReqFetchLocationById;
}
inline void Request::clear_reqfetchlocationbyid() {
  if (_internal_has_reqfetchlocationbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchlocationbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Request::release_reqfetchlocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchLocationById)
  if (_internal_has_reqfetchlocationbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchLocationByIdRequest* temp = ARequest_.reqfetchlocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchlocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& Request::_internal_reqfetchlocationbyid() const {
  return _internal_has_reqfetchlocationbyid()
      ? *ARequest_.reqfetchlocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchLocationByIdRequest&>(::farm::nurture::location::service::proto::_FetchLocationByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchLocationByIdRequest& Request::reqfetchlocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchLocationById)
  return _internal_reqfetchlocationbyid();
}
inline ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Request::unsafe_arena_release_reqfetchlocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchLocationById)
  if (_internal_has_reqfetchlocationbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchLocationByIdRequest* temp = ARequest_.reqfetchlocationbyid_;
    ARequest_.reqfetchlocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchlocationbyid(::farm::nurture::location::service::proto::FetchLocationByIdRequest* reqfetchlocationbyid) {
  clear_ARequest();
  if (reqfetchlocationbyid) {
    set_has_reqfetchlocationbyid();
    ARequest_.reqfetchlocationbyid_ = reqfetchlocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchLocationById)
}
inline ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Request::_internal_mutable_reqfetchlocationbyid() {
  if (!_internal_has_reqfetchlocationbyid()) {
    clear_ARequest();
    set_has_reqfetchlocationbyid();
    ARequest_.reqfetchlocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchLocationByIdRequest >(GetArena());
  }
  return ARequest_.reqfetchlocationbyid_;
}
inline ::farm::nurture::location::service::proto::FetchLocationByIdRequest* Request::mutable_reqfetchlocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchLocationById)
  return _internal_mutable_reqfetchlocationbyid();
}

// .farm.nurture.location.service.proto.FetchLocationByCodeAndNamespaceRequest reqFetchLocationByCodeAndNamespace = 9;
inline bool Request::_internal_has_reqfetchlocationbycodeandnamespace() const {
  return ARequest_case() == kReqFetchLocationByCodeAndNamespace;
}
inline bool Request::has_reqfetchlocationbycodeandnamespace() const {
  return _internal_has_reqfetchlocationbycodeandnamespace();
}
inline void Request::set_has_reqfetchlocationbycodeandnamespace() {
  _oneof_case_[0] = kReqFetchLocationByCodeAndNamespace;
}
inline void Request::clear_reqfetchlocationbycodeandnamespace() {
  if (_internal_has_reqfetchlocationbycodeandnamespace()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchlocationbycodeandnamespace_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Request::release_reqfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
  if (_internal_has_reqfetchlocationbycodeandnamespace()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* temp = ARequest_.reqfetchlocationbycodeandnamespace_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchlocationbycodeandnamespace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& Request::_internal_reqfetchlocationbycodeandnamespace() const {
  return _internal_has_reqfetchlocationbycodeandnamespace()
      ? *ARequest_.reqfetchlocationbycodeandnamespace_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest&>(::farm::nurture::location::service::proto::_FetchLocationByCodeAndNamespaceRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest& Request::reqfetchlocationbycodeandnamespace() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
  return _internal_reqfetchlocationbycodeandnamespace();
}
inline ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Request::unsafe_arena_release_reqfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
  if (_internal_has_reqfetchlocationbycodeandnamespace()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* temp = ARequest_.reqfetchlocationbycodeandnamespace_;
    ARequest_.reqfetchlocationbycodeandnamespace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* reqfetchlocationbycodeandnamespace) {
  clear_ARequest();
  if (reqfetchlocationbycodeandnamespace) {
    set_has_reqfetchlocationbycodeandnamespace();
    ARequest_.reqfetchlocationbycodeandnamespace_ = reqfetchlocationbycodeandnamespace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
}
inline ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Request::_internal_mutable_reqfetchlocationbycodeandnamespace() {
  if (!_internal_has_reqfetchlocationbycodeandnamespace()) {
    clear_ARequest();
    set_has_reqfetchlocationbycodeandnamespace();
    ARequest_.reqfetchlocationbycodeandnamespace_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest >(GetArena());
  }
  return ARequest_.reqfetchlocationbycodeandnamespace_;
}
inline ::farm::nurture::location::service::proto::FetchLocationByCodeAndNamespaceRequest* Request::mutable_reqfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchLocationByCodeAndNamespace)
  return _internal_mutable_reqfetchlocationbycodeandnamespace();
}

// .farm.nurture.location.service.proto.FetchS2CellByIdRequest reqFetchS2CellById = 10;
inline bool Request::_internal_has_reqfetchs2cellbyid() const {
  return ARequest_case() == kReqFetchS2CellById;
}
inline bool Request::has_reqfetchs2cellbyid() const {
  return _internal_has_reqfetchs2cellbyid();
}
inline void Request::set_has_reqfetchs2cellbyid() {
  _oneof_case_[0] = kReqFetchS2CellById;
}
inline void Request::clear_reqfetchs2cellbyid() {
  if (_internal_has_reqfetchs2cellbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchs2cellbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Request::release_reqfetchs2cellbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
  if (_internal_has_reqfetchs2cellbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* temp = ARequest_.reqfetchs2cellbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchs2cellbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& Request::_internal_reqfetchs2cellbyid() const {
  return _internal_has_reqfetchs2cellbyid()
      ? *ARequest_.reqfetchs2cellbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest&>(::farm::nurture::location::service::proto::_FetchS2CellByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByIdRequest& Request::reqfetchs2cellbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
  return _internal_reqfetchs2cellbyid();
}
inline ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Request::unsafe_arena_release_reqfetchs2cellbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
  if (_internal_has_reqfetchs2cellbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* temp = ARequest_.reqfetchs2cellbyid_;
    ARequest_.reqfetchs2cellbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchs2cellbyid(::farm::nurture::location::service::proto::FetchS2CellByIdRequest* reqfetchs2cellbyid) {
  clear_ARequest();
  if (reqfetchs2cellbyid) {
    set_has_reqfetchs2cellbyid();
    ARequest_.reqfetchs2cellbyid_ = reqfetchs2cellbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
}
inline ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Request::_internal_mutable_reqfetchs2cellbyid() {
  if (!_internal_has_reqfetchs2cellbyid()) {
    clear_ARequest();
    set_has_reqfetchs2cellbyid();
    ARequest_.reqfetchs2cellbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByIdRequest >(GetArena());
  }
  return ARequest_.reqfetchs2cellbyid_;
}
inline ::farm::nurture::location::service::proto::FetchS2CellByIdRequest* Request::mutable_reqfetchs2cellbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchS2CellById)
  return _internal_mutable_reqfetchs2cellbyid();
}

// .farm.nurture.location.service.proto.FetchS2CellByLocationRequest reqFetchS2CellByLocation = 11;
inline bool Request::_internal_has_reqfetchs2cellbylocation() const {
  return ARequest_case() == kReqFetchS2CellByLocation;
}
inline bool Request::has_reqfetchs2cellbylocation() const {
  return _internal_has_reqfetchs2cellbylocation();
}
inline void Request::set_has_reqfetchs2cellbylocation() {
  _oneof_case_[0] = kReqFetchS2CellByLocation;
}
inline void Request::clear_reqfetchs2cellbylocation() {
  if (_internal_has_reqfetchs2cellbylocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchs2cellbylocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Request::release_reqfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
  if (_internal_has_reqfetchs2cellbylocation()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* temp = ARequest_.reqfetchs2cellbylocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchs2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& Request::_internal_reqfetchs2cellbylocation() const {
  return _internal_has_reqfetchs2cellbylocation()
      ? *ARequest_.reqfetchs2cellbylocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest&>(::farm::nurture::location::service::proto::_FetchS2CellByLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest& Request::reqfetchs2cellbylocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
  return _internal_reqfetchs2cellbylocation();
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Request::unsafe_arena_release_reqfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
  if (_internal_has_reqfetchs2cellbylocation()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* temp = ARequest_.reqfetchs2cellbylocation_;
    ARequest_.reqfetchs2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchs2cellbylocation(::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* reqfetchs2cellbylocation) {
  clear_ARequest();
  if (reqfetchs2cellbylocation) {
    set_has_reqfetchs2cellbylocation();
    ARequest_.reqfetchs2cellbylocation_ = reqfetchs2cellbylocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Request::_internal_mutable_reqfetchs2cellbylocation() {
  if (!_internal_has_reqfetchs2cellbylocation()) {
    clear_ARequest();
    set_has_reqfetchs2cellbylocation();
    ARequest_.reqfetchs2cellbylocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest >(GetArena());
  }
  return ARequest_.reqfetchs2cellbylocation_;
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationRequest* Request::mutable_reqfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocation)
  return _internal_mutable_reqfetchs2cellbylocation();
}

// .farm.nurture.location.service.proto.FetchS2CellByLocationIdRequest reqFetchS2CellByLocationId = 12;
inline bool Request::_internal_has_reqfetchs2cellbylocationid() const {
  return ARequest_case() == kReqFetchS2CellByLocationId;
}
inline bool Request::has_reqfetchs2cellbylocationid() const {
  return _internal_has_reqfetchs2cellbylocationid();
}
inline void Request::set_has_reqfetchs2cellbylocationid() {
  _oneof_case_[0] = kReqFetchS2CellByLocationId;
}
inline void Request::clear_reqfetchs2cellbylocationid() {
  if (_internal_has_reqfetchs2cellbylocationid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchs2cellbylocationid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Request::release_reqfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
  if (_internal_has_reqfetchs2cellbylocationid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* temp = ARequest_.reqfetchs2cellbylocationid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchs2cellbylocationid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& Request::_internal_reqfetchs2cellbylocationid() const {
  return _internal_has_reqfetchs2cellbylocationid()
      ? *ARequest_.reqfetchs2cellbylocationid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest&>(::farm::nurture::location::service::proto::_FetchS2CellByLocationIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest& Request::reqfetchs2cellbylocationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
  return _internal_reqfetchs2cellbylocationid();
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Request::unsafe_arena_release_reqfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
  if (_internal_has_reqfetchs2cellbylocationid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* temp = ARequest_.reqfetchs2cellbylocationid_;
    ARequest_.reqfetchs2cellbylocationid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchs2cellbylocationid(::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* reqfetchs2cellbylocationid) {
  clear_ARequest();
  if (reqfetchs2cellbylocationid) {
    set_has_reqfetchs2cellbylocationid();
    ARequest_.reqfetchs2cellbylocationid_ = reqfetchs2cellbylocationid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Request::_internal_mutable_reqfetchs2cellbylocationid() {
  if (!_internal_has_reqfetchs2cellbylocationid()) {
    clear_ARequest();
    set_has_reqfetchs2cellbylocationid();
    ARequest_.reqfetchs2cellbylocationid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest >(GetArena());
  }
  return ARequest_.reqfetchs2cellbylocationid_;
}
inline ::farm::nurture::location::service::proto::FetchS2CellByLocationIdRequest* Request::mutable_reqfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchS2CellByLocationId)
  return _internal_mutable_reqfetchs2cellbylocationid();
}

// .farm.nurture.location.service.proto.UpdateLocationByIdRequest reqUpdateLocationById = 13;
inline bool Request::_internal_has_requpdatelocationbyid() const {
  return ARequest_case() == kReqUpdateLocationById;
}
inline bool Request::has_requpdatelocationbyid() const {
  return _internal_has_requpdatelocationbyid();
}
inline void Request::set_has_requpdatelocationbyid() {
  _oneof_case_[0] = kReqUpdateLocationById;
}
inline void Request::clear_requpdatelocationbyid() {
  if (_internal_has_requpdatelocationbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Request::release_requpdatelocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
  if (_internal_has_requpdatelocationbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* temp = ARequest_.requpdatelocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& Request::_internal_requpdatelocationbyid() const {
  return _internal_has_requpdatelocationbyid()
      ? *ARequest_.requpdatelocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest&>(::farm::nurture::location::service::proto::_UpdateLocationByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdRequest& Request::requpdatelocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
  return _internal_requpdatelocationbyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Request::unsafe_arena_release_requpdatelocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
  if (_internal_has_requpdatelocationbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* temp = ARequest_.requpdatelocationbyid_;
    ARequest_.requpdatelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdRequest* requpdatelocationbyid) {
  clear_ARequest();
  if (requpdatelocationbyid) {
    set_has_requpdatelocationbyid();
    ARequest_.requpdatelocationbyid_ = requpdatelocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Request::_internal_mutable_requpdatelocationbyid() {
  if (!_internal_has_requpdatelocationbyid()) {
    clear_ARequest();
    set_has_requpdatelocationbyid();
    ARequest_.requpdatelocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationbyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdRequest* Request::mutable_requpdatelocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationById)
  return _internal_mutable_requpdatelocationbyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationByIdRequest reqUpdateLocationByIdBulk = 14;
inline bool Request::_internal_has_requpdatelocationbyidbulk() const {
  return ARequest_case() == kReqUpdateLocationByIdBulk;
}
inline bool Request::has_requpdatelocationbyidbulk() const {
  return _internal_has_requpdatelocationbyidbulk();
}
inline void Request::set_has_requpdatelocationbyidbulk() {
  _oneof_case_[0] = kReqUpdateLocationByIdBulk;
}
inline void Request::clear_requpdatelocationbyidbulk() {
  if (_internal_has_requpdatelocationbyidbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationbyidbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Request::release_requpdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
  if (_internal_has_requpdatelocationbyidbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* temp = ARequest_.requpdatelocationbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& Request::_internal_requpdatelocationbyidbulk() const {
  return _internal_has_requpdatelocationbyidbulk()
      ? *ARequest_.requpdatelocationbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest&>(::farm::nurture::location::service::proto::_BulkUpdateLocationByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest& Request::requpdatelocationbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
  return _internal_requpdatelocationbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Request::unsafe_arena_release_requpdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
  if (_internal_has_requpdatelocationbyidbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* temp = ARequest_.requpdatelocationbyidbulk_;
    ARequest_.requpdatelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* requpdatelocationbyidbulk) {
  clear_ARequest();
  if (requpdatelocationbyidbulk) {
    set_has_requpdatelocationbyidbulk();
    ARequest_.requpdatelocationbyidbulk_ = requpdatelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Request::_internal_mutable_requpdatelocationbyidbulk() {
  if (!_internal_has_requpdatelocationbyidbulk()) {
    clear_ARequest();
    set_has_requpdatelocationbyidbulk();
    ARequest_.requpdatelocationbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdRequest* Request::mutable_requpdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationByIdBulk)
  return _internal_mutable_requpdatelocationbyidbulk();
}

// .farm.nurture.location.service.proto.UpdateLocationLabelByIdRequest reqUpdateLocationLabelById = 15;
inline bool Request::_internal_has_requpdatelocationlabelbyid() const {
  return ARequest_case() == kReqUpdateLocationLabelById;
}
inline bool Request::has_requpdatelocationlabelbyid() const {
  return _internal_has_requpdatelocationlabelbyid();
}
inline void Request::set_has_requpdatelocationlabelbyid() {
  _oneof_case_[0] = kReqUpdateLocationLabelById;
}
inline void Request::clear_requpdatelocationlabelbyid() {
  if (_internal_has_requpdatelocationlabelbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationlabelbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Request::release_requpdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
  if (_internal_has_requpdatelocationlabelbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* temp = ARequest_.requpdatelocationlabelbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationlabelbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& Request::_internal_requpdatelocationlabelbyid() const {
  return _internal_has_requpdatelocationlabelbyid()
      ? *ARequest_.requpdatelocationlabelbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest&>(::farm::nurture::location::service::proto::_UpdateLocationLabelByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest& Request::requpdatelocationlabelbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
  return _internal_requpdatelocationlabelbyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Request::unsafe_arena_release_requpdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
  if (_internal_has_requpdatelocationlabelbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* temp = ARequest_.requpdatelocationlabelbyid_;
    ARequest_.requpdatelocationlabelbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* requpdatelocationlabelbyid) {
  clear_ARequest();
  if (requpdatelocationlabelbyid) {
    set_has_requpdatelocationlabelbyid();
    ARequest_.requpdatelocationlabelbyid_ = requpdatelocationlabelbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Request::_internal_mutable_requpdatelocationlabelbyid() {
  if (!_internal_has_requpdatelocationlabelbyid()) {
    clear_ARequest();
    set_has_requpdatelocationlabelbyid();
    ARequest_.requpdatelocationlabelbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationlabelbyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdRequest* Request::mutable_requpdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelById)
  return _internal_mutable_requpdatelocationlabelbyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdRequest reqUpdateLocationLabelByIdBulk = 16;
inline bool Request::_internal_has_requpdatelocationlabelbyidbulk() const {
  return ARequest_case() == kReqUpdateLocationLabelByIdBulk;
}
inline bool Request::has_requpdatelocationlabelbyidbulk() const {
  return _internal_has_requpdatelocationlabelbyidbulk();
}
inline void Request::set_has_requpdatelocationlabelbyidbulk() {
  _oneof_case_[0] = kReqUpdateLocationLabelByIdBulk;
}
inline void Request::clear_requpdatelocationlabelbyidbulk() {
  if (_internal_has_requpdatelocationlabelbyidbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationlabelbyidbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Request::release_requpdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
  if (_internal_has_requpdatelocationlabelbyidbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* temp = ARequest_.requpdatelocationlabelbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationlabelbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& Request::_internal_requpdatelocationlabelbyidbulk() const {
  return _internal_has_requpdatelocationlabelbyidbulk()
      ? *ARequest_.requpdatelocationlabelbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest&>(::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest& Request::requpdatelocationlabelbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
  return _internal_requpdatelocationlabelbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Request::unsafe_arena_release_requpdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
  if (_internal_has_requpdatelocationlabelbyidbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* temp = ARequest_.requpdatelocationlabelbyidbulk_;
    ARequest_.requpdatelocationlabelbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* requpdatelocationlabelbyidbulk) {
  clear_ARequest();
  if (requpdatelocationlabelbyidbulk) {
    set_has_requpdatelocationlabelbyidbulk();
    ARequest_.requpdatelocationlabelbyidbulk_ = requpdatelocationlabelbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Request::_internal_mutable_requpdatelocationlabelbyidbulk() {
  if (!_internal_has_requpdatelocationlabelbyidbulk()) {
    clear_ARequest();
    set_has_requpdatelocationlabelbyidbulk();
    ARequest_.requpdatelocationlabelbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationlabelbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdRequest* Request::mutable_requpdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationLabelByIdBulk)
  return _internal_mutable_requpdatelocationlabelbyidbulk();
}

// .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocation = 17;
inline bool Request::_internal_has_requpdatedeletes2cellbylocation() const {
  return ARequest_case() == kReqUpdateDeleteS2CellByLocation;
}
inline bool Request::has_requpdatedeletes2cellbylocation() const {
  return _internal_has_requpdatedeletes2cellbylocation();
}
inline void Request::set_has_requpdatedeletes2cellbylocation() {
  _oneof_case_[0] = kReqUpdateDeleteS2CellByLocation;
}
inline void Request::clear_requpdatedeletes2cellbylocation() {
  if (_internal_has_requpdatedeletes2cellbylocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatedeletes2cellbylocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Request::release_requpdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
  if (_internal_has_requpdatedeletes2cellbylocation()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* temp = ARequest_.requpdatedeletes2cellbylocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatedeletes2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& Request::_internal_requpdatedeletes2cellbylocation() const {
  return _internal_has_requpdatedeletes2cellbylocation()
      ? *ARequest_.requpdatedeletes2cellbylocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest&>(::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest& Request::requpdatedeletes2cellbylocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
  return _internal_requpdatedeletes2cellbylocation();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Request::unsafe_arena_release_requpdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
  if (_internal_has_requpdatedeletes2cellbylocation()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* temp = ARequest_.requpdatedeletes2cellbylocation_;
    ARequest_.requpdatedeletes2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocation) {
  clear_ARequest();
  if (requpdatedeletes2cellbylocation) {
    set_has_requpdatedeletes2cellbylocation();
    ARequest_.requpdatedeletes2cellbylocation_ = requpdatedeletes2cellbylocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Request::_internal_mutable_requpdatedeletes2cellbylocation() {
  if (!_internal_has_requpdatedeletes2cellbylocation()) {
    clear_ARequest();
    set_has_requpdatedeletes2cellbylocation();
    ARequest_.requpdatedeletes2cellbylocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest >(GetArena());
  }
  return ARequest_.requpdatedeletes2cellbylocation_;
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationRequest* Request::mutable_requpdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocation)
  return _internal_mutable_requpdatedeletes2cellbylocation();
}

// .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationRequest reqUpdateDeleteS2CellByLocationBulk = 18;
inline bool Request::_internal_has_requpdatedeletes2cellbylocationbulk() const {
  return ARequest_case() == kReqUpdateDeleteS2CellByLocationBulk;
}
inline bool Request::has_requpdatedeletes2cellbylocationbulk() const {
  return _internal_has_requpdatedeletes2cellbylocationbulk();
}
inline void Request::set_has_requpdatedeletes2cellbylocationbulk() {
  _oneof_case_[0] = kReqUpdateDeleteS2CellByLocationBulk;
}
inline void Request::clear_requpdatedeletes2cellbylocationbulk() {
  if (_internal_has_requpdatedeletes2cellbylocationbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatedeletes2cellbylocationbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Request::release_requpdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
  if (_internal_has_requpdatedeletes2cellbylocationbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* temp = ARequest_.requpdatedeletes2cellbylocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatedeletes2cellbylocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& Request::_internal_requpdatedeletes2cellbylocationbulk() const {
  return _internal_has_requpdatedeletes2cellbylocationbulk()
      ? *ARequest_.requpdatedeletes2cellbylocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest&>(::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest& Request::requpdatedeletes2cellbylocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
  return _internal_requpdatedeletes2cellbylocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Request::unsafe_arena_release_requpdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
  if (_internal_has_requpdatedeletes2cellbylocationbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* temp = ARequest_.requpdatedeletes2cellbylocationbulk_;
    ARequest_.requpdatedeletes2cellbylocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* requpdatedeletes2cellbylocationbulk) {
  clear_ARequest();
  if (requpdatedeletes2cellbylocationbulk) {
    set_has_requpdatedeletes2cellbylocationbulk();
    ARequest_.requpdatedeletes2cellbylocationbulk_ = requpdatedeletes2cellbylocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Request::_internal_mutable_requpdatedeletes2cellbylocationbulk() {
  if (!_internal_has_requpdatedeletes2cellbylocationbulk()) {
    clear_ARequest();
    set_has_requpdatedeletes2cellbylocationbulk();
    ARequest_.requpdatedeletes2cellbylocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest >(GetArena());
  }
  return ARequest_.requpdatedeletes2cellbylocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationRequest* Request::mutable_requpdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateDeleteS2CellByLocationBulk)
  return _internal_mutable_requpdatedeletes2cellbylocationbulk();
}

// .farm.nurture.location.service.proto.FetchConfigByIdRequest reqFetchConfigById = 19;
inline bool Request::_internal_has_reqfetchconfigbyid() const {
  return ARequest_case() == kReqFetchConfigById;
}
inline bool Request::has_reqfetchconfigbyid() const {
  return _internal_has_reqfetchconfigbyid();
}
inline void Request::set_has_reqfetchconfigbyid() {
  _oneof_case_[0] = kReqFetchConfigById;
}
inline void Request::clear_reqfetchconfigbyid() {
  if (_internal_has_reqfetchconfigbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchconfigbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Request::release_reqfetchconfigbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchConfigById)
  if (_internal_has_reqfetchconfigbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchConfigByIdRequest* temp = ARequest_.reqfetchconfigbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchconfigbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& Request::_internal_reqfetchconfigbyid() const {
  return _internal_has_reqfetchconfigbyid()
      ? *ARequest_.reqfetchconfigbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchConfigByIdRequest&>(::farm::nurture::location::service::proto::_FetchConfigByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchConfigByIdRequest& Request::reqfetchconfigbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchConfigById)
  return _internal_reqfetchconfigbyid();
}
inline ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Request::unsafe_arena_release_reqfetchconfigbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchConfigById)
  if (_internal_has_reqfetchconfigbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchConfigByIdRequest* temp = ARequest_.reqfetchconfigbyid_;
    ARequest_.reqfetchconfigbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchconfigbyid(::farm::nurture::location::service::proto::FetchConfigByIdRequest* reqfetchconfigbyid) {
  clear_ARequest();
  if (reqfetchconfigbyid) {
    set_has_reqfetchconfigbyid();
    ARequest_.reqfetchconfigbyid_ = reqfetchconfigbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchConfigById)
}
inline ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Request::_internal_mutable_reqfetchconfigbyid() {
  if (!_internal_has_reqfetchconfigbyid()) {
    clear_ARequest();
    set_has_reqfetchconfigbyid();
    ARequest_.reqfetchconfigbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchConfigByIdRequest >(GetArena());
  }
  return ARequest_.reqfetchconfigbyid_;
}
inline ::farm::nurture::location::service::proto::FetchConfigByIdRequest* Request::mutable_reqfetchconfigbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchConfigById)
  return _internal_mutable_reqfetchconfigbyid();
}

// .farm.nurture.location.service.proto.AddLocationRequest reqAddLocation = 20;
inline bool Request::_internal_has_reqaddlocation() const {
  return ARequest_case() == kReqAddLocation;
}
inline bool Request::has_reqaddlocation() const {
  return _internal_has_reqaddlocation();
}
inline void Request::set_has_reqaddlocation() {
  _oneof_case_[0] = kReqAddLocation;
}
inline void Request::clear_reqaddlocation() {
  if (_internal_has_reqaddlocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddlocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* Request::release_reqaddlocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqAddLocation)
  if (_internal_has_reqaddlocation()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::AddLocationRequest* temp = ARequest_.reqaddlocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::AddLocationRequest& Request::_internal_reqaddlocation() const {
  return _internal_has_reqaddlocation()
      ? *ARequest_.reqaddlocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::AddLocationRequest&>(::farm::nurture::location::service::proto::_AddLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::AddLocationRequest& Request::reqaddlocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqAddLocation)
  return _internal_reqaddlocation();
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* Request::unsafe_arena_release_reqaddlocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqAddLocation)
  if (_internal_has_reqaddlocation()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::AddLocationRequest* temp = ARequest_.reqaddlocation_;
    ARequest_.reqaddlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddlocation(::farm::nurture::location::service::proto::AddLocationRequest* reqaddlocation) {
  clear_ARequest();
  if (reqaddlocation) {
    set_has_reqaddlocation();
    ARequest_.reqaddlocation_ = reqaddlocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqAddLocation)
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* Request::_internal_mutable_reqaddlocation() {
  if (!_internal_has_reqaddlocation()) {
    clear_ARequest();
    set_has_reqaddlocation();
    ARequest_.reqaddlocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::AddLocationRequest >(GetArena());
  }
  return ARequest_.reqaddlocation_;
}
inline ::farm::nurture::location::service::proto::AddLocationRequest* Request::mutable_reqaddlocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqAddLocation)
  return _internal_mutable_reqaddlocation();
}

// .farm.nurture.location.service.proto.BulkAddLocationRequest reqAddLocationBulk = 21;
inline bool Request::_internal_has_reqaddlocationbulk() const {
  return ARequest_case() == kReqAddLocationBulk;
}
inline bool Request::has_reqaddlocationbulk() const {
  return _internal_has_reqaddlocationbulk();
}
inline void Request::set_has_reqaddlocationbulk() {
  _oneof_case_[0] = kReqAddLocationBulk;
}
inline void Request::clear_reqaddlocationbulk() {
  if (_internal_has_reqaddlocationbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddlocationbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkAddLocationRequest* Request::release_reqaddlocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
  if (_internal_has_reqaddlocationbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkAddLocationRequest* temp = ARequest_.reqaddlocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkAddLocationRequest& Request::_internal_reqaddlocationbulk() const {
  return _internal_has_reqaddlocationbulk()
      ? *ARequest_.reqaddlocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkAddLocationRequest&>(::farm::nurture::location::service::proto::_BulkAddLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkAddLocationRequest& Request::reqaddlocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
  return _internal_reqaddlocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkAddLocationRequest* Request::unsafe_arena_release_reqaddlocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
  if (_internal_has_reqaddlocationbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkAddLocationRequest* temp = ARequest_.reqaddlocationbulk_;
    ARequest_.reqaddlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationRequest* reqaddlocationbulk) {
  clear_ARequest();
  if (reqaddlocationbulk) {
    set_has_reqaddlocationbulk();
    ARequest_.reqaddlocationbulk_ = reqaddlocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkAddLocationRequest* Request::_internal_mutable_reqaddlocationbulk() {
  if (!_internal_has_reqaddlocationbulk()) {
    clear_ARequest();
    set_has_reqaddlocationbulk();
    ARequest_.reqaddlocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddLocationRequest >(GetArena());
  }
  return ARequest_.reqaddlocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkAddLocationRequest* Request::mutable_reqaddlocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqAddLocationBulk)
  return _internal_mutable_reqaddlocationbulk();
}

// .farm.nurture.location.service.proto.UpdateLocationRequest reqUpdateLocation = 22;
inline bool Request::_internal_has_requpdatelocation() const {
  return ARequest_case() == kReqUpdateLocation;
}
inline bool Request::has_requpdatelocation() const {
  return _internal_has_requpdatelocation();
}
inline void Request::set_has_requpdatelocation() {
  _oneof_case_[0] = kReqUpdateLocation;
}
inline void Request::clear_requpdatelocation() {
  if (_internal_has_requpdatelocation()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocation_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* Request::release_requpdatelocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocation)
  if (_internal_has_requpdatelocation()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::UpdateLocationRequest* temp = ARequest_.requpdatelocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationRequest& Request::_internal_requpdatelocation() const {
  return _internal_has_requpdatelocation()
      ? *ARequest_.requpdatelocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationRequest&>(::farm::nurture::location::service::proto::_UpdateLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationRequest& Request::requpdatelocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocation)
  return _internal_requpdatelocation();
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* Request::unsafe_arena_release_requpdatelocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocation)
  if (_internal_has_requpdatelocation()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::UpdateLocationRequest* temp = ARequest_.requpdatelocation_;
    ARequest_.requpdatelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocation(::farm::nurture::location::service::proto::UpdateLocationRequest* requpdatelocation) {
  clear_ARequest();
  if (requpdatelocation) {
    set_has_requpdatelocation();
    ARequest_.requpdatelocation_ = requpdatelocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocation)
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* Request::_internal_mutable_requpdatelocation() {
  if (!_internal_has_requpdatelocation()) {
    clear_ARequest();
    set_has_requpdatelocation();
    ARequest_.requpdatelocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationRequest >(GetArena());
  }
  return ARequest_.requpdatelocation_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationRequest* Request::mutable_requpdatelocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocation)
  return _internal_mutable_requpdatelocation();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationRequest reqUpdateLocationBulk = 23;
inline bool Request::_internal_has_requpdatelocationbulk() const {
  return ARequest_case() == kReqUpdateLocationBulk;
}
inline bool Request::has_requpdatelocationbulk() const {
  return _internal_has_requpdatelocationbulk();
}
inline void Request::set_has_requpdatelocationbulk() {
  _oneof_case_[0] = kReqUpdateLocationBulk;
}
inline void Request::clear_requpdatelocationbulk() {
  if (_internal_has_requpdatelocationbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Request::release_requpdatelocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
  if (_internal_has_requpdatelocationbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* temp = ARequest_.requpdatelocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& Request::_internal_requpdatelocationbulk() const {
  return _internal_has_requpdatelocationbulk()
      ? *ARequest_.requpdatelocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest&>(::farm::nurture::location::service::proto::_BulkUpdateLocationRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationRequest& Request::requpdatelocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
  return _internal_requpdatelocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Request::unsafe_arena_release_requpdatelocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
  if (_internal_has_requpdatelocationbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* temp = ARequest_.requpdatelocationbulk_;
    ARequest_.requpdatelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationRequest* requpdatelocationbulk) {
  clear_ARequest();
  if (requpdatelocationbulk) {
    set_has_requpdatelocationbulk();
    ARequest_.requpdatelocationbulk_ = requpdatelocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Request::_internal_mutable_requpdatelocationbulk() {
  if (!_internal_has_requpdatelocationbulk()) {
    clear_ARequest();
    set_has_requpdatelocationbulk();
    ARequest_.requpdatelocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationRequest >(GetArena());
  }
  return ARequest_.requpdatelocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationRequest* Request::mutable_requpdatelocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationBulk)
  return _internal_mutable_requpdatelocationbulk();
}

// .farm.nurture.location.service.proto.GetLocationsWithBoundaryRequest reqGetLocationsWithBoundary = 24;
inline bool Request::_internal_has_reqgetlocationswithboundary() const {
  return ARequest_case() == kReqGetLocationsWithBoundary;
}
inline bool Request::has_reqgetlocationswithboundary() const {
  return _internal_has_reqgetlocationswithboundary();
}
inline void Request::set_has_reqgetlocationswithboundary() {
  _oneof_case_[0] = kReqGetLocationsWithBoundary;
}
inline void Request::clear_reqgetlocationswithboundary() {
  if (_internal_has_reqgetlocationswithboundary()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetlocationswithboundary_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Request::release_reqgetlocationswithboundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
  if (_internal_has_reqgetlocationswithboundary()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* temp = ARequest_.reqgetlocationswithboundary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetlocationswithboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& Request::_internal_reqgetlocationswithboundary() const {
  return _internal_has_reqgetlocationswithboundary()
      ? *ARequest_.reqgetlocationswithboundary_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest&>(::farm::nurture::location::service::proto::_GetLocationsWithBoundaryRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest& Request::reqgetlocationswithboundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
  return _internal_reqgetlocationswithboundary();
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Request::unsafe_arena_release_reqgetlocationswithboundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
  if (_internal_has_reqgetlocationswithboundary()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* temp = ARequest_.reqgetlocationswithboundary_;
    ARequest_.reqgetlocationswithboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* reqgetlocationswithboundary) {
  clear_ARequest();
  if (reqgetlocationswithboundary) {
    set_has_reqgetlocationswithboundary();
    ARequest_.reqgetlocationswithboundary_ = reqgetlocationswithboundary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Request::_internal_mutable_reqgetlocationswithboundary() {
  if (!_internal_has_reqgetlocationswithboundary()) {
    clear_ARequest();
    set_has_reqgetlocationswithboundary();
    ARequest_.reqgetlocationswithboundary_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest >(GetArena());
  }
  return ARequest_.reqgetlocationswithboundary_;
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryRequest* Request::mutable_reqgetlocationswithboundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqGetLocationsWithBoundary)
  return _internal_mutable_reqgetlocationswithboundary();
}

// .farm.nurture.location.service.proto.GetLocationsRequest reqGetLocations = 25;
inline bool Request::_internal_has_reqgetlocations() const {
  return ARequest_case() == kReqGetLocations;
}
inline bool Request::has_reqgetlocations() const {
  return _internal_has_reqgetlocations();
}
inline void Request::set_has_reqgetlocations() {
  _oneof_case_[0] = kReqGetLocations;
}
inline void Request::clear_reqgetlocations() {
  if (_internal_has_reqgetlocations()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetlocations_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationsRequest* Request::release_reqgetlocations() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqGetLocations)
  if (_internal_has_reqgetlocations()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::GetLocationsRequest* temp = ARequest_.reqgetlocations_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetlocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationsRequest& Request::_internal_reqgetlocations() const {
  return _internal_has_reqgetlocations()
      ? *ARequest_.reqgetlocations_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationsRequest&>(::farm::nurture::location::service::proto::_GetLocationsRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationsRequest& Request::reqgetlocations() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqGetLocations)
  return _internal_reqgetlocations();
}
inline ::farm::nurture::location::service::proto::GetLocationsRequest* Request::unsafe_arena_release_reqgetlocations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqGetLocations)
  if (_internal_has_reqgetlocations()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::GetLocationsRequest* temp = ARequest_.reqgetlocations_;
    ARequest_.reqgetlocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetlocations(::farm::nurture::location::service::proto::GetLocationsRequest* reqgetlocations) {
  clear_ARequest();
  if (reqgetlocations) {
    set_has_reqgetlocations();
    ARequest_.reqgetlocations_ = reqgetlocations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocations)
}
inline ::farm::nurture::location::service::proto::GetLocationsRequest* Request::_internal_mutable_reqgetlocations() {
  if (!_internal_has_reqgetlocations()) {
    clear_ARequest();
    set_has_reqgetlocations();
    ARequest_.reqgetlocations_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsRequest >(GetArena());
  }
  return ARequest_.reqgetlocations_;
}
inline ::farm::nurture::location::service::proto::GetLocationsRequest* Request::mutable_reqgetlocations() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqGetLocations)
  return _internal_mutable_reqgetlocations();
}

// .farm.nurture.location.service.proto.GetChildGeographiesRequest reqGetChildGeographies = 26;
inline bool Request::_internal_has_reqgetchildgeographies() const {
  return ARequest_case() == kReqGetChildGeographies;
}
inline bool Request::has_reqgetchildgeographies() const {
  return _internal_has_reqgetchildgeographies();
}
inline void Request::set_has_reqgetchildgeographies() {
  _oneof_case_[0] = kReqGetChildGeographies;
}
inline void Request::clear_reqgetchildgeographies() {
  if (_internal_has_reqgetchildgeographies()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetchildgeographies_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Request::release_reqgetchildgeographies() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
  if (_internal_has_reqgetchildgeographies()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::GetChildGeographiesRequest* temp = ARequest_.reqgetchildgeographies_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetchildgeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& Request::_internal_reqgetchildgeographies() const {
  return _internal_has_reqgetchildgeographies()
      ? *ARequest_.reqgetchildgeographies_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetChildGeographiesRequest&>(::farm::nurture::location::service::proto::_GetChildGeographiesRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetChildGeographiesRequest& Request::reqgetchildgeographies() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
  return _internal_reqgetchildgeographies();
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Request::unsafe_arena_release_reqgetchildgeographies() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
  if (_internal_has_reqgetchildgeographies()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::GetChildGeographiesRequest* temp = ARequest_.reqgetchildgeographies_;
    ARequest_.reqgetchildgeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesRequest* reqgetchildgeographies) {
  clear_ARequest();
  if (reqgetchildgeographies) {
    set_has_reqgetchildgeographies();
    ARequest_.reqgetchildgeographies_ = reqgetchildgeographies;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Request::_internal_mutable_reqgetchildgeographies() {
  if (!_internal_has_reqgetchildgeographies()) {
    clear_ARequest();
    set_has_reqgetchildgeographies();
    ARequest_.reqgetchildgeographies_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetChildGeographiesRequest >(GetArena());
  }
  return ARequest_.reqgetchildgeographies_;
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesRequest* Request::mutable_reqgetchildgeographies() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqGetChildGeographies)
  return _internal_mutable_reqgetchildgeographies();
}

// .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundary = 27;
inline bool Request::_internal_has_reqinsertlocationwithoutboundary() const {
  return ARequest_case() == kReqInsertLocationWithoutBoundary;
}
inline bool Request::has_reqinsertlocationwithoutboundary() const {
  return _internal_has_reqinsertlocationwithoutboundary();
}
inline void Request::set_has_reqinsertlocationwithoutboundary() {
  _oneof_case_[0] = kReqInsertLocationWithoutBoundary;
}
inline void Request::clear_reqinsertlocationwithoutboundary() {
  if (_internal_has_reqinsertlocationwithoutboundary()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocationwithoutboundary_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Request::release_reqinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
  if (_internal_has_reqinsertlocationwithoutboundary()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* temp = ARequest_.reqinsertlocationwithoutboundary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocationwithoutboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& Request::_internal_reqinsertlocationwithoutboundary() const {
  return _internal_has_reqinsertlocationwithoutboundary()
      ? *ARequest_.reqinsertlocationwithoutboundary_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest&>(::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest& Request::reqinsertlocationwithoutboundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
  return _internal_reqinsertlocationwithoutboundary();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Request::unsafe_arena_release_reqinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
  if (_internal_has_reqinsertlocationwithoutboundary()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* temp = ARequest_.reqinsertlocationwithoutboundary_;
    ARequest_.reqinsertlocationwithoutboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundary) {
  clear_ARequest();
  if (reqinsertlocationwithoutboundary) {
    set_has_reqinsertlocationwithoutboundary();
    ARequest_.reqinsertlocationwithoutboundary_ = reqinsertlocationwithoutboundary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Request::_internal_mutable_reqinsertlocationwithoutboundary() {
  if (!_internal_has_reqinsertlocationwithoutboundary()) {
    clear_ARequest();
    set_has_reqinsertlocationwithoutboundary();
    ARequest_.reqinsertlocationwithoutboundary_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest >(GetArena());
  }
  return ARequest_.reqinsertlocationwithoutboundary_;
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest* Request::mutable_reqinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundary)
  return _internal_mutable_reqinsertlocationwithoutboundary();
}

// .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryRequest reqInsertLocationWithoutBoundaryBulk = 28;
inline bool Request::_internal_has_reqinsertlocationwithoutboundarybulk() const {
  return ARequest_case() == kReqInsertLocationWithoutBoundaryBulk;
}
inline bool Request::has_reqinsertlocationwithoutboundarybulk() const {
  return _internal_has_reqinsertlocationwithoutboundarybulk();
}
inline void Request::set_has_reqinsertlocationwithoutboundarybulk() {
  _oneof_case_[0] = kReqInsertLocationWithoutBoundaryBulk;
}
inline void Request::clear_reqinsertlocationwithoutboundarybulk() {
  if (_internal_has_reqinsertlocationwithoutboundarybulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertlocationwithoutboundarybulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Request::release_reqinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
  if (_internal_has_reqinsertlocationwithoutboundarybulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* temp = ARequest_.reqinsertlocationwithoutboundarybulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertlocationwithoutboundarybulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& Request::_internal_reqinsertlocationwithoutboundarybulk() const {
  return _internal_has_reqinsertlocationwithoutboundarybulk()
      ? *ARequest_.reqinsertlocationwithoutboundarybulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest&>(::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest& Request::reqinsertlocationwithoutboundarybulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
  return _internal_reqinsertlocationwithoutboundarybulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Request::unsafe_arena_release_reqinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
  if (_internal_has_reqinsertlocationwithoutboundarybulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* temp = ARequest_.reqinsertlocationwithoutboundarybulk_;
    ARequest_.reqinsertlocationwithoutboundarybulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* reqinsertlocationwithoutboundarybulk) {
  clear_ARequest();
  if (reqinsertlocationwithoutboundarybulk) {
    set_has_reqinsertlocationwithoutboundarybulk();
    ARequest_.reqinsertlocationwithoutboundarybulk_ = reqinsertlocationwithoutboundarybulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Request::_internal_mutable_reqinsertlocationwithoutboundarybulk() {
  if (!_internal_has_reqinsertlocationwithoutboundarybulk()) {
    clear_ARequest();
    set_has_reqinsertlocationwithoutboundarybulk();
    ARequest_.reqinsertlocationwithoutboundarybulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest >(GetArena());
  }
  return ARequest_.reqinsertlocationwithoutboundarybulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryRequest* Request::mutable_reqinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertLocationWithoutBoundaryBulk)
  return _internal_mutable_reqinsertlocationwithoutboundarybulk();
}

// .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryById = 29;
inline bool Request::_internal_has_requpdatelocationwithoutboundarybyid() const {
  return ARequest_case() == kReqUpdateLocationWithoutBoundaryById;
}
inline bool Request::has_requpdatelocationwithoutboundarybyid() const {
  return _internal_has_requpdatelocationwithoutboundarybyid();
}
inline void Request::set_has_requpdatelocationwithoutboundarybyid() {
  _oneof_case_[0] = kReqUpdateLocationWithoutBoundaryById;
}
inline void Request::clear_requpdatelocationwithoutboundarybyid() {
  if (_internal_has_requpdatelocationwithoutboundarybyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationwithoutboundarybyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Request::release_requpdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
  if (_internal_has_requpdatelocationwithoutboundarybyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* temp = ARequest_.requpdatelocationwithoutboundarybyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationwithoutboundarybyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& Request::_internal_requpdatelocationwithoutboundarybyid() const {
  return _internal_has_requpdatelocationwithoutboundarybyid()
      ? *ARequest_.requpdatelocationwithoutboundarybyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest&>(::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest& Request::requpdatelocationwithoutboundarybyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
  return _internal_requpdatelocationwithoutboundarybyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Request::unsafe_arena_release_requpdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
  if (_internal_has_requpdatelocationwithoutboundarybyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* temp = ARequest_.requpdatelocationwithoutboundarybyid_;
    ARequest_.requpdatelocationwithoutboundarybyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyid) {
  clear_ARequest();
  if (requpdatelocationwithoutboundarybyid) {
    set_has_requpdatelocationwithoutboundarybyid();
    ARequest_.requpdatelocationwithoutboundarybyid_ = requpdatelocationwithoutboundarybyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Request::_internal_mutable_requpdatelocationwithoutboundarybyid() {
  if (!_internal_has_requpdatelocationwithoutboundarybyid()) {
    clear_ARequest();
    set_has_requpdatelocationwithoutboundarybyid();
    ARequest_.requpdatelocationwithoutboundarybyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationwithoutboundarybyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest* Request::mutable_requpdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryById)
  return _internal_mutable_requpdatelocationwithoutboundarybyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdRequest reqUpdateLocationWithoutBoundaryByIdBulk = 30;
inline bool Request::_internal_has_requpdatelocationwithoutboundarybyidbulk() const {
  return ARequest_case() == kReqUpdateLocationWithoutBoundaryByIdBulk;
}
inline bool Request::has_requpdatelocationwithoutboundarybyidbulk() const {
  return _internal_has_requpdatelocationwithoutboundarybyidbulk();
}
inline void Request::set_has_requpdatelocationwithoutboundarybyidbulk() {
  _oneof_case_[0] = kReqUpdateLocationWithoutBoundaryByIdBulk;
}
inline void Request::clear_requpdatelocationwithoutboundarybyidbulk() {
  if (_internal_has_requpdatelocationwithoutboundarybyidbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.requpdatelocationwithoutboundarybyidbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Request::release_requpdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
  if (_internal_has_requpdatelocationwithoutboundarybyidbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* temp = ARequest_.requpdatelocationwithoutboundarybyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.requpdatelocationwithoutboundarybyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& Request::_internal_requpdatelocationwithoutboundarybyidbulk() const {
  return _internal_has_requpdatelocationwithoutboundarybyidbulk()
      ? *ARequest_.requpdatelocationwithoutboundarybyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest&>(::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest& Request::requpdatelocationwithoutboundarybyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
  return _internal_requpdatelocationwithoutboundarybyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Request::unsafe_arena_release_requpdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
  if (_internal_has_requpdatelocationwithoutboundarybyidbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* temp = ARequest_.requpdatelocationwithoutboundarybyidbulk_;
    ARequest_.requpdatelocationwithoutboundarybyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_requpdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* requpdatelocationwithoutboundarybyidbulk) {
  clear_ARequest();
  if (requpdatelocationwithoutboundarybyidbulk) {
    set_has_requpdatelocationwithoutboundarybyidbulk();
    ARequest_.requpdatelocationwithoutboundarybyidbulk_ = requpdatelocationwithoutboundarybyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Request::_internal_mutable_requpdatelocationwithoutboundarybyidbulk() {
  if (!_internal_has_requpdatelocationwithoutboundarybyidbulk()) {
    clear_ARequest();
    set_has_requpdatelocationwithoutboundarybyidbulk();
    ARequest_.requpdatelocationwithoutboundarybyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest >(GetArena());
  }
  return ARequest_.requpdatelocationwithoutboundarybyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdRequest* Request::mutable_requpdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqUpdateLocationWithoutBoundaryByIdBulk)
  return _internal_mutable_requpdatelocationwithoutboundarybyidbulk();
}

// .farm.nurture.location.service.proto.DeleteLocationByIdRequest reqDeleteLocationById = 31;
inline bool Request::_internal_has_reqdeletelocationbyid() const {
  return ARequest_case() == kReqDeleteLocationById;
}
inline bool Request::has_reqdeletelocationbyid() const {
  return _internal_has_reqdeletelocationbyid();
}
inline void Request::set_has_reqdeletelocationbyid() {
  _oneof_case_[0] = kReqDeleteLocationById;
}
inline void Request::clear_reqdeletelocationbyid() {
  if (_internal_has_reqdeletelocationbyid()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqdeletelocationbyid_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Request::release_reqdeletelocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
  if (_internal_has_reqdeletelocationbyid()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* temp = ARequest_.reqdeletelocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqdeletelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& Request::_internal_reqdeletelocationbyid() const {
  return _internal_has_reqdeletelocationbyid()
      ? *ARequest_.reqdeletelocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest&>(::farm::nurture::location::service::proto::_DeleteLocationByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdRequest& Request::reqdeletelocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
  return _internal_reqdeletelocationbyid();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Request::unsafe_arena_release_reqdeletelocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
  if (_internal_has_reqdeletelocationbyid()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* temp = ARequest_.reqdeletelocationbyid_;
    ARequest_.reqdeletelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdRequest* reqdeletelocationbyid) {
  clear_ARequest();
  if (reqdeletelocationbyid) {
    set_has_reqdeletelocationbyid();
    ARequest_.reqdeletelocationbyid_ = reqdeletelocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Request::_internal_mutable_reqdeletelocationbyid() {
  if (!_internal_has_reqdeletelocationbyid()) {
    clear_ARequest();
    set_has_reqdeletelocationbyid();
    ARequest_.reqdeletelocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::DeleteLocationByIdRequest >(GetArena());
  }
  return ARequest_.reqdeletelocationbyid_;
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdRequest* Request::mutable_reqdeletelocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqDeleteLocationById)
  return _internal_mutable_reqdeletelocationbyid();
}

// .farm.nurture.location.service.proto.BulkDeleteLocationByIdRequest reqDeleteLocationByIdBulk = 32;
inline bool Request::_internal_has_reqdeletelocationbyidbulk() const {
  return ARequest_case() == kReqDeleteLocationByIdBulk;
}
inline bool Request::has_reqdeletelocationbyidbulk() const {
  return _internal_has_reqdeletelocationbyidbulk();
}
inline void Request::set_has_reqdeletelocationbyidbulk() {
  _oneof_case_[0] = kReqDeleteLocationByIdBulk;
}
inline void Request::clear_reqdeletelocationbyidbulk() {
  if (_internal_has_reqdeletelocationbyidbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqdeletelocationbyidbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Request::release_reqdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
  if (_internal_has_reqdeletelocationbyidbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* temp = ARequest_.reqdeletelocationbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqdeletelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& Request::_internal_reqdeletelocationbyidbulk() const {
  return _internal_has_reqdeletelocationbyidbulk()
      ? *ARequest_.reqdeletelocationbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest&>(::farm::nurture::location::service::proto::_BulkDeleteLocationByIdRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest& Request::reqdeletelocationbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
  return _internal_reqdeletelocationbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Request::unsafe_arena_release_reqdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
  if (_internal_has_reqdeletelocationbyidbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* temp = ARequest_.reqdeletelocationbyidbulk_;
    ARequest_.reqdeletelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* reqdeletelocationbyidbulk) {
  clear_ARequest();
  if (reqdeletelocationbyidbulk) {
    set_has_reqdeletelocationbyidbulk();
    ARequest_.reqdeletelocationbyidbulk_ = reqdeletelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Request::_internal_mutable_reqdeletelocationbyidbulk() {
  if (!_internal_has_reqdeletelocationbyidbulk()) {
    clear_ARequest();
    set_has_reqdeletelocationbyidbulk();
    ARequest_.reqdeletelocationbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest >(GetArena());
  }
  return ARequest_.reqdeletelocationbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdRequest* Request::mutable_reqdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqDeleteLocationByIdBulk)
  return _internal_mutable_reqdeletelocationbyidbulk();
}

// .farm.nurture.location.service.proto.FetchDuplicateVillagesRequest reqFetchDuplicateVillages = 33;
inline bool Request::_internal_has_reqfetchduplicatevillages() const {
  return ARequest_case() == kReqFetchDuplicateVillages;
}
inline bool Request::has_reqfetchduplicatevillages() const {
  return _internal_has_reqfetchduplicatevillages();
}
inline void Request::set_has_reqfetchduplicatevillages() {
  _oneof_case_[0] = kReqFetchDuplicateVillages;
}
inline void Request::clear_reqfetchduplicatevillages() {
  if (_internal_has_reqfetchduplicatevillages()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchduplicatevillages_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Request::release_reqfetchduplicatevillages() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
  if (_internal_has_reqfetchduplicatevillages()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* temp = ARequest_.reqfetchduplicatevillages_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchduplicatevillages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest& Request::_internal_reqfetchduplicatevillages() const {
  return _internal_has_reqfetchduplicatevillages()
      ? *ARequest_.reqfetchduplicatevillages_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest&>(::farm::nurture::location::service::proto::_FetchDuplicateVillagesRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest& Request::reqfetchduplicatevillages() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
  return _internal_reqfetchduplicatevillages();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Request::unsafe_arena_release_reqfetchduplicatevillages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
  if (_internal_has_reqfetchduplicatevillages()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* temp = ARequest_.reqfetchduplicatevillages_;
    ARequest_.reqfetchduplicatevillages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* reqfetchduplicatevillages) {
  clear_ARequest();
  if (reqfetchduplicatevillages) {
    set_has_reqfetchduplicatevillages();
    ARequest_.reqfetchduplicatevillages_ = reqfetchduplicatevillages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Request::_internal_mutable_reqfetchduplicatevillages() {
  if (!_internal_has_reqfetchduplicatevillages()) {
    clear_ARequest();
    set_has_reqfetchduplicatevillages();
    ARequest_.reqfetchduplicatevillages_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest >(GetArena());
  }
  return ARequest_.reqfetchduplicatevillages_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesRequest* Request::mutable_reqfetchduplicatevillages() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillages)
  return _internal_mutable_reqfetchduplicatevillages();
}

// .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongRequest reqFetchDuplicateVillagesBySDTVLatLong = 34;
inline bool Request::_internal_has_reqfetchduplicatevillagesbysdtvlatlong() const {
  return ARequest_case() == kReqFetchDuplicateVillagesBySDTVLatLong;
}
inline bool Request::has_reqfetchduplicatevillagesbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatevillagesbysdtvlatlong();
}
inline void Request::set_has_reqfetchduplicatevillagesbysdtvlatlong() {
  _oneof_case_[0] = kReqFetchDuplicateVillagesBySDTVLatLong;
}
inline void Request::clear_reqfetchduplicatevillagesbysdtvlatlong() {
  if (_internal_has_reqfetchduplicatevillagesbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Request::release_reqfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
  if (_internal_has_reqfetchduplicatevillagesbysdtvlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchduplicatevillagesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest& Request::_internal_reqfetchduplicatevillagesbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatevillagesbysdtvlatlong()
      ? *ARequest_.reqfetchduplicatevillagesbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest&>(::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest& Request::reqfetchduplicatevillagesbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
  return _internal_reqfetchduplicatevillagesbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Request::unsafe_arena_release_reqfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
  if (_internal_has_reqfetchduplicatevillagesbysdtvlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
    ARequest_.reqfetchduplicatevillagesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* reqfetchduplicatevillagesbysdtvlatlong) {
  clear_ARequest();
  if (reqfetchduplicatevillagesbysdtvlatlong) {
    set_has_reqfetchduplicatevillagesbysdtvlatlong();
    ARequest_.reqfetchduplicatevillagesbysdtvlatlong_ = reqfetchduplicatevillagesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Request::_internal_mutable_reqfetchduplicatevillagesbysdtvlatlong() {
  if (!_internal_has_reqfetchduplicatevillagesbysdtvlatlong()) {
    clear_ARequest();
    set_has_reqfetchduplicatevillagesbysdtvlatlong();
    ARequest_.reqfetchduplicatevillagesbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest >(GetArena());
  }
  return ARequest_.reqfetchduplicatevillagesbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongRequest* Request::mutable_reqfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchDuplicateVillagesBySDTVLatLong)
  return _internal_mutable_reqfetchduplicatevillagesbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongRequest reqFetchDuplicateTehsilsBySDTVLatLong = 35;
inline bool Request::_internal_has_reqfetchduplicatetehsilsbysdtvlatlong() const {
  return ARequest_case() == kReqFetchDuplicateTehsilsBySDTVLatLong;
}
inline bool Request::has_reqfetchduplicatetehsilsbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatetehsilsbysdtvlatlong();
}
inline void Request::set_has_reqfetchduplicatetehsilsbysdtvlatlong() {
  _oneof_case_[0] = kReqFetchDuplicateTehsilsBySDTVLatLong;
}
inline void Request::clear_reqfetchduplicatetehsilsbysdtvlatlong() {
  if (_internal_has_reqfetchduplicatetehsilsbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Request::release_reqfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
  if (_internal_has_reqfetchduplicatetehsilsbysdtvlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest& Request::_internal_reqfetchduplicatetehsilsbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatetehsilsbysdtvlatlong()
      ? *ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest&>(::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest& Request::reqfetchduplicatetehsilsbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
  return _internal_reqfetchduplicatetehsilsbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Request::unsafe_arena_release_reqfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
  if (_internal_has_reqfetchduplicatetehsilsbysdtvlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
    ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* reqfetchduplicatetehsilsbysdtvlatlong) {
  clear_ARequest();
  if (reqfetchduplicatetehsilsbysdtvlatlong) {
    set_has_reqfetchduplicatetehsilsbysdtvlatlong();
    ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_ = reqfetchduplicatetehsilsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Request::_internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong() {
  if (!_internal_has_reqfetchduplicatetehsilsbysdtvlatlong()) {
    clear_ARequest();
    set_has_reqfetchduplicatetehsilsbysdtvlatlong();
    ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest >(GetArena());
  }
  return ARequest_.reqfetchduplicatetehsilsbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongRequest* Request::mutable_reqfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchDuplicateTehsilsBySDTVLatLong)
  return _internal_mutable_reqfetchduplicatetehsilsbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongRequest reqFetchDuplicateDistrictsBySDTVLatLong = 36;
inline bool Request::_internal_has_reqfetchduplicatedistrictsbysdtvlatlong() const {
  return ARequest_case() == kReqFetchDuplicateDistrictsBySDTVLatLong;
}
inline bool Request::has_reqfetchduplicatedistrictsbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatedistrictsbysdtvlatlong();
}
inline void Request::set_has_reqfetchduplicatedistrictsbysdtvlatlong() {
  _oneof_case_[0] = kReqFetchDuplicateDistrictsBySDTVLatLong;
}
inline void Request::clear_reqfetchduplicatedistrictsbysdtvlatlong() {
  if (_internal_has_reqfetchduplicatedistrictsbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Request::release_reqfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
  if (_internal_has_reqfetchduplicatedistrictsbysdtvlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest& Request::_internal_reqfetchduplicatedistrictsbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatedistrictsbysdtvlatlong()
      ? *ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest&>(::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest& Request::reqfetchduplicatedistrictsbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
  return _internal_reqfetchduplicatedistrictsbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Request::unsafe_arena_release_reqfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
  if (_internal_has_reqfetchduplicatedistrictsbysdtvlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
    ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* reqfetchduplicatedistrictsbysdtvlatlong) {
  clear_ARequest();
  if (reqfetchduplicatedistrictsbysdtvlatlong) {
    set_has_reqfetchduplicatedistrictsbysdtvlatlong();
    ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_ = reqfetchduplicatedistrictsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Request::_internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong() {
  if (!_internal_has_reqfetchduplicatedistrictsbysdtvlatlong()) {
    clear_ARequest();
    set_has_reqfetchduplicatedistrictsbysdtvlatlong();
    ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest >(GetArena());
  }
  return ARequest_.reqfetchduplicatedistrictsbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongRequest* Request::mutable_reqfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchDuplicateDistrictsBySDTVLatLong)
  return _internal_mutable_reqfetchduplicatedistrictsbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongRequest reqFetchDuplicateStatesBySDTVLatLong = 37;
inline bool Request::_internal_has_reqfetchduplicatestatesbysdtvlatlong() const {
  return ARequest_case() == kReqFetchDuplicateStatesBySDTVLatLong;
}
inline bool Request::has_reqfetchduplicatestatesbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatestatesbysdtvlatlong();
}
inline void Request::set_has_reqfetchduplicatestatesbysdtvlatlong() {
  _oneof_case_[0] = kReqFetchDuplicateStatesBySDTVLatLong;
}
inline void Request::clear_reqfetchduplicatestatesbysdtvlatlong() {
  if (_internal_has_reqfetchduplicatestatesbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Request::release_reqfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
  if (_internal_has_reqfetchduplicatestatesbysdtvlatlong()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqfetchduplicatestatesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest& Request::_internal_reqfetchduplicatestatesbysdtvlatlong() const {
  return _internal_has_reqfetchduplicatestatesbysdtvlatlong()
      ? *ARequest_.reqfetchduplicatestatesbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest&>(::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest& Request::reqfetchduplicatestatesbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
  return _internal_reqfetchduplicatestatesbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Request::unsafe_arena_release_reqfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
  if (_internal_has_reqfetchduplicatestatesbysdtvlatlong()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* temp = ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
    ARequest_.reqfetchduplicatestatesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* reqfetchduplicatestatesbysdtvlatlong) {
  clear_ARequest();
  if (reqfetchduplicatestatesbysdtvlatlong) {
    set_has_reqfetchduplicatestatesbysdtvlatlong();
    ARequest_.reqfetchduplicatestatesbysdtvlatlong_ = reqfetchduplicatestatesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Request::_internal_mutable_reqfetchduplicatestatesbysdtvlatlong() {
  if (!_internal_has_reqfetchduplicatestatesbysdtvlatlong()) {
    clear_ARequest();
    set_has_reqfetchduplicatestatesbysdtvlatlong();
    ARequest_.reqfetchduplicatestatesbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest >(GetArena());
  }
  return ARequest_.reqfetchduplicatestatesbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongRequest* Request::mutable_reqfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqFetchDuplicateStatesBySDTVLatLong)
  return _internal_mutable_reqfetchduplicatestatesbysdtvlatlong();
}

// .farm.nurture.location.service.proto.GetDuplicateGeographiesRequest reqGetDuplicateGeographies = 38;
inline bool Request::_internal_has_reqgetduplicategeographies() const {
  return ARequest_case() == kReqGetDuplicateGeographies;
}
inline bool Request::has_reqgetduplicategeographies() const {
  return _internal_has_reqgetduplicategeographies();
}
inline void Request::set_has_reqgetduplicategeographies() {
  _oneof_case_[0] = kReqGetDuplicateGeographies;
}
inline void Request::clear_reqgetduplicategeographies() {
  if (_internal_has_reqgetduplicategeographies()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetduplicategeographies_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Request::release_reqgetduplicategeographies() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
  if (_internal_has_reqgetduplicategeographies()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* temp = ARequest_.reqgetduplicategeographies_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetduplicategeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest& Request::_internal_reqgetduplicategeographies() const {
  return _internal_has_reqgetduplicategeographies()
      ? *ARequest_.reqgetduplicategeographies_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest&>(::farm::nurture::location::service::proto::_GetDuplicateGeographiesRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest& Request::reqgetduplicategeographies() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
  return _internal_reqgetduplicategeographies();
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Request::unsafe_arena_release_reqgetduplicategeographies() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
  if (_internal_has_reqgetduplicategeographies()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* temp = ARequest_.reqgetduplicategeographies_;
    ARequest_.reqgetduplicategeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* reqgetduplicategeographies) {
  clear_ARequest();
  if (reqgetduplicategeographies) {
    set_has_reqgetduplicategeographies();
    ARequest_.reqgetduplicategeographies_ = reqgetduplicategeographies;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Request::_internal_mutable_reqgetduplicategeographies() {
  if (!_internal_has_reqgetduplicategeographies()) {
    clear_ARequest();
    set_has_reqgetduplicategeographies();
    ARequest_.reqgetduplicategeographies_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest >(GetArena());
  }
  return ARequest_.reqgetduplicategeographies_;
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesRequest* Request::mutable_reqgetduplicategeographies() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqGetDuplicateGeographies)
  return _internal_mutable_reqgetduplicategeographies();
}

// .farm.nurture.location.service.proto.InsertVendorLocationDataRequest reqInsertVendorLocationData = 39;
inline bool Request::_internal_has_reqinsertvendorlocationdata() const {
  return ARequest_case() == kReqInsertVendorLocationData;
}
inline bool Request::has_reqinsertvendorlocationdata() const {
  return _internal_has_reqinsertvendorlocationdata();
}
inline void Request::set_has_reqinsertvendorlocationdata() {
  _oneof_case_[0] = kReqInsertVendorLocationData;
}
inline void Request::clear_reqinsertvendorlocationdata() {
  if (_internal_has_reqinsertvendorlocationdata()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertvendorlocationdata_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Request::release_reqinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
  if (_internal_has_reqinsertvendorlocationdata()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* temp = ARequest_.reqinsertvendorlocationdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertvendorlocationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& Request::_internal_reqinsertvendorlocationdata() const {
  return _internal_has_reqinsertvendorlocationdata()
      ? *ARequest_.reqinsertvendorlocationdata_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest&>(::farm::nurture::location::service::proto::_InsertVendorLocationDataRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest& Request::reqinsertvendorlocationdata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
  return _internal_reqinsertvendorlocationdata();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Request::unsafe_arena_release_reqinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
  if (_internal_has_reqinsertvendorlocationdata()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* temp = ARequest_.reqinsertvendorlocationdata_;
    ARequest_.reqinsertvendorlocationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* reqinsertvendorlocationdata) {
  clear_ARequest();
  if (reqinsertvendorlocationdata) {
    set_has_reqinsertvendorlocationdata();
    ARequest_.reqinsertvendorlocationdata_ = reqinsertvendorlocationdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Request::_internal_mutable_reqinsertvendorlocationdata() {
  if (!_internal_has_reqinsertvendorlocationdata()) {
    clear_ARequest();
    set_has_reqinsertvendorlocationdata();
    ARequest_.reqinsertvendorlocationdata_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest >(GetArena());
  }
  return ARequest_.reqinsertvendorlocationdata_;
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataRequest* Request::mutable_reqinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertVendorLocationData)
  return _internal_mutable_reqinsertvendorlocationdata();
}

// .farm.nurture.location.service.proto.BulkInsertVendorLocationDataRequest reqInsertVendorLocationDataBulk = 40;
inline bool Request::_internal_has_reqinsertvendorlocationdatabulk() const {
  return ARequest_case() == kReqInsertVendorLocationDataBulk;
}
inline bool Request::has_reqinsertvendorlocationdatabulk() const {
  return _internal_has_reqinsertvendorlocationdatabulk();
}
inline void Request::set_has_reqinsertvendorlocationdatabulk() {
  _oneof_case_[0] = kReqInsertVendorLocationDataBulk;
}
inline void Request::clear_reqinsertvendorlocationdatabulk() {
  if (_internal_has_reqinsertvendorlocationdatabulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqinsertvendorlocationdatabulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Request::release_reqinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
  if (_internal_has_reqinsertvendorlocationdatabulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* temp = ARequest_.reqinsertvendorlocationdatabulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqinsertvendorlocationdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest& Request::_internal_reqinsertvendorlocationdatabulk() const {
  return _internal_has_reqinsertvendorlocationdatabulk()
      ? *ARequest_.reqinsertvendorlocationdatabulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest&>(::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest& Request::reqinsertvendorlocationdatabulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
  return _internal_reqinsertvendorlocationdatabulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Request::unsafe_arena_release_reqinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
  if (_internal_has_reqinsertvendorlocationdatabulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* temp = ARequest_.reqinsertvendorlocationdatabulk_;
    ARequest_.reqinsertvendorlocationdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* reqinsertvendorlocationdatabulk) {
  clear_ARequest();
  if (reqinsertvendorlocationdatabulk) {
    set_has_reqinsertvendorlocationdatabulk();
    ARequest_.reqinsertvendorlocationdatabulk_ = reqinsertvendorlocationdatabulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Request::_internal_mutable_reqinsertvendorlocationdatabulk() {
  if (!_internal_has_reqinsertvendorlocationdatabulk()) {
    clear_ARequest();
    set_has_reqinsertvendorlocationdatabulk();
    ARequest_.reqinsertvendorlocationdatabulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest >(GetArena());
  }
  return ARequest_.reqinsertvendorlocationdatabulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataRequest* Request::mutable_reqinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqInsertVendorLocationDataBulk)
  return _internal_mutable_reqinsertvendorlocationdatabulk();
}

// .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashRequest reqSearchVendorLocationsByGeohash = 41;
inline bool Request::_internal_has_reqsearchvendorlocationsbygeohash() const {
  return ARequest_case() == kReqSearchVendorLocationsByGeohash;
}
inline bool Request::has_reqsearchvendorlocationsbygeohash() const {
  return _internal_has_reqsearchvendorlocationsbygeohash();
}
inline void Request::set_has_reqsearchvendorlocationsbygeohash() {
  _oneof_case_[0] = kReqSearchVendorLocationsByGeohash;
}
inline void Request::clear_reqsearchvendorlocationsbygeohash() {
  if (_internal_has_reqsearchvendorlocationsbygeohash()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqsearchvendorlocationsbygeohash_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Request::release_reqsearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
  if (_internal_has_reqsearchvendorlocationsbygeohash()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* temp = ARequest_.reqsearchvendorlocationsbygeohash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqsearchvendorlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest& Request::_internal_reqsearchvendorlocationsbygeohash() const {
  return _internal_has_reqsearchvendorlocationsbygeohash()
      ? *ARequest_.reqsearchvendorlocationsbygeohash_
      : reinterpret_cast< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest&>(::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest& Request::reqsearchvendorlocationsbygeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
  return _internal_reqsearchvendorlocationsbygeohash();
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Request::unsafe_arena_release_reqsearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
  if (_internal_has_reqsearchvendorlocationsbygeohash()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* temp = ARequest_.reqsearchvendorlocationsbygeohash_;
    ARequest_.reqsearchvendorlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqsearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* reqsearchvendorlocationsbygeohash) {
  clear_ARequest();
  if (reqsearchvendorlocationsbygeohash) {
    set_has_reqsearchvendorlocationsbygeohash();
    ARequest_.reqsearchvendorlocationsbygeohash_ = reqsearchvendorlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Request::_internal_mutable_reqsearchvendorlocationsbygeohash() {
  if (!_internal_has_reqsearchvendorlocationsbygeohash()) {
    clear_ARequest();
    set_has_reqsearchvendorlocationsbygeohash();
    ARequest_.reqsearchvendorlocationsbygeohash_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest >(GetArena());
  }
  return ARequest_.reqsearchvendorlocationsbygeohash_;
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashRequest* Request::mutable_reqsearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqSearchVendorLocationsByGeohash)
  return _internal_mutable_reqsearchvendorlocationsbygeohash();
}

// .farm.nurture.location.service.proto.SearchLocationsByGeohashRequest reqSearchLocationsByGeohash = 42;
inline bool Request::_internal_has_reqsearchlocationsbygeohash() const {
  return ARequest_case() == kReqSearchLocationsByGeohash;
}
inline bool Request::has_reqsearchlocationsbygeohash() const {
  return _internal_has_reqsearchlocationsbygeohash();
}
inline void Request::set_has_reqsearchlocationsbygeohash() {
  _oneof_case_[0] = kReqSearchLocationsByGeohash;
}
inline void Request::clear_reqsearchlocationsbygeohash() {
  if (_internal_has_reqsearchlocationsbygeohash()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqsearchlocationsbygeohash_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Request::release_reqsearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
  if (_internal_has_reqsearchlocationsbygeohash()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* temp = ARequest_.reqsearchlocationsbygeohash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqsearchlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest& Request::_internal_reqsearchlocationsbygeohash() const {
  return _internal_has_reqsearchlocationsbygeohash()
      ? *ARequest_.reqsearchlocationsbygeohash_
      : reinterpret_cast< ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest&>(::farm::nurture::location::service::proto::_SearchLocationsByGeohashRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest& Request::reqsearchlocationsbygeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
  return _internal_reqsearchlocationsbygeohash();
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Request::unsafe_arena_release_reqsearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
  if (_internal_has_reqsearchlocationsbygeohash()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* temp = ARequest_.reqsearchlocationsbygeohash_;
    ARequest_.reqsearchlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqsearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* reqsearchlocationsbygeohash) {
  clear_ARequest();
  if (reqsearchlocationsbygeohash) {
    set_has_reqsearchlocationsbygeohash();
    ARequest_.reqsearchlocationsbygeohash_ = reqsearchlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Request::_internal_mutable_reqsearchlocationsbygeohash() {
  if (!_internal_has_reqsearchlocationsbygeohash()) {
    clear_ARequest();
    set_has_reqsearchlocationsbygeohash();
    ARequest_.reqsearchlocationsbygeohash_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest >(GetArena());
  }
  return ARequest_.reqsearchlocationsbygeohash_;
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashRequest* Request::mutable_reqsearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqSearchLocationsByGeohash)
  return _internal_mutable_reqsearchlocationsbygeohash();
}

// .farm.nurture.location.service.proto.GetLocationDataByLatLngRequest reqGetLocationDataByLatLng = 43;
inline bool Request::_internal_has_reqgetlocationdatabylatlng() const {
  return ARequest_case() == kReqGetLocationDataByLatLng;
}
inline bool Request::has_reqgetlocationdatabylatlng() const {
  return _internal_has_reqgetlocationdatabylatlng();
}
inline void Request::set_has_reqgetlocationdatabylatlng() {
  _oneof_case_[0] = kReqGetLocationDataByLatLng;
}
inline void Request::clear_reqgetlocationdatabylatlng() {
  if (_internal_has_reqgetlocationdatabylatlng()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqgetlocationdatabylatlng_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Request::release_reqgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
  if (_internal_has_reqgetlocationdatabylatlng()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* temp = ARequest_.reqgetlocationdatabylatlng_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqgetlocationdatabylatlng_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest& Request::_internal_reqgetlocationdatabylatlng() const {
  return _internal_has_reqgetlocationdatabylatlng()
      ? *ARequest_.reqgetlocationdatabylatlng_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest&>(::farm::nurture::location::service::proto::_GetLocationDataByLatLngRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest& Request::reqgetlocationdatabylatlng() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
  return _internal_reqgetlocationdatabylatlng();
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Request::unsafe_arena_release_reqgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
  if (_internal_has_reqgetlocationdatabylatlng()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* temp = ARequest_.reqgetlocationdatabylatlng_;
    ARequest_.reqgetlocationdatabylatlng_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* reqgetlocationdatabylatlng) {
  clear_ARequest();
  if (reqgetlocationdatabylatlng) {
    set_has_reqgetlocationdatabylatlng();
    ARequest_.reqgetlocationdatabylatlng_ = reqgetlocationdatabylatlng;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Request::_internal_mutable_reqgetlocationdatabylatlng() {
  if (!_internal_has_reqgetlocationdatabylatlng()) {
    clear_ARequest();
    set_has_reqgetlocationdatabylatlng();
    ARequest_.reqgetlocationdatabylatlng_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest >(GetArena());
  }
  return ARequest_.reqgetlocationdatabylatlng_;
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngRequest* Request::mutable_reqgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqGetLocationDataByLatLng)
  return _internal_mutable_reqgetlocationdatabylatlng();
}

// .farm.nurture.location.service.proto.AddVendorApiLedgerRequest reqAddVendorApiLedger = 44;
inline bool Request::_internal_has_reqaddvendorapiledger() const {
  return ARequest_case() == kReqAddVendorApiLedger;
}
inline bool Request::has_reqaddvendorapiledger() const {
  return _internal_has_reqaddvendorapiledger();
}
inline void Request::set_has_reqaddvendorapiledger() {
  _oneof_case_[0] = kReqAddVendorApiLedger;
}
inline void Request::clear_reqaddvendorapiledger() {
  if (_internal_has_reqaddvendorapiledger()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddvendorapiledger_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Request::release_reqaddvendorapiledger() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
  if (_internal_has_reqaddvendorapiledger()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* temp = ARequest_.reqaddvendorapiledger_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddvendorapiledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& Request::_internal_reqaddvendorapiledger() const {
  return _internal_has_reqaddvendorapiledger()
      ? *ARequest_.reqaddvendorapiledger_
      : reinterpret_cast< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest&>(::farm::nurture::location::service::proto::_AddVendorApiLedgerRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest& Request::reqaddvendorapiledger() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
  return _internal_reqaddvendorapiledger();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Request::unsafe_arena_release_reqaddvendorapiledger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
  if (_internal_has_reqaddvendorapiledger()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* temp = ARequest_.reqaddvendorapiledger_;
    ARequest_.reqaddvendorapiledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* reqaddvendorapiledger) {
  clear_ARequest();
  if (reqaddvendorapiledger) {
    set_has_reqaddvendorapiledger();
    ARequest_.reqaddvendorapiledger_ = reqaddvendorapiledger;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Request::_internal_mutable_reqaddvendorapiledger() {
  if (!_internal_has_reqaddvendorapiledger()) {
    clear_ARequest();
    set_has_reqaddvendorapiledger();
    ARequest_.reqaddvendorapiledger_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest >(GetArena());
  }
  return ARequest_.reqaddvendorapiledger_;
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerRequest* Request::mutable_reqaddvendorapiledger() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqAddVendorApiLedger)
  return _internal_mutable_reqaddvendorapiledger();
}

// .farm.nurture.location.service.proto.BulkAddVendorApiLedgerRequest reqAddVendorApiLedgerBulk = 45;
inline bool Request::_internal_has_reqaddvendorapiledgerbulk() const {
  return ARequest_case() == kReqAddVendorApiLedgerBulk;
}
inline bool Request::has_reqaddvendorapiledgerbulk() const {
  return _internal_has_reqaddvendorapiledgerbulk();
}
inline void Request::set_has_reqaddvendorapiledgerbulk() {
  _oneof_case_[0] = kReqAddVendorApiLedgerBulk;
}
inline void Request::clear_reqaddvendorapiledgerbulk() {
  if (_internal_has_reqaddvendorapiledgerbulk()) {
    if (GetArena() == nullptr) {
      delete ARequest_.reqaddvendorapiledgerbulk_;
    }
    clear_has_ARequest();
  }
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Request::release_reqaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
  if (_internal_has_reqaddvendorapiledgerbulk()) {
    clear_has_ARequest();
      ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* temp = ARequest_.reqaddvendorapiledgerbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ARequest_.reqaddvendorapiledgerbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest& Request::_internal_reqaddvendorapiledgerbulk() const {
  return _internal_has_reqaddvendorapiledgerbulk()
      ? *ARequest_.reqaddvendorapiledgerbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest&>(::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerRequest_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest& Request::reqaddvendorapiledgerbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
  return _internal_reqaddvendorapiledgerbulk();
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Request::unsafe_arena_release_reqaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
  if (_internal_has_reqaddvendorapiledgerbulk()) {
    clear_has_ARequest();
    ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* temp = ARequest_.reqaddvendorapiledgerbulk_;
    ARequest_.reqaddvendorapiledgerbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reqaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* reqaddvendorapiledgerbulk) {
  clear_ARequest();
  if (reqaddvendorapiledgerbulk) {
    set_has_reqaddvendorapiledgerbulk();
    ARequest_.reqaddvendorapiledgerbulk_ = reqaddvendorapiledgerbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Request::_internal_mutable_reqaddvendorapiledgerbulk() {
  if (!_internal_has_reqaddvendorapiledgerbulk()) {
    clear_ARequest();
    set_has_reqaddvendorapiledgerbulk();
    ARequest_.reqaddvendorapiledgerbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest >(GetArena());
  }
  return ARequest_.reqaddvendorapiledgerbulk_;
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerRequest* Request::mutable_reqaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Request.reqAddVendorApiLedgerBulk)
  return _internal_mutable_reqaddvendorapiledgerbulk();
}

inline bool Request::has_ARequest() const {
  return ARequest_case() != AREQUEST_NOT_SET;
}
inline void Request::clear_has_ARequest() {
  _oneof_case_[0] = AREQUEST_NOT_SET;
}
inline Request::ARequestCase Request::ARequest_case() const {
  return Request::ARequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultiResponses

// .farm.nurture.core.contracts.common.RequestStatusResult status = 1;
inline bool MultiResponses::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiResponses::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MultiResponses::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& MultiResponses::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.MultiResponses.status)
  return _internal_status();
}
inline void MultiResponses::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.MultiResponses.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.MultiResponses.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* MultiResponses::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.MultiResponses.status)
  return _internal_mutable_status();
}
inline void MultiResponses::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.MultiResponses.status)
}

// repeated .farm.nurture.location.service.proto.Response response = 2;
inline int MultiResponses::_internal_response_size() const {
  return response_.size();
}
inline int MultiResponses::response_size() const {
  return _internal_response_size();
}
inline void MultiResponses::clear_response() {
  response_.Clear();
}
inline ::farm::nurture::location::service::proto::Response* MultiResponses::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.MultiResponses.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Response >*
MultiResponses::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:farm.nurture.location.service.proto.MultiResponses.response)
  return &response_;
}
inline const ::farm::nurture::location::service::proto::Response& MultiResponses::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::farm::nurture::location::service::proto::Response& MultiResponses::response(int index) const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.MultiResponses.response)
  return _internal_response(index);
}
inline ::farm::nurture::location::service::proto::Response* MultiResponses::_internal_add_response() {
  return response_.Add();
}
inline ::farm::nurture::location::service::proto::Response* MultiResponses::add_response() {
  // @@protoc_insertion_point(field_add:farm.nurture.location.service.proto.MultiResponses.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::farm::nurture::location::service::proto::Response >&
MultiResponses::response() const {
  // @@protoc_insertion_point(field_list:farm.nurture.location.service.proto.MultiResponses.response)
  return response_;
}

// -------------------------------------------------------------------

// Response

// string index = 1;
inline void Response::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Response::index() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.index)
  return _internal_index();
}
inline void Response::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:farm.nurture.location.service.proto.Response.index)
}
inline std::string* Response::mutable_index() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.index)
  return _internal_mutable_index();
}
inline const std::string& Response::_internal_index() const {
  return index_.Get();
}
inline void Response::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:farm.nurture.location.service.proto.Response.index)
}
inline void Response::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:farm.nurture.location.service.proto.Response.index)
}
inline void Response::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:farm.nurture.location.service.proto.Response.index)
}
inline std::string* Response::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_index() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.index)
}

// .farm.nurture.core.contracts.common.RequestStatusResult status = 2;
inline bool Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Response::_internal_status() const {
  const ::farm::nurture::core::contracts::common::RequestStatusResult* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::farm::nurture::core::contracts::common::RequestStatusResult&>(
      ::farm::nurture::core::contracts::common::_RequestStatusResult_default_instance_);
}
inline const ::farm::nurture::core::contracts::common::RequestStatusResult& Response::status() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.status)
  return _internal_status();
}
inline void Response::unsafe_arena_set_allocated_status(
    ::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.status)
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::release_status() {
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.status)
  
  ::farm::nurture::core::contracts::common::RequestStatusResult* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::farm::nurture::core::contracts::common::RequestStatusResult>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::farm::nurture::core::contracts::common::RequestStatusResult* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.status)
  return _internal_mutable_status();
}
inline void Response::set_allocated_status(::farm::nurture::core::contracts::common::RequestStatusResult* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:farm.nurture.location.service.proto.Response.status)
}

// .farm.nurture.location.service.proto.InsertLocationResponse resInsertLocation = 3;
inline bool Response::_internal_has_resinsertlocation() const {
  return AResponse_case() == kResInsertLocation;
}
inline bool Response::has_resinsertlocation() const {
  return _internal_has_resinsertlocation();
}
inline void Response::set_has_resinsertlocation() {
  _oneof_case_[0] = kResInsertLocation;
}
inline void Response::clear_resinsertlocation() {
  if (_internal_has_resinsertlocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* Response::release_resinsertlocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocation)
  if (_internal_has_resinsertlocation()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::InsertLocationResponse* temp = AResponse_.resinsertlocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationResponse& Response::_internal_resinsertlocation() const {
  return _internal_has_resinsertlocation()
      ? *AResponse_.resinsertlocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationResponse&>(::farm::nurture::location::service::proto::_InsertLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationResponse& Response::resinsertlocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocation)
  return _internal_resinsertlocation();
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* Response::unsafe_arena_release_resinsertlocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocation)
  if (_internal_has_resinsertlocation()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::InsertLocationResponse* temp = AResponse_.resinsertlocation_;
    AResponse_.resinsertlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocation(::farm::nurture::location::service::proto::InsertLocationResponse* resinsertlocation) {
  clear_AResponse();
  if (resinsertlocation) {
    set_has_resinsertlocation();
    AResponse_.resinsertlocation_ = resinsertlocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocation)
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* Response::_internal_mutable_resinsertlocation() {
  if (!_internal_has_resinsertlocation()) {
    clear_AResponse();
    set_has_resinsertlocation();
    AResponse_.resinsertlocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationResponse >(GetArena());
  }
  return AResponse_.resinsertlocation_;
}
inline ::farm::nurture::location::service::proto::InsertLocationResponse* Response::mutable_resinsertlocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocation)
  return _internal_mutable_resinsertlocation();
}

// .farm.nurture.location.service.proto.BulkInsertLocationResponse resInsertLocationBulk = 4;
inline bool Response::_internal_has_resinsertlocationbulk() const {
  return AResponse_case() == kResInsertLocationBulk;
}
inline bool Response::has_resinsertlocationbulk() const {
  return _internal_has_resinsertlocationbulk();
}
inline void Response::set_has_resinsertlocationbulk() {
  _oneof_case_[0] = kResInsertLocationBulk;
}
inline void Response::clear_resinsertlocationbulk() {
  if (_internal_has_resinsertlocationbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocationbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Response::release_resinsertlocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
  if (_internal_has_resinsertlocationbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkInsertLocationResponse* temp = AResponse_.resinsertlocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationResponse& Response::_internal_resinsertlocationbulk() const {
  return _internal_has_resinsertlocationbulk()
      ? *AResponse_.resinsertlocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationResponse&>(::farm::nurture::location::service::proto::_BulkInsertLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationResponse& Response::resinsertlocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
  return _internal_resinsertlocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Response::unsafe_arena_release_resinsertlocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
  if (_internal_has_resinsertlocationbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkInsertLocationResponse* temp = AResponse_.resinsertlocationbulk_;
    AResponse_.resinsertlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocationbulk(::farm::nurture::location::service::proto::BulkInsertLocationResponse* resinsertlocationbulk) {
  clear_AResponse();
  if (resinsertlocationbulk) {
    set_has_resinsertlocationbulk();
    AResponse_.resinsertlocationbulk_ = resinsertlocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Response::_internal_mutable_resinsertlocationbulk() {
  if (!_internal_has_resinsertlocationbulk()) {
    clear_AResponse();
    set_has_resinsertlocationbulk();
    AResponse_.resinsertlocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationResponse >(GetArena());
  }
  return AResponse_.resinsertlocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationResponse* Response::mutable_resinsertlocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocationBulk)
  return _internal_mutable_resinsertlocationbulk();
}

// .farm.nurture.location.service.proto.InsertLocationS2CellResponse resInsertLocationS2Cell = 5;
inline bool Response::_internal_has_resinsertlocations2cell() const {
  return AResponse_case() == kResInsertLocationS2Cell;
}
inline bool Response::has_resinsertlocations2cell() const {
  return _internal_has_resinsertlocations2cell();
}
inline void Response::set_has_resinsertlocations2cell() {
  _oneof_case_[0] = kResInsertLocationS2Cell;
}
inline void Response::clear_resinsertlocations2cell() {
  if (_internal_has_resinsertlocations2cell()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocations2cell_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Response::release_resinsertlocations2cell() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
  if (_internal_has_resinsertlocations2cell()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* temp = AResponse_.resinsertlocations2cell_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocations2cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& Response::_internal_resinsertlocations2cell() const {
  return _internal_has_resinsertlocations2cell()
      ? *AResponse_.resinsertlocations2cell_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse&>(::farm::nurture::location::service::proto::_InsertLocationS2CellResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationS2CellResponse& Response::resinsertlocations2cell() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
  return _internal_resinsertlocations2cell();
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Response::unsafe_arena_release_resinsertlocations2cell() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
  if (_internal_has_resinsertlocations2cell()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* temp = AResponse_.resinsertlocations2cell_;
    AResponse_.resinsertlocations2cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocations2cell(::farm::nurture::location::service::proto::InsertLocationS2CellResponse* resinsertlocations2cell) {
  clear_AResponse();
  if (resinsertlocations2cell) {
    set_has_resinsertlocations2cell();
    AResponse_.resinsertlocations2cell_ = resinsertlocations2cell;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Response::_internal_mutable_resinsertlocations2cell() {
  if (!_internal_has_resinsertlocations2cell()) {
    clear_AResponse();
    set_has_resinsertlocations2cell();
    AResponse_.resinsertlocations2cell_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationS2CellResponse >(GetArena());
  }
  return AResponse_.resinsertlocations2cell_;
}
inline ::farm::nurture::location::service::proto::InsertLocationS2CellResponse* Response::mutable_resinsertlocations2cell() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocationS2Cell)
  return _internal_mutable_resinsertlocations2cell();
}

// .farm.nurture.location.service.proto.BulkInsertLocationS2CellResponse resInsertLocationS2CellBulk = 6;
inline bool Response::_internal_has_resinsertlocations2cellbulk() const {
  return AResponse_case() == kResInsertLocationS2CellBulk;
}
inline bool Response::has_resinsertlocations2cellbulk() const {
  return _internal_has_resinsertlocations2cellbulk();
}
inline void Response::set_has_resinsertlocations2cellbulk() {
  _oneof_case_[0] = kResInsertLocationS2CellBulk;
}
inline void Response::clear_resinsertlocations2cellbulk() {
  if (_internal_has_resinsertlocations2cellbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocations2cellbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Response::release_resinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
  if (_internal_has_resinsertlocations2cellbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* temp = AResponse_.resinsertlocations2cellbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocations2cellbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse& Response::_internal_resinsertlocations2cellbulk() const {
  return _internal_has_resinsertlocations2cellbulk()
      ? *AResponse_.resinsertlocations2cellbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse&>(::farm::nurture::location::service::proto::_BulkInsertLocationS2CellResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse& Response::resinsertlocations2cellbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
  return _internal_resinsertlocations2cellbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Response::unsafe_arena_release_resinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
  if (_internal_has_resinsertlocations2cellbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* temp = AResponse_.resinsertlocations2cellbulk_;
    AResponse_.resinsertlocations2cellbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocations2cellbulk(::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* resinsertlocations2cellbulk) {
  clear_AResponse();
  if (resinsertlocations2cellbulk) {
    set_has_resinsertlocations2cellbulk();
    AResponse_.resinsertlocations2cellbulk_ = resinsertlocations2cellbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Response::_internal_mutable_resinsertlocations2cellbulk() {
  if (!_internal_has_resinsertlocations2cellbulk()) {
    clear_AResponse();
    set_has_resinsertlocations2cellbulk();
    AResponse_.resinsertlocations2cellbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse >(GetArena());
  }
  return AResponse_.resinsertlocations2cellbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationS2CellResponse* Response::mutable_resinsertlocations2cellbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocationS2CellBulk)
  return _internal_mutable_resinsertlocations2cellbulk();
}

// .farm.nurture.location.service.proto.InsertConfigResponse resInsertConfig = 7;
inline bool Response::_internal_has_resinsertconfig() const {
  return AResponse_case() == kResInsertConfig;
}
inline bool Response::has_resinsertconfig() const {
  return _internal_has_resinsertconfig();
}
inline void Response::set_has_resinsertconfig() {
  _oneof_case_[0] = kResInsertConfig;
}
inline void Response::clear_resinsertconfig() {
  if (_internal_has_resinsertconfig()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertconfig_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* Response::release_resinsertconfig() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertConfig)
  if (_internal_has_resinsertconfig()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::InsertConfigResponse* temp = AResponse_.resinsertconfig_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertConfigResponse& Response::_internal_resinsertconfig() const {
  return _internal_has_resinsertconfig()
      ? *AResponse_.resinsertconfig_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertConfigResponse&>(::farm::nurture::location::service::proto::_InsertConfigResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertConfigResponse& Response::resinsertconfig() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertConfig)
  return _internal_resinsertconfig();
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* Response::unsafe_arena_release_resinsertconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertConfig)
  if (_internal_has_resinsertconfig()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::InsertConfigResponse* temp = AResponse_.resinsertconfig_;
    AResponse_.resinsertconfig_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertconfig(::farm::nurture::location::service::proto::InsertConfigResponse* resinsertconfig) {
  clear_AResponse();
  if (resinsertconfig) {
    set_has_resinsertconfig();
    AResponse_.resinsertconfig_ = resinsertconfig;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertConfig)
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* Response::_internal_mutable_resinsertconfig() {
  if (!_internal_has_resinsertconfig()) {
    clear_AResponse();
    set_has_resinsertconfig();
    AResponse_.resinsertconfig_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertConfigResponse >(GetArena());
  }
  return AResponse_.resinsertconfig_;
}
inline ::farm::nurture::location::service::proto::InsertConfigResponse* Response::mutable_resinsertconfig() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertConfig)
  return _internal_mutable_resinsertconfig();
}

// .farm.nurture.location.service.proto.BulkInsertConfigResponse resInsertConfigBulk = 8;
inline bool Response::_internal_has_resinsertconfigbulk() const {
  return AResponse_case() == kResInsertConfigBulk;
}
inline bool Response::has_resinsertconfigbulk() const {
  return _internal_has_resinsertconfigbulk();
}
inline void Response::set_has_resinsertconfigbulk() {
  _oneof_case_[0] = kResInsertConfigBulk;
}
inline void Response::clear_resinsertconfigbulk() {
  if (_internal_has_resinsertconfigbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertconfigbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Response::release_resinsertconfigbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
  if (_internal_has_resinsertconfigbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkInsertConfigResponse* temp = AResponse_.resinsertconfigbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertConfigResponse& Response::_internal_resinsertconfigbulk() const {
  return _internal_has_resinsertconfigbulk()
      ? *AResponse_.resinsertconfigbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertConfigResponse&>(::farm::nurture::location::service::proto::_BulkInsertConfigResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertConfigResponse& Response::resinsertconfigbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
  return _internal_resinsertconfigbulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Response::unsafe_arena_release_resinsertconfigbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
  if (_internal_has_resinsertconfigbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkInsertConfigResponse* temp = AResponse_.resinsertconfigbulk_;
    AResponse_.resinsertconfigbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertconfigbulk(::farm::nurture::location::service::proto::BulkInsertConfigResponse* resinsertconfigbulk) {
  clear_AResponse();
  if (resinsertconfigbulk) {
    set_has_resinsertconfigbulk();
    AResponse_.resinsertconfigbulk_ = resinsertconfigbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Response::_internal_mutable_resinsertconfigbulk() {
  if (!_internal_has_resinsertconfigbulk()) {
    clear_AResponse();
    set_has_resinsertconfigbulk();
    AResponse_.resinsertconfigbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertConfigResponse >(GetArena());
  }
  return AResponse_.resinsertconfigbulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertConfigResponse* Response::mutable_resinsertconfigbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertConfigBulk)
  return _internal_mutable_resinsertconfigbulk();
}

// .farm.nurture.location.service.proto.Location resFetchLocationById = 9;
inline bool Response::_internal_has_resfetchlocationbyid() const {
  return AResponse_case() == kResFetchLocationById;
}
inline bool Response::has_resfetchlocationbyid() const {
  return _internal_has_resfetchlocationbyid();
}
inline void Response::set_has_resfetchlocationbyid() {
  _oneof_case_[0] = kResFetchLocationById;
}
inline void Response::clear_resfetchlocationbyid() {
  if (_internal_has_resfetchlocationbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchlocationbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::Location* Response::release_resfetchlocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchLocationById)
  if (_internal_has_resfetchlocationbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::Location* temp = AResponse_.resfetchlocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchlocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::Location& Response::_internal_resfetchlocationbyid() const {
  return _internal_has_resfetchlocationbyid()
      ? *AResponse_.resfetchlocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::Location&>(::farm::nurture::location::service::proto::_Location_default_instance_);
}
inline const ::farm::nurture::location::service::proto::Location& Response::resfetchlocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchLocationById)
  return _internal_resfetchlocationbyid();
}
inline ::farm::nurture::location::service::proto::Location* Response::unsafe_arena_release_resfetchlocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchLocationById)
  if (_internal_has_resfetchlocationbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::Location* temp = AResponse_.resfetchlocationbyid_;
    AResponse_.resfetchlocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchlocationbyid(::farm::nurture::location::service::proto::Location* resfetchlocationbyid) {
  clear_AResponse();
  if (resfetchlocationbyid) {
    set_has_resfetchlocationbyid();
    AResponse_.resfetchlocationbyid_ = resfetchlocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchLocationById)
}
inline ::farm::nurture::location::service::proto::Location* Response::_internal_mutable_resfetchlocationbyid() {
  if (!_internal_has_resfetchlocationbyid()) {
    clear_AResponse();
    set_has_resfetchlocationbyid();
    AResponse_.resfetchlocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::Location >(GetArena());
  }
  return AResponse_.resfetchlocationbyid_;
}
inline ::farm::nurture::location::service::proto::Location* Response::mutable_resfetchlocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchLocationById)
  return _internal_mutable_resfetchlocationbyid();
}

// .farm.nurture.location.service.proto.Location resFetchLocationByCodeAndNamespace = 10;
inline bool Response::_internal_has_resfetchlocationbycodeandnamespace() const {
  return AResponse_case() == kResFetchLocationByCodeAndNamespace;
}
inline bool Response::has_resfetchlocationbycodeandnamespace() const {
  return _internal_has_resfetchlocationbycodeandnamespace();
}
inline void Response::set_has_resfetchlocationbycodeandnamespace() {
  _oneof_case_[0] = kResFetchLocationByCodeAndNamespace;
}
inline void Response::clear_resfetchlocationbycodeandnamespace() {
  if (_internal_has_resfetchlocationbycodeandnamespace()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchlocationbycodeandnamespace_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::Location* Response::release_resfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
  if (_internal_has_resfetchlocationbycodeandnamespace()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::Location* temp = AResponse_.resfetchlocationbycodeandnamespace_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchlocationbycodeandnamespace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::Location& Response::_internal_resfetchlocationbycodeandnamespace() const {
  return _internal_has_resfetchlocationbycodeandnamespace()
      ? *AResponse_.resfetchlocationbycodeandnamespace_
      : reinterpret_cast< ::farm::nurture::location::service::proto::Location&>(::farm::nurture::location::service::proto::_Location_default_instance_);
}
inline const ::farm::nurture::location::service::proto::Location& Response::resfetchlocationbycodeandnamespace() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
  return _internal_resfetchlocationbycodeandnamespace();
}
inline ::farm::nurture::location::service::proto::Location* Response::unsafe_arena_release_resfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
  if (_internal_has_resfetchlocationbycodeandnamespace()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::Location* temp = AResponse_.resfetchlocationbycodeandnamespace_;
    AResponse_.resfetchlocationbycodeandnamespace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchlocationbycodeandnamespace(::farm::nurture::location::service::proto::Location* resfetchlocationbycodeandnamespace) {
  clear_AResponse();
  if (resfetchlocationbycodeandnamespace) {
    set_has_resfetchlocationbycodeandnamespace();
    AResponse_.resfetchlocationbycodeandnamespace_ = resfetchlocationbycodeandnamespace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
}
inline ::farm::nurture::location::service::proto::Location* Response::_internal_mutable_resfetchlocationbycodeandnamespace() {
  if (!_internal_has_resfetchlocationbycodeandnamespace()) {
    clear_AResponse();
    set_has_resfetchlocationbycodeandnamespace();
    AResponse_.resfetchlocationbycodeandnamespace_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::Location >(GetArena());
  }
  return AResponse_.resfetchlocationbycodeandnamespace_;
}
inline ::farm::nurture::location::service::proto::Location* Response::mutable_resfetchlocationbycodeandnamespace() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchLocationByCodeAndNamespace)
  return _internal_mutable_resfetchlocationbycodeandnamespace();
}

// .farm.nurture.location.service.proto.S2Cell resFetchS2CellById = 11;
inline bool Response::_internal_has_resfetchs2cellbyid() const {
  return AResponse_case() == kResFetchS2CellById;
}
inline bool Response::has_resfetchs2cellbyid() const {
  return _internal_has_resfetchs2cellbyid();
}
inline void Response::set_has_resfetchs2cellbyid() {
  _oneof_case_[0] = kResFetchS2CellById;
}
inline void Response::clear_resfetchs2cellbyid() {
  if (_internal_has_resfetchs2cellbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchs2cellbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::release_resfetchs2cellbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchS2CellById)
  if (_internal_has_resfetchs2cellbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::S2Cell* temp = AResponse_.resfetchs2cellbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchs2cellbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::S2Cell& Response::_internal_resfetchs2cellbyid() const {
  return _internal_has_resfetchs2cellbyid()
      ? *AResponse_.resfetchs2cellbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::S2Cell&>(::farm::nurture::location::service::proto::_S2Cell_default_instance_);
}
inline const ::farm::nurture::location::service::proto::S2Cell& Response::resfetchs2cellbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchS2CellById)
  return _internal_resfetchs2cellbyid();
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::unsafe_arena_release_resfetchs2cellbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchS2CellById)
  if (_internal_has_resfetchs2cellbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::S2Cell* temp = AResponse_.resfetchs2cellbyid_;
    AResponse_.resfetchs2cellbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchs2cellbyid(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbyid) {
  clear_AResponse();
  if (resfetchs2cellbyid) {
    set_has_resfetchs2cellbyid();
    AResponse_.resfetchs2cellbyid_ = resfetchs2cellbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellById)
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::_internal_mutable_resfetchs2cellbyid() {
  if (!_internal_has_resfetchs2cellbyid()) {
    clear_AResponse();
    set_has_resfetchs2cellbyid();
    AResponse_.resfetchs2cellbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::S2Cell >(GetArena());
  }
  return AResponse_.resfetchs2cellbyid_;
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::mutable_resfetchs2cellbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchS2CellById)
  return _internal_mutable_resfetchs2cellbyid();
}

// .farm.nurture.location.service.proto.S2Cell resFetchS2CellByLocation = 12;
inline bool Response::_internal_has_resfetchs2cellbylocation() const {
  return AResponse_case() == kResFetchS2CellByLocation;
}
inline bool Response::has_resfetchs2cellbylocation() const {
  return _internal_has_resfetchs2cellbylocation();
}
inline void Response::set_has_resfetchs2cellbylocation() {
  _oneof_case_[0] = kResFetchS2CellByLocation;
}
inline void Response::clear_resfetchs2cellbylocation() {
  if (_internal_has_resfetchs2cellbylocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchs2cellbylocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::release_resfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
  if (_internal_has_resfetchs2cellbylocation()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::S2Cell* temp = AResponse_.resfetchs2cellbylocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchs2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::S2Cell& Response::_internal_resfetchs2cellbylocation() const {
  return _internal_has_resfetchs2cellbylocation()
      ? *AResponse_.resfetchs2cellbylocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::S2Cell&>(::farm::nurture::location::service::proto::_S2Cell_default_instance_);
}
inline const ::farm::nurture::location::service::proto::S2Cell& Response::resfetchs2cellbylocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
  return _internal_resfetchs2cellbylocation();
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::unsafe_arena_release_resfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
  if (_internal_has_resfetchs2cellbylocation()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::S2Cell* temp = AResponse_.resfetchs2cellbylocation_;
    AResponse_.resfetchs2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchs2cellbylocation(::farm::nurture::location::service::proto::S2Cell* resfetchs2cellbylocation) {
  clear_AResponse();
  if (resfetchs2cellbylocation) {
    set_has_resfetchs2cellbylocation();
    AResponse_.resfetchs2cellbylocation_ = resfetchs2cellbylocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::_internal_mutable_resfetchs2cellbylocation() {
  if (!_internal_has_resfetchs2cellbylocation()) {
    clear_AResponse();
    set_has_resfetchs2cellbylocation();
    AResponse_.resfetchs2cellbylocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::S2Cell >(GetArena());
  }
  return AResponse_.resfetchs2cellbylocation_;
}
inline ::farm::nurture::location::service::proto::S2Cell* Response::mutable_resfetchs2cellbylocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchS2CellByLocation)
  return _internal_mutable_resfetchs2cellbylocation();
}

// .farm.nurture.location.service.proto.LocationS2Cells resFetchS2CellByLocationId = 13;
inline bool Response::_internal_has_resfetchs2cellbylocationid() const {
  return AResponse_case() == kResFetchS2CellByLocationId;
}
inline bool Response::has_resfetchs2cellbylocationid() const {
  return _internal_has_resfetchs2cellbylocationid();
}
inline void Response::set_has_resfetchs2cellbylocationid() {
  _oneof_case_[0] = kResFetchS2CellByLocationId;
}
inline void Response::clear_resfetchs2cellbylocationid() {
  if (_internal_has_resfetchs2cellbylocationid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchs2cellbylocationid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::LocationS2Cells* Response::release_resfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
  if (_internal_has_resfetchs2cellbylocationid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::LocationS2Cells* temp = AResponse_.resfetchs2cellbylocationid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchs2cellbylocationid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::LocationS2Cells& Response::_internal_resfetchs2cellbylocationid() const {
  return _internal_has_resfetchs2cellbylocationid()
      ? *AResponse_.resfetchs2cellbylocationid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::LocationS2Cells&>(::farm::nurture::location::service::proto::_LocationS2Cells_default_instance_);
}
inline const ::farm::nurture::location::service::proto::LocationS2Cells& Response::resfetchs2cellbylocationid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
  return _internal_resfetchs2cellbylocationid();
}
inline ::farm::nurture::location::service::proto::LocationS2Cells* Response::unsafe_arena_release_resfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
  if (_internal_has_resfetchs2cellbylocationid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::LocationS2Cells* temp = AResponse_.resfetchs2cellbylocationid_;
    AResponse_.resfetchs2cellbylocationid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchs2cellbylocationid(::farm::nurture::location::service::proto::LocationS2Cells* resfetchs2cellbylocationid) {
  clear_AResponse();
  if (resfetchs2cellbylocationid) {
    set_has_resfetchs2cellbylocationid();
    AResponse_.resfetchs2cellbylocationid_ = resfetchs2cellbylocationid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
}
inline ::farm::nurture::location::service::proto::LocationS2Cells* Response::_internal_mutable_resfetchs2cellbylocationid() {
  if (!_internal_has_resfetchs2cellbylocationid()) {
    clear_AResponse();
    set_has_resfetchs2cellbylocationid();
    AResponse_.resfetchs2cellbylocationid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::LocationS2Cells >(GetArena());
  }
  return AResponse_.resfetchs2cellbylocationid_;
}
inline ::farm::nurture::location::service::proto::LocationS2Cells* Response::mutable_resfetchs2cellbylocationid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchS2CellByLocationId)
  return _internal_mutable_resfetchs2cellbylocationid();
}

// .farm.nurture.location.service.proto.UpdateLocationByIdResponse resUpdateLocationById = 14;
inline bool Response::_internal_has_resupdatelocationbyid() const {
  return AResponse_case() == kResUpdateLocationById;
}
inline bool Response::has_resupdatelocationbyid() const {
  return _internal_has_resupdatelocationbyid();
}
inline void Response::set_has_resupdatelocationbyid() {
  _oneof_case_[0] = kResUpdateLocationById;
}
inline void Response::clear_resupdatelocationbyid() {
  if (_internal_has_resupdatelocationbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Response::release_resupdatelocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationById)
  if (_internal_has_resupdatelocationbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* temp = AResponse_.resupdatelocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& Response::_internal_resupdatelocationbyid() const {
  return _internal_has_resupdatelocationbyid()
      ? *AResponse_.resupdatelocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse&>(::farm::nurture::location::service::proto::_UpdateLocationByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationByIdResponse& Response::resupdatelocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationById)
  return _internal_resupdatelocationbyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Response::unsafe_arena_release_resupdatelocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationById)
  if (_internal_has_resupdatelocationbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* temp = AResponse_.resupdatelocationbyid_;
    AResponse_.resupdatelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationbyid(::farm::nurture::location::service::proto::UpdateLocationByIdResponse* resupdatelocationbyid) {
  clear_AResponse();
  if (resupdatelocationbyid) {
    set_has_resupdatelocationbyid();
    AResponse_.resupdatelocationbyid_ = resupdatelocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Response::_internal_mutable_resupdatelocationbyid() {
  if (!_internal_has_resupdatelocationbyid()) {
    clear_AResponse();
    set_has_resupdatelocationbyid();
    AResponse_.resupdatelocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationbyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationByIdResponse* Response::mutable_resupdatelocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationById)
  return _internal_mutable_resupdatelocationbyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationByIdResponse resUpdateLocationByIdBulk = 15;
inline bool Response::_internal_has_resupdatelocationbyidbulk() const {
  return AResponse_case() == kResUpdateLocationByIdBulk;
}
inline bool Response::has_resupdatelocationbyidbulk() const {
  return _internal_has_resupdatelocationbyidbulk();
}
inline void Response::set_has_resupdatelocationbyidbulk() {
  _oneof_case_[0] = kResUpdateLocationByIdBulk;
}
inline void Response::clear_resupdatelocationbyidbulk() {
  if (_internal_has_resupdatelocationbyidbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationbyidbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Response::release_resupdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
  if (_internal_has_resupdatelocationbyidbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* temp = AResponse_.resupdatelocationbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse& Response::_internal_resupdatelocationbyidbulk() const {
  return _internal_has_resupdatelocationbyidbulk()
      ? *AResponse_.resupdatelocationbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse&>(::farm::nurture::location::service::proto::_BulkUpdateLocationByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse& Response::resupdatelocationbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
  return _internal_resupdatelocationbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Response::unsafe_arena_release_resupdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
  if (_internal_has_resupdatelocationbyidbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* temp = AResponse_.resupdatelocationbyidbulk_;
    AResponse_.resupdatelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* resupdatelocationbyidbulk) {
  clear_AResponse();
  if (resupdatelocationbyidbulk) {
    set_has_resupdatelocationbyidbulk();
    AResponse_.resupdatelocationbyidbulk_ = resupdatelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Response::_internal_mutable_resupdatelocationbyidbulk() {
  if (!_internal_has_resupdatelocationbyidbulk()) {
    clear_AResponse();
    set_has_resupdatelocationbyidbulk();
    AResponse_.resupdatelocationbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationByIdResponse* Response::mutable_resupdatelocationbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationByIdBulk)
  return _internal_mutable_resupdatelocationbyidbulk();
}

// .farm.nurture.location.service.proto.UpdateLocationLabelByIdResponse resUpdateLocationLabelById = 16;
inline bool Response::_internal_has_resupdatelocationlabelbyid() const {
  return AResponse_case() == kResUpdateLocationLabelById;
}
inline bool Response::has_resupdatelocationlabelbyid() const {
  return _internal_has_resupdatelocationlabelbyid();
}
inline void Response::set_has_resupdatelocationlabelbyid() {
  _oneof_case_[0] = kResUpdateLocationLabelById;
}
inline void Response::clear_resupdatelocationlabelbyid() {
  if (_internal_has_resupdatelocationlabelbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationlabelbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Response::release_resupdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
  if (_internal_has_resupdatelocationlabelbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* temp = AResponse_.resupdatelocationlabelbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationlabelbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& Response::_internal_resupdatelocationlabelbyid() const {
  return _internal_has_resupdatelocationlabelbyid()
      ? *AResponse_.resupdatelocationlabelbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse&>(::farm::nurture::location::service::proto::_UpdateLocationLabelByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse& Response::resupdatelocationlabelbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
  return _internal_resupdatelocationlabelbyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Response::unsafe_arena_release_resupdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
  if (_internal_has_resupdatelocationlabelbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* temp = AResponse_.resupdatelocationlabelbyid_;
    AResponse_.resupdatelocationlabelbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationlabelbyid(::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* resupdatelocationlabelbyid) {
  clear_AResponse();
  if (resupdatelocationlabelbyid) {
    set_has_resupdatelocationlabelbyid();
    AResponse_.resupdatelocationlabelbyid_ = resupdatelocationlabelbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Response::_internal_mutable_resupdatelocationlabelbyid() {
  if (!_internal_has_resupdatelocationlabelbyid()) {
    clear_AResponse();
    set_has_resupdatelocationlabelbyid();
    AResponse_.resupdatelocationlabelbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationlabelbyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationLabelByIdResponse* Response::mutable_resupdatelocationlabelbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationLabelById)
  return _internal_mutable_resupdatelocationlabelbyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationLabelByIdResponse resUpdateLocationLabelByIdBulk = 17;
inline bool Response::_internal_has_resupdatelocationlabelbyidbulk() const {
  return AResponse_case() == kResUpdateLocationLabelByIdBulk;
}
inline bool Response::has_resupdatelocationlabelbyidbulk() const {
  return _internal_has_resupdatelocationlabelbyidbulk();
}
inline void Response::set_has_resupdatelocationlabelbyidbulk() {
  _oneof_case_[0] = kResUpdateLocationLabelByIdBulk;
}
inline void Response::clear_resupdatelocationlabelbyidbulk() {
  if (_internal_has_resupdatelocationlabelbyidbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationlabelbyidbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Response::release_resupdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
  if (_internal_has_resupdatelocationlabelbyidbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* temp = AResponse_.resupdatelocationlabelbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationlabelbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse& Response::_internal_resupdatelocationlabelbyidbulk() const {
  return _internal_has_resupdatelocationlabelbyidbulk()
      ? *AResponse_.resupdatelocationlabelbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse&>(::farm::nurture::location::service::proto::_BulkUpdateLocationLabelByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse& Response::resupdatelocationlabelbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
  return _internal_resupdatelocationlabelbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Response::unsafe_arena_release_resupdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
  if (_internal_has_resupdatelocationlabelbyidbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* temp = AResponse_.resupdatelocationlabelbyidbulk_;
    AResponse_.resupdatelocationlabelbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationlabelbyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* resupdatelocationlabelbyidbulk) {
  clear_AResponse();
  if (resupdatelocationlabelbyidbulk) {
    set_has_resupdatelocationlabelbyidbulk();
    AResponse_.resupdatelocationlabelbyidbulk_ = resupdatelocationlabelbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Response::_internal_mutable_resupdatelocationlabelbyidbulk() {
  if (!_internal_has_resupdatelocationlabelbyidbulk()) {
    clear_AResponse();
    set_has_resupdatelocationlabelbyidbulk();
    AResponse_.resupdatelocationlabelbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationlabelbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationLabelByIdResponse* Response::mutable_resupdatelocationlabelbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationLabelByIdBulk)
  return _internal_mutable_resupdatelocationlabelbyidbulk();
}

// .farm.nurture.location.service.proto.UpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocation = 18;
inline bool Response::_internal_has_resupdatedeletes2cellbylocation() const {
  return AResponse_case() == kResUpdateDeleteS2CellByLocation;
}
inline bool Response::has_resupdatedeletes2cellbylocation() const {
  return _internal_has_resupdatedeletes2cellbylocation();
}
inline void Response::set_has_resupdatedeletes2cellbylocation() {
  _oneof_case_[0] = kResUpdateDeleteS2CellByLocation;
}
inline void Response::clear_resupdatedeletes2cellbylocation() {
  if (_internal_has_resupdatedeletes2cellbylocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatedeletes2cellbylocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Response::release_resupdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
  if (_internal_has_resupdatedeletes2cellbylocation()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* temp = AResponse_.resupdatedeletes2cellbylocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatedeletes2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& Response::_internal_resupdatedeletes2cellbylocation() const {
  return _internal_has_resupdatedeletes2cellbylocation()
      ? *AResponse_.resupdatedeletes2cellbylocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse&>(::farm::nurture::location::service::proto::_UpdateDeleteS2CellByLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse& Response::resupdatedeletes2cellbylocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
  return _internal_resupdatedeletes2cellbylocation();
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Response::unsafe_arena_release_resupdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
  if (_internal_has_resupdatedeletes2cellbylocation()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* temp = AResponse_.resupdatedeletes2cellbylocation_;
    AResponse_.resupdatedeletes2cellbylocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatedeletes2cellbylocation(::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocation) {
  clear_AResponse();
  if (resupdatedeletes2cellbylocation) {
    set_has_resupdatedeletes2cellbylocation();
    AResponse_.resupdatedeletes2cellbylocation_ = resupdatedeletes2cellbylocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Response::_internal_mutable_resupdatedeletes2cellbylocation() {
  if (!_internal_has_resupdatedeletes2cellbylocation()) {
    clear_AResponse();
    set_has_resupdatedeletes2cellbylocation();
    AResponse_.resupdatedeletes2cellbylocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse >(GetArena());
  }
  return AResponse_.resupdatedeletes2cellbylocation_;
}
inline ::farm::nurture::location::service::proto::UpdateDeleteS2CellByLocationResponse* Response::mutable_resupdatedeletes2cellbylocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocation)
  return _internal_mutable_resupdatedeletes2cellbylocation();
}

// .farm.nurture.location.service.proto.BulkUpdateDeleteS2CellByLocationResponse resUpdateDeleteS2CellByLocationBulk = 19;
inline bool Response::_internal_has_resupdatedeletes2cellbylocationbulk() const {
  return AResponse_case() == kResUpdateDeleteS2CellByLocationBulk;
}
inline bool Response::has_resupdatedeletes2cellbylocationbulk() const {
  return _internal_has_resupdatedeletes2cellbylocationbulk();
}
inline void Response::set_has_resupdatedeletes2cellbylocationbulk() {
  _oneof_case_[0] = kResUpdateDeleteS2CellByLocationBulk;
}
inline void Response::clear_resupdatedeletes2cellbylocationbulk() {
  if (_internal_has_resupdatedeletes2cellbylocationbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatedeletes2cellbylocationbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Response::release_resupdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
  if (_internal_has_resupdatedeletes2cellbylocationbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* temp = AResponse_.resupdatedeletes2cellbylocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatedeletes2cellbylocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse& Response::_internal_resupdatedeletes2cellbylocationbulk() const {
  return _internal_has_resupdatedeletes2cellbylocationbulk()
      ? *AResponse_.resupdatedeletes2cellbylocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse&>(::farm::nurture::location::service::proto::_BulkUpdateDeleteS2CellByLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse& Response::resupdatedeletes2cellbylocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
  return _internal_resupdatedeletes2cellbylocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Response::unsafe_arena_release_resupdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
  if (_internal_has_resupdatedeletes2cellbylocationbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* temp = AResponse_.resupdatedeletes2cellbylocationbulk_;
    AResponse_.resupdatedeletes2cellbylocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatedeletes2cellbylocationbulk(::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* resupdatedeletes2cellbylocationbulk) {
  clear_AResponse();
  if (resupdatedeletes2cellbylocationbulk) {
    set_has_resupdatedeletes2cellbylocationbulk();
    AResponse_.resupdatedeletes2cellbylocationbulk_ = resupdatedeletes2cellbylocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Response::_internal_mutable_resupdatedeletes2cellbylocationbulk() {
  if (!_internal_has_resupdatedeletes2cellbylocationbulk()) {
    clear_AResponse();
    set_has_resupdatedeletes2cellbylocationbulk();
    AResponse_.resupdatedeletes2cellbylocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse >(GetArena());
  }
  return AResponse_.resupdatedeletes2cellbylocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateDeleteS2CellByLocationResponse* Response::mutable_resupdatedeletes2cellbylocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateDeleteS2CellByLocationBulk)
  return _internal_mutable_resupdatedeletes2cellbylocationbulk();
}

// .farm.nurture.location.service.proto.Config resFetchConfigById = 20;
inline bool Response::_internal_has_resfetchconfigbyid() const {
  return AResponse_case() == kResFetchConfigById;
}
inline bool Response::has_resfetchconfigbyid() const {
  return _internal_has_resfetchconfigbyid();
}
inline void Response::set_has_resfetchconfigbyid() {
  _oneof_case_[0] = kResFetchConfigById;
}
inline void Response::clear_resfetchconfigbyid() {
  if (_internal_has_resfetchconfigbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchconfigbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::Config* Response::release_resfetchconfigbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchConfigById)
  if (_internal_has_resfetchconfigbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::Config* temp = AResponse_.resfetchconfigbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchconfigbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::Config& Response::_internal_resfetchconfigbyid() const {
  return _internal_has_resfetchconfigbyid()
      ? *AResponse_.resfetchconfigbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::Config&>(::farm::nurture::location::service::proto::_Config_default_instance_);
}
inline const ::farm::nurture::location::service::proto::Config& Response::resfetchconfigbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchConfigById)
  return _internal_resfetchconfigbyid();
}
inline ::farm::nurture::location::service::proto::Config* Response::unsafe_arena_release_resfetchconfigbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchConfigById)
  if (_internal_has_resfetchconfigbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::Config* temp = AResponse_.resfetchconfigbyid_;
    AResponse_.resfetchconfigbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchconfigbyid(::farm::nurture::location::service::proto::Config* resfetchconfigbyid) {
  clear_AResponse();
  if (resfetchconfigbyid) {
    set_has_resfetchconfigbyid();
    AResponse_.resfetchconfigbyid_ = resfetchconfigbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchConfigById)
}
inline ::farm::nurture::location::service::proto::Config* Response::_internal_mutable_resfetchconfigbyid() {
  if (!_internal_has_resfetchconfigbyid()) {
    clear_AResponse();
    set_has_resfetchconfigbyid();
    AResponse_.resfetchconfigbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::Config >(GetArena());
  }
  return AResponse_.resfetchconfigbyid_;
}
inline ::farm::nurture::location::service::proto::Config* Response::mutable_resfetchconfigbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchConfigById)
  return _internal_mutable_resfetchconfigbyid();
}

// .farm.nurture.location.service.proto.AddLocationResponse resAddLocation = 21;
inline bool Response::_internal_has_resaddlocation() const {
  return AResponse_case() == kResAddLocation;
}
inline bool Response::has_resaddlocation() const {
  return _internal_has_resaddlocation();
}
inline void Response::set_has_resaddlocation() {
  _oneof_case_[0] = kResAddLocation;
}
inline void Response::clear_resaddlocation() {
  if (_internal_has_resaddlocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddlocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* Response::release_resaddlocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resAddLocation)
  if (_internal_has_resaddlocation()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::AddLocationResponse* temp = AResponse_.resaddlocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::AddLocationResponse& Response::_internal_resaddlocation() const {
  return _internal_has_resaddlocation()
      ? *AResponse_.resaddlocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::AddLocationResponse&>(::farm::nurture::location::service::proto::_AddLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::AddLocationResponse& Response::resaddlocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resAddLocation)
  return _internal_resaddlocation();
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* Response::unsafe_arena_release_resaddlocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resAddLocation)
  if (_internal_has_resaddlocation()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::AddLocationResponse* temp = AResponse_.resaddlocation_;
    AResponse_.resaddlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddlocation(::farm::nurture::location::service::proto::AddLocationResponse* resaddlocation) {
  clear_AResponse();
  if (resaddlocation) {
    set_has_resaddlocation();
    AResponse_.resaddlocation_ = resaddlocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resAddLocation)
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* Response::_internal_mutable_resaddlocation() {
  if (!_internal_has_resaddlocation()) {
    clear_AResponse();
    set_has_resaddlocation();
    AResponse_.resaddlocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::AddLocationResponse >(GetArena());
  }
  return AResponse_.resaddlocation_;
}
inline ::farm::nurture::location::service::proto::AddLocationResponse* Response::mutable_resaddlocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resAddLocation)
  return _internal_mutable_resaddlocation();
}

// .farm.nurture.location.service.proto.BulkAddLocationResponse resAddLocationBulk = 22;
inline bool Response::_internal_has_resaddlocationbulk() const {
  return AResponse_case() == kResAddLocationBulk;
}
inline bool Response::has_resaddlocationbulk() const {
  return _internal_has_resaddlocationbulk();
}
inline void Response::set_has_resaddlocationbulk() {
  _oneof_case_[0] = kResAddLocationBulk;
}
inline void Response::clear_resaddlocationbulk() {
  if (_internal_has_resaddlocationbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddlocationbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkAddLocationResponse* Response::release_resaddlocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resAddLocationBulk)
  if (_internal_has_resaddlocationbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkAddLocationResponse* temp = AResponse_.resaddlocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkAddLocationResponse& Response::_internal_resaddlocationbulk() const {
  return _internal_has_resaddlocationbulk()
      ? *AResponse_.resaddlocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkAddLocationResponse&>(::farm::nurture::location::service::proto::_BulkAddLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkAddLocationResponse& Response::resaddlocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resAddLocationBulk)
  return _internal_resaddlocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkAddLocationResponse* Response::unsafe_arena_release_resaddlocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resAddLocationBulk)
  if (_internal_has_resaddlocationbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkAddLocationResponse* temp = AResponse_.resaddlocationbulk_;
    AResponse_.resaddlocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddlocationbulk(::farm::nurture::location::service::proto::BulkAddLocationResponse* resaddlocationbulk) {
  clear_AResponse();
  if (resaddlocationbulk) {
    set_has_resaddlocationbulk();
    AResponse_.resaddlocationbulk_ = resaddlocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resAddLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkAddLocationResponse* Response::_internal_mutable_resaddlocationbulk() {
  if (!_internal_has_resaddlocationbulk()) {
    clear_AResponse();
    set_has_resaddlocationbulk();
    AResponse_.resaddlocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddLocationResponse >(GetArena());
  }
  return AResponse_.resaddlocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkAddLocationResponse* Response::mutable_resaddlocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resAddLocationBulk)
  return _internal_mutable_resaddlocationbulk();
}

// .farm.nurture.location.service.proto.UpdateLocationResponse resUpdateLocation = 23;
inline bool Response::_internal_has_resupdatelocation() const {
  return AResponse_case() == kResUpdateLocation;
}
inline bool Response::has_resupdatelocation() const {
  return _internal_has_resupdatelocation();
}
inline void Response::set_has_resupdatelocation() {
  _oneof_case_[0] = kResUpdateLocation;
}
inline void Response::clear_resupdatelocation() {
  if (_internal_has_resupdatelocation()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocation_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* Response::release_resupdatelocation() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocation)
  if (_internal_has_resupdatelocation()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::UpdateLocationResponse* temp = AResponse_.resupdatelocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationResponse& Response::_internal_resupdatelocation() const {
  return _internal_has_resupdatelocation()
      ? *AResponse_.resupdatelocation_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationResponse&>(::farm::nurture::location::service::proto::_UpdateLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationResponse& Response::resupdatelocation() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocation)
  return _internal_resupdatelocation();
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* Response::unsafe_arena_release_resupdatelocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocation)
  if (_internal_has_resupdatelocation()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::UpdateLocationResponse* temp = AResponse_.resupdatelocation_;
    AResponse_.resupdatelocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocation(::farm::nurture::location::service::proto::UpdateLocationResponse* resupdatelocation) {
  clear_AResponse();
  if (resupdatelocation) {
    set_has_resupdatelocation();
    AResponse_.resupdatelocation_ = resupdatelocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocation)
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* Response::_internal_mutable_resupdatelocation() {
  if (!_internal_has_resupdatelocation()) {
    clear_AResponse();
    set_has_resupdatelocation();
    AResponse_.resupdatelocation_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationResponse >(GetArena());
  }
  return AResponse_.resupdatelocation_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationResponse* Response::mutable_resupdatelocation() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocation)
  return _internal_mutable_resupdatelocation();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationResponse resUpdateLocationBulk = 24;
inline bool Response::_internal_has_resupdatelocationbulk() const {
  return AResponse_case() == kResUpdateLocationBulk;
}
inline bool Response::has_resupdatelocationbulk() const {
  return _internal_has_resupdatelocationbulk();
}
inline void Response::set_has_resupdatelocationbulk() {
  _oneof_case_[0] = kResUpdateLocationBulk;
}
inline void Response::clear_resupdatelocationbulk() {
  if (_internal_has_resupdatelocationbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Response::release_resupdatelocationbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
  if (_internal_has_resupdatelocationbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* temp = AResponse_.resupdatelocationbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse& Response::_internal_resupdatelocationbulk() const {
  return _internal_has_resupdatelocationbulk()
      ? *AResponse_.resupdatelocationbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse&>(::farm::nurture::location::service::proto::_BulkUpdateLocationResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationResponse& Response::resupdatelocationbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
  return _internal_resupdatelocationbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Response::unsafe_arena_release_resupdatelocationbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
  if (_internal_has_resupdatelocationbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* temp = AResponse_.resupdatelocationbulk_;
    AResponse_.resupdatelocationbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationbulk(::farm::nurture::location::service::proto::BulkUpdateLocationResponse* resupdatelocationbulk) {
  clear_AResponse();
  if (resupdatelocationbulk) {
    set_has_resupdatelocationbulk();
    AResponse_.resupdatelocationbulk_ = resupdatelocationbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Response::_internal_mutable_resupdatelocationbulk() {
  if (!_internal_has_resupdatelocationbulk()) {
    clear_AResponse();
    set_has_resupdatelocationbulk();
    AResponse_.resupdatelocationbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationResponse >(GetArena());
  }
  return AResponse_.resupdatelocationbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationResponse* Response::mutable_resupdatelocationbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationBulk)
  return _internal_mutable_resupdatelocationbulk();
}

// .farm.nurture.location.service.proto.GetLocationsWithBoundaryResponse resGetLocationsWithBoundary = 25;
inline bool Response::_internal_has_resgetlocationswithboundary() const {
  return AResponse_case() == kResGetLocationsWithBoundary;
}
inline bool Response::has_resgetlocationswithboundary() const {
  return _internal_has_resgetlocationswithboundary();
}
inline void Response::set_has_resgetlocationswithboundary() {
  _oneof_case_[0] = kResGetLocationsWithBoundary;
}
inline void Response::clear_resgetlocationswithboundary() {
  if (_internal_has_resgetlocationswithboundary()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetlocationswithboundary_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Response::release_resgetlocationswithboundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
  if (_internal_has_resgetlocationswithboundary()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* temp = AResponse_.resgetlocationswithboundary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetlocationswithboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse& Response::_internal_resgetlocationswithboundary() const {
  return _internal_has_resgetlocationswithboundary()
      ? *AResponse_.resgetlocationswithboundary_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse&>(::farm::nurture::location::service::proto::_GetLocationsWithBoundaryResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse& Response::resgetlocationswithboundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
  return _internal_resgetlocationswithboundary();
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Response::unsafe_arena_release_resgetlocationswithboundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
  if (_internal_has_resgetlocationswithboundary()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* temp = AResponse_.resgetlocationswithboundary_;
    AResponse_.resgetlocationswithboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetlocationswithboundary(::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* resgetlocationswithboundary) {
  clear_AResponse();
  if (resgetlocationswithboundary) {
    set_has_resgetlocationswithboundary();
    AResponse_.resgetlocationswithboundary_ = resgetlocationswithboundary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Response::_internal_mutable_resgetlocationswithboundary() {
  if (!_internal_has_resgetlocationswithboundary()) {
    clear_AResponse();
    set_has_resgetlocationswithboundary();
    AResponse_.resgetlocationswithboundary_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse >(GetArena());
  }
  return AResponse_.resgetlocationswithboundary_;
}
inline ::farm::nurture::location::service::proto::GetLocationsWithBoundaryResponse* Response::mutable_resgetlocationswithboundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resGetLocationsWithBoundary)
  return _internal_mutable_resgetlocationswithboundary();
}

// .farm.nurture.location.service.proto.GetLocationsResponse resGetLocations = 26;
inline bool Response::_internal_has_resgetlocations() const {
  return AResponse_case() == kResGetLocations;
}
inline bool Response::has_resgetlocations() const {
  return _internal_has_resgetlocations();
}
inline void Response::set_has_resgetlocations() {
  _oneof_case_[0] = kResGetLocations;
}
inline void Response::clear_resgetlocations() {
  if (_internal_has_resgetlocations()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetlocations_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationsResponse* Response::release_resgetlocations() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resGetLocations)
  if (_internal_has_resgetlocations()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::GetLocationsResponse* temp = AResponse_.resgetlocations_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetlocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationsResponse& Response::_internal_resgetlocations() const {
  return _internal_has_resgetlocations()
      ? *AResponse_.resgetlocations_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationsResponse&>(::farm::nurture::location::service::proto::_GetLocationsResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationsResponse& Response::resgetlocations() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resGetLocations)
  return _internal_resgetlocations();
}
inline ::farm::nurture::location::service::proto::GetLocationsResponse* Response::unsafe_arena_release_resgetlocations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resGetLocations)
  if (_internal_has_resgetlocations()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::GetLocationsResponse* temp = AResponse_.resgetlocations_;
    AResponse_.resgetlocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetlocations(::farm::nurture::location::service::proto::GetLocationsResponse* resgetlocations) {
  clear_AResponse();
  if (resgetlocations) {
    set_has_resgetlocations();
    AResponse_.resgetlocations_ = resgetlocations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resGetLocations)
}
inline ::farm::nurture::location::service::proto::GetLocationsResponse* Response::_internal_mutable_resgetlocations() {
  if (!_internal_has_resgetlocations()) {
    clear_AResponse();
    set_has_resgetlocations();
    AResponse_.resgetlocations_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationsResponse >(GetArena());
  }
  return AResponse_.resgetlocations_;
}
inline ::farm::nurture::location::service::proto::GetLocationsResponse* Response::mutable_resgetlocations() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resGetLocations)
  return _internal_mutable_resgetlocations();
}

// .farm.nurture.location.service.proto.GetChildGeographiesResponse resGetChildGeographies = 27;
inline bool Response::_internal_has_resgetchildgeographies() const {
  return AResponse_case() == kResGetChildGeographies;
}
inline bool Response::has_resgetchildgeographies() const {
  return _internal_has_resgetchildgeographies();
}
inline void Response::set_has_resgetchildgeographies() {
  _oneof_case_[0] = kResGetChildGeographies;
}
inline void Response::clear_resgetchildgeographies() {
  if (_internal_has_resgetchildgeographies()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetchildgeographies_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Response::release_resgetchildgeographies() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resGetChildGeographies)
  if (_internal_has_resgetchildgeographies()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::GetChildGeographiesResponse* temp = AResponse_.resgetchildgeographies_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetchildgeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetChildGeographiesResponse& Response::_internal_resgetchildgeographies() const {
  return _internal_has_resgetchildgeographies()
      ? *AResponse_.resgetchildgeographies_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetChildGeographiesResponse&>(::farm::nurture::location::service::proto::_GetChildGeographiesResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetChildGeographiesResponse& Response::resgetchildgeographies() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resGetChildGeographies)
  return _internal_resgetchildgeographies();
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Response::unsafe_arena_release_resgetchildgeographies() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resGetChildGeographies)
  if (_internal_has_resgetchildgeographies()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::GetChildGeographiesResponse* temp = AResponse_.resgetchildgeographies_;
    AResponse_.resgetchildgeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetchildgeographies(::farm::nurture::location::service::proto::GetChildGeographiesResponse* resgetchildgeographies) {
  clear_AResponse();
  if (resgetchildgeographies) {
    set_has_resgetchildgeographies();
    AResponse_.resgetchildgeographies_ = resgetchildgeographies;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resGetChildGeographies)
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Response::_internal_mutable_resgetchildgeographies() {
  if (!_internal_has_resgetchildgeographies()) {
    clear_AResponse();
    set_has_resgetchildgeographies();
    AResponse_.resgetchildgeographies_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetChildGeographiesResponse >(GetArena());
  }
  return AResponse_.resgetchildgeographies_;
}
inline ::farm::nurture::location::service::proto::GetChildGeographiesResponse* Response::mutable_resgetchildgeographies() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resGetChildGeographies)
  return _internal_mutable_resgetchildgeographies();
}

// .farm.nurture.location.service.proto.InsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundary = 28;
inline bool Response::_internal_has_resinsertlocationwithoutboundary() const {
  return AResponse_case() == kResInsertLocationWithoutBoundary;
}
inline bool Response::has_resinsertlocationwithoutboundary() const {
  return _internal_has_resinsertlocationwithoutboundary();
}
inline void Response::set_has_resinsertlocationwithoutboundary() {
  _oneof_case_[0] = kResInsertLocationWithoutBoundary;
}
inline void Response::clear_resinsertlocationwithoutboundary() {
  if (_internal_has_resinsertlocationwithoutboundary()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocationwithoutboundary_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Response::release_resinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
  if (_internal_has_resinsertlocationwithoutboundary()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* temp = AResponse_.resinsertlocationwithoutboundary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocationwithoutboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& Response::_internal_resinsertlocationwithoutboundary() const {
  return _internal_has_resinsertlocationwithoutboundary()
      ? *AResponse_.resinsertlocationwithoutboundary_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse&>(::farm::nurture::location::service::proto::_InsertLocationWithoutBoundaryResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse& Response::resinsertlocationwithoutboundary() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
  return _internal_resinsertlocationwithoutboundary();
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Response::unsafe_arena_release_resinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
  if (_internal_has_resinsertlocationwithoutboundary()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* temp = AResponse_.resinsertlocationwithoutboundary_;
    AResponse_.resinsertlocationwithoutboundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocationwithoutboundary(::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundary) {
  clear_AResponse();
  if (resinsertlocationwithoutboundary) {
    set_has_resinsertlocationwithoutboundary();
    AResponse_.resinsertlocationwithoutboundary_ = resinsertlocationwithoutboundary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Response::_internal_mutable_resinsertlocationwithoutboundary() {
  if (!_internal_has_resinsertlocationwithoutboundary()) {
    clear_AResponse();
    set_has_resinsertlocationwithoutboundary();
    AResponse_.resinsertlocationwithoutboundary_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse >(GetArena());
  }
  return AResponse_.resinsertlocationwithoutboundary_;
}
inline ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryResponse* Response::mutable_resinsertlocationwithoutboundary() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundary)
  return _internal_mutable_resinsertlocationwithoutboundary();
}

// .farm.nurture.location.service.proto.BulkInsertLocationWithoutBoundaryResponse resInsertLocationWithoutBoundaryBulk = 29;
inline bool Response::_internal_has_resinsertlocationwithoutboundarybulk() const {
  return AResponse_case() == kResInsertLocationWithoutBoundaryBulk;
}
inline bool Response::has_resinsertlocationwithoutboundarybulk() const {
  return _internal_has_resinsertlocationwithoutboundarybulk();
}
inline void Response::set_has_resinsertlocationwithoutboundarybulk() {
  _oneof_case_[0] = kResInsertLocationWithoutBoundaryBulk;
}
inline void Response::clear_resinsertlocationwithoutboundarybulk() {
  if (_internal_has_resinsertlocationwithoutboundarybulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertlocationwithoutboundarybulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Response::release_resinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
  if (_internal_has_resinsertlocationwithoutboundarybulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* temp = AResponse_.resinsertlocationwithoutboundarybulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertlocationwithoutboundarybulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse& Response::_internal_resinsertlocationwithoutboundarybulk() const {
  return _internal_has_resinsertlocationwithoutboundarybulk()
      ? *AResponse_.resinsertlocationwithoutboundarybulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse&>(::farm::nurture::location::service::proto::_BulkInsertLocationWithoutBoundaryResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse& Response::resinsertlocationwithoutboundarybulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
  return _internal_resinsertlocationwithoutboundarybulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Response::unsafe_arena_release_resinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
  if (_internal_has_resinsertlocationwithoutboundarybulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* temp = AResponse_.resinsertlocationwithoutboundarybulk_;
    AResponse_.resinsertlocationwithoutboundarybulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertlocationwithoutboundarybulk(::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* resinsertlocationwithoutboundarybulk) {
  clear_AResponse();
  if (resinsertlocationwithoutboundarybulk) {
    set_has_resinsertlocationwithoutboundarybulk();
    AResponse_.resinsertlocationwithoutboundarybulk_ = resinsertlocationwithoutboundarybulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Response::_internal_mutable_resinsertlocationwithoutboundarybulk() {
  if (!_internal_has_resinsertlocationwithoutboundarybulk()) {
    clear_AResponse();
    set_has_resinsertlocationwithoutboundarybulk();
    AResponse_.resinsertlocationwithoutboundarybulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse >(GetArena());
  }
  return AResponse_.resinsertlocationwithoutboundarybulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertLocationWithoutBoundaryResponse* Response::mutable_resinsertlocationwithoutboundarybulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertLocationWithoutBoundaryBulk)
  return _internal_mutable_resinsertlocationwithoutboundarybulk();
}

// .farm.nurture.location.service.proto.UpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryById = 30;
inline bool Response::_internal_has_resupdatelocationwithoutboundarybyid() const {
  return AResponse_case() == kResUpdateLocationWithoutBoundaryById;
}
inline bool Response::has_resupdatelocationwithoutboundarybyid() const {
  return _internal_has_resupdatelocationwithoutboundarybyid();
}
inline void Response::set_has_resupdatelocationwithoutboundarybyid() {
  _oneof_case_[0] = kResUpdateLocationWithoutBoundaryById;
}
inline void Response::clear_resupdatelocationwithoutboundarybyid() {
  if (_internal_has_resupdatelocationwithoutboundarybyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationwithoutboundarybyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Response::release_resupdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
  if (_internal_has_resupdatelocationwithoutboundarybyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* temp = AResponse_.resupdatelocationwithoutboundarybyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationwithoutboundarybyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& Response::_internal_resupdatelocationwithoutboundarybyid() const {
  return _internal_has_resupdatelocationwithoutboundarybyid()
      ? *AResponse_.resupdatelocationwithoutboundarybyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse&>(::farm::nurture::location::service::proto::_UpdateLocationWithoutBoundaryByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse& Response::resupdatelocationwithoutboundarybyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
  return _internal_resupdatelocationwithoutboundarybyid();
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Response::unsafe_arena_release_resupdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
  if (_internal_has_resupdatelocationwithoutboundarybyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* temp = AResponse_.resupdatelocationwithoutboundarybyid_;
    AResponse_.resupdatelocationwithoutboundarybyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationwithoutboundarybyid(::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyid) {
  clear_AResponse();
  if (resupdatelocationwithoutboundarybyid) {
    set_has_resupdatelocationwithoutboundarybyid();
    AResponse_.resupdatelocationwithoutboundarybyid_ = resupdatelocationwithoutboundarybyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Response::_internal_mutable_resupdatelocationwithoutboundarybyid() {
  if (!_internal_has_resupdatelocationwithoutboundarybyid()) {
    clear_AResponse();
    set_has_resupdatelocationwithoutboundarybyid();
    AResponse_.resupdatelocationwithoutboundarybyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationwithoutboundarybyid_;
}
inline ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdResponse* Response::mutable_resupdatelocationwithoutboundarybyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryById)
  return _internal_mutable_resupdatelocationwithoutboundarybyid();
}

// .farm.nurture.location.service.proto.BulkUpdateLocationWithoutBoundaryByIdResponse resUpdateLocationWithoutBoundaryByIdBulk = 31;
inline bool Response::_internal_has_resupdatelocationwithoutboundarybyidbulk() const {
  return AResponse_case() == kResUpdateLocationWithoutBoundaryByIdBulk;
}
inline bool Response::has_resupdatelocationwithoutboundarybyidbulk() const {
  return _internal_has_resupdatelocationwithoutboundarybyidbulk();
}
inline void Response::set_has_resupdatelocationwithoutboundarybyidbulk() {
  _oneof_case_[0] = kResUpdateLocationWithoutBoundaryByIdBulk;
}
inline void Response::clear_resupdatelocationwithoutboundarybyidbulk() {
  if (_internal_has_resupdatelocationwithoutboundarybyidbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resupdatelocationwithoutboundarybyidbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Response::release_resupdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
  if (_internal_has_resupdatelocationwithoutboundarybyidbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* temp = AResponse_.resupdatelocationwithoutboundarybyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resupdatelocationwithoutboundarybyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse& Response::_internal_resupdatelocationwithoutboundarybyidbulk() const {
  return _internal_has_resupdatelocationwithoutboundarybyidbulk()
      ? *AResponse_.resupdatelocationwithoutboundarybyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse&>(::farm::nurture::location::service::proto::_BulkUpdateLocationWithoutBoundaryByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse& Response::resupdatelocationwithoutboundarybyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
  return _internal_resupdatelocationwithoutboundarybyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Response::unsafe_arena_release_resupdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
  if (_internal_has_resupdatelocationwithoutboundarybyidbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* temp = AResponse_.resupdatelocationwithoutboundarybyidbulk_;
    AResponse_.resupdatelocationwithoutboundarybyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resupdatelocationwithoutboundarybyidbulk(::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* resupdatelocationwithoutboundarybyidbulk) {
  clear_AResponse();
  if (resupdatelocationwithoutboundarybyidbulk) {
    set_has_resupdatelocationwithoutboundarybyidbulk();
    AResponse_.resupdatelocationwithoutboundarybyidbulk_ = resupdatelocationwithoutboundarybyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Response::_internal_mutable_resupdatelocationwithoutboundarybyidbulk() {
  if (!_internal_has_resupdatelocationwithoutboundarybyidbulk()) {
    clear_AResponse();
    set_has_resupdatelocationwithoutboundarybyidbulk();
    AResponse_.resupdatelocationwithoutboundarybyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse >(GetArena());
  }
  return AResponse_.resupdatelocationwithoutboundarybyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkUpdateLocationWithoutBoundaryByIdResponse* Response::mutable_resupdatelocationwithoutboundarybyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resUpdateLocationWithoutBoundaryByIdBulk)
  return _internal_mutable_resupdatelocationwithoutboundarybyidbulk();
}

// .farm.nurture.location.service.proto.DeleteLocationByIdResponse resDeleteLocationById = 32;
inline bool Response::_internal_has_resdeletelocationbyid() const {
  return AResponse_case() == kResDeleteLocationById;
}
inline bool Response::has_resdeletelocationbyid() const {
  return _internal_has_resdeletelocationbyid();
}
inline void Response::set_has_resdeletelocationbyid() {
  _oneof_case_[0] = kResDeleteLocationById;
}
inline void Response::clear_resdeletelocationbyid() {
  if (_internal_has_resdeletelocationbyid()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resdeletelocationbyid_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Response::release_resdeletelocationbyid() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resDeleteLocationById)
  if (_internal_has_resdeletelocationbyid()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* temp = AResponse_.resdeletelocationbyid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resdeletelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& Response::_internal_resdeletelocationbyid() const {
  return _internal_has_resdeletelocationbyid()
      ? *AResponse_.resdeletelocationbyid_
      : reinterpret_cast< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse&>(::farm::nurture::location::service::proto::_DeleteLocationByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::DeleteLocationByIdResponse& Response::resdeletelocationbyid() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resDeleteLocationById)
  return _internal_resdeletelocationbyid();
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Response::unsafe_arena_release_resdeletelocationbyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resDeleteLocationById)
  if (_internal_has_resdeletelocationbyid()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* temp = AResponse_.resdeletelocationbyid_;
    AResponse_.resdeletelocationbyid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resdeletelocationbyid(::farm::nurture::location::service::proto::DeleteLocationByIdResponse* resdeletelocationbyid) {
  clear_AResponse();
  if (resdeletelocationbyid) {
    set_has_resdeletelocationbyid();
    AResponse_.resdeletelocationbyid_ = resdeletelocationbyid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resDeleteLocationById)
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Response::_internal_mutable_resdeletelocationbyid() {
  if (!_internal_has_resdeletelocationbyid()) {
    clear_AResponse();
    set_has_resdeletelocationbyid();
    AResponse_.resdeletelocationbyid_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::DeleteLocationByIdResponse >(GetArena());
  }
  return AResponse_.resdeletelocationbyid_;
}
inline ::farm::nurture::location::service::proto::DeleteLocationByIdResponse* Response::mutable_resdeletelocationbyid() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resDeleteLocationById)
  return _internal_mutable_resdeletelocationbyid();
}

// .farm.nurture.location.service.proto.BulkDeleteLocationByIdResponse resDeleteLocationByIdBulk = 33;
inline bool Response::_internal_has_resdeletelocationbyidbulk() const {
  return AResponse_case() == kResDeleteLocationByIdBulk;
}
inline bool Response::has_resdeletelocationbyidbulk() const {
  return _internal_has_resdeletelocationbyidbulk();
}
inline void Response::set_has_resdeletelocationbyidbulk() {
  _oneof_case_[0] = kResDeleteLocationByIdBulk;
}
inline void Response::clear_resdeletelocationbyidbulk() {
  if (_internal_has_resdeletelocationbyidbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resdeletelocationbyidbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Response::release_resdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
  if (_internal_has_resdeletelocationbyidbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* temp = AResponse_.resdeletelocationbyidbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resdeletelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse& Response::_internal_resdeletelocationbyidbulk() const {
  return _internal_has_resdeletelocationbyidbulk()
      ? *AResponse_.resdeletelocationbyidbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse&>(::farm::nurture::location::service::proto::_BulkDeleteLocationByIdResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse& Response::resdeletelocationbyidbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
  return _internal_resdeletelocationbyidbulk();
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Response::unsafe_arena_release_resdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
  if (_internal_has_resdeletelocationbyidbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* temp = AResponse_.resdeletelocationbyidbulk_;
    AResponse_.resdeletelocationbyidbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resdeletelocationbyidbulk(::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* resdeletelocationbyidbulk) {
  clear_AResponse();
  if (resdeletelocationbyidbulk) {
    set_has_resdeletelocationbyidbulk();
    AResponse_.resdeletelocationbyidbulk_ = resdeletelocationbyidbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Response::_internal_mutable_resdeletelocationbyidbulk() {
  if (!_internal_has_resdeletelocationbyidbulk()) {
    clear_AResponse();
    set_has_resdeletelocationbyidbulk();
    AResponse_.resdeletelocationbyidbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse >(GetArena());
  }
  return AResponse_.resdeletelocationbyidbulk_;
}
inline ::farm::nurture::location::service::proto::BulkDeleteLocationByIdResponse* Response::mutable_resdeletelocationbyidbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resDeleteLocationByIdBulk)
  return _internal_mutable_resdeletelocationbyidbulk();
}

// .farm.nurture.location.service.proto.FetchDuplicateVillagesResponse resFetchDuplicateVillages = 34;
inline bool Response::_internal_has_resfetchduplicatevillages() const {
  return AResponse_case() == kResFetchDuplicateVillages;
}
inline bool Response::has_resfetchduplicatevillages() const {
  return _internal_has_resfetchduplicatevillages();
}
inline void Response::set_has_resfetchduplicatevillages() {
  _oneof_case_[0] = kResFetchDuplicateVillages;
}
inline void Response::clear_resfetchduplicatevillages() {
  if (_internal_has_resfetchduplicatevillages()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchduplicatevillages_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Response::release_resfetchduplicatevillages() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
  if (_internal_has_resfetchduplicatevillages()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* temp = AResponse_.resfetchduplicatevillages_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchduplicatevillages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse& Response::_internal_resfetchduplicatevillages() const {
  return _internal_has_resfetchduplicatevillages()
      ? *AResponse_.resfetchduplicatevillages_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse&>(::farm::nurture::location::service::proto::_FetchDuplicateVillagesResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse& Response::resfetchduplicatevillages() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
  return _internal_resfetchduplicatevillages();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Response::unsafe_arena_release_resfetchduplicatevillages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
  if (_internal_has_resfetchduplicatevillages()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* temp = AResponse_.resfetchduplicatevillages_;
    AResponse_.resfetchduplicatevillages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchduplicatevillages(::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* resfetchduplicatevillages) {
  clear_AResponse();
  if (resfetchduplicatevillages) {
    set_has_resfetchduplicatevillages();
    AResponse_.resfetchduplicatevillages_ = resfetchduplicatevillages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Response::_internal_mutable_resfetchduplicatevillages() {
  if (!_internal_has_resfetchduplicatevillages()) {
    clear_AResponse();
    set_has_resfetchduplicatevillages();
    AResponse_.resfetchduplicatevillages_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse >(GetArena());
  }
  return AResponse_.resfetchduplicatevillages_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesResponse* Response::mutable_resfetchduplicatevillages() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchDuplicateVillages)
  return _internal_mutable_resfetchduplicatevillages();
}

// .farm.nurture.location.service.proto.FetchDuplicateVillagesBySDTVLatLongResponse resFetchDuplicateVillagesBySDTVLatLong = 35;
inline bool Response::_internal_has_resfetchduplicatevillagesbysdtvlatlong() const {
  return AResponse_case() == kResFetchDuplicateVillagesBySDTVLatLong;
}
inline bool Response::has_resfetchduplicatevillagesbysdtvlatlong() const {
  return _internal_has_resfetchduplicatevillagesbysdtvlatlong();
}
inline void Response::set_has_resfetchduplicatevillagesbysdtvlatlong() {
  _oneof_case_[0] = kResFetchDuplicateVillagesBySDTVLatLong;
}
inline void Response::clear_resfetchduplicatevillagesbysdtvlatlong() {
  if (_internal_has_resfetchduplicatevillagesbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Response::release_resfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
  if (_internal_has_resfetchduplicatevillagesbysdtvlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchduplicatevillagesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse& Response::_internal_resfetchduplicatevillagesbysdtvlatlong() const {
  return _internal_has_resfetchduplicatevillagesbysdtvlatlong()
      ? *AResponse_.resfetchduplicatevillagesbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse&>(::farm::nurture::location::service::proto::_FetchDuplicateVillagesBySDTVLatLongResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse& Response::resfetchduplicatevillagesbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
  return _internal_resfetchduplicatevillagesbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Response::unsafe_arena_release_resfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
  if (_internal_has_resfetchduplicatevillagesbysdtvlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
    AResponse_.resfetchduplicatevillagesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchduplicatevillagesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* resfetchduplicatevillagesbysdtvlatlong) {
  clear_AResponse();
  if (resfetchduplicatevillagesbysdtvlatlong) {
    set_has_resfetchduplicatevillagesbysdtvlatlong();
    AResponse_.resfetchduplicatevillagesbysdtvlatlong_ = resfetchduplicatevillagesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Response::_internal_mutable_resfetchduplicatevillagesbysdtvlatlong() {
  if (!_internal_has_resfetchduplicatevillagesbysdtvlatlong()) {
    clear_AResponse();
    set_has_resfetchduplicatevillagesbysdtvlatlong();
    AResponse_.resfetchduplicatevillagesbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse >(GetArena());
  }
  return AResponse_.resfetchduplicatevillagesbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateVillagesBySDTVLatLongResponse* Response::mutable_resfetchduplicatevillagesbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchDuplicateVillagesBySDTVLatLong)
  return _internal_mutable_resfetchduplicatevillagesbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateTehsilsBySDTVLatLongResponse resFetchDuplicateTehsilsBySDTVLatLong = 36;
inline bool Response::_internal_has_resfetchduplicatetehsilsbysdtvlatlong() const {
  return AResponse_case() == kResFetchDuplicateTehsilsBySDTVLatLong;
}
inline bool Response::has_resfetchduplicatetehsilsbysdtvlatlong() const {
  return _internal_has_resfetchduplicatetehsilsbysdtvlatlong();
}
inline void Response::set_has_resfetchduplicatetehsilsbysdtvlatlong() {
  _oneof_case_[0] = kResFetchDuplicateTehsilsBySDTVLatLong;
}
inline void Response::clear_resfetchduplicatetehsilsbysdtvlatlong() {
  if (_internal_has_resfetchduplicatetehsilsbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Response::release_resfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
  if (_internal_has_resfetchduplicatetehsilsbysdtvlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchduplicatetehsilsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse& Response::_internal_resfetchduplicatetehsilsbysdtvlatlong() const {
  return _internal_has_resfetchduplicatetehsilsbysdtvlatlong()
      ? *AResponse_.resfetchduplicatetehsilsbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse&>(::farm::nurture::location::service::proto::_FetchDuplicateTehsilsBySDTVLatLongResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse& Response::resfetchduplicatetehsilsbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
  return _internal_resfetchduplicatetehsilsbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Response::unsafe_arena_release_resfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
  if (_internal_has_resfetchduplicatetehsilsbysdtvlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
    AResponse_.resfetchduplicatetehsilsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchduplicatetehsilsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* resfetchduplicatetehsilsbysdtvlatlong) {
  clear_AResponse();
  if (resfetchduplicatetehsilsbysdtvlatlong) {
    set_has_resfetchduplicatetehsilsbysdtvlatlong();
    AResponse_.resfetchduplicatetehsilsbysdtvlatlong_ = resfetchduplicatetehsilsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Response::_internal_mutable_resfetchduplicatetehsilsbysdtvlatlong() {
  if (!_internal_has_resfetchduplicatetehsilsbysdtvlatlong()) {
    clear_AResponse();
    set_has_resfetchduplicatetehsilsbysdtvlatlong();
    AResponse_.resfetchduplicatetehsilsbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse >(GetArena());
  }
  return AResponse_.resfetchduplicatetehsilsbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateTehsilsBySDTVLatLongResponse* Response::mutable_resfetchduplicatetehsilsbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchDuplicateTehsilsBySDTVLatLong)
  return _internal_mutable_resfetchduplicatetehsilsbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateDistrictsBySDTVLatLongResponse resFetchDuplicateDistrictsBySDTVLatLong = 37;
inline bool Response::_internal_has_resfetchduplicatedistrictsbysdtvlatlong() const {
  return AResponse_case() == kResFetchDuplicateDistrictsBySDTVLatLong;
}
inline bool Response::has_resfetchduplicatedistrictsbysdtvlatlong() const {
  return _internal_has_resfetchduplicatedistrictsbysdtvlatlong();
}
inline void Response::set_has_resfetchduplicatedistrictsbysdtvlatlong() {
  _oneof_case_[0] = kResFetchDuplicateDistrictsBySDTVLatLong;
}
inline void Response::clear_resfetchduplicatedistrictsbysdtvlatlong() {
  if (_internal_has_resfetchduplicatedistrictsbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Response::release_resfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
  if (_internal_has_resfetchduplicatedistrictsbysdtvlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchduplicatedistrictsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse& Response::_internal_resfetchduplicatedistrictsbysdtvlatlong() const {
  return _internal_has_resfetchduplicatedistrictsbysdtvlatlong()
      ? *AResponse_.resfetchduplicatedistrictsbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse&>(::farm::nurture::location::service::proto::_FetchDuplicateDistrictsBySDTVLatLongResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse& Response::resfetchduplicatedistrictsbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
  return _internal_resfetchduplicatedistrictsbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Response::unsafe_arena_release_resfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
  if (_internal_has_resfetchduplicatedistrictsbysdtvlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
    AResponse_.resfetchduplicatedistrictsbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchduplicatedistrictsbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* resfetchduplicatedistrictsbysdtvlatlong) {
  clear_AResponse();
  if (resfetchduplicatedistrictsbysdtvlatlong) {
    set_has_resfetchduplicatedistrictsbysdtvlatlong();
    AResponse_.resfetchduplicatedistrictsbysdtvlatlong_ = resfetchduplicatedistrictsbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Response::_internal_mutable_resfetchduplicatedistrictsbysdtvlatlong() {
  if (!_internal_has_resfetchduplicatedistrictsbysdtvlatlong()) {
    clear_AResponse();
    set_has_resfetchduplicatedistrictsbysdtvlatlong();
    AResponse_.resfetchduplicatedistrictsbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse >(GetArena());
  }
  return AResponse_.resfetchduplicatedistrictsbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateDistrictsBySDTVLatLongResponse* Response::mutable_resfetchduplicatedistrictsbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchDuplicateDistrictsBySDTVLatLong)
  return _internal_mutable_resfetchduplicatedistrictsbysdtvlatlong();
}

// .farm.nurture.location.service.proto.FetchDuplicateStatesBySDTVLatLongResponse resFetchDuplicateStatesBySDTVLatLong = 38;
inline bool Response::_internal_has_resfetchduplicatestatesbysdtvlatlong() const {
  return AResponse_case() == kResFetchDuplicateStatesBySDTVLatLong;
}
inline bool Response::has_resfetchduplicatestatesbysdtvlatlong() const {
  return _internal_has_resfetchduplicatestatesbysdtvlatlong();
}
inline void Response::set_has_resfetchduplicatestatesbysdtvlatlong() {
  _oneof_case_[0] = kResFetchDuplicateStatesBySDTVLatLong;
}
inline void Response::clear_resfetchduplicatestatesbysdtvlatlong() {
  if (_internal_has_resfetchduplicatestatesbysdtvlatlong()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resfetchduplicatestatesbysdtvlatlong_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Response::release_resfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
  if (_internal_has_resfetchduplicatestatesbysdtvlatlong()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatestatesbysdtvlatlong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resfetchduplicatestatesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse& Response::_internal_resfetchduplicatestatesbysdtvlatlong() const {
  return _internal_has_resfetchduplicatestatesbysdtvlatlong()
      ? *AResponse_.resfetchduplicatestatesbysdtvlatlong_
      : reinterpret_cast< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse&>(::farm::nurture::location::service::proto::_FetchDuplicateStatesBySDTVLatLongResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse& Response::resfetchduplicatestatesbysdtvlatlong() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
  return _internal_resfetchduplicatestatesbysdtvlatlong();
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Response::unsafe_arena_release_resfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
  if (_internal_has_resfetchduplicatestatesbysdtvlatlong()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* temp = AResponse_.resfetchduplicatestatesbysdtvlatlong_;
    AResponse_.resfetchduplicatestatesbysdtvlatlong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resfetchduplicatestatesbysdtvlatlong(::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* resfetchduplicatestatesbysdtvlatlong) {
  clear_AResponse();
  if (resfetchduplicatestatesbysdtvlatlong) {
    set_has_resfetchduplicatestatesbysdtvlatlong();
    AResponse_.resfetchduplicatestatesbysdtvlatlong_ = resfetchduplicatestatesbysdtvlatlong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Response::_internal_mutable_resfetchduplicatestatesbysdtvlatlong() {
  if (!_internal_has_resfetchduplicatestatesbysdtvlatlong()) {
    clear_AResponse();
    set_has_resfetchduplicatestatesbysdtvlatlong();
    AResponse_.resfetchduplicatestatesbysdtvlatlong_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse >(GetArena());
  }
  return AResponse_.resfetchduplicatestatesbysdtvlatlong_;
}
inline ::farm::nurture::location::service::proto::FetchDuplicateStatesBySDTVLatLongResponse* Response::mutable_resfetchduplicatestatesbysdtvlatlong() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resFetchDuplicateStatesBySDTVLatLong)
  return _internal_mutable_resfetchduplicatestatesbysdtvlatlong();
}

// .farm.nurture.location.service.proto.GetDuplicateGeographiesResponse resGetDuplicateGeographies = 39;
inline bool Response::_internal_has_resgetduplicategeographies() const {
  return AResponse_case() == kResGetDuplicateGeographies;
}
inline bool Response::has_resgetduplicategeographies() const {
  return _internal_has_resgetduplicategeographies();
}
inline void Response::set_has_resgetduplicategeographies() {
  _oneof_case_[0] = kResGetDuplicateGeographies;
}
inline void Response::clear_resgetduplicategeographies() {
  if (_internal_has_resgetduplicategeographies()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetduplicategeographies_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Response::release_resgetduplicategeographies() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
  if (_internal_has_resgetduplicategeographies()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* temp = AResponse_.resgetduplicategeographies_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetduplicategeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse& Response::_internal_resgetduplicategeographies() const {
  return _internal_has_resgetduplicategeographies()
      ? *AResponse_.resgetduplicategeographies_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse&>(::farm::nurture::location::service::proto::_GetDuplicateGeographiesResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse& Response::resgetduplicategeographies() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
  return _internal_resgetduplicategeographies();
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Response::unsafe_arena_release_resgetduplicategeographies() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
  if (_internal_has_resgetduplicategeographies()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* temp = AResponse_.resgetduplicategeographies_;
    AResponse_.resgetduplicategeographies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetduplicategeographies(::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* resgetduplicategeographies) {
  clear_AResponse();
  if (resgetduplicategeographies) {
    set_has_resgetduplicategeographies();
    AResponse_.resgetduplicategeographies_ = resgetduplicategeographies;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Response::_internal_mutable_resgetduplicategeographies() {
  if (!_internal_has_resgetduplicategeographies()) {
    clear_AResponse();
    set_has_resgetduplicategeographies();
    AResponse_.resgetduplicategeographies_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse >(GetArena());
  }
  return AResponse_.resgetduplicategeographies_;
}
inline ::farm::nurture::location::service::proto::GetDuplicateGeographiesResponse* Response::mutable_resgetduplicategeographies() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resGetDuplicateGeographies)
  return _internal_mutable_resgetduplicategeographies();
}

// .farm.nurture.location.service.proto.InsertVendorLocationDataResponse resInsertVendorLocationData = 40;
inline bool Response::_internal_has_resinsertvendorlocationdata() const {
  return AResponse_case() == kResInsertVendorLocationData;
}
inline bool Response::has_resinsertvendorlocationdata() const {
  return _internal_has_resinsertvendorlocationdata();
}
inline void Response::set_has_resinsertvendorlocationdata() {
  _oneof_case_[0] = kResInsertVendorLocationData;
}
inline void Response::clear_resinsertvendorlocationdata() {
  if (_internal_has_resinsertvendorlocationdata()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertvendorlocationdata_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Response::release_resinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
  if (_internal_has_resinsertvendorlocationdata()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* temp = AResponse_.resinsertvendorlocationdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertvendorlocationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& Response::_internal_resinsertvendorlocationdata() const {
  return _internal_has_resinsertvendorlocationdata()
      ? *AResponse_.resinsertvendorlocationdata_
      : reinterpret_cast< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse&>(::farm::nurture::location::service::proto::_InsertVendorLocationDataResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse& Response::resinsertvendorlocationdata() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
  return _internal_resinsertvendorlocationdata();
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Response::unsafe_arena_release_resinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
  if (_internal_has_resinsertvendorlocationdata()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* temp = AResponse_.resinsertvendorlocationdata_;
    AResponse_.resinsertvendorlocationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertvendorlocationdata(::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* resinsertvendorlocationdata) {
  clear_AResponse();
  if (resinsertvendorlocationdata) {
    set_has_resinsertvendorlocationdata();
    AResponse_.resinsertvendorlocationdata_ = resinsertvendorlocationdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Response::_internal_mutable_resinsertvendorlocationdata() {
  if (!_internal_has_resinsertvendorlocationdata()) {
    clear_AResponse();
    set_has_resinsertvendorlocationdata();
    AResponse_.resinsertvendorlocationdata_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse >(GetArena());
  }
  return AResponse_.resinsertvendorlocationdata_;
}
inline ::farm::nurture::location::service::proto::InsertVendorLocationDataResponse* Response::mutable_resinsertvendorlocationdata() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertVendorLocationData)
  return _internal_mutable_resinsertvendorlocationdata();
}

// .farm.nurture.location.service.proto.BulkInsertVendorLocationDataResponse resInsertVendorLocationDataBulk = 41;
inline bool Response::_internal_has_resinsertvendorlocationdatabulk() const {
  return AResponse_case() == kResInsertVendorLocationDataBulk;
}
inline bool Response::has_resinsertvendorlocationdatabulk() const {
  return _internal_has_resinsertvendorlocationdatabulk();
}
inline void Response::set_has_resinsertvendorlocationdatabulk() {
  _oneof_case_[0] = kResInsertVendorLocationDataBulk;
}
inline void Response::clear_resinsertvendorlocationdatabulk() {
  if (_internal_has_resinsertvendorlocationdatabulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resinsertvendorlocationdatabulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Response::release_resinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
  if (_internal_has_resinsertvendorlocationdatabulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* temp = AResponse_.resinsertvendorlocationdatabulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resinsertvendorlocationdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse& Response::_internal_resinsertvendorlocationdatabulk() const {
  return _internal_has_resinsertvendorlocationdatabulk()
      ? *AResponse_.resinsertvendorlocationdatabulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse&>(::farm::nurture::location::service::proto::_BulkInsertVendorLocationDataResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse& Response::resinsertvendorlocationdatabulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
  return _internal_resinsertvendorlocationdatabulk();
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Response::unsafe_arena_release_resinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
  if (_internal_has_resinsertvendorlocationdatabulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* temp = AResponse_.resinsertvendorlocationdatabulk_;
    AResponse_.resinsertvendorlocationdatabulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resinsertvendorlocationdatabulk(::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* resinsertvendorlocationdatabulk) {
  clear_AResponse();
  if (resinsertvendorlocationdatabulk) {
    set_has_resinsertvendorlocationdatabulk();
    AResponse_.resinsertvendorlocationdatabulk_ = resinsertvendorlocationdatabulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Response::_internal_mutable_resinsertvendorlocationdatabulk() {
  if (!_internal_has_resinsertvendorlocationdatabulk()) {
    clear_AResponse();
    set_has_resinsertvendorlocationdatabulk();
    AResponse_.resinsertvendorlocationdatabulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse >(GetArena());
  }
  return AResponse_.resinsertvendorlocationdatabulk_;
}
inline ::farm::nurture::location::service::proto::BulkInsertVendorLocationDataResponse* Response::mutable_resinsertvendorlocationdatabulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resInsertVendorLocationDataBulk)
  return _internal_mutable_resinsertvendorlocationdatabulk();
}

// .farm.nurture.location.service.proto.SearchVendorLocationsByGeohashResponse resSearchVendorLocationsByGeohash = 42;
inline bool Response::_internal_has_ressearchvendorlocationsbygeohash() const {
  return AResponse_case() == kResSearchVendorLocationsByGeohash;
}
inline bool Response::has_ressearchvendorlocationsbygeohash() const {
  return _internal_has_ressearchvendorlocationsbygeohash();
}
inline void Response::set_has_ressearchvendorlocationsbygeohash() {
  _oneof_case_[0] = kResSearchVendorLocationsByGeohash;
}
inline void Response::clear_ressearchvendorlocationsbygeohash() {
  if (_internal_has_ressearchvendorlocationsbygeohash()) {
    if (GetArena() == nullptr) {
      delete AResponse_.ressearchvendorlocationsbygeohash_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Response::release_ressearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
  if (_internal_has_ressearchvendorlocationsbygeohash()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* temp = AResponse_.ressearchvendorlocationsbygeohash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.ressearchvendorlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse& Response::_internal_ressearchvendorlocationsbygeohash() const {
  return _internal_has_ressearchvendorlocationsbygeohash()
      ? *AResponse_.ressearchvendorlocationsbygeohash_
      : reinterpret_cast< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse&>(::farm::nurture::location::service::proto::_SearchVendorLocationsByGeohashResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse& Response::ressearchvendorlocationsbygeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
  return _internal_ressearchvendorlocationsbygeohash();
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Response::unsafe_arena_release_ressearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
  if (_internal_has_ressearchvendorlocationsbygeohash()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* temp = AResponse_.ressearchvendorlocationsbygeohash_;
    AResponse_.ressearchvendorlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_ressearchvendorlocationsbygeohash(::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* ressearchvendorlocationsbygeohash) {
  clear_AResponse();
  if (ressearchvendorlocationsbygeohash) {
    set_has_ressearchvendorlocationsbygeohash();
    AResponse_.ressearchvendorlocationsbygeohash_ = ressearchvendorlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Response::_internal_mutable_ressearchvendorlocationsbygeohash() {
  if (!_internal_has_ressearchvendorlocationsbygeohash()) {
    clear_AResponse();
    set_has_ressearchvendorlocationsbygeohash();
    AResponse_.ressearchvendorlocationsbygeohash_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse >(GetArena());
  }
  return AResponse_.ressearchvendorlocationsbygeohash_;
}
inline ::farm::nurture::location::service::proto::SearchVendorLocationsByGeohashResponse* Response::mutable_ressearchvendorlocationsbygeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resSearchVendorLocationsByGeohash)
  return _internal_mutable_ressearchvendorlocationsbygeohash();
}

// .farm.nurture.location.service.proto.SearchLocationsByGeohashResponse resSearchLocationsByGeohash = 43;
inline bool Response::_internal_has_ressearchlocationsbygeohash() const {
  return AResponse_case() == kResSearchLocationsByGeohash;
}
inline bool Response::has_ressearchlocationsbygeohash() const {
  return _internal_has_ressearchlocationsbygeohash();
}
inline void Response::set_has_ressearchlocationsbygeohash() {
  _oneof_case_[0] = kResSearchLocationsByGeohash;
}
inline void Response::clear_ressearchlocationsbygeohash() {
  if (_internal_has_ressearchlocationsbygeohash()) {
    if (GetArena() == nullptr) {
      delete AResponse_.ressearchlocationsbygeohash_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Response::release_ressearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
  if (_internal_has_ressearchlocationsbygeohash()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* temp = AResponse_.ressearchlocationsbygeohash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.ressearchlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse& Response::_internal_ressearchlocationsbygeohash() const {
  return _internal_has_ressearchlocationsbygeohash()
      ? *AResponse_.ressearchlocationsbygeohash_
      : reinterpret_cast< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse&>(::farm::nurture::location::service::proto::_SearchLocationsByGeohashResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse& Response::ressearchlocationsbygeohash() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
  return _internal_ressearchlocationsbygeohash();
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Response::unsafe_arena_release_ressearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
  if (_internal_has_ressearchlocationsbygeohash()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* temp = AResponse_.ressearchlocationsbygeohash_;
    AResponse_.ressearchlocationsbygeohash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_ressearchlocationsbygeohash(::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* ressearchlocationsbygeohash) {
  clear_AResponse();
  if (ressearchlocationsbygeohash) {
    set_has_ressearchlocationsbygeohash();
    AResponse_.ressearchlocationsbygeohash_ = ressearchlocationsbygeohash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Response::_internal_mutable_ressearchlocationsbygeohash() {
  if (!_internal_has_ressearchlocationsbygeohash()) {
    clear_AResponse();
    set_has_ressearchlocationsbygeohash();
    AResponse_.ressearchlocationsbygeohash_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse >(GetArena());
  }
  return AResponse_.ressearchlocationsbygeohash_;
}
inline ::farm::nurture::location::service::proto::SearchLocationsByGeohashResponse* Response::mutable_ressearchlocationsbygeohash() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resSearchLocationsByGeohash)
  return _internal_mutable_ressearchlocationsbygeohash();
}

// .farm.nurture.location.service.proto.GetLocationDataByLatLngResponse resGetLocationDataByLatLng = 44;
inline bool Response::_internal_has_resgetlocationdatabylatlng() const {
  return AResponse_case() == kResGetLocationDataByLatLng;
}
inline bool Response::has_resgetlocationdatabylatlng() const {
  return _internal_has_resgetlocationdatabylatlng();
}
inline void Response::set_has_resgetlocationdatabylatlng() {
  _oneof_case_[0] = kResGetLocationDataByLatLng;
}
inline void Response::clear_resgetlocationdatabylatlng() {
  if (_internal_has_resgetlocationdatabylatlng()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resgetlocationdatabylatlng_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Response::release_resgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
  if (_internal_has_resgetlocationdatabylatlng()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* temp = AResponse_.resgetlocationdatabylatlng_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resgetlocationdatabylatlng_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse& Response::_internal_resgetlocationdatabylatlng() const {
  return _internal_has_resgetlocationdatabylatlng()
      ? *AResponse_.resgetlocationdatabylatlng_
      : reinterpret_cast< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse&>(::farm::nurture::location::service::proto::_GetLocationDataByLatLngResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse& Response::resgetlocationdatabylatlng() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
  return _internal_resgetlocationdatabylatlng();
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Response::unsafe_arena_release_resgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
  if (_internal_has_resgetlocationdatabylatlng()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* temp = AResponse_.resgetlocationdatabylatlng_;
    AResponse_.resgetlocationdatabylatlng_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resgetlocationdatabylatlng(::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* resgetlocationdatabylatlng) {
  clear_AResponse();
  if (resgetlocationdatabylatlng) {
    set_has_resgetlocationdatabylatlng();
    AResponse_.resgetlocationdatabylatlng_ = resgetlocationdatabylatlng;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Response::_internal_mutable_resgetlocationdatabylatlng() {
  if (!_internal_has_resgetlocationdatabylatlng()) {
    clear_AResponse();
    set_has_resgetlocationdatabylatlng();
    AResponse_.resgetlocationdatabylatlng_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse >(GetArena());
  }
  return AResponse_.resgetlocationdatabylatlng_;
}
inline ::farm::nurture::location::service::proto::GetLocationDataByLatLngResponse* Response::mutable_resgetlocationdatabylatlng() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resGetLocationDataByLatLng)
  return _internal_mutable_resgetlocationdatabylatlng();
}

// .farm.nurture.location.service.proto.AddVendorApiLedgerResponse resAddVendorApiLedger = 45;
inline bool Response::_internal_has_resaddvendorapiledger() const {
  return AResponse_case() == kResAddVendorApiLedger;
}
inline bool Response::has_resaddvendorapiledger() const {
  return _internal_has_resaddvendorapiledger();
}
inline void Response::set_has_resaddvendorapiledger() {
  _oneof_case_[0] = kResAddVendorApiLedger;
}
inline void Response::clear_resaddvendorapiledger() {
  if (_internal_has_resaddvendorapiledger()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddvendorapiledger_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Response::release_resaddvendorapiledger() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
  if (_internal_has_resaddvendorapiledger()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* temp = AResponse_.resaddvendorapiledger_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddvendorapiledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& Response::_internal_resaddvendorapiledger() const {
  return _internal_has_resaddvendorapiledger()
      ? *AResponse_.resaddvendorapiledger_
      : reinterpret_cast< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse&>(::farm::nurture::location::service::proto::_AddVendorApiLedgerResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse& Response::resaddvendorapiledger() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
  return _internal_resaddvendorapiledger();
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Response::unsafe_arena_release_resaddvendorapiledger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
  if (_internal_has_resaddvendorapiledger()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* temp = AResponse_.resaddvendorapiledger_;
    AResponse_.resaddvendorapiledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddvendorapiledger(::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* resaddvendorapiledger) {
  clear_AResponse();
  if (resaddvendorapiledger) {
    set_has_resaddvendorapiledger();
    AResponse_.resaddvendorapiledger_ = resaddvendorapiledger;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Response::_internal_mutable_resaddvendorapiledger() {
  if (!_internal_has_resaddvendorapiledger()) {
    clear_AResponse();
    set_has_resaddvendorapiledger();
    AResponse_.resaddvendorapiledger_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse >(GetArena());
  }
  return AResponse_.resaddvendorapiledger_;
}
inline ::farm::nurture::location::service::proto::AddVendorApiLedgerResponse* Response::mutable_resaddvendorapiledger() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resAddVendorApiLedger)
  return _internal_mutable_resaddvendorapiledger();
}

// .farm.nurture.location.service.proto.BulkAddVendorApiLedgerResponse resAddVendorApiLedgerBulk = 46;
inline bool Response::_internal_has_resaddvendorapiledgerbulk() const {
  return AResponse_case() == kResAddVendorApiLedgerBulk;
}
inline bool Response::has_resaddvendorapiledgerbulk() const {
  return _internal_has_resaddvendorapiledgerbulk();
}
inline void Response::set_has_resaddvendorapiledgerbulk() {
  _oneof_case_[0] = kResAddVendorApiLedgerBulk;
}
inline void Response::clear_resaddvendorapiledgerbulk() {
  if (_internal_has_resaddvendorapiledgerbulk()) {
    if (GetArena() == nullptr) {
      delete AResponse_.resaddvendorapiledgerbulk_;
    }
    clear_has_AResponse();
  }
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Response::release_resaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_release:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
  if (_internal_has_resaddvendorapiledgerbulk()) {
    clear_has_AResponse();
      ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* temp = AResponse_.resaddvendorapiledgerbulk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AResponse_.resaddvendorapiledgerbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse& Response::_internal_resaddvendorapiledgerbulk() const {
  return _internal_has_resaddvendorapiledgerbulk()
      ? *AResponse_.resaddvendorapiledgerbulk_
      : reinterpret_cast< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse&>(::farm::nurture::location::service::proto::_BulkAddVendorApiLedgerResponse_default_instance_);
}
inline const ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse& Response::resaddvendorapiledgerbulk() const {
  // @@protoc_insertion_point(field_get:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
  return _internal_resaddvendorapiledgerbulk();
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Response::unsafe_arena_release_resaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
  if (_internal_has_resaddvendorapiledgerbulk()) {
    clear_has_AResponse();
    ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* temp = AResponse_.resaddvendorapiledgerbulk_;
    AResponse_.resaddvendorapiledgerbulk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resaddvendorapiledgerbulk(::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* resaddvendorapiledgerbulk) {
  clear_AResponse();
  if (resaddvendorapiledgerbulk) {
    set_has_resaddvendorapiledgerbulk();
    AResponse_.resaddvendorapiledgerbulk_ = resaddvendorapiledgerbulk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Response::_internal_mutable_resaddvendorapiledgerbulk() {
  if (!_internal_has_resaddvendorapiledgerbulk()) {
    clear_AResponse();
    set_has_resaddvendorapiledgerbulk();
    AResponse_.resaddvendorapiledgerbulk_ = CreateMaybeMessage< ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse >(GetArena());
  }
  return AResponse_.resaddvendorapiledgerbulk_;
}
inline ::farm::nurture::location::service::proto::BulkAddVendorApiLedgerResponse* Response::mutable_resaddvendorapiledgerbulk() {
  // @@protoc_insertion_point(field_mutable:farm.nurture.location.service.proto.Response.resAddVendorApiLedgerBulk)
  return _internal_mutable_resaddvendorapiledgerbulk();
}

inline bool Response::has_AResponse() const {
  return AResponse_case() != ARESPONSE_NOT_SET;
}
inline void Response::clear_has_AResponse() {
  _oneof_case_[0] = ARESPONSE_NOT_SET;
}
inline Response::AResponseCase Response::AResponse_case() const {
  return Response::AResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace service
}  // namespace location
}  // namespace nurture
}  // namespace farm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::farm::nurture::location::service::proto::InsertLocationRequest_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::InsertLocationRequest_Status>() {
  return ::farm::nurture::location::service::proto::InsertLocationRequest_Status_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility>() {
  return ::farm::nurture::location::service::proto::InsertLocationRequest_Visibility_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status>() {
  return ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Status_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility>() {
  return ::farm::nurture::location::service::proto::UpdateLocationByIdRequest_Visibility_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status>() {
  return ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Status_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility>() {
  return ::farm::nurture::location::service::proto::InsertLocationWithoutBoundaryRequest_Visibility_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status>() {
  return ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Status_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility>() {
  return ::farm::nurture::location::service::proto::UpdateLocationWithoutBoundaryByIdRequest_Visibility_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::Namespace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::Namespace>() {
  return ::farm::nurture::location::service::proto::Namespace_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::Status>() {
  return ::farm::nurture::location::service::proto::Status_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::Format>() {
  return ::farm::nurture::location::service::proto::Format_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::Visibility>() {
  return ::farm::nurture::location::service::proto::Visibility_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::GeographyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::GeographyType>() {
  return ::farm::nurture::location::service::proto::GeographyType_descriptor();
}
template <> struct is_proto_enum< ::farm::nurture::location::service::proto::LabelKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farm::nurture::location::service::proto::LabelKey>() {
  return ::farm::nurture::location::service::proto::LabelKey_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LocationService_2flocation_5fservice_2eproto
